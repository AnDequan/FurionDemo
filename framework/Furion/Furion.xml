<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Furion</name>
    </assembly>
    <members>
        <member name="T:Furion.App">
            <summary>
            全局应用类
            </summary>
        </member>
        <member name="F:Furion.App._settings">
            <summary>
            私有设置，避免重复解析
            </summary>
        </member>
        <member name="P:Furion.App.Settings">
            <summary>
            应用全局配置
            </summary>
        </member>
        <member name="P:Furion.App.Configuration">
            <summary>
            全局配置选项
            </summary>
        </member>
        <member name="P:Furion.App.WebHostEnvironment">
            <summary>
            获取Web主机环境，如，是否是开发环境，生产环境等
            </summary>
        </member>
        <member name="P:Furion.App.HostEnvironment">
            <summary>
            获取泛型主机环境，如，是否是开发环境，生产环境等
            </summary>
        </member>
        <member name="P:Furion.App.RootServices">
            <summary>
            存储根服务，可能为空
            </summary>
        </member>
        <member name="P:Furion.App.SingleFileEnvironment">
            <summary>
            判断是否是单文件环境
            </summary>
        </member>
        <member name="F:Furion.App.Assemblies">
            <summary>
            应用有效程序集
            </summary>
        </member>
        <member name="F:Furion.App.EffectiveTypes">
            <summary>
            有效程序集类型
            </summary>
        </member>
        <member name="P:Furion.App.HttpContext">
            <summary>
            获取请求上下文
            </summary>
        </member>
        <member name="P:Furion.App.User">
            <summary>
            获取请求上下文用户
            </summary>
            <remarks>只有授权访问的页面或接口才存在值，否则为 null</remarks>
        </member>
        <member name="F:Furion.App.UnmanagedObjects">
            <summary>
            未托管的对象集合
            </summary>
        </member>
        <member name="M:Furion.App.GetServiceProvider(System.Type)">
            <summary>
            解析服务提供器
            </summary>
            <param name="serviceType"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.App.GetService``1(System.IServiceProvider)">
            <summary>
            获取请求生存周期的服务
            </summary>
            <typeparam name="TService"></typeparam>
            <param name="serviceProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.App.GetService(System.Type,System.IServiceProvider)">
            <summary>
            获取请求生存周期的服务
            </summary>
            <param name="type"></param>
            <param name="serviceProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.App.GetServices``1(System.IServiceProvider)">
            <summary>
            获取请求生存周期的服务集合
            </summary>
            <typeparam name="TService"></typeparam>
            <param name="serviceProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.App.GetServices(System.Type,System.IServiceProvider)">
            <summary>
            获取请求生存周期的服务集合
            </summary>
            <param name="type"></param>
            <param name="serviceProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.App.GetRequiredService``1(System.IServiceProvider)">
            <summary>
            获取请求生存周期的服务
            </summary>
            <typeparam name="TService"></typeparam>
            <param name="serviceProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.App.GetRequiredService(System.Type,System.IServiceProvider)">
            <summary>
            获取请求生存周期的服务
            </summary>
            <param name="type"></param>
            <param name="serviceProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.App.GetConfig``1(System.String,System.Boolean)">
            <summary>
            获取配置
            </summary>
            <typeparam name="TOptions">强类型选项类</typeparam>
            <param name="path">配置中对应的Key</param>
            <param name="loadPostConfigure"></param>
            <returns>TOptions</returns>
        </member>
        <member name="M:Furion.App.GetOptions``1(System.IServiceProvider)">
            <summary>
            获取选项
            </summary>
            <typeparam name="TOptions">强类型选项类</typeparam>
            <param name="serviceProvider"></param>
            <returns>TOptions</returns>
        </member>
        <member name="M:Furion.App.GetOptionsMonitor``1(System.IServiceProvider)">
            <summary>
            获取选项
            </summary>
            <typeparam name="TOptions">强类型选项类</typeparam>
            <param name="serviceProvider"></param>
            <returns>TOptions</returns>
        </member>
        <member name="M:Furion.App.GetOptionsSnapshot``1(System.IServiceProvider)">
            <summary>
            获取选项
            </summary>
            <typeparam name="TOptions">强类型选项类</typeparam>
            <param name="serviceProvider"></param>
            <returns>TOptions</returns>
        </member>
        <member name="M:Furion.App.GetCommandLineConfiguration(System.String[],System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            获取命令行配置
            </summary>
            <param name="args"></param>
            <param name="switchMappings"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.App.GetThreadId">
            <summary>
            获取当前线程 Id
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.App.GetTraceId">
            <summary>
            获取当前请求 TraceId
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.App.GetExecutionTime(System.Action)">
            <summary>
            获取一段代码执行耗时
            </summary>
            <param name="action">委托</param>
            <returns><see cref="T:System.Int64"/></returns>
        </member>
        <member name="M:Furion.App.GetServiceLifetime(System.Type)">
            <summary>
            获取服务注册的生命周期类型
            </summary>
            <param name="serviceType"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.App.CompileCSharpClassCode(System.String,System.String,System.Reflection.Assembly[])">
            <summary>
            编译 C# 类定义代码返回程序集
            </summary>
            <param name="csharpCode">字符串代码</param>
            <param name="assemblyName">自定义程序集名称</param>
            <param name="additionalAssemblies">附加的程序集</param>
            <returns><see cref="T:System.Reflection.Assembly"/></returns>
        </member>
        <member name="M:Furion.App.CompileCSharpClassCodeToDllFile(System.String,System.String,System.Reflection.Assembly[])">
            <summary>
            编译 C# 类定义代码保存为 dll 文件
            </summary>
            <param name="csharpCode">字符串代码</param>
            <param name="assemblyName">自定义程序集名称</param>
            <param name="additionalAssemblies">附加的程序集</param>
            <returns><see cref="T:System.Reflection.Assembly"/></returns>
        </member>
        <member name="M:Furion.App.CompileCSharpClassCodeToStream(System.String,System.String,System.Reflection.Assembly[])">
            <summary>
            编译 C# 类定义代码返回内存流
            </summary>
            <param name="csharpCode">字符串代码</param>
            <param name="assemblyName">自定义程序集名称</param>
            <param name="additionalAssemblies">附加的程序集</param>
            <returns><see cref="T:System.Reflection.Assembly"/></returns>
        </member>
        <member name="M:Furion.App.PrintToMiniProfiler(System.String,System.String,System.String,System.Boolean)">
            <summary>
            打印验证信息到 MiniProfiler
            </summary>
            <param name="category">分类</param>
            <param name="state">状态</param>
            <param name="message">消息</param>
            <param name="isError">是否为警告消息</param>
        </member>
        <member name="M:Furion.App.#cctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="F:Furion.App.AppStartups">
            <summary>
            应用所有启动配置对象
            </summary>
        </member>
        <member name="F:Furion.App.ExternalAssemblies">
            <summary>
            外部程序集
            </summary>
        </member>
        <member name="F:Furion.App.PathOfExternalAssemblies">
            <summary>
            外部程序集文件路径
            </summary>
        </member>
        <member name="M:Furion.App.GetAssemblies">
            <summary>
            获取应用有效程序集
            </summary>
            <returns>IEnumerable</returns>
        </member>
        <member name="M:Furion.App.GetTypes(System.Reflection.Assembly)">
            <summary>
            加载程序集中的所有类型
            </summary>
            <param name="ass"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.App.CanBeMiniProfiler">
            <summary>
            判断是否启用 MiniProfiler
            </summary>
            <returns></returns>
        </member>
        <member name="F:Furion.App.GC_COLLECT_INTERVAL_SECONDS">
            <summary>
            GC 回收默认间隔
            </summary>
        </member>
        <member name="P:Furion.App.LastGCCollectTime">
            <summary>
            记录最近 GC 回收时间
            </summary>
        </member>
        <member name="M:Furion.App.DisposeUnmanagedObjects">
            <summary>
            释放所有未托管的对象
            </summary>
        </member>
        <member name="M:Furion.App.CatchOrDefault``1(System.Func{``0},``0)">
            <summary>
            处理获取对象异常问题
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="action">获取对象委托</param>
            <param name="defaultValue">默认值</param>
            <returns>T</returns>
        </member>
        <member name="T:Furion.AppStartupAttribute">
            <summary>
            注册服务启动配置
            </summary>
        </member>
        <member name="M:Furion.AppStartupAttribute.#ctor(System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="order"></param>
        </member>
        <member name="P:Furion.AppStartupAttribute.Order">
            <summary>
            排序
            </summary>
            <remarks>优先调用数值较大的</remarks>
        </member>
        <member name="T:Furion.Extensions.ObsoleteObjectExtensions">
            <summary>
            对象拓展类
            </summary>
        </member>
        <member name="M:Furion.Extensions.ObsoleteObjectExtensions.ConvertToDateTime(System.DateTimeOffset)">
            <summary>
            将 DateTimeOffset 转换成本地 DateTime
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Extensions.ObsoleteObjectExtensions.ConvertToDateTime(System.Nullable{System.DateTimeOffset})">
            <summary>
            将 DateTimeOffset? 转换成本地 DateTime?
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Extensions.ObsoleteObjectExtensions.ConvertToDateTimeOffset(System.DateTime)">
            <summary>
            将 DateTime 转换成 DateTimeOffset
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Extensions.ObsoleteObjectExtensions.ConvertToDateTimeOffset(System.Nullable{System.DateTime})">
            <summary>
            将 DateTime? 转换成 DateTimeOffset?
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Extensions.ObsoleteObjectExtensions.ConvertToDateTime(System.Int64)">
            <summary>
            将时间戳转换为 DateTime
            </summary>
            <param name="timestamp"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Extensions.ObsoleteObjectExtensions.ToByteArray(Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            将 IFormFile 转换成 byte[]
            </summary>
            <param name="formFile"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Extensions.ObsoleteObjectExtensions.CopyToSave(System.IO.Stream,System.String)">
            <summary>
            将流保存到本地磁盘
            </summary>
            <param name="stream"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Extensions.ObsoleteObjectExtensions.CopyToSave(System.Byte[],System.String)">
            <summary>
            将字节数组保存到本地磁盘
            </summary>
            <param name="bytes"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Extensions.ObsoleteObjectExtensions.CopyToSaveAsync(System.IO.Stream,System.String)">
            <summary>
            将流保存到本地磁盘
            </summary>
            <param name="stream"></param>
            <param name="path">需包含文件名完整路径</param>
            <returns></returns>
        </member>
        <member name="M:Furion.Extensions.ObsoleteObjectExtensions.CopyToSaveAsync(System.Byte[],System.String)">
            <summary>
            将字节数组保存到本地磁盘
            </summary>
            <param name="bytes"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Extensions.ObsoleteObjectExtensions.Debounce``1(System.Action{``0},System.Int32)">
            <summary>
            添加防抖操作
            </summary>
            <typeparam name="T"></typeparam>
            <param name="func"></param>
            <param name="milliseconds"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Extensions.ObsoleteObjectExtensions.Debounce(System.Action,System.Int32)">
            <summary>
            添加防抖操作
            </summary>
            <param name="func"></param>
            <param name="milliseconds"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Extensions.ObsoleteObjectExtensions.IsRichPrimitive(System.Type)">
            <summary>
            判断是否是富基元类型
            </summary>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="M:Furion.Extensions.ObsoleteObjectExtensions.AddOrUpdate``1(System.Collections.Generic.Dictionary{System.String,``0},System.Collections.Generic.IDictionary{System.String,``0})">
            <summary>
            合并两个字典
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dic">字典</param>
            <param name="newDic">新字典</param>
            <returns></returns>
        </member>
        <member name="M:Furion.Extensions.ObsoleteObjectExtensions.AddOrUpdate``1(System.Collections.Concurrent.ConcurrentDictionary{System.String,``0},System.Collections.Generic.Dictionary{System.String,``0})">
            <summary>
            合并两个字典
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dic">字典</param>
            <param name="newDic">新字典</param>
        </member>
        <member name="M:Furion.Extensions.ObsoleteObjectExtensions.IsValueTuple(System.Type)">
            <summary>
            判断是否是元组类型
            </summary>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="M:Furion.Extensions.ObsoleteObjectExtensions.IsAsync(System.Reflection.MethodInfo)">
            <summary>
            判断方法是否是异步
            </summary>
            <param name="method">方法</param>
            <returns></returns>
        </member>
        <member name="M:Furion.Extensions.ObsoleteObjectExtensions.HasImplementedRawGeneric(System.Type,System.Type)">
            <summary>
            判断类型是否实现某个泛型
            </summary>
            <param name="type">类型</param>
            <param name="generic">泛型类型</param>
            <returns>bool</returns>
        </member>
        <member name="M:Furion.Extensions.ObsoleteObjectExtensions.IsAnonymous(System.Object)">
            <summary>
            判断是否是匿名类型
            </summary>
            <param name="obj">对象</param>
            <returns></returns>
        </member>
        <member name="M:Furion.Extensions.ObsoleteObjectExtensions.GetAncestorTypes(System.Type)">
            <summary>
            获取所有祖先类型
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Extensions.ObsoleteObjectExtensions.GetRealReturnType(System.Reflection.MethodInfo)">
            <summary>
            获取方法真实返回类型
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Extensions.ObsoleteObjectExtensions.ChangeType``1(System.Object)">
            <summary>
            将一个对象转换为指定类型
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Extensions.ObsoleteObjectExtensions.ChangeType(System.Object,System.Type)">
            <summary>
            将一个对象转换为指定类型
            </summary>
            <param name="obj">待转换的对象</param>
            <param name="type">目标类型</param>
            <returns>转换后的对象</returns>
        </member>
        <member name="M:Furion.Extensions.ObsoleteObjectExtensions.GetFoundAttribute``1(System.Reflection.MethodInfo,System.Boolean)">
            <summary>
            查找方法指定特性，如果没找到则继续查找声明类
            </summary>
            <typeparam name="TAttribute"></typeparam>
            <param name="method"></param>
            <param name="inherit"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Extensions.ObsoleteObjectExtensions.Format(System.String,System.Object[])">
            <summary>
            格式化字符串
            </summary>
            <param name="str"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Extensions.ObsoleteObjectExtensions.SplitCamelCase(System.String)">
            <summary>
            切割骆驼命名式字符串
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Extensions.ObsoleteObjectExtensions.ToObject(System.Text.Json.JsonElement)">
            <summary>
            JsonElement 转 Object
            </summary>
            <param name="jsonElement"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Extensions.ObsoleteObjectExtensions.ClearStringAffixes(System.String,System.Int32,System.String[])">
            <summary>
            清除字符串前后缀
            </summary>
            <param name="str">字符串</param>
            <param name="pos">0：前后缀，1：后缀，-1：前缀</param>
            <param name="affixes">前后缀集合</param>
            <returns></returns>
        </member>
        <member name="M:Furion.Extensions.ObsoleteObjectExtensions.ToLowerCamelCase(System.String)">
            <summary>
            首字母小写
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Extensions.ObsoleteObjectExtensions.ToUpperCamelCase(System.String)">
            <summary>
            首字母大写
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Extensions.ObsoleteObjectExtensions.IsEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            判断集合是否为空
            </summary>
            <typeparam name="T">元素类型</typeparam>
            <param name="collection">集合对象</param>
            <returns><see cref="T:System.Boolean"/> 实例，true 表示空集合，false 表示非空集合</returns>
        </member>
        <member name="M:Furion.Extensions.ObsoleteObjectExtensions.GetTypeAttribute``1(System.Type,System.Boolean)">
            <summary>
            获取类型自定义特性
            </summary>
            <typeparam name="TAttribute">特性类型</typeparam>
            <param name="type">类类型</param>
            <param name="inherit">是否继承查找</param>
            <returns>特性对象</returns>
        </member>
        <member name="T:Furion.Extensions.AssemblyExtensions">
            <summary>
                <see cref="T:System.Reflection.Assembly" /> 拓展类
            </summary>
        </member>
        <member name="M:Furion.Extensions.AssemblyExtensions.GetTypes(System.Reflection.Assembly,System.Boolean)">
            <summary>
                获取所有类型
            </summary>
            <param name="assembly">
                <see cref="T:System.Reflection.Assembly" />
            </param>
            <param name="exported">类型导出设置</param>
            <returns><see cref="T:System.Type" />[]</returns>
        </member>
        <member name="M:Furion.Extensions.AssemblyExtensions.GetDescription(System.Reflection.Assembly)">
            <summary>
                获取程序集描述
            </summary>
            <param name="assembly">
                <see cref="T:System.Reflection.Assembly" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:Furion.Extensions.AssemblyExtensions.GetVersion(System.Reflection.Assembly)">
            <summary>
                获取程序集版本
            </summary>
            <param name="assembly">
                <see cref="T:System.Reflection.Assembly" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:Furion.Extensions.AssemblyExtensions.GetNameVersion(System.Reflection.Assembly,System.String)">
            <summary>
                获取程序集名称和版本
            </summary>
            <param name="assembly">
                <see cref="T:System.Reflection.Assembly" />
            </param>
            <param name="separator">分隔符</param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:Furion.Extensions.AssemblyExtensions.ConvertTo``1(System.Reflection.Assembly,System.Func{System.Reflection.Assembly,``0})">
            <summary>
                将程序集转换成指定类型返回
            </summary>
            <param name="assembly">
                <see cref="T:System.Reflection.Assembly" />
            </param>
            <param name="configure">自定义配置委托</param>
            <typeparam name="TResult">结果类型</typeparam>
            <returns>
                <typeparamref name="TResult" />
            </returns>
        </member>
        <member name="T:Furion.Extensions.ConcurrentDictionaryExtensions">
            <summary>
                <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 拓展类
            </summary>
        </member>
        <member name="M:Furion.Extensions.ConcurrentDictionaryExtensions.TryUpdate``2(System.Collections.Concurrent.ConcurrentDictionary{``0,``1},``0,System.Func{``1,``1},``1@)">
            <summary>
                根据字典键更新对应的值
            </summary>
            <typeparam name="TKey">字典键类型</typeparam>
            <typeparam name="TValue">字典值类型</typeparam>
            <param name="dictionary">
                <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" />
            </param>
            <param name="key">
                <typeparamref name="TKey" />
            </param>
            <param name="updateFactory">自定义更新委托</param>
            <param name="value">
                <typeparamref name="TValue" />
            </param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="T:Furion.Extensions.CoreServiceCollectionExtensions">
            <summary>
                核心模块 <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> 拓展类
            </summary>
        </member>
        <member name="M:Furion.Extensions.CoreServiceCollectionExtensions.AddCoreOptions(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
                添加核心模块选项服务
            </summary>
            <param name="services">
                <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
            </param>
            <returns>
                <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
            </returns>
        </member>
        <member name="M:Furion.Extensions.CoreServiceCollectionExtensions.TryGetHostEnvironment(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
                尝试获取应用环境
            </summary>
            <param name="services">
                <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
            </param>
            <returns>
                <see cref="T:Microsoft.Extensions.Hosting.IHostEnvironment" />
            </returns>
        </member>
        <member name="M:Furion.Extensions.CoreServiceCollectionExtensions.GetCoreOptions(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
                获取核心模块选项
            </summary>
            <param name="services">
                <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
            </param>
            <returns>
                <see cref="T:Furion.CoreOptions" />
            </returns>
        </member>
        <member name="M:Furion.Extensions.CoreServiceCollectionExtensions.RegisterComponent(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Reflection.Assembly)">
            <summary>
                登记组件注册信息
            </summary>
            <param name="services">
                <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
            </param>
            <param name="assembly">
                <see cref="T:System.Reflection.Assembly" />
            </param>
        </member>
        <member name="M:Furion.Extensions.CoreServiceCollectionExtensions.RegisterComponent(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type)">
            <summary>
                登记组件注册信息
            </summary>
            <param name="services">
                <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
            </param>
            <param name="typeInAssembly">
                <see cref="T:System.Type" />
            </param>
        </member>
        <member name="T:Furion.Extensions.DelegateExtensions">
            <summary>
                委托拓展类
            </summary>
        </member>
        <member name="M:Furion.Extensions.DelegateExtensions.TryInvokeAsync``2(System.Func{``0,``1,System.Threading.Tasks.Task},``0,``1)">
            <summary>
                尝试执行异步委托
            </summary>
            <param name="func">异步委托</param>
            <param name="parameter1">参数 1</param>
            <param name="parameter2">参数 2</param>
            <typeparam name="T1">参数类型</typeparam>
            <typeparam name="T2">参数类型</typeparam>
        </member>
        <member name="M:Furion.Extensions.DelegateExtensions.TryInvokeAsync``1(System.Func{``0,System.Threading.Tasks.Task},``0)">
            <summary>
                尝试执行异步委托
            </summary>
            <param name="func">异步委托</param>
            <param name="parameter">参数</param>
            <typeparam name="T">参数类型</typeparam>
        </member>
        <member name="M:Furion.Extensions.DelegateExtensions.TryInvokeAsync(System.Func{System.Threading.Tasks.Task})">
            <summary>
                尝试执行异步委托
            </summary>
            <param name="func">异步委托</param>
        </member>
        <member name="M:Furion.Extensions.DelegateExtensions.TryInvoke``2(System.Action{``0,``1},``0,``1)">
            <summary>
                尝试执行同步委托
            </summary>
            <param name="action">同步委托</param>
            <param name="parameter1">参数 1</param>
            <param name="parameter2">参数 2</param>
            <typeparam name="T1">参数类型</typeparam>
            <typeparam name="T2">参数类型</typeparam>
        </member>
        <member name="M:Furion.Extensions.DelegateExtensions.TryInvoke``1(System.Action{``0},``0)">
            <summary>
                尝试执行同步委托
            </summary>
            <param name="action">同步委托</param>
            <param name="parameter">参数</param>
            <typeparam name="T">参数类型</typeparam>
        </member>
        <member name="M:Furion.Extensions.DelegateExtensions.TryInvoke(System.Action)">
            <summary>
                尝试执行同步委托
            </summary>
            <param name="action">同步委托</param>
        </member>
        <member name="T:Furion.Extensions.EnumExtensions">
            <summary>
                枚举拓展类
            </summary>
        </member>
        <member name="M:Furion.Extensions.EnumExtensions.GetEnumDescription(System.Object)">
            <summary>
                获取枚举值描述
            </summary>
            <param name="enumValue">枚举值</param>
            <returns>
                <see cref="T:System.String" />
            </returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="T:Furion.Extensions.EventHandlerExtensions">
            <summary>
                <see cref="T:System.EventHandler`1" /> 拓展类
            </summary>
        </member>
        <member name="M:Furion.Extensions.EventHandlerExtensions.TryInvoke``1(System.EventHandler{``0},System.Object,``0)">
            <summary>
                尝试执行事件处理程序
            </summary>
            <param name="handler">
                <see cref="T:System.EventHandler`1" />
            </param>
            <param name="sender">
                <see cref="T:System.Object" />
            </param>
            <param name="args">
                <typeparamref name="TEventArgs" />
            </param>
            <typeparam name="TEventArgs">事件参数</typeparam>
        </member>
        <member name="T:Furion.Extensions.ICollectionExtensions">
            <summary>
                <see cref="T:System.Collections.Generic.ICollection`1" /> 拓展类
            </summary>
        </member>
        <member name="M:Furion.Extensions.ICollectionExtensions.IsNullOrEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
                判断集合是否为空
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="collection">
                <see cref="T:System.Collections.Generic.ICollection`1" />
            </param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="T:Furion.Extensions.IDictionaryExtensions">
            <summary>
                <see cref="T:System.Collections.Generic.IDictionary`2" /> 拓展类
            </summary>
        </member>
        <member name="M:Furion.Extensions.IDictionaryExtensions.AddOrUpdate``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
                添加或更新
            </summary>
            <typeparam name="TKey">字典键类型</typeparam>
            <typeparam name="TValue">字典值类型</typeparam>
            <param name="dictionary">
                <see cref="T:System.Collections.Generic.IDictionary`2" />
            </param>
            <param name="key">
                <typeparamref name="TKey" />
            </param>
            <param name="value">
                <typeparamref name="TValue" />
            </param>
        </member>
        <member name="M:Furion.Extensions.IDictionaryExtensions.AddOrUpdate``2(System.Collections.Generic.IDictionary{``0,System.Collections.Generic.List{``1}},``0,``1)">
            <summary>
                添加或更新
            </summary>
            <typeparam name="TKey">字典键类型</typeparam>
            <typeparam name="TValue">字典值类型</typeparam>
            <param name="dictionary">
                <see cref="T:System.Collections.Generic.IDictionary`2" />
            </param>
            <param name="key">
                <typeparamref name="TKey" />
            </param>
            <param name="value">
                <typeparamref name="TValue" />
            </param>
        </member>
        <member name="M:Furion.Extensions.IDictionaryExtensions.AddOrUpdate``2(System.Collections.Generic.IDictionary{``0,System.Collections.Generic.List{``1}},System.Collections.Generic.IDictionary{``0,System.Collections.Generic.List{``1}})">
            <summary>
                添加或更新
            </summary>
            <typeparam name="TKey">字典键类型</typeparam>
            <typeparam name="TValue">字典值类型</typeparam>
            <param name="dictionary">
                <see cref="T:System.Collections.Generic.IDictionary`2" />
            </param>
            <param name="concatDictionary">
                <see cref="T:System.Collections.Generic.IDictionary`2" />
            </param>
        </member>
        <member name="M:Furion.Extensions.IDictionaryExtensions.AddOrUpdate``2(System.Collections.Generic.IDictionary{``0,System.Collections.Generic.List{``1}},System.Collections.Generic.IDictionary{``0,``1},System.Boolean,System.Boolean)">
            <summary>
                添加或更新
            </summary>
            <typeparam name="TKey">字典键类型</typeparam>
            <typeparam name="TValue">字典值类型</typeparam>
            <param name="dictionary">
                <see cref="T:System.Collections.Generic.IDictionary`2" />
            </param>
            <param name="concatDictionary">
                <see cref="T:System.Collections.Generic.IDictionary`2" />
            </param>
            <param name="allowDuplicates">是否允许重复添加。默认值为：<c>true</c>。</param>
            <param name="replace">是否值已存在时则采用替换的方式，否则采用追加方式。默认值为 <c>false</c>。</param>
        </member>
        <member name="M:Furion.Extensions.IDictionaryExtensions.AddOrUpdate``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
                添加或更新
            </summary>
            <typeparam name="TKey">字典键类型</typeparam>
            <typeparam name="TValue">字典值类型</typeparam>
            <param name="dictionary">
                <see cref="T:System.Collections.Generic.IDictionary`2" />
            </param>
            <param name="concatDictionary">
                <see cref="T:System.Collections.Generic.IDictionary`2" />
            </param>
        </member>
        <member name="M:Furion.Extensions.IDictionaryExtensions.TryAdd``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
                尝试添加
            </summary>
            <typeparam name="TKey">字典键类型</typeparam>
            <typeparam name="TValue">字典值类型</typeparam>
            <param name="dictionary">
                <see cref="T:System.Collections.Generic.IDictionary`2" />
            </param>
            <param name="concatDictionary">
                <see cref="T:System.Collections.Generic.IDictionary`2" />
            </param>
        </member>
        <member name="M:Furion.Extensions.IDictionaryExtensions.TryAdd``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IEnumerable{``1},System.Func{``1,``0})">
            <summary>
                尝试添加
            </summary>
            <remarks>其中键是由值通过给定的选择器函数生成的。</remarks>
            <param name="dictionary">
                <see cref="T:System.Collections.Generic.IDictionary`2" />
            </param>
            <param name="values">
                <see cref="T:System.Collections.Generic.IEnumerable`1" />
            </param>
            <param name="keySelector">键选择器</param>
            <typeparam name="TKey">字典键类型</typeparam>
            <typeparam name="TValue">字典值类型</typeparam>
        </member>
        <member name="T:Furion.Extensions.IEnumerableExtensions">
            <summary>
                <see cref="T:System.Collections.IEnumerable" /> 拓展类
            </summary>
        </member>
        <member name="M:Furion.Extensions.IEnumerableExtensions.OfType(System.Collections.IEnumerable,System.Type)">
            <summary>
                根据指定类型筛选 <see cref="T:System.Collections.IEnumerable" /> 的元素
            </summary>
            <param name="source">
                <see cref="T:System.Collections.IEnumerable" />
            </param>
            <param name="resultType">筛选的结果类型</param>
            <returns>
                <see cref="T:System.Collections.IEnumerable" />
            </returns>
        </member>
        <member name="M:Furion.Extensions.IEnumerableExtensions.ConcatIgnoreNull``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
                合并两个集合
            </summary>
            <param name="first">
                <see cref="T:System.Collections.Generic.IEnumerable`1" />
            </param>
            <param name="second">
                <see cref="T:System.Collections.Generic.IEnumerable`1" />
            </param>
            <typeparam name="TSource">集合元素的类型</typeparam>
            <returns>
                <see cref="T:System.Collections.Generic.IEnumerable`1" />
            </returns>
        </member>
        <member name="T:Furion.Extensions.LinqExpressionExtensions">
            <summary>
                <see cref="T:System.Linq.Expressions.Expression" /> 拓展类
            </summary>
        </member>
        <member name="M:Furion.Extensions.LinqExpressionExtensions.WhereIf``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Func{``0,System.Boolean})">
            <summary>
                根据条件成立构建 <c>Where</c> 表达式
            </summary>
            <param name="source">
                <see cref="T:System.Collections.Generic.IEnumerable`1" />
            </param>
            <param name="condition">条件</param>
            <param name="predicate"><c>Where</c> 表达式</param>
            <typeparam name="TSource">集合元素类型</typeparam>
            <returns>
                <see cref="T:System.Collections.Generic.IEnumerable`1" />
            </returns>
        </member>
        <member name="M:Furion.Extensions.LinqExpressionExtensions.GetPropertyName``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
                解析表达式属性名称
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <typeparam name="TProperty">属性类型</typeparam>
            <param name="propertySelector">
                <see cref="T:System.Linq.Expressions.Expression`1" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Furion.Extensions.LinqExpressionExtensions.GetPropertyName``1(System.Linq.Expressions.MemberExpression)">
            <summary>
                解析表达式属性名称
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="memberExpression">
                <see cref="T:System.Linq.Expressions.MemberExpression" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="T:Furion.Extensions.MethodInfoExtensions">
            <summary>
                <see cref="T:System.Reflection.MethodInfo" /> 拓展类
            </summary>
        </member>
        <member name="M:Furion.Extensions.MethodInfoExtensions.IsDefined``1(System.Reflection.MethodInfo,``0@,System.Boolean)">
            <summary>
                检查是否定义了指定特性
            </summary>
            <param name="method">
                <see cref="T:System.Reflection.MethodInfo" />
            </param>
            <param name="attribute">
                <typeparamref name="TAttribute" />
            </param>
            <param name="inherit">是否在基类中搜索</param>
            <typeparam name="TAttribute">
                <see cref="T:System.Attribute" />
            </typeparam>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:Furion.Extensions.MethodInfoExtensions.GetDefinedCustomAttributes``1(System.Reflection.MethodInfo,System.Boolean,System.Boolean)">
            <summary>
                获取指定特性的所有实例
            </summary>
            <param name="method">
                <see cref="T:System.Reflection.MethodInfo" />
            </param>
            <param name="inherit">是否在基类中搜索</param>
            <param name="methodScanFirst">是否优先查找 <see cref="T:System.Reflection.MethodInfo" /> 的特性。默认值为：<c>true</c>。</param>
            <typeparam name="TAttribute">
                <see cref="T:System.Attribute" />
            </typeparam>
            <returns>
                <typeparamref name="TAttribute" /><c>[]</c>
            </returns>
        </member>
        <member name="M:Furion.Extensions.MethodInfoExtensions.ToFriendlyString(System.Reflection.MethodInfo)">
            <summary>
                输出方法签名的友好字符串
            </summary>
            <param name="method">
                <see cref="T:System.Reflection.MethodInfo" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="T:Furion.Extensions.NumberExtensions">
            <summary>
                数值类型拓展类
            </summary>
        </member>
        <member name="M:Furion.Extensions.NumberExtensions.ToSizeUnits(System.Double,System.String)">
            <summary>
                根据指定的单位将字节数进行转换
            </summary>
            <param name="byteSize">字节数</param>
            <param name="unit">单位。可选值为：<c>B</c>, <c>KB</c>, <c>MB</c>, <c>GB</c>, <c>TB</c>, <c>PB</c>, <c>EB</c>。</param>
            <returns>
                <see cref="T:System.Double" />
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Furion.Extensions.NumberExtensions.ToSizeUnits(System.Int64,System.String)">
            <summary>
                根据指定的单位将字节数进行转换
            </summary>
            <param name="byteSize">字节数</param>
            <param name="unit">单位。可选值为：<c>B</c>, <c>KB</c>, <c>MB</c>, <c>GB</c>, <c>TB</c>, <c>PB</c>, <c>EB</c>。</param>
            <returns>
                <see cref="T:System.Double" />
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="T:Furion.Extensions.ObjectExtensions">
            <summary>
                <see cref="T:System.Object" /> 拓展类
            </summary>
        </member>
        <member name="M:Furion.Extensions.ObjectExtensions.GetAssembly(System.Object)">
            <summary>
                获取对象所在的程序集
            </summary>
            <param name="obj">
                <see cref="T:System.Object" />
            </param>
            <returns>
                <see cref="T:System.Reflection.Assembly" />
            </returns>
        </member>
        <member name="M:Furion.Extensions.ObjectExtensions.ToCultureString(System.Object,System.Globalization.CultureInfo,System.Boolean,System.String)">
            <summary>
                将对象转换为基于特定文化的字符串表示形式
            </summary>
            <param name="obj">
                <see cref="T:System.Object" />
            </param>
            <param name="culture">
                <see cref="T:System.Globalization.CultureInfo" />
            </param>
            <param name="enumAsString">指示是否将枚举类型的值作为名称输出，默认值为：<c>true</c>。若为 <c>false</c>，则输出枚举的值</param>
            <param name="separator">集合类型分隔符</param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:Furion.Extensions.ObjectExtensions.TryGetCount(System.Object,System.Int32@)">
            <summary>
                尝试获取对象的数量
            </summary>
            <param name="obj">
                <see cref="T:System.Object" />
            </param>
            <param name="count">数量</param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:Furion.Extensions.ObjectExtensions.ObjectToDictionary(System.Object)">
            <summary>
                将对象转换为 <see cref="T:System.Collections.Generic.IDictionary`2" /> 类型对象
            </summary>
            <param name="obj">
                <see cref="T:System.Object" />
            </param>
            <returns>
                <see cref="T:System.Collections.Generic.IDictionary`2" />
            </returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:Furion.Extensions.ObjectExtensions.GetPropertyValueFromPath(System.Object,System.String,System.Boolean@,System.String,System.Reflection.BindingFlags)">
            <summary>
                根据模板路径从对象中获取属性值
            </summary>
            <param name="obj">
                <see cref="T:System.Object" />
            </param>
            <param name="path">模板路径。支持 <c>{Key}</c> 或 <c>{Key.Property}</c> 或 {Key.Property.NestProperty} 语法格式。</param>
            <param name="prefix">模板字符串前缀；默认值为：<c>model</c>。</param>
            <param name="isMatch">用于检查是否以 <c>prefix.</c> 开头</param>
            <param name="bindingFlags">
                <see cref="T:System.Reflection.BindingFlags" />
            </param>
            <returns>
                <see cref="T:System.Object" />
            </returns>
        </member>
        <member name="T:Furion.Extensions.StringExtensions">
            <summary>
                <see cref="T:System.String" /> 拓展类
            </summary>
        </member>
        <member name="M:Furion.Extensions.StringExtensions.AddQuotes(System.String)">
            <summary>
                为字符串前后添加双引号
            </summary>
            <param name="input">
                <see cref="T:System.String" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:Furion.Extensions.StringExtensions.ToLowerFirstLetter(System.String)">
            <summary>
                将字符串首字母转换为小写
            </summary>
            <param name="input">
                <see cref="T:System.String" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:Furion.Extensions.StringExtensions.EscapeDataString(System.String,System.Boolean)">
            <summary>
                将字符串进行转义
            </summary>
            <param name="input">
                <see cref="T:System.String" />
            </param>
            <param name="escape">是否转义字符串</param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:Furion.Extensions.StringExtensions.IsIn(System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.IEqualityComparer)">
            <summary>
                检查字符串是否存在于给定的集合中
            </summary>
            <param name="input">
                <see cref="T:System.String" />
            </param>
            <param name="collection">
                <see cref="T:System.Collections.Generic.IEnumerable`1" />
            </param>
            <param name="comparer">
                <see cref="T:System.Collections.IEqualityComparer" />
            </param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:Furion.Extensions.StringExtensions.ParseUrlQueryParameters(System.String)">
            <summary>
                解析 URL 中的查询字符串为键值对列表
            </summary>
            <param name="urlQuery">URL 中的查询字符串</param>
            <returns>
                <see cref="T:System.Collections.Generic.List`1" />
            </returns>
        </member>
        <member name="M:Furion.Extensions.StringExtensions.PadStringToByteLength(System.String,System.Int32)">
            <summary>
                基于 GBK 编码将字符串右填充至指定的字节数
            </summary>
            <remarks>调用之前需确保上下文存在 <c>Encoding.RegisterProvider(CodePagesEncodingProvider.Instance);</c> 代码。</remarks>
            <param name="output">字符串</param>
            <param name="totalByteCount">目标字节数</param>
            <returns>
                <see cref="T:System.String" />
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Furion.Extensions.StringExtensions.ReplacePlaceholders(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
                替换字符串中的占位符为实际值
            </summary>
            <param name="template">包含占位符的模板字符串</param>
            <param name="replacementSource">
                <see cref="T:System.Collections.Generic.IDictionary`2" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:Furion.Extensions.StringExtensions.ReplacePlaceholders(System.String,System.Object,System.String,System.Reflection.BindingFlags)">
            <summary>
                替换字符串中的占位符为实际值
            </summary>
            <param name="template">包含占位符的模板字符串</param>
            <param name="replacementSource">
                <see cref="T:System.Object" />
            </param>
            <param name="prefix">模板字符串前缀；默认值为：<c>model</c>。</param>
            <param name="bindingFlags">
                <see cref="T:System.Reflection.BindingFlags" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:Furion.Extensions.StringExtensions.PlaceholderRegex">
            <remarks>
            Pattern:<br/>
            <code>\\{\\s*(\\w+\\s*(\\.\\s*\\w+\\s*)*)\\s*\\}</code><br/>
            Explanation:<br/>
            <code>
            ○ Match '{'.<br/>
            ○ Match a whitespace character atomically any number of times.<br/>
            ○ 1st capture group.<br/>
                ○ Match a word character greedily at least once.<br/>
                ○ Match a whitespace character greedily any number of times.<br/>
                ○ Loop greedily any number of times.<br/>
                    ○ 2nd capture group.<br/>
                        ○ Match '.'.<br/>
                        ○ Match a whitespace character atomically any number of times.<br/>
                        ○ Match a word character greedily at least once.<br/>
                        ○ Match a whitespace character greedily any number of times.<br/>
            ○ Match a whitespace character atomically any number of times.<br/>
            ○ Match '}'.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Furion.Extensions.TypeExtensions">
            <summary>
                <see cref="T:System.Type" /> 拓展类
            </summary>
        </member>
        <member name="M:Furion.Extensions.TypeExtensions.IsArrayOrCollection(System.Type,System.Type@)">
            <summary>
                检查类型是否是数组或集合类型
            </summary>
            <param name="type">
                <see cref="T:System.Type" />
            </param>
            <param name="underlyingType">元素类型</param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:Furion.Extensions.TypeExtensions.IsBasicType(System.Type)">
            <summary>
                检查类型是否是基本类型
            </summary>
            <param name="type">
                <see cref="T:System.Type" />
            </param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:Furion.Extensions.TypeExtensions.IsBaseTypeOrEnumOrCollection(System.Type)">
            <summary>
                检查类型是否是基本类型或枚举类型或由它们组成的数组或集合类型
            </summary>
            <param name="type">
                <see cref="T:System.Type" />
            </param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:Furion.Extensions.TypeExtensions.IsStatic(System.Type)">
            <summary>
                检查类型是否是静态类型
            </summary>
            <param name="type">
                <see cref="T:System.Type" />
            </param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:Furion.Extensions.TypeExtensions.IsAnonymous(System.Type)">
            <summary>
                检查类型是否是匿名类型
            </summary>
            <param name="type">
                <see cref="T:System.Type" />
            </param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:Furion.Extensions.TypeExtensions.IsInstantiable(System.Type)">
            <summary>
                检查类型是否可实例化
            </summary>
            <param name="type">
                <see cref="T:System.Type" />
            </param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:Furion.Extensions.TypeExtensions.IsStruct(System.Type)">
            <summary>
                检查类型是否是结构类型
            </summary>
            <remarks>唯有如 <c>public struct StructName {}</c> 类型定义才符合验证要求。</remarks>
            <param name="type">
                <see cref="T:System.Type" />
            </param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:Furion.Extensions.TypeExtensions.IsAlienAssignableTo(System.Type,System.Type)">
            <summary>
                检查类型是否派生自指定类型
            </summary>
            <param name="type">
                <see cref="T:System.Type" />
            </param>
            <param name="fromType">
                <see cref="T:System.Type" />
            </param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:Furion.Extensions.TypeExtensions.GetDefinedCustomAttribute``1(System.Type,System.Boolean)">
            <summary>
                获取指定特性实例
            </summary>
            <remarks>若特性不存在则返回 null</remarks>
            <typeparam name="TAttribute">特性类型</typeparam>
            <param name="type">
                <see cref="T:System.Type" />
            </param>
            <param name="inherit">是否在基类中搜索</param>
            <returns>
                <typeparamref name="TAttribute" />
            </returns>
        </member>
        <member name="M:Furion.Extensions.TypeExtensions.HasDefinePublicParameterlessConstructor(System.Type)">
            <summary>
                检查类型是否定义了公开无参构造函数
            </summary>
            <remarks>用于 <see cref="M:System.Activator.CreateInstance(System.Type)" /> 实例化</remarks>
            <param name="type">
                <see cref="T:System.Type" />
            </param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:Furion.Extensions.TypeExtensions.IsDefinitionEqual(System.Type,System.Type)">
            <summary>
                检查类型和指定类型定义是否相等
            </summary>
            <param name="type">
                <see cref="T:System.Type" />
            </param>
            <param name="compareType">
                <see cref="T:System.Type" />
            </param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:Furion.Extensions.TypeExtensions.IsDefinitionEquals(System.Type,System.Type)">
            <summary>
                检查类型和指定类型定义是否相等
            </summary>
            <remarks>将查找所有派生的基类和实现的接口。</remarks>
            <param name="type">
                <see cref="T:System.Type" />
            </param>
            <param name="compareType">
                <see cref="T:System.Type" />
            </param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:Furion.Extensions.TypeExtensions.IsCompatibilityTo(System.Type,System.Type)">
            <summary>
                检查类型和指定继承类型是否兼容
            </summary>
            <param name="type">
                <see cref="T:System.Type" />
            </param>
            <param name="inheritType">
                <see cref="T:System.Type" />
            </param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:Furion.Extensions.TypeExtensions.IsDeclarationMethod(System.Type,System.String,System.Reflection.BindingFlags,System.Reflection.MethodInfo@)">
            <summary>
                检查类型是否定义了指定方法
            </summary>
            <param name="type">
                <see cref="T:System.Type" />
            </param>
            <param name="name">方法名称</param>
            <param name="accessibilityBindingFlags">可访问性成员绑定标记</param>
            <param name="methodInfo">
                <see cref="T:System.Reflection.MethodInfo" />
            </param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:Furion.Extensions.TypeExtensions.IsInteger(System.Type)">
            <summary>
                检查类型是否是整数类型
            </summary>
            <param name="type">
                <see cref="T:System.Type" />
            </param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:Furion.Extensions.TypeExtensions.IsDecimal(System.Type)">
            <summary>
                检查类型是否是小数类型
            </summary>
            <param name="type">
                <see cref="T:System.Type" />
            </param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:Furion.Extensions.TypeExtensions.IsNumeric(System.Type)">
            <summary>
                检查类型是否是数值类型
            </summary>
            <param name="type">
                <see cref="T:System.Type" />
            </param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:Furion.Extensions.TypeExtensions.IsKeyValuePair(System.Type)">
            <summary>
                检查类型是否是 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 类型
            </summary>
            <param name="type">
                <see cref="T:System.Type" />
            </param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:Furion.Extensions.TypeExtensions.IsKeyValueCollection(System.Type,System.Boolean@)">
            <summary>
                检查类型是否是键值对集合类型
            </summary>
            <param name="type">
                <see cref="T:System.Type" />
            </param>
            <param name="isKeyValuePairCollection">是否是 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 集合类型</param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:Furion.Extensions.TypeExtensions.GetKeyValuePairOrJPropertyGetters(System.Type)">
            <summary>
                获取 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 或 <c>Newtonsoft.Json.Linq.JProperty</c> 类型键值属性值访问器
            </summary>
            <param name="keyValuePairType">
                <see cref="T:System.Type" />
            </param>
            <returns>
                <see cref="T:System.Tuple`2" />
            </returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Furion.Extensions.TypeExtensions.CreatePropertySetter(System.Type,System.Reflection.PropertyInfo)">
            <summary>
                创建实例属性值设置器
            </summary>
            <param name="type">
                <see cref="T:System.Type" />
            </param>
            <remarks>不支持 <c>struct</c> 类型设置属性值。</remarks>
            <param name="propertyInfo">
                <see cref="T:System.Reflection.PropertyInfo" />
            </param>
            <returns>
                <see cref="T:System.Action`2" />
            </returns>
        </member>
        <member name="M:Furion.Extensions.TypeExtensions.CreateFieldSetter(System.Type,System.Reflection.FieldInfo)">
            <summary>
                创建实例字段值设置器
            </summary>
            <remarks>不支持 <c>struct</c> 类型设置字段值</remarks>
            <param name="type">
                <see cref="T:System.Type" />
            </param>
            <param name="fieldInfo">
                <see cref="T:System.Reflection.FieldInfo" />
            </param>
            <returns>
                <see cref="T:System.Action`2" />
            </returns>
        </member>
        <member name="M:Furion.Extensions.TypeExtensions.CreatePropertyGetter(System.Type,System.Reflection.PropertyInfo)">
            <summary>
                创建实例属性值访问器
            </summary>
            <param name="type">
                <see cref="T:System.Type" />
            </param>
            <param name="propertyInfo">
                <see cref="T:System.Reflection.PropertyInfo" />
            </param>
            <returns>
                <see cref="T:System.Func`2" />
            </returns>
        </member>
        <member name="M:Furion.Extensions.TypeExtensions.CreateStaticPropertyGetter(System.Type,System.Reflection.PropertyInfo)">
            <summary>
                创建静态属性值访问器
            </summary>
            <param name="type">
                <see cref="T:System.Type" />
            </param>
            <param name="propertyInfo">
                <see cref="T:System.Reflection.PropertyInfo" />
            </param>
            <returns>
                <see cref="T:System.Func`1" />
            </returns>
        </member>
        <member name="M:Furion.Extensions.TypeExtensions.CreateFieldGetter(System.Type,System.Reflection.FieldInfo)">
            <summary>
                创建实例字段值访问器
            </summary>
            <param name="type">
                <see cref="T:System.Type" />
            </param>
            <param name="fieldInfo">
                <see cref="T:System.Reflection.FieldInfo" />
            </param>
            <returns>
                <see cref="T:System.Func`2" />
            </returns>
        </member>
        <member name="M:Furion.Extensions.TypeExtensions.CreateStaticFieldGetter(System.Type,System.Reflection.FieldInfo)">
            <summary>
                创建静态字段值访问器
            </summary>
            <param name="type">
                <see cref="T:System.Type" />
            </param>
            <param name="fieldInfo">
                <see cref="T:System.Reflection.FieldInfo" />
            </param>
            <returns>
                <see cref="T:System.Func`1" />
            </returns>
        </member>
        <member name="M:Furion.Extensions.TypeExtensions.ToFriendlyString(System.Type)">
            <summary>
                输出类型的友好字符串
            </summary>
            <param name="type">
                <see cref="T:System.Type" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="T:Furion.AddInjectOptions">
            <summary>
            AddInject 配置选项
            </summary>
        </member>
        <member name="M:Furion.AddInjectOptions.ConfigureSwaggerGen(System.Action{Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions})">
            <summary>
            配置 Swagger Gen
            </summary>
            <param name="configure"></param>
        </member>
        <member name="M:Furion.AddInjectOptions.ConfigureDataValidation(System.Action{Furion.DataValidation.DataValidationOptions})">
            <summary>
            配置 DataValidation
            </summary>
            <param name="configure"></param>
        </member>
        <member name="M:Furion.AddInjectOptions.ConfigureFriendlyException(System.Action{Furion.FriendlyException.FriendlyExceptionOptions})">
            <summary>
            配置 FriendlyException
            </summary>
            <param name="configure"></param>
        </member>
        <member name="P:Furion.AddInjectOptions.SwaggerGenConfigure">
            <summary>
            Swagger Gen 配置
            </summary>
        </member>
        <member name="P:Furion.AddInjectOptions.DataValidationConfigure">
            <summary>
            DataValidation 配置
            </summary>
        </member>
        <member name="P:Furion.AddInjectOptions.FriendlyExceptionConfigure">
            <summary>
            FriendlyException 配置
            </summary>
        </member>
        <member name="T:Furion.InjectOptions">
            <summary>
            Inject 配置选项
            </summary>
        </member>
        <member name="P:Furion.InjectOptions.AssemblyName">
            <summary>
            外部程序集名称
            </summary>
        </member>
        <member name="P:Furion.InjectOptions.AutoRegisterBackgroundService">
            <summary>
            是否自动注册 BackgroundService
            </summary>
        </member>
        <member name="M:Furion.InjectOptions.ConfigurationScanDirectories(System.String[])">
            <summary>
            配置 ConfigurationScanDirectories
            </summary>
            <param name="directories"></param>
        </member>
        <member name="M:Furion.InjectOptions.IgnoreConfigurationFiles(System.String[])">
            <summary>
            配置 IgnoreConfigurationFiles
            </summary>
            <param name="files"></param>
        </member>
        <member name="M:Furion.InjectOptions.ConfigureAppConfiguration(System.Action{Microsoft.Extensions.Hosting.HostBuilderContext,Microsoft.Extensions.Configuration.IConfigurationBuilder})">
            <summary>
            配置 ConfigureAppConfiguration
            </summary>
            <param name="configure"></param>
        </member>
        <member name="M:Furion.InjectOptions.ConfigureWebAppConfiguration(System.Action{Microsoft.AspNetCore.Hosting.WebHostBuilderContext,Microsoft.Extensions.Configuration.IConfigurationBuilder})">
            <summary>
            配置 ConfigureAppConfiguration（Web）
            </summary>
            <param name="configure"></param>
        </member>
        <member name="M:Furion.InjectOptions.ConfigureServices(System.Action{Microsoft.Extensions.Hosting.HostBuilderContext,Microsoft.Extensions.DependencyInjection.IServiceCollection})">
            <summary>
            配置 ConfigureServices
            </summary>
            <param name="configure"></param>
        </member>
        <member name="M:Furion.InjectOptions.ConfigureWebServices(System.Action{Microsoft.AspNetCore.Hosting.WebHostBuilderContext,Microsoft.Extensions.DependencyInjection.IServiceCollection})">
            <summary>
            配置 ConfigureServices（Web）
            </summary>
            <param name="configure"></param>
        </member>
        <member name="P:Furion.InjectOptions.InternalConfigurationScanDirectories">
            <summary>
            配置配置文件扫描目录
            </summary>
        </member>
        <member name="P:Furion.InjectOptions.InternalIgnoreConfigurationFiles">
            <summary>
            配置配置文件忽略注册文件
            </summary>
        </member>
        <member name="P:Furion.InjectOptions.AppConfigurationConfigure">
            <summary>
            AppConfiguration 配置
            </summary>
        </member>
        <member name="P:Furion.InjectOptions.WebAppConfigurationConfigure">
            <summary>
            AppConfiguration 配置（Web）
            </summary>
        </member>
        <member name="P:Furion.InjectOptions.ServicesConfigure">
            <summary>
            Services 配置
            </summary>
        </member>
        <member name="P:Furion.InjectOptions.WebServicesConfigure">
            <summary>
            Services 配置（Web）
            </summary>
        </member>
        <member name="T:Furion.UseInjectOptions">
            <summary>
            UseInject 配置选项
            </summary>
        </member>
        <member name="M:Furion.UseInjectOptions.ConfigureSwagger(System.Action{Swashbuckle.AspNetCore.Swagger.SwaggerOptions})">
            <summary>
            配置 Swagger
            </summary>
            <param name="configure"></param>
        </member>
        <member name="M:Furion.UseInjectOptions.ConfigureSwaggerUI(System.Action{Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIOptions})">
            <summary>
            配置 Swagger UI
            </summary>
            <param name="configure"></param>
        </member>
        <member name="P:Furion.UseInjectOptions.SwaggerConfigure">
            <summary>
            Swagger 配置
            </summary>
        </member>
        <member name="P:Furion.UseInjectOptions.SwaggerUIConfigure">
            <summary>
            Swagger UI 配置
            </summary>
        </member>
        <member name="T:Furion.StartupFilter">
            <summary>
            应用启动时自动注册中间件
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:Furion.StartupFilter.Configure(System.Action{Microsoft.AspNetCore.Builder.IApplicationBuilder})">
            <summary>
            配置中间件
            </summary>
            <param name="next"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.StartupFilter.UseStartups(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            配置 Startup 的 Configure
            </summary>
            <param name="app">应用构建器</param>
        </member>
        <member name="M:Furion.StartupFilter.UseStartups(System.Collections.Generic.IEnumerable{Furion.AppStartup},Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            批量将自定义 AppStartup 添加到 Startup.cs 的 Configure 中
            </summary>
            <param name="startups"></param>
            <param name="app"></param>
        </member>
        <member name="M:Furion.StartupFilter.ResolveMethodParameterInstances(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.Reflection.MethodInfo)">
            <summary>
            解析方法参数实例
            </summary>
            <param name="app"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.InternalApp">
            <summary>
            内部 App 副本
            </summary>
        </member>
        <member name="F:Furion.InternalApp.InternalServices">
            <summary>
            应用服务
            </summary>
        </member>
        <member name="F:Furion.InternalApp.RootServices">
            <summary>
            根服务
            </summary>
        </member>
        <member name="F:Furion.InternalApp.Configuration">
            <summary>
            配置对象
            </summary>
        </member>
        <member name="F:Furion.InternalApp.WebHostEnvironment">
            <summary>
            获取Web主机环境
            </summary>
        </member>
        <member name="F:Furion.InternalApp.HostEnvironment">
            <summary>
            获取泛型主机环境
            </summary>
        </member>
        <member name="M:Furion.InternalApp.ConfigureApplication(Microsoft.AspNetCore.Hosting.IWebHostBuilder,Microsoft.Extensions.Hosting.IHostBuilder)">
            <summary>
            配置 Furion 框架（Web）
            </summary>
            <remarks>此次添加 <see cref="T:Microsoft.Extensions.Hosting.HostBuilder"/> 参数是为了兼容 .NET 5 直接升级到 .NET 6 问题</remarks>
            <param name="builder"></param>
            <param name="hostBuilder"></param>
        </member>
        <member name="M:Furion.InternalApp.ConfigureApplication(Microsoft.Extensions.Hosting.IHostBuilder,System.Boolean)">
            <summary>
            配置 Furion 框架（非 Web）
            </summary>
            <param name="builder"></param>
            <param name="autoRegisterBackgroundService"></param>
        </member>
        <member name="M:Furion.InternalApp.ConfigureHostAppConfiguration(Microsoft.Extensions.Hosting.IHostBuilder)">
            <summary>
            自动装载主机配置
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:Furion.InternalApp.AddJsonFiles(Microsoft.Extensions.Configuration.IConfigurationBuilder,Microsoft.Extensions.Hosting.IHostEnvironment)">
            <summary>
            加载自定义 .json 配置文件
            </summary>
            <param name="configurationBuilder"></param>
            <param name="hostEnvironment"></param>
        </member>
        <member name="F:Furion.InternalApp.excludeJsonPrefixs">
            <summary>
            排除的配置文件前缀
            </summary>
        </member>
        <member name="F:Furion.InternalApp.runtimeJsonSuffixs">
            <summary>
            排除运行时 Json 后缀
            </summary>
        </member>
        <member name="M:Furion.InternalApp.SplitConfigFileNameToGroups(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            对配置文件名进行分组
            </summary>
            <param name="configFiles"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.AppSettingsOptions">
            <summary>
            应用全局配置
            </summary>
        </member>
        <member name="P:Furion.AppSettingsOptions.InjectMiniProfiler">
            <summary>
            集成 MiniProfiler 组件
            </summary>
        </member>
        <member name="P:Furion.AppSettingsOptions.InjectSpecificationDocument">
            <summary>
            是否启用规范化文档
            </summary>
        </member>
        <member name="P:Furion.AppSettingsOptions.EnabledReferenceAssemblyScan">
            <summary>
            是否启用引用程序集扫描
            </summary>
        </member>
        <member name="P:Furion.AppSettingsOptions.ExternalAssemblies">
            <summary>
            外部程序集
            </summary>
            <remarks>扫描 dll 文件，如果是单文件发布，需拷贝放在根目录下</remarks>
        </member>
        <member name="P:Furion.AppSettingsOptions.ExcludeAssemblies">
            <summary>
            排除扫描的程序集
            </summary>
        </member>
        <member name="P:Furion.AppSettingsOptions.PrintDbConnectionInfo">
            <summary>
            是否打印数据库连接信息到 MiniProfiler 中
            </summary>
        </member>
        <member name="P:Furion.AppSettingsOptions.OutputOriginalSqlExecuteLog">
            <summary>
            是否输出原始 Sql 执行日志（ADO.NET）
            </summary>
        </member>
        <member name="P:Furion.AppSettingsOptions.SupportPackageNamePrefixs">
            <summary>
            配置支持的包前缀名
            </summary>
        </member>
        <member name="P:Furion.AppSettingsOptions.VirtualPath">
            <summary>
            【部署】二级虚拟目录
            </summary>
        </member>
        <member name="M:Furion.AppSettingsOptions.PostConfigure(Furion.AppSettingsOptions,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            后期配置
            </summary>
            <param name="options"></param>
            <param name="configuration"></param>
        </member>
        <member name="T:Furion.Components.ServeServiceComponent">
            <summary>
            Serve 组件应用服务组件
            </summary>
        </member>
        <member name="M:Furion.Components.ServeServiceComponent.Load(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.ComponentContext)">
            <summary>
            装载服务
            </summary>
            <param name="services"></param>
            <param name="componentContext"></param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Furion.Components.ServeApplicationComponent">
            <summary>
            Serve 组件应用中间件组件
            </summary>
        </member>
        <member name="M:Furion.Components.ServeApplicationComponent.Load(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IWebHostEnvironment,System.ComponentContext)">
            <summary>
            装载中间件
            </summary>
            <param name="app"></param>
            <param name="env"></param>
            <param name="componentContext"></param>
        </member>
        <member name="T:Furion.Components.IComponent">
            <summary>
            组件依赖接口
            </summary>
        </member>
        <member name="T:Furion.Components.Penetrates">
            <summary>
            常量、公共方法配置类
            </summary>
        </member>
        <member name="M:Furion.Components.Penetrates.CreateDependLinkList(System.Type,System.Object)">
            <summary>
            创建组件依赖链表
            </summary>
            <param name="componentType">组件类型</param>
            <param name="options">组件参数</param>
            <returns></returns>
        </member>
        <member name="M:Furion.Components.Penetrates.CreateDependLinkList(System.Type,System.Collections.Generic.List{System.Type}@,System.Collections.Generic.List{System.ComponentContext}@)">
            <summary>
            创建组件依赖链表
            </summary>
            <param name="componentType">组件类型</param>
            <param name="dependLinkList">依赖链表</param>
            <param name="componentContextLinkList">组件上下文链表</param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="T:Furion.ISingleFilePublish">
            <summary>
            解决单文件发布程序集扫描问题
            </summary>
        </member>
        <member name="M:Furion.ISingleFilePublish.IncludeAssemblies">
            <summary>
            包含程序集数组
            </summary>
            <remarks>配置单文件发布扫描程序集</remarks>
            <returns></returns>
        </member>
        <member name="M:Furion.ISingleFilePublish.IncludeAssemblyNames">
            <summary>
            包含程序集名称数组
            </summary>
            <remarks>配置单文件发布扫描程序集名称</remarks>
            <returns></returns>
        </member>
        <member name="T:Furion.AppStartup">
            <summary>
            依赖注入全局模块
            </summary>
        </member>
        <member name="T:Furion.FakeStartup">
            <summary>
            模拟 Startup，解决 .NET5 下不设置 UseStartup 时出现异常问题
            </summary>
        </member>
        <member name="M:Furion.FakeStartup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            配置服务
            </summary>
        </member>
        <member name="M:Furion.FakeStartup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            配置请求
            </summary>
        </member>
        <member name="T:Furion.HostingStartup">
            <summary>
            配置程序启动时自动注入
            </summary>
        </member>
        <member name="M:Furion.HostingStartup.Configure(Microsoft.AspNetCore.Hosting.IWebHostBuilder)">
            <summary>
            配置应用启动
            </summary>
            <param name="builder"></param>
        </member>
        <member name="T:Furion.AspNetCore.FlexibleArrayAttribute`1">
            <summary>
            数组 URL 地址参数模型绑定特性
            </summary>
        </member>
        <member name="M:Furion.AspNetCore.FlexibleArrayAttribute`1.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="T:Furion.AspNetCore.FlexibleArrayModelBinder`1">
            <summary>
            数组 URL 地址参数模型绑定
            </summary>
        </member>
        <member name="M:Furion.AspNetCore.FlexibleArrayModelBinder`1.BindModelAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext)">
            <inheritdoc />
        </member>
        <member name="M:Furion.AspNetCore.FlexibleArrayModelBinder`1.ConvertValues(System.Collections.Generic.IEnumerable{System.String},System.Type)">
            <summary>
            转换集合类型值为模型类型值
            </summary>
            <param name="values"></param>
            <param name="modelType"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.AspNetCore.FromConvertBinder">
            <summary>
            [FromConvert] 模型绑定器
            </summary>
        </member>
        <member name="F:Furion.AspNetCore.FromConvertBinder._modelBinderConverts">
            <summary>
            定义模型绑定转换器集合
            </summary>
        </member>
        <member name="M:Furion.AspNetCore.FromConvertBinder.#ctor(System.Collections.Concurrent.ConcurrentDictionary{System.Type,System.Type})">
            <summary>
            构造函数
            </summary>
            <param name="modelBinderConverts">定义模型绑定转换器集合</param>
        </member>
        <member name="M:Furion.AspNetCore.FromConvertBinder.BindModelAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext)">
            <summary>
            绑定模型处理
            </summary>
            <param name="bindingContext"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Furion.AspNetCore.FromConvertBinder.CreateConvertBinder(System.Type,Microsoft.AspNetCore.Mvc.FromConvertAttribute,System.IServiceProvider)">
            <summary>
            创建模型转换绑定器
            </summary>
            <param name="valueType"></param>
            <param name="fromConvertAttribute"></param>
            <param name="serviceProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.AspNetCore.FromConvertBinder.GetConvertValue(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext,Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata,Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderResult,Microsoft.AspNetCore.Mvc.FromConvertAttribute,System.IServiceProvider)">
            <summary>
            获取转换后的值
            </summary>
            <param name="bindingContext"></param>
            <param name="metadata"></param>
            <param name="valueProviderResult"></param>
            <param name="fromConvertAttribute"></param>
            <param name="serviceProvider"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.AspNetCore.TimestampToDateTimeModelBinder">
            <summary>
            时间戳转 DateTime 类型模型绑定
            </summary>
        </member>
        <member name="M:Furion.AspNetCore.TimestampToDateTimeModelBinder.BindModelAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext)">
            <summary>
            绑定模型处理
            </summary>
            <param name="bindingContext"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:Furion.AspNetCore.DateTimeModelConvertBinder">
            <summary>
            <see cref="T:System.DateTime"/> 类型模型转换绑定器
            </summary>
        </member>
        <member name="M:Furion.AspNetCore.DateTimeModelConvertBinder.ConvertTo(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext,Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata,Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderResult,System.Object)">
            <summary>
            转换时间
            </summary>
            <param name="bindingContext"></param>
            <param name="metadata"></param>
            <param name="valueProviderResult"></param>
            <param name="extras"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.AspNetCore.DateTimeOffsetModelConvertBinder">
            <summary>
            <see cref="T:System.DateTimeOffset"/> 类型模型转换绑定器
            </summary>
        </member>
        <member name="M:Furion.AspNetCore.DateTimeOffsetModelConvertBinder.ConvertTo(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext,Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata,Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderResult,System.Object)">
            <summary>
            转换时间
            </summary>
            <param name="bindingContext"></param>
            <param name="metadata"></param>
            <param name="valueProviderResult"></param>
            <param name="extras"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.AspNetCore.IModelConvertBinder">
            <summary>
            模型转换绑定器接口
            </summary>
        </member>
        <member name="M:Furion.AspNetCore.IModelConvertBinder.ConvertTo(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext,Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata,Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderResult,System.Object)">
            <summary>
            模型绑定转换方法
            </summary>
            <param name="bindingContext"></param>
            <param name="metadata"></param>
            <param name="valueProviderResult"></param>
            <param name="extras"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.AspNetCore.Extensions.HttpContextExtensions">
            <summary>
                <see cref="T:Microsoft.AspNetCore.Http.HttpContext" /> 拓展类
            </summary>
        </member>
        <member name="M:Furion.AspNetCore.Extensions.HttpContextExtensions.GetFullRequestUrl(Microsoft.AspNetCore.Http.HttpRequest)">
            <summary>
                获取完整的请求 URL 地址
            </summary>
            <param name="httpRequest">
                <see cref="T:Microsoft.AspNetCore.Http.HttpRequest" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:Furion.AspNetCore.Extensions.HttpContextExtensions.GetStatusText(Microsoft.AspNetCore.Http.HttpResponse)">
            <summary>
                获取响应状态文本
            </summary>
            <param name="httpResponse">
                <see cref="T:Microsoft.AspNetCore.Http.HttpResponse" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:Furion.AspNetCore.Extensions.HttpContextExtensions.AllowCors(Microsoft.AspNetCore.Http.HttpResponse)">
            <summary>
                配置允许跨域响应头
            </summary>
            <param name="httpResponse">
                <see cref="T:Microsoft.AspNetCore.Http.HttpResponse" />
            </param>
        </member>
        <member name="M:Furion.AspNetCore.Extensions.HttpContextExtensions.AppendExpose(Microsoft.AspNetCore.Http.IHeaderDictionary,System.String,Microsoft.Extensions.Primitives.StringValues)">
            <summary>
                添加响应头导出
            </summary>
            <param name="headers">
                <see cref="T:Microsoft.AspNetCore.Http.IHeaderDictionary" />
            </param>
            <param name="key">键</param>
            <param name="value">值</param>
        </member>
        <member name="T:Furion.AspNetCore.Extensions.IApplicationBuilderExtensions">
            <summary>
                <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" /> 拓展类
            </summary>
        </member>
        <member name="M:Furion.AspNetCore.Extensions.IApplicationBuilderExtensions.UseEnableBuffering(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
                启用请求正文缓存
            </summary>
            <remarks>
                <para>支持 <c>HttpRequest.Body</c> 重复读取。</para>
                <para>https://learn.microsoft.com/zh-cn/aspnet/core/fundamentals/use-http-context?view=aspnetcore-8.0#enable-request-body-buffering</para>
            </remarks>
            <param name="app">
                <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />
            </param>
            <returns>
                <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />
            </returns>
        </member>
        <member name="T:Furion.AspNetCore.Formatters.TextPlainInputFormatter">
            <summary>
                从请求正文中读取 <c>text/plain</c> 内容
            </summary>
            <remarks>参考文献：https://github.com/dotnet/aspnetcore/blob/main/src/Mvc/Mvc.Core/src/Formatters/SystemTextJsonInputFormatter.cs。</remarks>
        </member>
        <member name="M:Furion.AspNetCore.Formatters.TextPlainInputFormatter.#ctor">
            <inheritdoc cref="T:Furion.AspNetCore.Formatters.TextPlainInputFormatter" />
        </member>
        <member name="P:Furion.AspNetCore.Formatters.TextPlainInputFormatter.ExceptionPolicy">
            <inheritdoc />
        </member>
        <member name="M:Furion.AspNetCore.Formatters.TextPlainInputFormatter.ReadRequestBodyAsync(Microsoft.AspNetCore.Mvc.Formatters.InputFormatterContext,System.Text.Encoding)">
            <inheritdoc />
        </member>
        <member name="M:Furion.AspNetCore.Formatters.TextPlainInputFormatter.GetInputStream(Microsoft.AspNetCore.Http.HttpContext,System.Text.Encoding)">
            <summary>
                获取输入的流
            </summary>
            <param name="httpContext">
                <see cref="T:Microsoft.AspNetCore.Http.HttpContext" />
            </param>
            <param name="encoding">
                <see cref="T:System.Text.Encoding" />
            </param>
            <returns>
                <see cref="T:System.Tuple`2" />
            </returns>
        </member>
        <member name="T:Furion.SensitiveDetection.FromConvertBinderProvider">
            <summary>
            [FromConvert] 模型绑定提供器
            </summary>
        </member>
        <member name="F:Furion.SensitiveDetection.FromConvertBinderProvider._modelBinderConverts">
            <summary>
            定义模型绑定转换器集合
            </summary>
        </member>
        <member name="M:Furion.SensitiveDetection.FromConvertBinderProvider.#ctor(System.Collections.Concurrent.ConcurrentDictionary{System.Type,System.Type})">
            <summary>
            构造函数
            </summary>
            <param name="modelBinderConverts">定义模型绑定转换器集合</param>
        </member>
        <member name="M:Furion.SensitiveDetection.FromConvertBinderProvider.GetBinder(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderProviderContext)">
            <summary>
            返回自定义绑定器
            </summary>
            <param name="context"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Furion.SensitiveDetection.SensitiveDetectionBuilder">
            <summary>
            脱敏词汇构建器
            </summary>
        </member>
        <member name="P:Furion.SensitiveDetection.SensitiveDetectionBuilder.EmbedFileName">
            <summary>
            脱敏词汇数据文件名
            </summary>
        </member>
        <member name="T:Furion.SensitiveDetection.SensitiveDetectionBinder">
            <summary>
            脱敏词汇（脱敏）模型绑定器
            </summary>
        </member>
        <member name="M:Furion.SensitiveDetection.SensitiveDetectionBinder.BindModelAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext)">
            <summary>
            绑定模型处理
            </summary>
            <param name="bindingContext"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:Furion.SensitiveDetection.SensitiveDetectionBinderProvider">
            <summary>
            脱敏词汇（脱敏）提供器模型绑定
            </summary>
            <remarks>用于替换脱敏词汇</remarks>
        </member>
        <member name="M:Furion.SensitiveDetection.SensitiveDetectionBinderProvider.GetBinder(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderProviderContext)">
            <summary>
            返回自定义绑定器
            </summary>
            <param name="context"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Furion.SensitiveDetection.ISensitiveDetectionProvider">
            <summary>
            脱敏词汇（脱敏）提供器
            </summary>
        </member>
        <member name="M:Furion.SensitiveDetection.ISensitiveDetectionProvider.GetWordsAsync">
            <summary>
            返回所有脱敏词汇
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.SensitiveDetection.ISensitiveDetectionProvider.VaildedAsync(System.String)">
            <summary>
            判断脱敏词汇是否有效（支持自定义算法）
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.SensitiveDetection.ISensitiveDetectionProvider.ReplaceAsync(System.String,System.Char)">
            <summary>
            替换敏感词汇
            </summary>
            <param name="text"></param>
            <param name="transfer"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.SensitiveDetection.ISensitiveDetectionProvider.FoundSensitiveWordsAsync(System.String)">
            <summary>
            查找脱敏词汇
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.SensitiveDetection.SensitiveDetectionProvider">
            <summary>
            脱敏词汇（脱敏）提供器（默认实现）
            </summary>
        </member>
        <member name="F:Furion.SensitiveDetection.SensitiveDetectionProvider._distributedCache">
            <summary>
            分布式缓存
            </summary>
        </member>
        <member name="F:Furion.SensitiveDetection.SensitiveDetectionProvider._embedFileName">
            <summary>
            脱敏词汇数据文件名
            </summary>
        </member>
        <member name="M:Furion.SensitiveDetection.SensitiveDetectionProvider.#ctor(Microsoft.Extensions.Caching.Distributed.IDistributedCache,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="distributedCache"></param>
            <param name="embedFileName"></param>
        </member>
        <member name="F:Furion.SensitiveDetection.SensitiveDetectionProvider.DISTRIBUTED_KEY">
            <summary>
            分布式缓存键
            </summary>
        </member>
        <member name="M:Furion.SensitiveDetection.SensitiveDetectionProvider.GetWordsAsync">
            <summary>
            返回所有脱敏词汇
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.SensitiveDetection.SensitiveDetectionProvider.VaildedAsync(System.String)">
            <summary>
            判断脱敏词汇是否有效（支持自定义算法）
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.SensitiveDetection.SensitiveDetectionProvider.ReplaceAsync(System.String,System.Char)">
            <summary>
            替换敏感词汇
            </summary>
            <param name="text"></param>
            <param name="transfer"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.SensitiveDetection.SensitiveDetectionProvider.FoundSensitiveWordsAsync(System.String)">
            <summary>
            查找脱敏词汇
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:Furion.SensitiveDetection.SensitiveDetectionProvider.GetSensitiveWordIndex(System.Collections.Generic.List{System.Int32},System.Int32,System.Int32)">
            <summary>
            获取敏感词索引
            </summary>
            <param name="list"></param>
            <param name="count"></param>
            <param name="sensitiveWordLength"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.Authorization.AppAuthorizeHandler">
            <summary>
            授权策略执行程序
            </summary>
        </member>
        <member name="F:Furion.Authorization.AppAuthorizeHandler._refreshTokenClaims">
            <summary>
            刷新 Token 身份标识
            </summary>
        </member>
        <member name="M:Furion.Authorization.AppAuthorizeHandler.HandleAsync(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext)">
            <summary>
            授权验证核心方法
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Authorization.AppAuthorizeHandler.HandleAsync(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext,Microsoft.AspNetCore.Http.DefaultHttpContext)">
            <summary>
            授权验证核心方法（可重写）
            </summary>
            <param name="context"></param>
            <param name="httpContext"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Authorization.AppAuthorizeHandler.PipelineAsync(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext,Microsoft.AspNetCore.Http.DefaultHttpContext)">
            <summary>
            验证管道
            </summary>
            <param name="context"></param>
            <param name="httpContext"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Authorization.AppAuthorizeHandler.PolicyPipelineAsync(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext,Microsoft.AspNetCore.Http.DefaultHttpContext,Microsoft.AspNetCore.Authorization.IAuthorizationRequirement)">
            <summary>
            策略验证管道
            </summary>
            <param name="context"></param>
            <param name="httpContext"></param>
            <param name="requirement"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Authorization.AppAuthorizeHandler.AuthorizeHandleAsync(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext)">
            <summary>
            授权处理
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Authorization.AppAuthorizeHandler.UnifyWrapper(Microsoft.AspNetCore.Http.DefaultHttpContext,System.Exception)">
            <summary>
            处理规范化结果
            </summary>
            <param name="httpContext"></param>
            <param name="exception"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.Authorization.Penetrates">
            <summary>
            常量、公共方法配置类
            </summary>
        </member>
        <member name="F:Furion.Authorization.Penetrates.AppAuthorizePrefix">
            <summary>
            授权策略前缀
            </summary>
        </member>
        <member name="T:Furion.Authorization.AppAuthorizationPolicyProvider">
            <summary>
            授权策略提供器
            </summary>
        </member>
        <member name="P:Furion.Authorization.AppAuthorizationPolicyProvider.FallbackPolicyProvider">
            <summary>
            默认回退策略
            </summary>
        </member>
        <member name="M:Furion.Authorization.AppAuthorizationPolicyProvider.#ctor(Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Authorization.AuthorizationOptions})">
            <summary>
            构造函数
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:Furion.Authorization.AppAuthorizationPolicyProvider.GetDefaultPolicyAsync">
            <summary>
            获取默认策略
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.Authorization.AppAuthorizationPolicyProvider.GetFallbackPolicyAsync">
            <summary>
            获取回退策略
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.Authorization.AppAuthorizationPolicyProvider.GetPolicyAsync(System.String)">
            <summary>
            获取策略
            </summary>
            <param name="policyName"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.Authorization.AppAuthorizeRequirement">
            <summary>
            策略对应的需求
            </summary>
        </member>
        <member name="M:Furion.Authorization.AppAuthorizeRequirement.#ctor(System.String[])">
            <summary>
            构造函数
            </summary>
            <param name="policies"></param>
        </member>
        <member name="P:Furion.Authorization.AppAuthorizeRequirement.Policies">
            <summary>
            策略
            </summary>
        </member>
        <member name="T:Furion.ClayObject.Clay">
            <summary>
            粘土对象
            </summary>
            <remarks>实现动态对象，类似 JavaScript 对象操作</remarks>
        </member>
        <member name="M:Furion.ClayObject.Clay.#ctor(System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="throwOnUndefined">如果设置 false，则读取不存在的值返回 null，默认 true</param>
        </member>
        <member name="M:Furion.ClayObject.Clay.#ctor(System.Xml.Linq.XElement,Furion.ClayObject.Clay.JsonType,System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="element"><see cref="T:System.Xml.Linq.XElement"/></param>
            <param name="type">JSON 类型</param>
            <param name="throwOnUndefined">如果设置 false，则读取不存在的值返回 null，默认 true</param>
        </member>
        <member name="T:Furion.ClayObject.Clay.JsonType">
            <summary>
            JSON 类型
            </summary>
        </member>
        <member name="P:Furion.ClayObject.Clay.IsObject">
            <summary>
            是否是 Object 类型
            </summary>
        </member>
        <member name="P:Furion.ClayObject.Clay.IsArray">
            <summary>
            是否是 Array 类型
            </summary>
        </member>
        <member name="P:Furion.ClayObject.Clay.XmlElement">
            <summary>
            粘土对象 Xml 元数据
            </summary>
        </member>
        <member name="P:Furion.ClayObject.Clay.Length">
            <summary>
            当 Clay 时 数组类型时的长度
            </summary>
        </member>
        <member name="P:Furion.ClayObject.Clay.ThrowOnUndefined">
            <summary>
            配置读取不存在 Key 时行为
            </summary>
            <remarks>如果设置 false，那么返回 null</remarks>
        </member>
        <member name="M:Furion.ClayObject.Clay.Object(System.Boolean)">
            <summary>
            创建空的粘土对象
            </summary>
            <param name="throwOnUndefined">如果设置 false，则读取不存在的值返回 null，默认 true</param>
            <returns><see cref="T:Furion.ClayObject.Clay"/></returns>
        </member>
        <member name="M:Furion.ClayObject.Clay.Object(System.Object,System.Boolean)">
            <summary>
            基于现有对象创建粘土对象
            </summary>
            <param name="obj">对象</param>
            <param name="throwOnUndefined">如果设置 false，则读取不存在的值返回 null，默认 true</param>
            <returns><see cref="T:Furion.ClayObject.Clay"/></returns>
        </member>
        <member name="M:Furion.ClayObject.Clay.Parse(System.String,System.Boolean)">
            <summary>
            基于现有对象创建粘土对象
            </summary>
            <param name="json">JSON 字符串</param>
            <param name="throwOnUndefined">如果设置 false，则读取不存在的值返回 null，默认 true</param>
            <returns><see cref="T:Furion.ClayObject.Clay"/></returns>
        </member>
        <member name="M:Furion.ClayObject.Clay.Parse(System.String,System.Text.Encoding,System.Boolean)">
            <summary>
            基于现有对象创建粘土对象
            </summary>
            <param name="json">JSON 字符串</param>
            <param name="encoding">编码类型</param>
            <param name="throwOnUndefined">如果设置 false，则读取不存在的值返回 null，默认 true</param>
            <returns><see cref="T:Furion.ClayObject.Clay"/></returns>
        </member>
        <member name="M:Furion.ClayObject.Clay.Parse(System.IO.Stream,System.Boolean)">
            <summary>
            基于 Stream 对象创建粘土对象
            </summary>
            <param name="stream"><see cref="T:System.IO.Stream"/></param>
            <param name="throwOnUndefined">如果设置 false，则读取不存在的值返回 null，默认 true</param>
            <returns><see cref="T:Furion.ClayObject.Clay"/></returns>
        </member>
        <member name="M:Furion.ClayObject.Clay.Parse(System.IO.Stream,System.Text.Encoding,System.Boolean)">
            <summary>
            基于 Stream 对象创建粘土对象
            </summary>
            <param name="stream"><see cref="T:System.IO.Stream"/></param>
            <param name="encoding">编码类型</param>
            <param name="throwOnUndefined">如果设置 false，则读取不存在的值返回 null，默认 true</param>
            <returns><see cref="T:Furion.ClayObject.Clay"/></returns>
        </member>
        <member name="M:Furion.ClayObject.Clay.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)">
            <summary>
            重写动态调用方法实现删除行为
            </summary>
            <param name="binder"></param>
            <param name="args"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ClayObject.Clay.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
            <summary>
            重写动态调用成员名称方法实现键是否存在行为
            </summary>
            <param name="binder"></param>
            <param name="args"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ClayObject.Clay.TryConvert(System.Dynamic.ConvertBinder,System.Object@)">
            <summary>
            重写类型转换方法实现粘土对象动态转换
            </summary>
            <param name="binder"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ClayObject.Clay.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)">
            <summary>
            重写根据索引获取值的行为
            </summary>
            <param name="binder"></param>
            <param name="indexes"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ClayObject.Clay.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            重写根据成员名称获取值的行为
            </summary>
            <param name="binder"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ClayObject.Clay.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)">
            <summary>
            重写根据索引设置值的行为
            </summary>
            <param name="binder"></param>
            <param name="indexes"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ClayObject.Clay.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
            <summary>
            重写根据成员名称设置值的行为
            </summary>
            <param name="binder"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ClayObject.Clay.GetDynamicMemberNames">
            <summary>
            重写获取所有动态成员名称行为
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.ClayObject.Clay.ToString">
            <summary>
            重写转换成字符串方法
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.ClayObject.Clay.ClearNullNodes">
            <summary>
            清除 null 节点
            </summary>
        </member>
        <member name="M:Furion.ClayObject.Clay.IsDefined(System.String)">
            <summary>
            判断对象键是否存在
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ClayObject.Clay.IsDefined(System.Int32)">
            <summary>
            判断数组索引是否存在
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ClayObject.Clay.Delete(System.String)">
            <summary>
            根据键删除对象属性
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ClayObject.Clay.Delete(System.Int32)">
            <summary>
            根据索引删除数组元素
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ClayObject.Clay.Deserialize``1">
            <summary>
            将粘土对象反序列化为特定类型
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Furion.ClayObject.Clay.Solidify(System.Object)">
            <summary>
            将粘土对象转换为 object 类型
            </summary>
            <param name="jsonSerializerOptions"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ClayObject.Clay.Solidify``1(System.Object)">
            <summary>
            将粘土对象转换为特定类型
            </summary>
            <typeparam name="T"></typeparam>
            <param name="jsonSerializerOptions"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ClayObject.Clay.ToDictionary(System.Object)">
            <summary>
            将粘土对象转换为字典类型
            </summary>
            <param name="jsonSerializerOptions"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ClayObject.Clay.ConvertTo``1(System.Func{System.Reflection.PropertyInfo,System.Object,System.Object})">
            <summary>
            转换成特定对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="valueProvider">值提供器</param>
            <returns></returns>
        </member>
        <member name="M:Furion.ClayObject.Clay.ConvertTo``1(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},System.Object,System.Func{System.Reflection.PropertyInfo,System.Object,System.Object})">
            <summary>
            将粘土对象转换为特定类型
            </summary>
            <typeparam name="T"></typeparam>
            <param name="properties"></param>
            <param name="clay"></param>
            <param name="valueProvider">值提供器</param>
            <returns></returns>
        </member>
        <member name="M:Furion.ClayObject.Clay.ToValue(System.Xml.Linq.XElement,System.Boolean)">
            <summary>
            XElement 对象转换成 C# 对象
            </summary>
            <param name="element"></param>
            <param name="throwOnUndefined">如果设置 false，则读取不存在的值返回 null，默认 true</param>
            <returns></returns>
        </member>
        <member name="M:Furion.ClayObject.Clay.GetJsonType(System.Object)">
            <summary>
            获取 JSON 类型
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ClayObject.Clay.CreateTypeAttr(Furion.ClayObject.Clay.JsonType)">
            <summary>
            创建 XElement type 属性
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ClayObject.Clay.CreateJsonNode(System.Object)">
            <summary>
            创建 XElement 节点值
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ClayObject.Clay.CreateXArray``1(``0)">
            <summary>
            创建 XStreamingElement 对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ClayObject.Clay.CreateXObject(System.Object)">
            <summary>
            创建 XStreamingElement 对象
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ClayObject.Clay.CreateJsonString(System.Xml.Linq.XStreamingElement)">
            <summary>
            创建 JSON 字符串
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="F:Furion.ClayObject.Clay.jsonType">
            <summary>
            JSON 类型
            </summary>
        </member>
        <member name="M:Furion.ClayObject.Clay.TryGet(System.Xml.Linq.XElement,System.Object@,System.Boolean)">
            <summary>
            读取值
            </summary>
            <param name="element"></param>
            <param name="result"></param>
            <param name="throwOnUndefined"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ClayObject.Clay.TrySet(System.String,System.Object)">
            <summary>
            根据键设置对象值
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ClayObject.Clay.TrySet(System.Int32,System.Object)">
            <summary>
            根据索引设置数组值
            </summary>
            <param name="index"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ClayObject.Clay.Deserialize(System.Type)">
            <summary>
            反序列化
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ClayObject.Clay.DeserializeObject(System.Type)">
            <summary>
            反序列化对象
            </summary>
            <param name="targetType"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ClayObject.Clay.DeserializeValue(System.Xml.Linq.XElement,System.Type,System.Boolean)">
            <summary>
            反序列化值
            </summary>
            <param name="element"></param>
            <param name="elementType"></param>
            <param name="throwOnUndefined">如果设置 false，则读取不存在的值返回 null，默认 true</param>
            <returns></returns>
        </member>
        <member name="M:Furion.ClayObject.Clay.DeserializeArray(System.Type)">
            <summary>
            反序列化数组
            </summary>
            <param name="targetType"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ClayObject.Clay.FindXElement(System.String,System.Boolean@)">
            <summary>
            根据键查找 <see cref="T:System.Xml.Linq.XElement"/> 对象
            </summary>
            <param name="name"></param>
            <param name="isValid"></param>
            <returns></returns>
        </member>
        <member name="F:Furion.ClayObject.Clay.TryVerifyNCName">
            <summary>
            校验 Xml 标签格式
            </summary>
        </member>
        <member name="M:Furion.ClayObject.Clay.GetEnumerator">
            <summary>
            初始化粘土对象枚举器
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.ClayObject.Clay.AsEnumerator``1">
            <summary>
            将粘土对象转换成 IEnumerable{T} 对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.ClayObject.Clay.AsEnumerable">
            <summary>
            转换为枚举对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.ClayObject.Clay.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            内部粘土对象枚举器
            </summary>
            <returns></returns>
        </member>
        <member name="F:Furion.ClayObject.Clay.ToBeConvertStringTypes">
            <summary>
            将被转换成字符串的类型
            </summary>
        </member>
        <member name="T:Furion.ClayObject.ClayArrayEnumerator">
            <summary>
            粘土对象数组类型枚举器实现类
            </summary>
        </member>
        <member name="F:Furion.ClayObject.ClayArrayEnumerator._clay">
            <summary>
            粘土对象
            </summary>
        </member>
        <member name="F:Furion.ClayObject.ClayArrayEnumerator.position">
            <summary>
            当前索引
            </summary>
        </member>
        <member name="M:Furion.ClayObject.ClayArrayEnumerator.#ctor(System.Object)">
            <summary>
            构造函数
            </summary>
            <param name="clay">粘土对象</param>
        </member>
        <member name="M:Furion.ClayObject.ClayArrayEnumerator.MoveNext">
            <summary>
            推进（获取）下一个元素
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.ClayObject.ClayArrayEnumerator.Reset">
            <summary>
            将元素索引恢复初始值
            </summary>
        </member>
        <member name="P:Furion.ClayObject.ClayArrayEnumerator.Current">
            <summary>
            当前元素
            </summary>
        </member>
        <member name="P:Furion.ClayObject.ClayArrayEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            当前元素（内部）
            </summary>
        </member>
        <member name="T:Furion.ClayObject.ClayObjectEnumerator">
            <summary>
            粘土对象对象类型枚举器实现类
            </summary>
        </member>
        <member name="F:Furion.ClayObject.ClayObjectEnumerator._clay">
            <summary>
            粘土对象
            </summary>
        </member>
        <member name="F:Furion.ClayObject.ClayObjectEnumerator.position">
            <summary>
            当前索引
            </summary>
        </member>
        <member name="M:Furion.ClayObject.ClayObjectEnumerator.#ctor(System.Object)">
            <summary>
            构造函数
            </summary>
            <param name="clay">粘土对象</param>
        </member>
        <member name="M:Furion.ClayObject.ClayObjectEnumerator.MoveNext">
            <summary>
            推进（获取）下一个元素
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.ClayObject.ClayObjectEnumerator.Reset">
            <summary>
            将元素索引恢复初始值
            </summary>
        </member>
        <member name="P:Furion.ClayObject.ClayObjectEnumerator.Current">
            <summary>
            当前元素
            </summary>
        </member>
        <member name="P:Furion.ClayObject.ClayObjectEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            当前元素（内部）
            </summary>
        </member>
        <member name="T:Furion.ClayObject.Extensions.DictionaryExtensions">
            <summary>
            字典类型拓展类
            </summary>
        </member>
        <member name="M:Furion.ClayObject.Extensions.DictionaryExtensions.ToDictionary(System.Object)">
            <summary>
            将对象转成字典
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ClayObject.Extensions.DictionaryExtensions.ToDictionaryWithType(System.Object)">
            <summary>
            将对象转字典类型，其中值返回原始类型 Type 类型
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ClayObject.Extensions.DictionaryExtensions.GetValue(System.Object,System.Reflection.MemberInfo)">
            <summary>
            获取成员值
            </summary>
            <param name="obj"></param>
            <param name="member"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.ClayObject.Extensions.ExpandoObjectExtensions">
            <summary>
            ExpandoObject 对象拓展
            </summary>
        </member>
        <member name="M:Furion.ClayObject.Extensions.ExpandoObjectExtensions.ToExpandoObject(System.Object)">
            <summary>
            将对象转 ExpandoObject 类型
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ClayObject.Extensions.ExpandoObjectExtensions.RemoveProperty(System.Dynamic.ExpandoObject,System.String)">
            <summary>
            移除 ExpandoObject 对象属性
            </summary>
            <param name="expandoObject"></param>
            <param name="propertyName"></param>
        </member>
        <member name="M:Furion.ClayObject.Extensions.ExpandoObjectExtensions.Empty(System.Dynamic.ExpandoObject)">
            <summary>
            判断 ExpandoObject 是否为空
            </summary>
            <param name="expandoObject"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ClayObject.Extensions.ExpandoObjectExtensions.HasProperty(System.Dynamic.ExpandoObject,System.String)">
            <summary>
            判断 ExpandoObject 是否拥有某属性
            </summary>
            <param name="expandoObject"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ClayObject.Extensions.ExpandoObjectExtensions.ShallowCopy(System.Dynamic.ExpandoObject)">
            <summary>
            实现 ExpandoObject 浅拷贝
            </summary>
            <param name="expandoObject"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ClayObject.Extensions.ExpandoObjectExtensions.DeepCopy(System.Dynamic.ExpandoObject)">
            <summary>
            实现 ExpandoObject 深度拷贝
            </summary>
            <param name="expandoObject"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ClayObject.Extensions.ExpandoObjectExtensions.Copy(System.Dynamic.ExpandoObject,System.Boolean)">
            <summary>
            拷贝 ExpandoObject 对象
            </summary>
            <param name="original"></param>
            <param name="deep"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.ConfigurableOptions.MapSettingsAttribute">
            <summary>
            重新映射属性配置
            </summary>
        </member>
        <member name="M:Furion.ConfigurableOptions.MapSettingsAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="path">appsetting.json 对应键</param>
        </member>
        <member name="P:Furion.ConfigurableOptions.MapSettingsAttribute.Path">
            <summary>
            对应配置文件中的路径
            </summary>
        </member>
        <member name="T:Furion.ConfigurableOptions.OptionsSettingsAttribute">
            <summary>
            选项配置特性
            </summary>
        </member>
        <member name="M:Furion.ConfigurableOptions.OptionsSettingsAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.ConfigurableOptions.OptionsSettingsAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="path">appsetting.json 对应键</param>
        </member>
        <member name="M:Furion.ConfigurableOptions.OptionsSettingsAttribute.#ctor(System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="postConfigureAll">启动所有实例进行后期配置</param>
        </member>
        <member name="M:Furion.ConfigurableOptions.OptionsSettingsAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="path">appsetting.json 对应键</param>
            <param name="postConfigureAll">启动所有实例进行后期配置</param>
        </member>
        <member name="P:Furion.ConfigurableOptions.OptionsSettingsAttribute.Path">
            <summary>
            对应配置文件中的路径
            </summary>
        </member>
        <member name="P:Furion.ConfigurableOptions.OptionsSettingsAttribute.PostConfigureAll">
            <summary>
            对所有配置实例进行后期配置
            </summary>
        </member>
        <member name="T:Furion.ConfigurableOptions.Penetrates">
            <summary>
            常量、公共方法配置类
            </summary>
        </member>
        <member name="M:Furion.ConfigurableOptions.Penetrates.GetOptionsConfiguration(System.Type)">
            <summary>
            获取选项配置
            </summary>
            <param name="optionsType">选项类型</param>
            <returns></returns>
        </member>
        <member name="M:Furion.ConfigurableOptions.Penetrates.GetOptionsOnStarting``1">
            <summary>
            在主机启动时获取选项
            </summary>
            <remarks>解决 v4.5.2+ 历史版本升级问题</remarks>
            <typeparam name="TOptions"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Furion.ConfigurableOptions.IConfigurableOptions">
            <summary>
            应用选项依赖接口
            </summary>
        </member>
        <member name="T:Furion.ConfigurableOptions.IConfigurableOptions`1">
            <summary>
            选项后期配置
            </summary>
            <typeparam name="TOptions"></typeparam>
        </member>
        <member name="M:Furion.ConfigurableOptions.IConfigurableOptions`1.PostConfigure(`0,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            选项后期配置
            </summary>
            <param name="options"></param>
            <param name="configuration"></param>
        </member>
        <member name="T:Furion.ConfigurableOptions.IConfigurableOptions`2">
            <summary>
            带验证的应用选项依赖接口
            </summary>
            <typeparam name="TOptions"></typeparam>
            <typeparam name="TOptionsValidation"></typeparam>
        </member>
        <member name="T:Furion.ConfigurableOptions.IConfigurableOptionsListener`1">
            <summary>
            带监听的应用选项依赖接口
            </summary>
            <typeparam name="TOptions"></typeparam>
        </member>
        <member name="M:Furion.ConfigurableOptions.IConfigurableOptionsListener`1.OnListener(`0,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            监听
            </summary>
            <param name="options"></param>
            <param name="configuration"></param>
        </member>
        <member name="T:Furion.Configuration.Constants">
            <summary>
            Configuration 模块常量
            </summary>
        </member>
        <member name="T:Furion.Configuration.Constants.Patterns">
            <summary>
            正则表达式常量
            </summary>
        </member>
        <member name="F:Furion.Configuration.Constants.Patterns.ConfigurationFileName">
            <summary>
            配置文件名
            </summary>
        </member>
        <member name="F:Furion.Configuration.Constants.Patterns.ConfigurationFileParameter">
            <summary>
            配置文件参数
            </summary>
        </member>
        <member name="T:Furion.CorsAccessor.Penetrates">
            <summary>
            常量、公共方法配置类
            </summary>
        </member>
        <member name="F:Furion.CorsAccessor.Penetrates._defaultExposedHeaders">
            <summary>
            默认跨域导出响应头 Key
            </summary>
            <remarks>解决 ajax，XMLHttpRequest，axios 不能获取请求头问题</remarks>
        </member>
        <member name="M:Furion.CorsAccessor.Penetrates.SetCorsPolicy(Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicyBuilder,Furion.CorsAccessor.CorsAccessorSettingsOptions,System.Boolean)">
            <summary>
            设置跨域策略
            </summary>
            <param name="builder"></param>
            <param name="corsAccessorSettings"></param>
            <param name="isMiddleware"></param>
        </member>
        <member name="T:Furion.CorsAccessor.CorsAccessorSettingsOptions">
            <summary>
            跨域配置选项
            </summary>
        </member>
        <member name="P:Furion.CorsAccessor.CorsAccessorSettingsOptions.PolicyName">
            <summary>
            策略名称
            </summary>
        </member>
        <member name="P:Furion.CorsAccessor.CorsAccessorSettingsOptions.WithOrigins">
            <summary>
            允许来源域名，没有配置则允许所有来源
            </summary>
        </member>
        <member name="P:Furion.CorsAccessor.CorsAccessorSettingsOptions.WithHeaders">
            <summary>
            请求表头，没有配置则允许所有表头
            </summary>
        </member>
        <member name="P:Furion.CorsAccessor.CorsAccessorSettingsOptions.WithExposedHeaders">
            <summary>
            设置客户端可获取的响应标头
            </summary>
        </member>
        <member name="P:Furion.CorsAccessor.CorsAccessorSettingsOptions.WithMethods">
            <summary>
            设置跨域允许请求谓词，没有配置则允许所有
            </summary>
        </member>
        <member name="P:Furion.CorsAccessor.CorsAccessorSettingsOptions.AllowCredentials">
            <summary>
            是否允许跨域请求中的凭据
            </summary>
        </member>
        <member name="P:Furion.CorsAccessor.CorsAccessorSettingsOptions.SetPreflightMaxAge">
            <summary>
            设置预检过期时间
            </summary>
        </member>
        <member name="P:Furion.CorsAccessor.CorsAccessorSettingsOptions.FixedClientToken">
            <summary>
            修正前端无法获取 Token 问题
            </summary>
        </member>
        <member name="P:Furion.CorsAccessor.CorsAccessorSettingsOptions.SignalRSupport">
            <summary>
            启用 SignalR 跨域支持
            </summary>
        </member>
        <member name="M:Furion.CorsAccessor.CorsAccessorSettingsOptions.PostConfigure(Furion.CorsAccessor.CorsAccessorSettingsOptions,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            后期配置
            </summary>
            <param name="options"></param>
            <param name="configuration"></param>
        </member>
        <member name="T:Furion.DatabaseAccessor.DbParameterAttribute">
            <summary>
            DbParameter 配置特性
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbParameterAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbParameterAttribute.#ctor(System.Data.ParameterDirection)">
            <summary>
            构造函数
            </summary>
            <param name="direction">参数方向</param>
        </member>
        <member name="P:Furion.DatabaseAccessor.DbParameterAttribute.Direction">
            <summary>
            参数输出方向
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.DbParameterAttribute.DbType">
            <summary>
            数据库对应类型
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.DbParameterAttribute.Size">
            <summary>
            大小
            </summary>
            <remarks>Nvarchar/varchar类型需指定</remarks>
        </member>
        <member name="T:Furion.DatabaseAccessor.DbContextPool">
            <summary>
            数据库上下文池
            </summary>
        </member>
        <member name="F:Furion.DatabaseAccessor.DbContextPool.MiniProfilerCategory">
            <summary>
             MiniProfiler 分类名
            </summary>
        </member>
        <member name="F:Furion.DatabaseAccessor.DbContextPool.InjectMiniProfiler">
            <summary>
            MiniProfiler 组件状态
            </summary>
        </member>
        <member name="F:Furion.DatabaseAccessor.DbContextPool.IsPrintDbConnectionInfo">
            <summary>
            是否打印数据库连接信息
            </summary>
        </member>
        <member name="F:Furion.DatabaseAccessor.DbContextPool._dbContexts">
            <summary>
            线程安全的数据库上下文集合
            </summary>
        </member>
        <member name="F:Furion.DatabaseAccessor.DbContextPool._failedDbContexts">
            <summary>
            登记错误的数据库上下文
            </summary>
        </member>
        <member name="F:Furion.DatabaseAccessor.DbContextPool._serviceProvider">
            <summary>
            服务提供器
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbContextPool.#ctor(System.IServiceProvider)">
            <summary>
            构造函数
            </summary>
            <param name="serviceProvider"></param>
        </member>
        <member name="P:Furion.DatabaseAccessor.DbContextPool.DbContextTransaction">
            <summary>
            数据库上下文事务
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbContextPool.GetDbContexts">
            <summary>
            获取所有数据库上下文
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbContextPool.AddToPool(Microsoft.EntityFrameworkCore.DbContext)">
            <summary>
            保存数据库上下文
            </summary>
            <param name="dbContext"></param>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbContextPool.AddToPoolAsync(Microsoft.EntityFrameworkCore.DbContext)">
            <summary>
            保存数据库上下文（异步）
            </summary>
            <param name="dbContext"></param>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbContextPool.SavePoolNow">
            <summary>
            保存数据库上下文池中所有已更改的数据库上下文
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbContextPool.SavePoolNow(System.Boolean)">
            <summary>
            保存数据库上下文池中所有已更改的数据库上下文
            </summary>
            <param name="acceptAllChangesOnSuccess"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbContextPool.SavePoolNowAsync(System.Threading.CancellationToken)">
            <summary>
            保存数据库上下文池中所有已更改的数据库上下文
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbContextPool.SavePoolNowAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            保存数据库上下文池中所有已更改的数据库上下文（异步）
            </summary>
            <param name="acceptAllChangesOnSuccess"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbContextPool.BeginTransaction(System.Boolean)">
            <summary>
            打开事务
            </summary>
            <param name="ensureTransaction"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbContextPool.CommitTransaction(System.Boolean)">
            <summary>
            提交事务
            </summary>
            <param name="withCloseAll">是否自动关闭所有连接</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbContextPool.RollbackTransaction(System.Boolean)">
            <summary>
            回滚事务
            </summary>
            <param name="withCloseAll">是否自动关闭所有连接</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbContextPool.CloseAll">
            <summary>
            释放所有数据库上下文
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbContextPool.ShareTransaction(System.Data.Common.DbTransaction)">
            <summary>
            设置数据库上下文共享事务
            </summary>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbContextPool.Dispose">
            <summary>
            释放所有上下文
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbContextPool.CheckDbContextDispose(Microsoft.EntityFrameworkCore.DbContext)">
            <summary>
            判断数据库上下文是否释放
            </summary>
            <param name="dbContext"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.DatabaseAccessor.IDbContextPool">
            <summary>
            数据库上下文池
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.IDbContextPool.DbContextTransaction">
            <summary>
            数据库上下文事务
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.IDbContextPool.GetDbContexts">
            <summary>
            获取所有数据库上下文
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IDbContextPool.AddToPool(Microsoft.EntityFrameworkCore.DbContext)">
            <summary>
            保存数据库上下文
            </summary>
            <param name="dbContext"></param>
        </member>
        <member name="M:Furion.DatabaseAccessor.IDbContextPool.AddToPoolAsync(Microsoft.EntityFrameworkCore.DbContext)">
            <summary>
            保存数据库上下文（异步）
            </summary>
            <param name="dbContext"></param>
        </member>
        <member name="M:Furion.DatabaseAccessor.IDbContextPool.SavePoolNow">
            <summary>
            保存数据库上下文池中所有已更改的数据库上下文
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IDbContextPool.SavePoolNow(System.Boolean)">
            <summary>
            保存数据库上下文池中所有已更改的数据库上下文
            </summary>
            <param name="acceptAllChangesOnSuccess"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IDbContextPool.SavePoolNowAsync(System.Threading.CancellationToken)">
            <summary>
            保存数据库上下文池中所有已更改的数据库上下文
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IDbContextPool.SavePoolNowAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            保存数据库上下文池中所有已更改的数据库上下文（异步）
            </summary>
            <param name="acceptAllChangesOnSuccess"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IDbContextPool.BeginTransaction(System.Boolean)">
            <summary>
            打开事务
            </summary>
            <param name="ensureTransaction"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IDbContextPool.CommitTransaction(System.Boolean)">
            <summary>
            提交事务
            </summary>
            <param name="withCloseAll">是否自动关闭所有连接</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.IDbContextPool.RollbackTransaction(System.Boolean)">
            <summary>
            回滚事务
            </summary>
            <param name="withCloseAll">是否自动关闭所有连接</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.IDbContextPool.CloseAll">
            <summary>
            关闭所有数据库链接
            </summary>
        </member>
        <member name="T:Furion.DatabaseAccessor.AppDbContext`1">
            <summary>
            默认应用数据库上下文
            </summary>
            <typeparam name="TDbContext">数据库上下文</typeparam>
        </member>
        <member name="M:Furion.DatabaseAccessor.AppDbContext`1.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions{`0})">
            <summary>
            构造函数
            </summary>
            <param name="options"></param>
        </member>
        <member name="T:Furion.DatabaseAccessor.AppDbContext`2">
            <summary>
            应用数据库上下文
            </summary>
            <typeparam name="TDbContext">数据库上下文</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
        </member>
        <member name="M:Furion.DatabaseAccessor.AppDbContext`2.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions{`0})">
            <summary>
            构造函数
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:Furion.DatabaseAccessor.AppDbContext`2.SavingChangesEvent(Microsoft.EntityFrameworkCore.Diagnostics.DbContextEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult{System.Int32})">
            <summary>
            数据库上下文提交更改之前执行事件
            </summary>
            <param name="eventData"></param>
            <param name="result"></param>
        </member>
        <member name="M:Furion.DatabaseAccessor.AppDbContext`2.SavedChangesEvent(Microsoft.EntityFrameworkCore.Diagnostics.SaveChangesCompletedEventData,System.Int32)">
            <summary>
            数据库上下文提交更改成功执行事件
            </summary>
            <param name="eventData"></param>
            <param name="result"></param>
        </member>
        <member name="M:Furion.DatabaseAccessor.AppDbContext`2.SaveChangesFailedEvent(Microsoft.EntityFrameworkCore.Diagnostics.DbContextErrorEventData)">
            <summary>
            数据库上下文提交更改失败执行事件
            </summary>
            <param name="eventData"></param>
        </member>
        <member name="M:Furion.DatabaseAccessor.AppDbContext`2.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)">
            <summary>
            数据库上下文初始化调用方法
            </summary>
            <param name="optionsBuilder"></param>
        </member>
        <member name="M:Furion.DatabaseAccessor.AppDbContext`2.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            数据库上下文配置模型调用方法
            </summary>
            <param name="modelBuilder"></param>
        </member>
        <member name="P:Furion.DatabaseAccessor.AppDbContext`2.InsertOrUpdateIgnoreNullValues">
            <summary>
            新增或更新忽略空值（默认值）
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.AppDbContext`2.EnabledEntityStateTracked">
            <summary>
            启用实体跟踪（默认值）
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.AppDbContext`2.EnabledEntityChangedListener">
            <summary>
            启用实体数据更改监听
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.AppDbContext`2.FailedAutoRollback">
            <summary>
            保存失败自动回滚
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.AppDbContext`2.UseUnitOfWork">
            <summary>
            支持工作单元共享事务
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.AppDbContext`2.Tenant">
            <summary>
            获取租户信息
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.AppDbContext`2.BuildTenantQueryFilter(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,Microsoft.EntityFrameworkCore.DbContext,System.String)">
            <summary>
            构建基于表租户查询过滤器表达式
            </summary>
            <param name="entityBuilder">实体类型构建器</param>
            <param name="dbContext">数据库上下文</param>
            <param name="onTableTenantId">多租户Id属性名</param>
            <returns>表达式</returns>
        </member>
        <member name="P:Furion.DatabaseAccessor.AppDbContext`2.ChangeTrackerEntities">
            <summary>
            正在更改并跟踪的数据
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.AppDbContext`2.SavingChangesEventInner(Microsoft.EntityFrameworkCore.Diagnostics.DbContextEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult{System.Int32})">
            <summary>
            内部数据库上下文提交更改之前执行事件
            </summary>
            <param name="eventData"></param>
            <param name="result"></param>
        </member>
        <member name="M:Furion.DatabaseAccessor.AppDbContext`2.SavedChangesEventInner(Microsoft.EntityFrameworkCore.Diagnostics.SaveChangesCompletedEventData,System.Int32)">
            <summary>
            内部数据库上下文提交更改成功执行事件
            </summary>
            <param name="eventData"></param>
            <param name="result"></param>
        </member>
        <member name="M:Furion.DatabaseAccessor.AppDbContext`2.SaveChangesFailedEventInner(Microsoft.EntityFrameworkCore.Diagnostics.DbContextErrorEventData)">
            <summary>
            内部数据库上下文提交更改失败执行事件
            </summary>
            <param name="eventData"></param>
        </member>
        <member name="M:Furion.DatabaseAccessor.AppDbContext`2.AttachEntityChangedListener(Microsoft.EntityFrameworkCore.DbContext,System.String,System.Collections.Generic.Dictionary{Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry,Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues})">
            <summary>
            附加实体改变监听
            </summary>
            <param name="dbContext"></param>
            <param name="triggerMethodName"></param>
            <param name="changeTrackerEntities"></param>
        </member>
        <member name="T:Furion.DatabaseAccessor.AppDbContextAttribute">
            <summary>
            数据库上下文配置特性
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.AppDbContextAttribute.#ctor(System.Type[])">
            <summary>
            默认构造函数
            </summary>
            <param name="slaveDbContextLocators"></param>
        </member>
        <member name="M:Furion.DatabaseAccessor.AppDbContextAttribute.#ctor(System.String,System.Type[])">
            <summary>
            构造函数
            </summary>
            <param name="connectionMetadata">支持数据库连接字符串，配置文件的 ConnectionStrings 中的Key或配置文件的完整的配置路径，如果是内存数据库，则为数据库名称</param>
            <param name="slaveDbContextLocators"></param>
        </member>
        <member name="M:Furion.DatabaseAccessor.AppDbContextAttribute.#ctor(System.String,System.String,System.Type[])">
            <summary>
            构造函数
            </summary>
            <param name="connectionMetadata">支持数据库连接字符串，配置文件的 ConnectionStrings 中的Key或配置文件的完整的配置路径，如果是内存数据库，则为数据库名称</param>
            <param name="providerName"></param>
            <param name="slaveDbContextLocators"></param>
        </member>
        <member name="P:Furion.DatabaseAccessor.AppDbContextAttribute.ConnectionMetadata">
            <summary>
            数据库连接元数据
            </summary>
            <remarks>支持数据库连接字符串，配置文件的 ConnectionStrings 中的Key或配置文件的完整的配置路径，如果是内存数据库，则为数据库名称</remarks>
        </member>
        <member name="P:Furion.DatabaseAccessor.AppDbContextAttribute.ProviderName">
            <summary>
            数据库提供器名称
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.AppDbContextAttribute.Mode">
            <summary>
            数据库上下文模式
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.AppDbContextAttribute.TablePrefix">
            <summary>
            表统一前缀
            </summary>
            <remarks>前缀不能包含 . 和特殊符号，可使用下划线或短杆线</remarks>
        </member>
        <member name="P:Furion.DatabaseAccessor.AppDbContextAttribute.TableSuffix">
            <summary>
            表统一后缀
            </summary>
            <remarks>后缀不能包含 . 和特殊符号，可使用下划线或短杆线</remarks>
        </member>
        <member name="P:Furion.DatabaseAccessor.AppDbContextAttribute.SlaveDbContextLocators">
            <summary>
            指定从库定位器
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.AppDbContextAttribute.UseSnakeCaseNaming">
            <summary>
            表名使用蛇形命名
            </summary>
        </member>
        <member name="T:Furion.DatabaseAccessor.AppDbContextBuilder">
            <summary>
            数据库上下文构建器
            </summary>
        </member>
        <member name="F:Furion.DatabaseAccessor.AppDbContextBuilder.EntityCorrelationTypes">
            <summary>
            数据库实体相关类型
            </summary>
        </member>
        <member name="F:Furion.DatabaseAccessor.AppDbContextBuilder.DbFunctionMethods">
            <summary>
            数据库函数方法集合
            </summary>
        </member>
        <member name="F:Furion.DatabaseAccessor.AppDbContextBuilder.ModelBuildEntityMethod">
            <summary>
            创建数据库实体方法
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.AppDbContextBuilder.#cctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.AppDbContextBuilder.ConfigureDbContextEntity(Microsoft.EntityFrameworkCore.ModelBuilder,Microsoft.EntityFrameworkCore.DbContext,System.Type)">
            <summary>
            配置数据库上下文实体
            </summary>
            <param name="modelBuilder">模型构建器</param>
            <param name="dbContext">数据库上下文</param>
            <param name="dbContextLocator">数据库上下文定位器</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.AppDbContextBuilder.CreateEntityTypeBuilder(System.Type,Microsoft.EntityFrameworkCore.ModelBuilder,Microsoft.EntityFrameworkCore.DbContext,System.Type,System.Type,Furion.DatabaseAccessor.DbContextCorrelationType,Furion.DatabaseAccessor.AppDbContextAttribute)">
            <summary>
            创建实体类型构建器
            </summary>
            <param name="type">数据库关联类型</param>
            <param name="modelBuilder">模型构建器</param>
            <param name="dbContext">数据库上下文</param>
            <param name="dbContextType">数据库上下文类型</param>
            <param name="dbContextLocator">数据库上下文定位器</param>
            <param name="dbContextCorrelationType"></param>
            <param name="appDbContextAttribute">数据库上下文特性</param>
            <returns>EntityTypeBuilder</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.AppDbContextBuilder.ConfigureEntityTableName(System.Type,Furion.DatabaseAccessor.AppDbContextAttribute,Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,Microsoft.EntityFrameworkCore.DbContext,System.Type)">
            <summary>
            配置实体表名
            </summary>
            <param name="type">实体类型</param>
            <param name="appDbContextAttribute">数据库上下文特性</param>
            <param name="entityTypeBuilder">实体类型构建器</param>
            <param name="dbContext">数据库上下文</param>
            <param name="dbContextType">数据库上下文类型</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.AppDbContextBuilder.ConfigureEntityMutableTableName(System.Type,Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,Microsoft.EntityFrameworkCore.DbContext,System.Type,Furion.DatabaseAccessor.DbContextCorrelationType)">
            <summary>
            配置实体动态表名
            </summary>
            <param name="entityType">实体类型</param>
            <param name="entityBuilder">实体类型构建器</param>
            <param name="dbContext">数据库上下文</param>
            <param name="dbContextLocator">数据库上下文定位器</param>
            <param name="dbContextCorrelationType">数据库实体关联类型</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.AppDbContextBuilder.ConfigureEntityNoKeyType(System.Type,Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.Collections.Generic.List{System.Type})">
            <summary>
            配置无键实体类型
            </summary>
            <param name="entityType">实体类型</param>
            <param name="entityBuilder">实体类型构建器</param>
            <param name="EntityNoKeyTypes">无键实体列表</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.AppDbContextBuilder.LoadModelBuilderOnCreating(Microsoft.EntityFrameworkCore.ModelBuilder,Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,Microsoft.EntityFrameworkCore.DbContext,System.Type,System.Collections.Generic.List{Furion.DatabaseAccessor.IPrivateModelBuilderFilter})">
            <summary>
            加载模型构建筛选器创建之前拦截
            </summary>
            <param name="modelBuilder">模型构建器</param>
            <param name="entityBuilder">实体类型构建器</param>
            <param name="dbContext">数据库上下文</param>
            <param name="dbContextLocator">数据库上下文定位器</param>
            <param name="modelBuilderFilterInstances">模型构建器筛选器实例</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.AppDbContextBuilder.LoadModelBuilderOnCreated(Microsoft.EntityFrameworkCore.ModelBuilder,Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,Microsoft.EntityFrameworkCore.DbContext,System.Type,System.Collections.Generic.List{Furion.DatabaseAccessor.IPrivateModelBuilderFilter})">
            <summary>
            加载模型构建筛选器创建之后拦截
            </summary>
            <param name="modelBuilder">模型构建器</param>
            <param name="entityBuilder">实体类型构建器</param>
            <param name="dbContext">数据库上下文</param>
            <param name="dbContextLocator">数据库上下文定位器</param>
            <param name="modelBuilderFilterInstances">模型构建器筛选器实例</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.AppDbContextBuilder.ConfigureEntityTypeBuilder(System.Type,Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,Microsoft.EntityFrameworkCore.DbContext,System.Type,Furion.DatabaseAccessor.DbContextCorrelationType)">
            <summary>
            配置数据库实体类型构建器
            </summary>
            <param name="entityType">实体类型</param>
            <param name="entityBuilder">实体类型构建器</param>
            <param name="dbContext">数据库上下文</param>
            <param name="dbContextLocator">数据库上下文定位器</param>
            <param name="dbContextCorrelationType">数据库实体关联类型</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.AppDbContextBuilder.ConfigureEntitySeedData(System.Type,Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,Microsoft.EntityFrameworkCore.DbContext,System.Type,Furion.DatabaseAccessor.DbContextCorrelationType)">
            <summary>
            配置数据库实体种子数据
            </summary>
            <param name="entityType">实体类型</param>
            <param name="entityBuilder">实体类型构建器</param>
            <param name="dbContext">数据库上下文</param>
            <param name="dbContextLocator">数据库上下文定位器</param>
            <param name="dbContextCorrelationType">数据库实体关联类型</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.AppDbContextBuilder.ConfigureDbFunctions(Microsoft.EntityFrameworkCore.ModelBuilder,System.Type)">
            <summary>
            配置数据库函数
            </summary>
            <param name="modelBuilder">模型构建器</param>
            <param name="dbContextLocator">数据库上下文定位器</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.AppDbContextBuilder.IsInThisDbContext(System.Type,System.Type)">
            <summary>
            判断当前类型是否在数据库上下文中
            </summary>
            <param name="dbContextLocator">数据库上下文定位器</param>
            <param name="entityCorrelationType">数据库实体关联类型</param>
            <returns>bool</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.AppDbContextBuilder.IsInThisDbContext(System.Type,System.Reflection.MethodInfo)">
            <summary>
            判断当前函数是否在数据库上下文中
            </summary>
            <param name="dbContextLocator">数据库上下文定位器</param>
            <param name="method">标识为数据库的函数</param>
            <returns>bool</returns>
        </member>
        <member name="F:Furion.DatabaseAccessor.AppDbContextBuilder.DbContextLocatorCorrelationTypes">
            <summary>
            数据库上下文定位器关联类型集合
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.AppDbContextBuilder.GetDbContextCorrelationType(Microsoft.EntityFrameworkCore.DbContext,System.Type)">
            <summary>
            获取当前数据库上下文关联类型
            </summary>
            <param name="dbContext">数据库上下文</param>
            <param name="dbContextLocator">数据库上下文定位器</param>
            <returns>DbContextCorrelationType</returns>
        </member>
        <member name="T:Furion.DatabaseAccessor.DbContextCorrelationType">
            <summary>
            数据库上下文关联类型
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbContextCorrelationType.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.DbContextCorrelationType.DbContextLocator">
            <summary>
            关联的数据库上下文
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.DbContextCorrelationType.Types">
            <summary>
            所有关联类型
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.DbContextCorrelationType.EntityTypes">
            <summary>
            实体类型集合
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.DbContextCorrelationType.EntityNoKeyTypes">
            <summary>
            无键实体类型集合
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.DbContextCorrelationType.EntityTypeBuilderTypes">
            <summary>
            实体构建器类型集合
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.DbContextCorrelationType.EntitySeedDataTypes">
            <summary>
            种子数据类型集合
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.DbContextCorrelationType.EntityChangedTypes">
            <summary>
            实体数据改变类型
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.DbContextCorrelationType.ModelBuilderFilterTypes">
            <summary>
            模型构建筛选器类型集合
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.DbContextCorrelationType.EntityMutableTableTypes">
            <summary>
            可变表实体类型集合
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.DbContextCorrelationType.DbFunctionMethods">
            <summary>
            数据库函数方法集合
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.DbContextCorrelationType.ModelBuilderFilterInstances">
            <summary>
            模型构建器筛选器实例
            </summary>
        </member>
        <member name="T:Furion.DatabaseAccessor.DynamicModelCacheKeyFactory">
            <summary>
            动态模型缓存工厂
            </summary>
            <remarks>主要用来实现数据库分表分库</remarks>
        </member>
        <member name="F:Furion.DatabaseAccessor.DynamicModelCacheKeyFactory.cacheKey">
            <summary>
            动态模型缓存Key
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.DynamicModelCacheKeyFactory.RebuildModels">
            <summary>
            重写构建模型
            </summary>
            <remarks>动态切换表之后需要调用该方法</remarks>
        </member>
        <member name="M:Furion.DatabaseAccessor.DynamicModelCacheKeyFactory.Create(Microsoft.EntityFrameworkCore.DbContext,System.Boolean)">
            <summary>
            更新模型缓存
            </summary>
            <param name="context"></param>
            <param name="designTime"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.DatabaseAccessor.DbContextMode">
            <summary>
            数据库上下文模式
            </summary>
        </member>
        <member name="F:Furion.DatabaseAccessor.DbContextMode.Cached">
            <summary>
            缓存模型数据库上下文
            <para>
            OnModelCreating 只会初始化一次
            </para>
            </summary>
        </member>
        <member name="F:Furion.DatabaseAccessor.DbContextMode.Dynamic">
            <summary>
            动态模型数据库上下文
            <para>
            OnModelCreating 每次都会调用
            </para>
            </summary>
        </member>
        <member name="T:Furion.DatabaseAccessor.Db">
            <summary>
            数据库公开类
            </summary>
        </member>
        <member name="F:Furion.DatabaseAccessor.Db.MigrationAssemblyName">
            <summary>
            迁移类库名称
            </summary>
        </member>
        <member name="F:Furion.DatabaseAccessor.Db.CustomizeMultiTenants">
            <summary>
            是否启用自定义租户类型
            </summary>
        </member>
        <member name="F:Furion.DatabaseAccessor.Db.OnTableTenantId">
            <summary>
            基于表的多租户外键名
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.Db.GetRepository(System.IServiceProvider)">
            <summary>
            获取非泛型仓储
            </summary>
            <param name="serviceProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Db.GetRepository``1(System.IServiceProvider)">
            <summary>
            获取实体仓储
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="serviceProvider"></param>
            <returns>IRepository{TEntity}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Db.GetRepository``2(System.IServiceProvider)">
            <summary>
            获取实体仓储
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="serviceProvider"></param>
            <returns>IRepository{TEntity, TDbContextLocator}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Db.GetRepository``1(System.Type,System.IServiceProvider)">
            <summary>
            根据定位器类型获取仓储
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="dbContextLocator"></param>
            <param name="serviceProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Db.GetDbRepository``1(System.IServiceProvider)">
            <summary>
            获取特定数据库上下文仓储
            </summary>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="serviceProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Db.GetSqlRepository(System.IServiceProvider)">
            <summary>
            获取Sql仓储
            </summary>
            <param name="serviceProvider"></param>
            <returns>ISqlRepository</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Db.GetSqlRepository``1(System.IServiceProvider)">
            <summary>
            获取Sql仓储
            </summary>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="serviceProvider"></param>
            <returns>ISqlRepository{TDbContextLocator}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Db.GetMSRepository(System.IServiceProvider)">
            <summary>
            获取随机主从库仓储
            </summary>
            <param name="serviceProvider"></param>
            <returns>ISqlRepository</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Db.GetMSRepository``1(System.IServiceProvider)">
            <summary>
            获取随机主从库仓储
            </summary>
            <typeparam name="TMasterDbContextLocator">主库数据库上下文定位器</typeparam>
            <param name="serviceProvider"></param>
            <returns>IMSRepository{TDbContextLocator}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Db.GetSqlProxy``1(System.IServiceProvider)">
            <summary>
            获取 Sql 代理
            </summary>
            <param name="serviceProvider"></param>
            <returns>ISqlRepository</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Db.GetDbContext(System.IServiceProvider)">
            <summary>
            获取默认数据库上下文
            </summary>
            <param name="serviceProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Db.GetDbContext``1(System.IServiceProvider)">
            <summary>
            获取特定数据库上下文
            </summary>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="serviceProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Db.GetDbContext(System.Type,System.IServiceProvider)">
            <summary>
            获取特定数据库上下文
            </summary>
            <param name="dbContextLocator">数据库上下文定位器</param>
            <param name="serviceProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Db.GetNewDbContext(System.IServiceProvider,Microsoft.EntityFrameworkCore.DbContextOptions)">
            <summary>
            获取新的默认数据库上下文（手动 using 释放）
            </summary>
            <param name="serviceProvider"></param>
            <param name="contextOptions"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Db.GetNewDbContext``1(System.IServiceProvider,Microsoft.EntityFrameworkCore.DbContextOptions)">
            <summary>
            获取新的特定数据库上下文（手动 using 释放）
            </summary>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="serviceProvider"></param>
            <param name="contextOptions"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Db.GetNewDbContext(System.Type,System.IServiceProvider,Microsoft.EntityFrameworkCore.DbContextOptions)">
            <summary>
            获取新的特定数据库上下文（手动 using 释放）
            </summary>
            <param name="dbContextLocator">数据库上下文定位器</param>
            <param name="serviceProvider"></param>
            <param name="contextOptions"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Db.CreateDbContext(System.IServiceProvider,Microsoft.EntityFrameworkCore.DbContextOptions)">
            <summary>
            获取新的默认数据库上下文（手动 using 释放）
            </summary>
            <param name="serviceProvider"></param>
            <param name="contextOptions"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Db.CreateDbContext``1(System.IServiceProvider,Microsoft.EntityFrameworkCore.DbContextOptions)">
            <summary>
            获取新的特定数据库上下文（手动 using 释放）
            </summary>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="serviceProvider"></param>
            <param name="contextOptions"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Db.CreateDbContext(System.Type,System.IServiceProvider,Microsoft.EntityFrameworkCore.DbContextOptions)">
            <summary>
            获取新的特定数据库上下文（手动 using 释放）
            </summary>
            <param name="dbContextLocator">数据库上下文定位器</param>
            <param name="serviceProvider"></param>
            <param name="contextOptions"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.DatabaseAccessor.RelationalDiagnosticListener">
            <summary>
            监听 EFCore 操作进程
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.RelationalDiagnosticListener.ListenerName">
            <summary>
            监听进程名
            </summary>
        </member>
        <member name="F:Furion.DatabaseAccessor.RelationalDiagnosticListener._commands">
            <summary>
            操作命令集合
            </summary>
        </member>
        <member name="F:Furion.DatabaseAccessor.RelationalDiagnosticListener._opening">
            <summary>
            操作命令集合
            </summary>
        </member>
        <member name="F:Furion.DatabaseAccessor.RelationalDiagnosticListener._closing">
            <summary>
            操作命令集合
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.RelationalDiagnosticListener.OnCompleted">
            <summary>
            操作完成监听
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.RelationalDiagnosticListener.OnError(System.Exception)">
            <summary>
            操作错误监听
            </summary>
            <param name="error"></param>
        </member>
        <member name="M:Furion.DatabaseAccessor.RelationalDiagnosticListener.OnNext(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            操作过程监听
            </summary>
            <param name="kv"></param>
        </member>
        <member name="T:Furion.DatabaseAccessor.ManualAttribute">
            <summary>
            手动配置实体特性
            </summary>
            <remarks>支持类和方法</remarks>
        </member>
        <member name="T:Furion.DatabaseAccessor.QueryableFunctionAttribute">
            <summary>
            实体函数配置特性
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.QueryableFunctionAttribute.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="name">函数名</param>
            <param name="schema">架构名</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.QueryableFunctionAttribute.#ctor(System.String,System.String,System.Type[])">
            <summary>
            构造函数
            </summary>
            <param name="name">函数名</param>
            <param name="schema">架构名</param>
            <param name="dbContextLocators">数据库上下文定位器</param>
        </member>
        <member name="P:Furion.DatabaseAccessor.QueryableFunctionAttribute.DbContextLocators">
            <summary>
            数据库上下文定位器
            </summary>
        </member>
        <member name="T:Furion.DatabaseAccessor.SuppressChangedListenerAttribute">
            <summary>
            禁止实体监听
            </summary>
        </member>
        <member name="T:Furion.DatabaseAccessor.IEntityChangedListener`1">
            <summary>
            实体数据改变监听依赖接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IEntityChangedListener`2">
            <summary>
            实体数据改变监听依赖接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IEntityChangedListener`3">
            <summary>
            实体数据改变监听依赖接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IEntityChangedListener`4">
            <summary>
            实体数据改变监听依赖接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IEntityChangedListener`5">
            <summary>
            实体数据改变监听依赖接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IEntityChangedListener`6">
            <summary>
            实体数据改变监听依赖接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator5">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IEntityChangedListener`7">
            <summary>
            实体数据改变监听依赖接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator5">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator6">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IEntityChangedListener`8">
            <summary>
            实体数据改变监听依赖接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator5">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator6">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator7">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IEntityChangedListener`9">
            <summary>
            实体数据改变监听依赖接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator5">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator6">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator7">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator8">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IPrivateEntityChangedListener`1">
            <summary>
            实体数据改变监听依赖接口（禁止外部继承）
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateEntityChangedListener`1.OnChanging(`0,Microsoft.EntityFrameworkCore.DbContext,System.Type,Microsoft.EntityFrameworkCore.EntityState)">
            <summary>
            监听数据改变之前（仅支持EFCore操作）
            </summary>
            <param name="entity"></param>
            <param name="dbContext"></param>
            <param name="dbContextLocator"></param>
            <param name="state"></param>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateEntityChangedListener`1.OnChanged(`0,`0,Microsoft.EntityFrameworkCore.DbContext,System.Type,Microsoft.EntityFrameworkCore.EntityState)">
            <summary>
            监听数据改变之后（仅支持EFCore操作）
            </summary>
            <param name="newEntity"></param>
            <param name="oldEntity"></param>
            <param name="dbContext"></param>
            <param name="dbContextLocator"></param>
            <param name="state"></param>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateEntityChangedListener`1.OnChangeFailed(`0,Microsoft.EntityFrameworkCore.DbContext,System.Type,Microsoft.EntityFrameworkCore.EntityState)">
            <summary>
            监听数据改变失败（仅支持EFCore操作）
            </summary>
            <param name="entity"></param>
            <param name="dbContext"></param>
            <param name="dbContextLocator"></param>
            <param name="state"></param>
        </member>
        <member name="T:Furion.DatabaseAccessor.IEntityMutableTable`1">
            <summary>
            动态表名依赖接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IEntityMutableTable`2">
            <summary>
            动态表名依赖接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IEntityMutableTable`3">
            <summary>
            动态表名依赖接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IEntityMutableTable`4">
            <summary>
            动态表名依赖接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IEntityMutableTable`5">
            <summary>
            动态表名依赖接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IEntityMutableTable`6">
            <summary>
            动态表名依赖接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator5">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IEntityMutableTable`7">
            <summary>
            动态表名依赖接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator5">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator6">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IEntityMutableTable`8">
            <summary>
            动态表名依赖接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator5">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator6">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator7">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IEntityMutableTable`9">
            <summary>
            动态表名依赖接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator5">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator6">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator7">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator8">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IPrivateEntityMutableTable`1">
            <summary>
            动态表名依赖接口（禁止外部继承）
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateEntityMutableTable`1.GetTableName(Microsoft.EntityFrameworkCore.DbContext,System.Type)">
            <summary>
            获取表名
            </summary>
            <param name="dbContext"></param>
            <param name="dbContextLocator"></param>
            <returns>至少包含一个元素，最多不能超过两个。第一个元素为表名，第二个元素为 schema 架构名</returns>
        </member>
        <member name="T:Furion.DatabaseAccessor.IEntitySeedData`1">
            <summary>
            数据库种子数据依赖接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IEntitySeedData`2">
            <summary>
            数据库种子数据依赖接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IEntitySeedData`3">
            <summary>
            数据库种子数据依赖接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IEntitySeedData`4">
            <summary>
            数据库种子数据依赖接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IEntitySeedData`5">
            <summary>
            数据库种子数据依赖接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IEntitySeedData`6">
            <summary>
            数据库种子数据依赖接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator5">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IEntitySeedData`7">
            <summary>
            数据库种子数据依赖接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator5">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator6">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IEntitySeedData`8">
            <summary>
            数据库种子数据依赖接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator5">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator6">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator7">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IEntitySeedData`9">
            <summary>
            数据库种子数据依赖接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator5">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator6">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator7">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator8">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IPrivateEntitySeedData`1">
            <summary>
            数据库种子数据依赖接口（禁止外部继承）
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateEntitySeedData`1.HasData(Microsoft.EntityFrameworkCore.DbContext,System.Type)">
            <summary>
            配置种子数据
            </summary>
            <param name="dbContext">数据库上下文</param>
            <param name="dbContextLocator">数据库上下文定位器</param>
            <returns></returns>
        </member>
        <member name="T:Furion.DatabaseAccessor.IEntityTypeBuilder`1">
            <summary>
            数据库实体类型配置依赖接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IEntityTypeBuilder`2">
            <summary>
            数据库实体类型配置依赖接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IEntityTypeBuilder`3">
            <summary>
            数据库实体类型配置依赖接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IEntityTypeBuilder`4">
            <summary>
            数据库实体类型配置依赖接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IEntityTypeBuilder`5">
            <summary>
            数据库实体类型配置依赖接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IEntityTypeBuilder`6">
            <summary>
            数据库实体类型配置依赖接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator5">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IEntityTypeBuilder`7">
            <summary>
            数据库实体类型配置依赖接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator5">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator6">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IEntityTypeBuilder`8">
            <summary>
            数据库实体类型配置依赖接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator5">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator6">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator7">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IEntityTypeBuilder`9">
            <summary>
            数据库实体类型配置依赖接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator5">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator6">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator7">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator8">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IPrivateEntityTypeBuilder`1">
            <summary>
            数据库实体类型配置依赖接口（禁止外部继承）
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateEntityTypeBuilder`1.Configure(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0},Microsoft.EntityFrameworkCore.DbContext,System.Type)">
            <summary>
            实体类型配置
            </summary>
            <param name="entityBuilder">实体类型构建器</param>
            <param name="dbContext">数据库上下文</param>
            <param name="dbContextLocator">数据库上下文定位器</param>
        </member>
        <member name="T:Furion.DatabaseAccessor.IModelBuilderFilter">
            <summary>
            数据库模型构建筛选器依赖接口
            </summary>
        </member>
        <member name="T:Furion.DatabaseAccessor.IModelBuilderFilter`1">
            <summary>
            数据库模型构建筛选器依赖接口
            </summary>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IModelBuilderFilter`2">
            <summary>
            数据库模型构建筛选器依赖接口
            </summary>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IModelBuilderFilter`3">
            <summary>
            数据库模型构建筛选器依赖接口
            </summary>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IModelBuilderFilter`4">
            <summary>
            数据库模型构建筛选器依赖接口
            </summary>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IModelBuilderFilter`5">
            <summary>
            数据库模型构建筛选器依赖接口
            </summary>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator5">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IModelBuilderFilter`6">
            <summary>
            数据库模型构建筛选器依赖接口
            </summary>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator5">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator6">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IModelBuilderFilter`7">
            <summary>
            数据库模型构建筛选器依赖接口
            </summary>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator5">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator6">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator7">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IModelBuilderFilter`8">
            <summary>
            数据库模型构建筛选器依赖接口
            </summary>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator5">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator6">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator7">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator8">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IPrivateModelBuilderFilter">
            <summary>
            数据库模型构建筛选器依赖接口（禁止外部继承）
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateModelBuilderFilter.OnCreating(Microsoft.EntityFrameworkCore.ModelBuilder,Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,Microsoft.EntityFrameworkCore.DbContext,System.Type)">
            <summary>
            模型构建之前
            </summary>
            <param name="modelBuilder">模型构建器</param>
            <param name="entityBuilder">实体构建器</param>
            <param name="dbContext">数据库上下文</param>
            <param name="dbContextLocator">数据库上下文定位器</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateModelBuilderFilter.OnCreated(Microsoft.EntityFrameworkCore.ModelBuilder,Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,Microsoft.EntityFrameworkCore.DbContext,System.Type)">
            <summary>
            模型构建之后
            </summary>
            <param name="modelBuilder">模型构建器</param>
            <param name="entityBuilder">实体构建器</param>
            <param name="dbContext">数据库上下文</param>
            <param name="dbContextLocator">数据库上下文定位器</param>
        </member>
        <member name="T:Furion.DatabaseAccessor.IPrivateModelBuilder">
            <summary>
            数据库模型构建器依赖（禁止直接继承）
            </summary>
            <remarks>
            对应 <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)"/>
            </remarks>
        </member>
        <member name="T:Furion.DatabaseAccessor.Entity">
            <summary>
            数据库实体依赖基类
            </summary>
        </member>
        <member name="T:Furion.DatabaseAccessor.Entity`1">
            <summary>
            数据库实体依赖基类
            </summary>
            <typeparam name="TKey">主键类型</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.Entity`2">
            <summary>
            数据库实体依赖基类
            </summary>
            <typeparam name="TKey">主键类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.Entity`3">
            <summary>
            数据库实体依赖基类
            </summary>
            <typeparam name="TKey">主键类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.Entity`4">
            <summary>
            数据库实体依赖基类
            </summary>
            <typeparam name="TKey">主键类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.Entity`5">
            <summary>
            数据库实体依赖基类
            </summary>
            <typeparam name="TKey">主键类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.Entity`6">
            <summary>
            数据库实体依赖基类
            </summary>
            <typeparam name="TKey">主键类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator5">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.Entity`7">
            <summary>
            数据库实体依赖基类
            </summary>
            <typeparam name="TKey">主键类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator5">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator6">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.Entity`8">
            <summary>
            数据库实体依赖基类
            </summary>
            <typeparam name="TKey">主键类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator5">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator6">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator7">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.Entity`9">
            <summary>
            数据库实体依赖基类
            </summary>
            <typeparam name="TKey">主键类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator5">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator6">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator7">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator8">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.PrivateEntity`1">
            <summary>
            数据库实体依赖基类（禁止外部继承）
            </summary>
            <typeparam name="TKey">主键类型</typeparam>
        </member>
        <member name="P:Furion.DatabaseAccessor.PrivateEntity`1.CreatedTime">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.PrivateEntity`1.UpdatedTime">
            <summary>
            更新时间
            </summary>
        </member>
        <member name="T:Furion.DatabaseAccessor.EntityBase">
            <summary>
            数据库实体依赖基类
            </summary>
        </member>
        <member name="T:Furion.DatabaseAccessor.EntityBase`1">
            <summary>
            数据库实体依赖基类
            </summary>
            <typeparam name="TKey">主键类型</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.EntityBase`2">
            <summary>
            数据库实体依赖基类
            </summary>
            <typeparam name="TKey">主键类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.EntityBase`3">
            <summary>
            数据库实体依赖基类
            </summary>
            <typeparam name="TKey">主键类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.EntityBase`4">
            <summary>
            数据库实体依赖基类
            </summary>
            <typeparam name="TKey">主键类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.EntityBase`5">
            <summary>
            数据库实体依赖基类
            </summary>
            <typeparam name="TKey">主键类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.EntityBase`6">
            <summary>
            数据库实体依赖基类
            </summary>
            <typeparam name="TKey">主键类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator5">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.EntityBase`7">
            <summary>
            数据库实体依赖基类
            </summary>
            <typeparam name="TKey">主键类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator5">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator6">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.EntityBase`8">
            <summary>
            数据库实体依赖基类
            </summary>
            <typeparam name="TKey">主键类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator5">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator6">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator7">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.EntityBase`9">
            <summary>
            数据库实体依赖基类
            </summary>
            <typeparam name="TKey">主键类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator5">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator6">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator7">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator8">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.PrivateEntityBase`1">
            <summary>
            数据库实体依赖基类（禁止外部继承）
            </summary>
            <typeparam name="TKey">主键类型</typeparam>
        </member>
        <member name="P:Furion.DatabaseAccessor.PrivateEntityBase`1.Id">
            <summary>
            主键Id
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.PrivateEntityBase`1.TenantId">
            <summary>
            租户Id
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.PrivateEntityBase`1.__State__">
            <summary>
            内部跟踪状态
            </summary>
        </member>
        <member name="T:Furion.DatabaseAccessor.EntityBaseNotTenant">
            <summary>
            数据库实体依赖基类（不带租户）
            </summary>
        </member>
        <member name="T:Furion.DatabaseAccessor.EntityBaseNotTenant`1">
            <summary>
            数据库实体依赖基类（不带租户）
            </summary>
            <typeparam name="TKey">主键类型</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.EntityBaseNotTenant`2">
            <summary>
            数据库实体依赖基类（不带租户）
            </summary>
            <typeparam name="TKey">主键类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.EntityBaseNotTenant`3">
            <summary>
            数据库实体依赖基类（不带租户）
            </summary>
            <typeparam name="TKey">主键类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.EntityBaseNotTenant`4">
            <summary>
            数据库实体依赖基类（不带租户）
            </summary>
            <typeparam name="TKey">主键类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.EntityBaseNotTenant`5">
            <summary>
            数据库实体依赖基类（不带租户）
            </summary>
            <typeparam name="TKey">主键类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.EntityBaseNotTenant`6">
            <summary>
            数据库实体依赖基类（不带租户）
            </summary>
            <typeparam name="TKey">主键类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator5">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.EntityBaseNotTenant`7">
            <summary>
            数据库实体依赖基类（不带租户）
            </summary>
            <typeparam name="TKey">主键类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator5">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator6">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.EntityBaseNotTenant`8">
            <summary>
            数据库实体依赖基类（不带租户）
            </summary>
            <typeparam name="TKey">主键类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator5">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator6">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator7">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.EntityBaseNotTenant`9">
            <summary>
            数据库实体依赖基类（不带租户）
            </summary>
            <typeparam name="TKey">主键类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator5">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator6">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator7">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator8">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.PrivateEntityBaseNotTenant`1">
            <summary>
            数据库实体依赖基类（不带租户）（禁止外部继承）
            </summary>
            <typeparam name="TKey">主键类型</typeparam>
        </member>
        <member name="P:Furion.DatabaseAccessor.PrivateEntityBaseNotTenant`1.Id">
            <summary>
            主键Id
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.PrivateEntityBaseNotTenant`1.__State__">
            <summary>
            内部跟踪状态
            </summary>
        </member>
        <member name="T:Furion.DatabaseAccessor.EntityNotKey">
            <summary>
            数据库无键实体依赖基接口
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.EntityNotKey.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="name">数据库中定义名</param>
        </member>
        <member name="T:Furion.DatabaseAccessor.EntityNotKey`1">
            <summary>
            数据库无键实体依赖基接口
            </summary>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
        </member>
        <member name="M:Furion.DatabaseAccessor.EntityNotKey`1.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="name">数据库中定义名</param>
        </member>
        <member name="T:Furion.DatabaseAccessor.EntityNotKey`2">
            <summary>
            数据库无键实体依赖基接口
            </summary>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
        </member>
        <member name="M:Furion.DatabaseAccessor.EntityNotKey`2.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="name">数据库中定义名</param>
        </member>
        <member name="T:Furion.DatabaseAccessor.EntityNotKey`3">
            <summary>
            数据库无键实体依赖基接口
            </summary>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
        </member>
        <member name="M:Furion.DatabaseAccessor.EntityNotKey`3.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="name">数据库中定义名</param>
        </member>
        <member name="T:Furion.DatabaseAccessor.EntityNotKey`4">
            <summary>
            数据库无键实体依赖基接口
            </summary>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
        </member>
        <member name="M:Furion.DatabaseAccessor.EntityNotKey`4.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="name">数据库中定义名</param>
        </member>
        <member name="T:Furion.DatabaseAccessor.EntityNotKey`5">
            <summary>
            数据库无键实体依赖基接口
            </summary>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator5">数据库上下文定位器</typeparam>
        </member>
        <member name="M:Furion.DatabaseAccessor.EntityNotKey`5.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="name">数据库中定义名</param>
        </member>
        <member name="T:Furion.DatabaseAccessor.EntityNotKey`6">
            <summary>
            数据库无键实体依赖基接口
            </summary>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator5">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator6">数据库上下文定位器</typeparam>
        </member>
        <member name="M:Furion.DatabaseAccessor.EntityNotKey`6.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="name">数据库中定义名</param>
        </member>
        <member name="T:Furion.DatabaseAccessor.EntityNotKey`7">
            <summary>
            数据库无键实体依赖基接口
            </summary>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator5">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator6">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator7">数据库上下文定位器</typeparam>
        </member>
        <member name="M:Furion.DatabaseAccessor.EntityNotKey`7.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="name">数据库中定义名</param>
        </member>
        <member name="T:Furion.DatabaseAccessor.EntityNotKey`8">
            <summary>
            数据库无键实体依赖基接口
            </summary>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator5">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator6">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator7">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator8">数据库上下文定位器</typeparam>
        </member>
        <member name="M:Furion.DatabaseAccessor.EntityNotKey`8.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="name">数据库中定义名</param>
        </member>
        <member name="T:Furion.DatabaseAccessor.PrivateEntityNotKey">
            <summary>
            数据库无键实体基类（禁止外部继承）
            </summary>
        </member>
        <member name="F:Furion.DatabaseAccessor.PrivateEntityNotKey._name">
            <summary>
            无键实体名
            </summary>
        </member>
        <member name="F:Furion.DatabaseAccessor.PrivateEntityNotKey._schema">
            <summary>
            无键实体 schema
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateEntityNotKey.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="name">数据库中定义名</param>
            <param name="schema"></param>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateEntityNotKey.GetName">
            <summary>
            获取视图名称
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateEntityNotKey.GetSchema">
            <summary>
             数据库中定义的 Schema
            </summary>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Furion.DatabaseAccessor.EntityNotTenant">
            <summary>
            数据库实体依赖基类（不带租户）
            </summary>
        </member>
        <member name="T:Furion.DatabaseAccessor.EntityNotTenant`1">
            <summary>
            数据库实体依赖基类（不带租户）
            </summary>
            <typeparam name="TKey">主键类型</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.EntityNotTenant`2">
            <summary>
            数据库实体依赖基类（不带租户）
            </summary>
            <typeparam name="TKey">主键类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.EntityNotTenant`3">
            <summary>
            数据库实体依赖基类（不带租户）
            </summary>
            <typeparam name="TKey">主键类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.EntityNotTenant`4">
            <summary>
            数据库实体依赖基类（不带租户）
            </summary>
            <typeparam name="TKey">主键类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.EntityNotTenant`5">
            <summary>
            数据库实体依赖基类（不带租户）
            </summary>
            <typeparam name="TKey">主键类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.EntityNotTenant`6">
            <summary>
            数据库实体依赖基类（不带租户）
            </summary>
            <typeparam name="TKey">主键类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator5">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.EntityNotTenant`7">
            <summary>
            数据库实体依赖基类（不带租户）
            </summary>
            <typeparam name="TKey">主键类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator5">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator6">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.EntityNotTenant`8">
            <summary>
            数据库实体依赖基类（不带租户）
            </summary>
            <typeparam name="TKey">主键类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator5">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator6">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator7">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.EntityNotTenant`9">
            <summary>
            数据库实体依赖基类（不带租户）
            </summary>
            <typeparam name="TKey">主键类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator5">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator6">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator7">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator8">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.PrivateEntityNotTenant`1">
            <summary>
            数据库实体依赖基类（不带租户）（禁止外部继承）
            </summary>
            <typeparam name="TKey">主键类型</typeparam>
        </member>
        <member name="P:Furion.DatabaseAccessor.PrivateEntityNotTenant`1.CreatedTime">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.PrivateEntityNotTenant`1.UpdatedTime">
            <summary>
            更新时间
            </summary>
        </member>
        <member name="T:Furion.DatabaseAccessor.IEntity">
            <summary>
            数据库实体依赖基接口
            </summary>
        </member>
        <member name="T:Furion.DatabaseAccessor.IEntity`1">
            <summary>
            数据库实体依赖基接口
            </summary>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IEntity`2">
            <summary>
            数据库实体依赖基接口
            </summary>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IEntity`3">
            <summary>
            数据库实体依赖基接口
            </summary>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IEntity`4">
            <summary>
            数据库实体依赖基接口
            </summary>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IEntity`5">
            <summary>
            数据库实体依赖基接口
            </summary>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator5">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IEntity`6">
            <summary>
            数据库实体依赖基接口
            </summary>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator5">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator6">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IEntity`7">
            <summary>
            数据库实体依赖基接口
            </summary>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator5">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator6">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator7">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IEntity`8">
            <summary>
            数据库实体依赖基接口
            </summary>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator5">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator6">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator7">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator8">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IPrivateEntity">
            <summary>
            数据库实体依赖接口（禁止外部继承）
            </summary>
        </member>
        <member name="T:Furion.DatabaseAccessor.IEntityNotKey">
            <summary>
            数据库实体依赖基接口
            </summary>
        </member>
        <member name="T:Furion.DatabaseAccessor.IEntityNotKey`1">
            <summary>
            无键实体基接口
            </summary>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IEntityNotKey`2">
            <summary>
            无键实体基接口
            </summary>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IEntityNotKey`3">
            <summary>
            无键实体基接口
            </summary>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IEntityNotKey`4">
            <summary>
            无键实体基接口
            </summary>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IEntityNotKey`5">
            <summary>
            无键实体基接口
            </summary>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator5">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IEntityNotKey`6">
            <summary>
            无键实体基接口
            </summary>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator5">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator6">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IEntityNotKey`7">
            <summary>
            无键实体基接口
            </summary>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator5">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator6">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator7">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IEntityNotKey`8">
            <summary>
            无键实体基接口
            </summary>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator5">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator6">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator7">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator8">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IPrivateEntityNotKey">
            <summary>
            无键实体基接口（禁止外部直接继承）
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateEntityNotKey.GetName">
            <summary>
            数据库中定义名
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateEntityNotKey.GetSchema">
            <summary>
            数据库中定义的 Schema
            </summary>
            <returns></returns>
        </member>
        <member name="T:Furion.DatabaseAccessor.DbFunctionType">
            <summary>
            数据库函数类型
            </summary>
        </member>
        <member name="F:Furion.DatabaseAccessor.DbFunctionType.Scalar">
            <summary>
            标量函数
            </summary>
        </member>
        <member name="F:Furion.DatabaseAccessor.DbFunctionType.Table">
            <summary>
            表值函数
            </summary>
        </member>
        <member name="T:Furion.DatabaseAccessor.DbDataConvertExtensions">
            <summary>
            数据库数据转换拓展
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbDataConvertExtensions.ToList``1(System.Data.DataTable)">
            <summary>
            将 DataTable 转 List 集合
            </summary>
            <typeparam name="T">返回值类型</typeparam>
            <param name="dataTable">DataTable</param>
            <returns>List{T}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbDataConvertExtensions.ToListAsync``1(System.Data.DataTable)">
            <summary>
            将 DataTable 转 List 集合
            </summary>
            <typeparam name="T">返回值类型</typeparam>
            <param name="dataTable">DataTable</param>
            <returns>List{T}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbDataConvertExtensions.ToList``1(System.Data.DataSet)">
            <summary>
            将 DataSet 转 元组
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <param name="dataSet">DataSet</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbDataConvertExtensions.ToList``2(System.Data.DataSet)">
            <summary>
            将 DataSet 转 元组
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <param name="dataSet">DataSet</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbDataConvertExtensions.ToList``3(System.Data.DataSet)">
            <summary>
            将 DataSet 转 元组
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <param name="dataSet">DataSet</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbDataConvertExtensions.ToList``4(System.Data.DataSet)">
            <summary>
            将 DataSet 转 元组
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <param name="dataSet">DataSet</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbDataConvertExtensions.ToList``5(System.Data.DataSet)">
            <summary>
            将 DataSet 转 元组
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <param name="dataSet">DataSet</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbDataConvertExtensions.ToList``6(System.Data.DataSet)">
            <summary>
            将 DataSet 转 元组
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <param name="dataSet">DataSet</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbDataConvertExtensions.ToList``7(System.Data.DataSet)">
            <summary>
            将 DataSet 转 元组
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <param name="dataSet">DataSet</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbDataConvertExtensions.ToList``8(System.Data.DataSet)">
            <summary>
            将 DataSet 转 元组
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <typeparam name="T8">元组元素类型</typeparam>
            <param name="dataSet">DataSet</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbDataConvertExtensions.ToList(System.Data.DataSet,System.Type[])">
            <summary>
            将 DataSet 转 特定类型
            </summary>
            <param name="dataSet">DataSet</param>
            <param name="returnTypes">特定类型集合</param>
            <returns>List{object}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbDataConvertExtensions.ToListAsync(System.Data.DataSet,System.Type[])">
            <summary>
            将 DataSet 转 特定类型
            </summary>
            <param name="dataSet">DataSet</param>
            <param name="returnTypes">特定类型集合</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbDataConvertExtensions.ToList(System.Data.DataTable,System.Type)">
            <summary>
            将 DataTable 转 特定类型
            </summary>
            <param name="dataTable">DataTable</param>
            <param name="returnType">返回值类型</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbDataConvertExtensions.ToListAsync(System.Data.DataTable,System.Type)">
            <summary>
            将 DataTable 转 特定类型
            </summary>
            <param name="dataTable">DataTable</param>
            <param name="returnType">返回值类型</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbDataConvertExtensions.ToDataTable(System.Data.Common.DbDataReader)">
            <summary>
            将 DbDataReader 转 DataTable
            </summary>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbDataConvertExtensions.ToDataSet(System.Data.Common.DbDataReader)">
            <summary>
            将 DbDataReader 转 DataSet
            </summary>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbDataConvertExtensions.ToValueTuple(System.Data.DataSet,System.Type)">
            <summary>
            处理元组类型返回值
            </summary>
            <param name="dataSet">数据集</param>
            <param name="tupleType">返回值类型</param>
            <returns></returns>
        </member>
        <member name="T:Furion.DatabaseAccessor.DbObjectExtensions">
            <summary>
            DatabaseFacade 拓展类
            </summary>
        </member>
        <member name="F:Furion.DatabaseAccessor.DbObjectExtensions.MiniProfilerCategory">
            <summary>
            MiniProfiler 分类名
            </summary>
        </member>
        <member name="F:Furion.DatabaseAccessor.DbObjectExtensions.IsDevelopment">
            <summary>
            是否是开发环境
            </summary>
        </member>
        <member name="F:Furion.DatabaseAccessor.DbObjectExtensions.IsPrintDbConnectionInfo">
            <summary>
            是否打印数据库连接信息到 MiniProfiler 中
            </summary>
        </member>
        <member name="F:Furion.DatabaseAccessor.DbObjectExtensions.IsLogEntityFrameworkCoreSqlExecuteCommand">
            <summary>
            是否记录 EFCore 执行 sql 命令打印日志
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbObjectExtensions.#cctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbObjectExtensions.PrepareDbCommand(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.String,System.Data.Common.DbParameter[],System.Data.CommandType)">
            <summary>
            初始化数据库命令对象
            </summary>
            <param name="databaseFacade">ADO.NET 数据库对象</param>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <param name="commandType">命令类型</param>
            <returns>(DbConnection dbConnection, DbCommand dbCommand)</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbObjectExtensions.PrepareDbCommand(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.String,System.Object,System.Data.CommandType)">
            <summary>
            初始化数据库命令对象
            </summary>
            <param name="databaseFacade">ADO.NET 数据库对象</param>
            <param name="sql">sql 语句</param>
            <param name="model">命令模型</param>
            <param name="commandType">命令类型</param>
            <returns>(DbConnection dbConnection, DbCommand dbCommand, DbParameter[] dbParameters)</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbObjectExtensions.PrepareDbCommandAsync(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.String,System.Data.Common.DbParameter[],System.Data.CommandType,System.Threading.CancellationToken)">
            <summary>
            初始化数据库命令对象
            </summary>
            <param name="databaseFacade">ADO.NET 数据库对象</param>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <param name="commandType">命令类型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>(DbConnection dbConnection, DbCommand dbCommand)</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbObjectExtensions.PrepareDbCommandAsync(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.String,System.Object,System.Data.CommandType,System.Threading.CancellationToken)">
            <summary>
            初始化数据库命令对象
            </summary>
            <param name="databaseFacade">ADO.NET 数据库对象</param>
            <param name="sql">sql 语句</param>
            <param name="model">命令模型</param>
            <param name="commandType">命令类型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>(DbConnection dbConnection, DbCommand dbCommand, DbParameter[] dbParameters)</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbObjectExtensions.CreateDbCommand(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.String,System.Data.CommandType)">
            <summary>
            创建数据库命令对象
            </summary>
            <param name="databaseFacade">ADO.NET 数据库对象</param>
            <param name="sql">sql 语句</param>
            <param name="commandType">命令类型</param>
            <returns>(DbConnection dbConnection, DbCommand dbCommand)</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbObjectExtensions.OpenConnection(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.Data.Common.DbConnection,System.Data.Common.DbCommand)">
            <summary>
            打开数据库连接
            </summary>
            <param name="databaseFacade">ADO.NET 数据库对象</param>
            <param name="dbConnection">数据库连接对象</param>
            <param name="dbCommand"></param>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbObjectExtensions.OpenConnectionAsync(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.Data.Common.DbConnection,System.Data.Common.DbCommand,System.Threading.CancellationToken)">
            <summary>
            打开数据库连接
            </summary>
            <param name="databaseFacade">ADO.NET 数据库对象</param>
            <param name="dbConnection">数据库连接对象</param>
            <param name="dbCommand"></param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbObjectExtensions.SetDbParameters(System.String,System.Data.Common.DbCommand@,System.Data.Common.DbParameter[])">
            <summary>
            设置数据库命令对象参数
            </summary>
            <param name="providerName"></param>
            <param name="dbCommand">数据库命令对象</param>
            <param name="parameters">命令参数</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbObjectExtensions.SetDbParameters(System.String,System.Data.Common.DbCommand@,System.Object,System.Data.Common.DbParameter[]@)">
            <summary>
            设置数据库命令对象参数
            </summary>
            <param name="providerName"></param>
            <param name="dbCommand">数据库命令对象</param>
            <param name="model">参数模型</param>
            <param name="dbParameters">命令参数</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbObjectExtensions.PrintConnectionToMiniProfiler(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.Data.Common.DbConnection,System.Boolean)">
            <summary>
            打印数据库连接信息到 MiniProfiler
            </summary>
            <param name="databaseFacade">ADO.NET 数据库对象</param>
            <param name="dbConnection">数据库连接对象</param>
            <param name="isAsync"></param>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbObjectExtensions.LogSqlExecuteCommand(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.Data.Common.DbCommand)">
            <summary>
            输出原始 Sql 执行日志（ADO.NET）
            </summary>
            <param name="databaseFacade"></param>
            <param name="dbCommand"></param>
        </member>
        <member name="T:Furion.DatabaseAccessor.SqlAdoNetExtensions">
            <summary>
            ADONET 拓展类
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlAdoNetExtensions.ExecuteReader(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.String,System.Data.Common.DbParameter[],System.Data.CommandType,System.Data.CommandBehavior)">
            <summary>
            执行 Sql 返回 DataTable
            </summary>
            <param name="databaseFacade">ADO.NET 数据库对象</param>
            <param name="sql">sql 语句</param>
            <param name="commandType">命令类型</param>
            <param name="parameters">命令参数</param>
            <param name="behavior">行为</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlAdoNetExtensions.ExecuteReader(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.String,System.Object,System.Data.CommandType,System.Data.CommandBehavior)">
            <summary>
            执行 Sql 返回 DataTable
            </summary>
            <param name="databaseFacade">ADO.NET 数据库对象</param>
            <param name="sql">sql 语句</param>
            <param name="commandType">命令类型</param>
            <param name="model">命令模型</param>
            <param name="behavior">行为</param>
            <returns>(DataTable dataTable, DbParameter[] dbParameters)</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlAdoNetExtensions.ExecuteReaderAsync(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.String,System.Data.Common.DbParameter[],System.Data.CommandType,System.Data.CommandBehavior,System.Threading.CancellationToken)">
            <summary>
            执行 Sql 返回 DataTable
            </summary>
            <param name="databaseFacade">ADO.NET 数据库对象</param>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <param name="commandType">命令类型</param>
            <param name="behavior">行为</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlAdoNetExtensions.ExecuteReaderAsync(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.String,System.Object,System.Data.CommandType,System.Data.CommandBehavior,System.Threading.CancellationToken)">
            <summary>
            执行 Sql 返回 DataTable
            </summary>
            <param name="databaseFacade">ADO.NET 数据库对象</param>
            <param name="sql">sql 语句</param>
            <param name="model">命令模型</param>
            <param name="commandType">命令类型</param>
            <param name="behavior">行为</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>(DataTable dataTable, DbParameter[] dbParameters)</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlAdoNetExtensions.ExecuteNonQuery(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.String,System.Data.Common.DbParameter[],System.Data.CommandType)">
            <summary>
            执行 Sql 语句返回受影响行数
            </summary>
            <param name="databaseFacade">ADO.NET 数据库对象</param>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <param name="commandType">命令类型</param>
            <returns>受影响行数</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlAdoNetExtensions.ExecuteNonQuery(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.String,System.Object,System.Data.CommandType)">
            <summary>
            执行 Sql 语句返回受影响行数
            </summary>
            <param name="databaseFacade">ADO.NET 数据库对象</param>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <param name="commandType">命令类型</param>
            <returns>(int rowEffects, DbParameter[] dbParameters)</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlAdoNetExtensions.ExecuteNonQueryAsync(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.String,System.Data.Common.DbParameter[],System.Data.CommandType,System.Threading.CancellationToken)">
            <summary>
            执行 Sql 语句返回受影响行数
            </summary>
            <param name="databaseFacade">ADO.NET 数据库对象</param>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <param name="commandType">命令类型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>受影响行数</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlAdoNetExtensions.ExecuteNonQueryAsync(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.String,System.Object,System.Data.CommandType,System.Threading.CancellationToken)">
            <summary>
            执行 Sql 语句返回受影响行数
            </summary>
            <param name="databaseFacade">ADO.NET 数据库对象</param>
            <param name="sql">sql 语句</param>
            <param name="model">命令模型</param>
            <param name="commandType">命令类型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>(int rowEffects, DbParameter[] dbParameters)</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlAdoNetExtensions.ExecuteScalar(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.String,System.Data.Common.DbParameter[],System.Data.CommandType)">
            <summary>
            执行 Sql 返回单行单列的值
            </summary>
            <param name="databaseFacade">ADO.NET 数据库对象</param>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <param name="commandType">命令类型</param>
            <returns>单行单列的值</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlAdoNetExtensions.ExecuteScalar(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.String,System.Object,System.Data.CommandType)">
            <summary>
            执行 Sql 返回单行单列的值
            </summary>
            <param name="databaseFacade">ADO.NET 数据库对象</param>
            <param name="sql">sql 语句</param>
            <param name="model">命令模型</param>
            <param name="commandType">命令类型</param>
            <returns>(object result, DbParameter[] dbParameters)</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlAdoNetExtensions.ExecuteScalarAsync(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.String,System.Data.Common.DbParameter[],System.Data.CommandType,System.Threading.CancellationToken)">
            <summary>
            执行 Sql 返回单行单列的值
            </summary>
            <param name="databaseFacade">ADO.NET 数据库对象</param>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <param name="commandType">命令类型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>单行单列的值</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlAdoNetExtensions.ExecuteScalarAsync(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.String,System.Object,System.Data.CommandType,System.Threading.CancellationToken)">
            <summary>
            执行 Sql 返回单行单列的值
            </summary>
            <param name="databaseFacade">ADO.NET 数据库对象</param>
            <param name="sql">sql 语句</param>
            <param name="model">命令模型</param>
            <param name="commandType">命令类型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>(object result, DbParameter[] dbParameters)</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlAdoNetExtensions.DataAdapterFill(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.String,System.Data.Common.DbParameter[],System.Data.CommandType,System.Data.CommandBehavior)">
            <summary>
            执行 Sql 返回 DataSet
            </summary>
            <param name="databaseFacade">ADO.NET 数据库对象</param>
            <param name="sql">sql 语句</param>
            <param name="commandType">命令类型</param>
            <param name="parameters">命令参数</param>
            <param name="behavior">行为</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlAdoNetExtensions.DataAdapterFill(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.String,System.Object,System.Data.CommandType,System.Data.CommandBehavior)">
            <summary>
            执行 Sql 返回 DataSet
            </summary>
            <param name="databaseFacade">ADO.NET 数据库对象</param>
            <param name="sql">sql 语句</param>
            <param name="commandType">命令类型</param>
            <param name="model">命令模型</param>
            <param name="behavior">行为</param>
            <returns>(DataSet dataSet, DbParameter[] dbParameters)</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlAdoNetExtensions.DataAdapterFillAsync(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.String,System.Data.Common.DbParameter[],System.Data.CommandType,System.Data.CommandBehavior,System.Threading.CancellationToken)">
            <summary>
            执行 Sql 返回 DataSet
            </summary>
            <param name="databaseFacade">ADO.NET 数据库对象</param>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <param name="commandType">命令类型</param>
            <param name="behavior">行为</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlAdoNetExtensions.DataAdapterFillAsync(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.String,System.Object,System.Data.CommandType,System.Data.CommandBehavior,System.Threading.CancellationToken)">
            <summary>
            执行 Sql 返回 DataSet
            </summary>
            <param name="databaseFacade">ADO.NET 数据库对象</param>
            <param name="sql">sql 语句</param>
            <param name="model">命令模型</param>
            <param name="commandType">命令类型</param>
            <param name="behavior">行为</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>(DataSet dataSet, DbParameter[] dbParameters)</returns>
        </member>
        <member name="T:Furion.DatabaseAccessor.Penetrates">
            <summary>
            常量、公共方法配置类
            </summary>
        </member>
        <member name="F:Furion.DatabaseAccessor.Penetrates.DbContextDescriptors">
            <summary>
            数据库上下文描述器
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.Penetrates.#cctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.Penetrates.ConfigureDbContext(System.Action{System.IServiceProvider,Microsoft.EntityFrameworkCore.DbContextOptionsBuilder},Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor[])">
            <summary>
            配置 SqlServer 数据库上下文
            </summary>
            <param name="optionBuilder">数据库上下文选项构建器</param>
            <param name="interceptors">拦截器</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Penetrates.CheckDbContextLocator(System.Type,System.Type@)">
            <summary>
            检查数据库上下文是否绑定
            </summary>
            <param name="dbContextLocatorType"></param>
            <param name="dbContextType"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Penetrates.AddInterceptors(Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor[],Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)">
            <summary>
            数据库数据库拦截器
            </summary>
            <param name="interceptors">拦截器</param>
            <param name="options"></param>
        </member>
        <member name="T:Furion.DatabaseAccessor.PagedQueryableExtensions">
            <summary>
            分页拓展类
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.PagedQueryableExtensions.ToPagedList``1(System.Linq.IQueryable{``0},System.Int32,System.Int32,System.Func{System.Int32})">
            <summary>
            分页拓展
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="entities"></param>
            <param name="pageIndex">页码，必须大于0</param>
            <param name="pageSize"></param>
            <param name="totalComputed">总数计算方式</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PagedQueryableExtensions.ToPagedListAsync``1(System.Linq.IQueryable{``0},System.Int32,System.Int32,System.Threading.CancellationToken,System.Func{System.Int32})">
            <summary>
            分页拓展
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="entities"></param>
            <param name="pageIndex">页码，必须大于0</param>
            <param name="pageSize"></param>
            <param name="cancellationToken"></param>
            <param name="totalComputed">总数计算方式</param>
            <returns></returns>
        </member>
        <member name="T:Furion.DatabaseAccessor.Extensions.IEntityExtensions">
            <summary>
            实体拓展类
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.SetEntity``1(``0)">
            <summary>
            设置实体
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.SetContextScoped``1(``0,System.IServiceProvider)">
            <summary>
            设置数据库执行作用域
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="entity"></param>
            <param name="serviceProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.Change``2(``0)">
            <summary>
            设置数据库上下文定位器
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TDbContextLocator"></typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.Change``1(``0,System.Type)">
            <summary>
            设置数据库上下文定位器
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="entity"></param>
            <param name="dbContextLocator"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.Ethnics``1(``0)">
            <summary>
            获取实体同类（族群）
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <returns>DbSet{TEntity}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.Insert``1(``0,System.Nullable{System.Boolean})">
            <summary>
            新增一条记录
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="ignoreNullValues"></param>
            <returns>代理的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.InsertAsync``1(``0,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            新增一条记录
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>代理的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.InsertNow``1(``0,System.Nullable{System.Boolean})">
            <summary>
            新增一条记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.InsertNow``1(``0,System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            新增一条记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有提交更改</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.InsertNowAsync``1(``0,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            新增一条记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="cancellationToken">异步取消令牌</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.InsertNowAsync``1(``0,System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            新增一条记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有提交更改</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.Update``1(``0,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateAsync``1(``0,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateNow``1(``0,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateNow``1(``0,System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateNowAsync``1(``0,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateNowAsync``1(``0,System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateInclude``1(``0,System.String[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中特定属性
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateInclude``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中特定属性
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateInclude``1(``0,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中特定属性
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateInclude``1(``0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中特定属性
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateIncludeAsync``1(``0,System.String[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateIncludeAsync``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateIncludeAsync``1(``0,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateIncludeAsync``1(``0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateIncludeNow``1(``0,System.String[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateIncludeNow``1(``0,System.String[],System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateIncludeNow``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateIncludeNow``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[],System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateIncludeNow``1(``0,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateIncludeNow``1(``0,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateIncludeNow``1(``0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateIncludeNow``1(``0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}},System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateIncludeNowAsync``1(``0,System.String[],System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateIncludeNowAsync``1(``0,System.String[],System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateIncludeNowAsync``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[],System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateIncludeNowAsync``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[],System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateIncludeNowAsync``1(``0,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateIncludeNowAsync``1(``0,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateIncludeNowAsync``1(``0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateIncludeNowAsync``1(``0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}},System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateExclude``1(``0,System.String[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中特定属性
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateExclude``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中特定属性
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateExclude``1(``0,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中特定属性
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateExclude``1(``0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中特定属性
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateExcludeAsync``1(``0,System.String[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateExcludeAsync``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateExcludeAsync``1(``0,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateExcludeAsync``1(``0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateExcludeNow``1(``0,System.String[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateExcludeNow``1(``0,System.String[],System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateExcludeNow``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateExcludeNow``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[],System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateExcludeNow``1(``0,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateExcludeNow``1(``0,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateExcludeNow``1(``0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateExcludeNow``1(``0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}},System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateExcludeNowAsync``1(``0,System.String[],System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateExcludeNowAsync``1(``0,System.String[],System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateExcludeNowAsync``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[],System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateExcludeNowAsync``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[],System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateExcludeNowAsync``1(``0,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateExcludeNowAsync``1(``0,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateExcludeNowAsync``1(``0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateExcludeNowAsync``1(``0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}},System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.Delete``1(``0)">
            <summary>
            删除一条记录
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.DeleteAsync``1(``0)">
            <summary>
            删除一条记录
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.DeleteNow``1(``0)">
            <summary>
            删除一条记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.DeleteNow``1(``0,System.Boolean)">
            <summary>
            删除一条记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.DeleteNowAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            删除一条记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.DeleteNowAsync``1(``0,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            删除一条记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="T:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions">
            <summary>
            实体多数据库上下文拓展类
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.Ethnics``2(``0)">
            <summary>
            获取实体同类（族群）
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <returns>DbSet{TEntity}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.Insert``2(``0,System.Nullable{System.Boolean})">
            <summary>
            新增一条记录
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="ignoreNullValues"></param>
            <returns>代理的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.InsertAsync``2(``0,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            新增一条记录
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>代理的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.InsertNow``2(``0,System.Nullable{System.Boolean})">
            <summary>
            新增一条记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.InsertNow``2(``0,System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            新增一条记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有提交更改</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.InsertNowAsync``2(``0,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            新增一条记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.InsertNowAsync``2(``0,System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            新增一条记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有提交更改</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.Update``2(``0,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateAsync``2(``0,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateNow``2(``0,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateNow``2(``0,System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateNowAsync``2(``0,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateNowAsync``2(``0,System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateInclude``2(``0,System.String[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中特定属性
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateInclude``2(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中特定属性
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateInclude``2(``0,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中特定属性
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateInclude``2(``0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中特定属性
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateIncludeAsync``2(``0,System.String[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateIncludeAsync``2(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateIncludeAsync``2(``0,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateIncludeAsync``2(``0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateIncludeNow``2(``0,System.String[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateIncludeNow``2(``0,System.String[],System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateIncludeNow``2(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateIncludeNow``2(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[],System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateIncludeNow``2(``0,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateIncludeNow``2(``0,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateIncludeNow``2(``0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateIncludeNow``2(``0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}},System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateIncludeNowAsync``2(``0,System.String[],System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="cancellationToken">取消异步令牌</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateIncludeNowAsync``2(``0,System.String[],System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateIncludeNowAsync``2(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[],System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="cancellationToken">取消异步令牌</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateIncludeNowAsync``2(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[],System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateIncludeNowAsync``2(``0,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateIncludeNowAsync``2(``0,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateIncludeNowAsync``2(``0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateIncludeNowAsync``2(``0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}},System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateExclude``2(``0,System.String[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中特定属性
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateExclude``2(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中特定属性
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateExclude``2(``0,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中特定属性
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateExclude``2(``0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中特定属性
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateExcludeAsync``2(``0,System.String[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateExcludeAsync``2(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateExcludeAsync``2(``0,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateExcludeAsync``2(``0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateExcludeNow``2(``0,System.String[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateExcludeNow``2(``0,System.String[],System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateExcludeNow``2(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateExcludeNow``2(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[],System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateExcludeNow``2(``0,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateExcludeNow``2(``0,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateExcludeNow``2(``0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateExcludeNow``2(``0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}},System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateExcludeNowAsync``2(``0,System.String[],System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateExcludeNowAsync``2(``0,System.String[],System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateExcludeNowAsync``2(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[],System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateExcludeNowAsync``2(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[],System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateExcludeNowAsync``2(``0,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateExcludeNowAsync``2(``0,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateExcludeNowAsync``2(``0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateExcludeNowAsync``2(``0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}},System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.Delete``2(``0)">
            <summary>
            删除一条记录
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.DeleteAsync``2(``0)">
            <summary>
            删除一条记录
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.DeleteNow``2(``0)">
            <summary>
            删除一条记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.DeleteNow``2(``0,System.Boolean)">
            <summary>
            删除一条记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.DeleteNowAsync``2(``0,System.Threading.CancellationToken)">
            <summary>
            删除一条记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.DeleteNowAsync``2(``0,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            删除一条记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="T:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions">
            <summary>
            Sql 字符串执行拓展类
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.Change``1(System.String)">
            <summary>
            切换数据库
            </summary>
            <typeparam name="TDbContextLocator"></typeparam>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.Change(System.String,System.Type)">
            <summary>
            切换数据库
            </summary>
            <param name="sql"></param>
            <param name="dbContextLocator"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SetContextScoped(System.String,System.IServiceProvider)">
            <summary>
            设置数据库执行作用域
            </summary>
            <param name="sql"></param>
            <param name="serviceProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SetCommandTimeout(System.String,System.Int32)">
            <summary>
            设置 ADO.NET 超时时间
            </summary>
            <param name="sql"></param>
            <param name="timeout">单位秒</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlQuery(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 DataTable
            </summary>
            <param name="sql"></param>
            <param name="parameters">命令参数</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlQuery(System.String,System.Object)">
            <summary>
            Sql 查询返回 DataTable
            </summary>
            <param name="sql"></param>
            <param name="model">参数模型</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlQueryAsync(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 DataTable
            </summary>
            <param name="sql"></param>
            <param name="parameters">命令参数</param>
            <returns>Task{DataTable}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlQueryAsync(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 DataTable
            </summary>
            <param name="sql"></param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>Task{DataTable}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlQueryAsync(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 DataTable
            </summary>
            <param name="sql"></param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>Task{DataTable}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlQuery``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 List 集合
            </summary>
            <param name="sql"></param>
            <typeparam name="T">返回类型</typeparam>
            <param name="parameters">命令参数</param>
            <returns>List{T}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlQuery``1(System.String,System.Object)">
            <summary>
            Sql 查询返回 List 集合
            </summary>
            <param name="sql"></param>
            <typeparam name="T">返回类型</typeparam>
            <param name="model">参数模型</param>
            <returns>List{T}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlQueryAsync``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 List 集合
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="sql"></param>
            <param name="parameters">命令参数</param>
            <returns>Task{List{T}}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlQueryAsync``1(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 List 集合
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="sql"></param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>Task{List{T}}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlQueryAsync``1(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 List 集合
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="sql"></param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>Task{List{T}}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlQueries(System.String,System.Data.Common.DbParameter[])">
            <summary>
             Sql 查询返回 DataSet
            </summary>
            <param name="sql"></param>
            <param name="parameters">命令参数</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlQueries(System.String,System.Object)">
            <summary>
             Sql 查询返回 DataSet
            </summary>
            <param name="sql"></param>
            <param name="model">参数模型</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlQueriesAsync(System.String,System.Data.Common.DbParameter[])">
            <summary>
             Sql 查询返回 DataSet
            </summary>
            <param name="sql"></param>
            <param name="parameters">命令参数</param>
            <returns>Task{DataSet}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlQueriesAsync(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
             Sql 查询返回 DataSet
            </summary>
            <param name="sql"></param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>Task{DataSet}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlQueriesAsync(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
             Sql 查询返回 DataSet
            </summary>
            <param name="sql"></param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>Task{DataSet}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlQueries``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
             Sql 查询返回 List 集合
            </summary>
            <typeparam name="T1">返回类型</typeparam>
            <param name="sql"></param>
            <param name="parameters">命令参数</param>
            <returns>List{T1}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlQueries``2(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <param name="sql"></param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlQueries``3(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <param name="sql"></param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlQueries``4(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <param name="sql"></param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlQueries``5(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <param name="sql"></param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlQueries``6(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <param name="sql"></param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlQueries``7(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <param name="sql"></param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlQueries``8(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <typeparam name="T8">元组元素类型</typeparam>
            <param name="sql"></param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlQueries``1(System.String,System.Object)">
            <summary>
             Sql 查询返回 List 集合
            </summary>
            <typeparam name="T1">返回类型</typeparam>
            <param name="sql"></param>
            <param name="model">参数模型</param>
            <returns>List{T1}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlQueries``2(System.String,System.Object)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <param name="sql"></param>
            <param name="model">参数模型</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlQueries``3(System.String,System.Object)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <param name="sql"></param>
            <param name="model">参数模型</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlQueries``4(System.String,System.Object)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <param name="sql"></param>
            <param name="model">参数模型</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlQueries``5(System.String,System.Object)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <param name="sql"></param>
            <param name="model">参数模型</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlQueries``6(System.String,System.Object)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <param name="sql"></param>
            <param name="model">参数模型</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlQueries``7(System.String,System.Object)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <param name="sql"></param>
            <param name="model">参数模型</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlQueries``8(System.String,System.Object)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <typeparam name="T8">元组元素类型</typeparam>
            <param name="sql"></param>
            <param name="model">参数模型</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlQueriesAsync``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
             Sql 查询返回 List 集合
            </summary>
            <typeparam name="T1">返回类型</typeparam>
            <param name="sql"></param>
            <param name="parameters">命令参数</param>
            <returns>Task{List{T1}}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlQueriesAsync``1(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
             Sql 查询返回 List 集合
            </summary>
            <typeparam name="T1">返回类型</typeparam>
            <param name="sql"></param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>Task{List{T1}}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlQueriesAsync``2(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <param name="sql"></param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlQueriesAsync``2(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <param name="sql"></param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlQueriesAsync``3(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <param name="sql"></param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlQueriesAsync``3(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <param name="sql"></param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlQueriesAsync``4(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <param name="sql"></param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlQueriesAsync``4(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <param name="sql"></param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlQueriesAsync``5(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <param name="sql"></param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlQueriesAsync``5(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <param name="sql"></param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlQueriesAsync``6(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <param name="sql"></param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlQueriesAsync``6(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <param name="sql"></param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlQueriesAsync``7(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <param name="sql"></param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlQueriesAsync``7(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <param name="sql"></param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlQueriesAsync``8(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <typeparam name="T8">元组元素类型</typeparam>
            <param name="sql"></param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlQueriesAsync``8(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <typeparam name="T8">元组元素类型</typeparam>
            <param name="sql"></param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlQueriesAsync``1(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
             Sql 查询返回 List 集合
            </summary>
            <typeparam name="T1">返回类型</typeparam>
            <param name="sql"></param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>List{T1}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlQueriesAsync``2(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <param name="sql"></param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlQueriesAsync``3(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <param name="sql"></param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlQueriesAsync``4(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <param name="sql"></param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlQueriesAsync``5(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <param name="sql"></param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlQueriesAsync``6(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <param name="sql"></param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlQueriesAsync``7(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <param name="sql"></param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlQueriesAsync``8(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <typeparam name="T8">元组元素类型</typeparam>
            <param name="sql"></param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlNonQuery(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行 Sql 无数据返回
            </summary>
            <param name="sql"></param>
            <param name="parameters">命令参数</param>
            <returns>int</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlNonQuery(System.String,System.Object)">
            <summary>
            执行 Sql 无数据返回
            </summary>
            <param name="sql"></param>
            <param name="model">参数模型</param>
            <returns>int</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlNonQueryAsync(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行 Sql 无数据返回
            </summary>
            <param name="sql"></param>
            <param name="parameters">命令参数</param>
            <returns>int</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlNonQueryAsync(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行 Sql 无数据返回
            </summary>
            <param name="sql"></param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>int</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlNonQueryAsync(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行 Sql 无数据返回
            </summary>
            <param name="sql"></param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>int</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlScalar(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行 Sql 返回 单行单列
            </summary>
            <param name="sql"></param>
            <param name="parameters">命令参数</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlScalar(System.String,System.Object)">
            <summary>
            执行 Sql 返回 单行单列
            </summary>
            <param name="sql"></param>
            <param name="model">参数模型</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlScalarAsync(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行 Sql 返回 单行单列
            </summary>
            <param name="sql"></param>
            <param name="parameters">命令参数</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlScalarAsync(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行 Sql 返回 单行单列
            </summary>
            <param name="sql"></param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlScalarAsync(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行 Sql 返回 单行单列
            </summary>
            <param name="sql"></param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlScalar``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行 Sql 返回 单行单列
            </summary>
            <param name="sql"></param>
            <param name="parameters">命令参数</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlScalar``1(System.String,System.Object)">
            <summary>
            执行 Sql 返回 单行单列
            </summary>
            <param name="sql"></param>
            <param name="model">参数模型</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlScalarAsync``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行 Sql 返回 单行单列
            </summary>
            <param name="sql"></param>
            <param name="parameters">命令参数</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlScalarAsync``1(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行 Sql 返回 单行单列
            </summary>
            <param name="sql"></param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlScalarAsync``1(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行 Sql 返回 单行单列
            </summary>
            <param name="sql"></param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlProcedureQuery(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 DataTable
            </summary>
            <param name="procName"></param>
            <param name="parameters">命令参数</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlProcedureQuery(System.String,System.Object)">
            <summary>
            执行存储过程返回 DataTable
            </summary>
            <param name="procName"></param>
            <param name="model">参数模型</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlProcedureQueryAsync(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 DataTable
            </summary>
            <param name="procName"></param>
            <param name="parameters">命令参数</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlProcedureQueryAsync(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 DataTable
            </summary>
            <param name="procName"></param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlProcedureQueryAsync(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 DataTable
            </summary>
            <param name="procName"></param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlProcedureQuery``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 List 集合
            </summary>
            <param name="procName"></param>
            <param name="parameters">命令参数</param>
            <returns>List{T}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlProcedureQuery``1(System.String,System.Object)">
            <summary>
            执行存储过程返回 List 集合
            </summary>
            <param name="procName"></param>
            <param name="model">参数模型</param>
            <returns>List{T}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlProcedureQueryAsync``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 List 集合
            </summary>
            <param name="procName"></param>
            <param name="parameters">命令参数</param>
            <returns>List{T}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlProcedureQueryAsync``1(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 List 集合
            </summary>
            <param name="procName"></param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>List{T}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlProcedureQueryAsync``1(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 List 集合
            </summary>
            <param name="procName"></param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>List{T}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlProcedureQueries(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 DataSet
            </summary>
            <param name="procName"></param>
            <param name="parameters">命令参数</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlProcedureQueries(System.String,System.Object)">
            <summary>
            执行存储过程返回 DataSet
            </summary>
            <param name="procName"></param>
            <param name="model">参数模型</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlProcedureQueriesAsync(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 DataSet
            </summary>
            <param name="procName"></param>
            <param name="parameters">命令参数</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlProcedureQueriesAsync(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 DataSet
            </summary>
            <param name="procName"></param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlProcedureQueriesAsync(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 DataSet
            </summary>
            <param name="procName"></param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlProcedureQueries``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
             执行存储过程返回 List 集合
            </summary>
            <typeparam name="T1">返回类型</typeparam>
            <param name="procName"></param>
            <param name="parameters">命令参数</param>
            <returns>List{T1}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlProcedureQueries``2(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <param name="procName"></param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlProcedureQueries``3(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <param name="procName"></param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlProcedureQueries``4(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <param name="procName"></param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlProcedureQueries``5(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <param name="procName"></param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlProcedureQueries``6(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <param name="procName"></param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlProcedureQueries``7(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <param name="procName"></param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlProcedureQueries``8(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <typeparam name="T8">元组元素类型</typeparam>
            <param name="procName"></param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlProcedureQueries``1(System.String,System.Object)">
            <summary>
             执行存储过程返回 List 集合
            </summary>
            <typeparam name="T1">返回类型</typeparam>
            <param name="procName"></param>
            <param name="model">参数模型</param>
            <returns>List{T1}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlProcedureQueries``2(System.String,System.Object)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <param name="procName"></param>
            <param name="model">参数模型</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlProcedureQueries``3(System.String,System.Object)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <param name="procName"></param>
            <param name="model">参数模型</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlProcedureQueries``4(System.String,System.Object)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <param name="procName"></param>
            <param name="model">参数模型</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlProcedureQueries``5(System.String,System.Object)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <param name="procName"></param>
            <param name="model">参数模型</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlProcedureQueries``6(System.String,System.Object)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <param name="procName"></param>
            <param name="model">参数模型</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlProcedureQueries``7(System.String,System.Object)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <param name="procName"></param>
            <param name="model">参数模型</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlProcedureQueries``8(System.String,System.Object)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <typeparam name="T8">元组元素类型</typeparam>
            <param name="procName"></param>
            <param name="model">参数模型</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlProcedureQueriesAsync``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
             执行存储过程返回 List 集合
            </summary>
            <typeparam name="T1">返回类型</typeparam>
            <param name="procName"></param>
            <param name="parameters">命令参数</param>
            <returns>Task{List{T1}}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlProcedureQueriesAsync``1(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
             执行存储过程返回 List 集合
            </summary>
            <typeparam name="T1">返回类型</typeparam>
            <param name="procName"></param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>Task{List{T1}}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlProcedureQueriesAsync``2(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <param name="procName"></param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlProcedureQueriesAsync``2(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <param name="procName"></param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlProcedureQueriesAsync``3(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <param name="procName"></param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlProcedureQueriesAsync``3(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <param name="procName"></param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlProcedureQueriesAsync``4(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <param name="procName"></param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlProcedureQueriesAsync``4(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <param name="procName"></param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlProcedureQueriesAsync``5(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <param name="procName"></param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlProcedureQueriesAsync``5(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <param name="procName"></param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlProcedureQueriesAsync``6(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <param name="procName"></param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlProcedureQueriesAsync``6(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <param name="procName"></param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlProcedureQueriesAsync``7(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <param name="procName"></param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlProcedureQueriesAsync``7(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <param name="procName"></param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlProcedureQueriesAsync``8(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <typeparam name="T8">元组元素类型</typeparam>
            <param name="procName"></param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlProcedureQueriesAsync``8(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <typeparam name="T8">元组元素类型</typeparam>
            <param name="procName"></param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlProcedureQueriesAsync``1(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
             执行存储过程返回 List 集合
            </summary>
            <typeparam name="T1">返回类型</typeparam>
            <param name="procName"></param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>List{T1}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlProcedureQueriesAsync``2(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <param name="procName"></param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlProcedureQueriesAsync``3(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <param name="procName"></param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlProcedureQueriesAsync``4(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <param name="procName"></param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlProcedureQueriesAsync``5(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <param name="procName"></param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlProcedureQueriesAsync``6(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <param name="procName"></param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlProcedureQueriesAsync``7(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <param name="procName"></param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlProcedureQueriesAsync``8(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <typeparam name="T8">元组元素类型</typeparam>
            <param name="procName"></param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlProcedureScalar(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 单行单列
            </summary>
            <param name="procName"></param>
            <param name="parameters">命令参数</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlProcedureScalar(System.String,System.Object)">
            <summary>
            执行存储过程返回 单行单列
            </summary>
            <param name="procName"></param>
            <param name="model">参数模型</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlProcedureScalarAsync(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 单行单列
            </summary>
            <param name="procName"></param>
            <param name="parameters">命令参数</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlProcedureScalarAsync(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 单行单列
            </summary>
            <param name="procName"></param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlProcedureScalarAsync(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 单行单列
            </summary>
            <param name="procName"></param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlProcedureScalar``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 单行单列
            </summary>
            <param name="procName"></param>
            <param name="parameters">命令参数</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlProcedureScalar``1(System.String,System.Object)">
            <summary>
            执行存储过程返回 单行单列
            </summary>
            <param name="procName"></param>
            <param name="model">参数模型</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlProcedureScalarAsync``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 单行单列
            </summary>
            <param name="procName"></param>
            <param name="parameters">命令参数</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlProcedureScalarAsync``1(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 单行单列
            </summary>
            <param name="procName"></param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlProcedureScalarAsync``1(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 单行单列
            </summary>
            <param name="procName"></param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlProcedureNonQuery(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程无数据返回
            </summary>
            <param name="procName"></param>
            <param name="parameters">命令参数</param>
            <returns>int</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlProcedureNonQuery(System.String,System.Object)">
            <summary>
            执行存储过程无数据返回
            </summary>
            <param name="procName"></param>
            <param name="model">参数模型</param>
            <returns>int</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlProcedureNonQueryAsync(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程无数据返回
            </summary>
            <param name="procName"></param>
            <param name="parameters">命令参数</param>
            <returns>int</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlProcedureNonQueryAsync(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行存储过程无数据返回
            </summary>
            <param name="procName"></param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>int</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlProcedureNonQueryAsync(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行存储过程无数据返回
            </summary>
            <param name="procName"></param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>int</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlProcedureOutput(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回OUPUT、RETURN、结果集
            </summary>
            <param name="procName"></param>
            <param name="parameters">命令参数</param>
            <returns>ProcedureOutput</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlProcedureOutputAsync(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回OUPUT、RETURN、结果集
            </summary>
            <param name="procName"></param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>ProcedureOutput</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlProcedureOutput(System.String,System.Object)">
            <summary>
            执行存储过程返回OUPUT、RETURN、结果集
            </summary>
            <param name="procName"></param>
            <param name="model">命令模型</param>
            <returns>ProcedureOutput</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlProcedureOutputAsync(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回OUPUT、RETURN、结果集
            </summary>
            <param name="procName"></param>
            <param name="model">命令模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>ProcedureOutput</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlProcedureOutput``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回OUPUT、RETURN、结果集
            </summary>
            <typeparam name="TResult">数据集结果</typeparam>
            <param name="procName"></param>
            <param name="parameters">命令参数</param>
            <returns>ProcedureOutput</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlProcedureOutputAsync``1(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回OUPUT、RETURN、结果集
            </summary>
            <typeparam name="TResult">数据集结果</typeparam>
            <param name="procName"></param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>ProcedureOutput</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlProcedureOutput``1(System.String,System.Object)">
            <summary>
            执行存储过程返回OUPUT、RETURN、结果集
            </summary>
            <typeparam name="TResult">数据集结果</typeparam>
            <param name="procName"></param>
            <param name="model">命令模型</param>
            <returns>ProcedureOutput</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlProcedureOutputAsync``1(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回OUPUT、RETURN、结果集
            </summary>
            <typeparam name="TResult">数据集结果</typeparam>
            <param name="procName"></param>
            <param name="model">命令模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>ProcedureOutput</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlFunctionScalar(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行标量函数返回 单行单列
            </summary>
            <param name="funcName"></param>
            <param name="parameters">命令参数</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlFunctionScalar(System.String,System.Object)">
            <summary>
            执行标量函数返回 单行单列
            </summary>
            <param name="funcName"></param>
            <param name="model"></param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlFunctionScalarAsync(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行标量函数返回 单行单列
            </summary>
            <param name="funcName"></param>
            <param name="parameters">命令参数</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlFunctionScalarAsync(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行标量函数返回 单行单列
            </summary>
            <param name="funcName"></param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlFunctionScalarAsync(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行标量函数返回 单行单列
            </summary>
            <param name="funcName"></param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlFunctionScalar``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行标量函数返回 单行单列
            </summary>
            <typeparam name="TResult">返回值类型</typeparam>
            <param name="funcName"></param>
            <param name="parameters">命令参数</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlFunctionScalar``1(System.String,System.Object)">
            <summary>
            执行标量函数返回 单行单列
            </summary>
            <typeparam name="TResult">返回值类型</typeparam>
            <param name="funcName"></param>
            <param name="model">参数模型</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlFunctionScalarAsync``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行标量函数返回 单行单列
            </summary>
            <typeparam name="TResult">返回值类型</typeparam>
            <param name="funcName"></param>
            <param name="parameters">命令参数</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlFunctionScalarAsync``1(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行标量函数返回 单行单列
            </summary>
            <typeparam name="TResult">返回值类型</typeparam>
            <param name="funcName"></param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlFunctionScalarAsync``1(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行标量函数返回 单行单列
            </summary>
            <typeparam name="TResult">返回值类型</typeparam>
            <param name="funcName"></param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlFunctionQuery(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行表值函数返回 DataTable
            </summary>
            <param name="funcName"></param>
            <param name="parameters">命令参数</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlFunctionQuery(System.String,System.Object)">
            <summary>
            执行表值函数返回 DataTable
            </summary>
            <param name="funcName"></param>
            <param name="model">参数模型</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlFunctionQueryAsync(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行表值函数返回 DataTable
            </summary>
            <param name="funcName"></param>
            <param name="parameters">命令参数</param>
            <returns>Task{DataTable}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlFunctionQueryAsync(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行表值函数返回 DataTable
            </summary>
            <param name="funcName"></param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>Task{DataTable}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlFunctionQueryAsync(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行表值函数返回 DataTable
            </summary>
            <param name="funcName"></param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>Task{DataTable}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlFunctionQuery``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行表值函数返回 List 集合
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="funcName"></param>
            <param name="parameters">命令参数</param>
            <returns>List{T}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlFunctionQuery``1(System.String,System.Object)">
            <summary>
            执行表值函数返回 List 集合
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="funcName"></param>
            <param name="model">参数模型</param>
            <returns>List{T}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlFunctionQueryAsync``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行表值函数返回 List 集合
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="funcName"></param>
            <param name="parameters">命令参数</param>
            <returns>Task{List{T}}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlFunctionQueryAsync``1(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行表值函数返回 List 集合
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="funcName"></param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>Task{List{T}}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlStringExecuteExtensions.SqlFunctionQueryAsync``1(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行表值函数返回 List 集合
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="funcName"></param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>Task{List{T}}</returns>
        </member>
        <member name="T:Furion.DatabaseAccessor.Extensions.MultiTenantDbContextExtensions">
            <summary>
            多租户数据库上下文拓展
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.MultiTenantDbContextExtensions.RefreshTenantCache(Microsoft.EntityFrameworkCore.DbContext)">
            <summary>
            刷新多租户缓存
            </summary>
            <param name="dbContext"></param>
        </member>
        <member name="T:Furion.DatabaseAccessor.AutoSaveChangesFilter">
            <summary>
            自动调用 SaveChanges 拦截器
            </summary>
        </member>
        <member name="F:Furion.DatabaseAccessor.AutoSaveChangesFilter.FilterOrder">
            <summary>
            过滤器排序
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.AutoSaveChangesFilter.Order">
            <summary>
            排序属性
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.AutoSaveChangesFilter.OnActionExecutionAsync(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext,Microsoft.AspNetCore.Mvc.Filters.ActionExecutionDelegate)">
            <summary>
            拦截请求
            </summary>
            <param name="context">动作方法上下文</param>
            <param name="next">中间件委托</param>
            <returns></returns>
        </member>
        <member name="T:Furion.DatabaseAccessor.AutoSaveChangesPageFilter">
            <summary>
            自动调用 SaveChanges 拦截器（Razor Pages）
            </summary>
        </member>
        <member name="F:Furion.DatabaseAccessor.AutoSaveChangesPageFilter.FilterOrder">
            <summary>
            过滤器排序
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.AutoSaveChangesPageFilter.Order">
            <summary>
            排序属性
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.AutoSaveChangesPageFilter.OnPageHandlerSelectionAsync(Microsoft.AspNetCore.Mvc.Filters.PageHandlerSelectedContext)">
            <summary>
            模型绑定拦截
            </summary>
            <param name="context"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Furion.DatabaseAccessor.AutoSaveChangesPageFilter.OnPageHandlerExecutionAsync(Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutingContext,Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutionDelegate)">
            <summary>
            拦截请求
            </summary>
            <param name="context"></param>
            <param name="next"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Furion.DatabaseAccessor.DbHelpers">
            <summary>
            数据库帮助类
            </summary>
        </member>
        <member name="F:Furion.DatabaseAccessor.DbHelpers.ParamRegex">
            <summary>
            参数匹配正则表达式
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbHelpers.ConvertToDbParameters(System.Object,System.Data.Common.DbCommand)">
            <summary>
            将模型转为 DbParameter 集合
            </summary>
            <param name="model">参数模型</param>
            <param name="dbCommand">数据库命令对象</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbHelpers.ConvertToDbParameters(System.Collections.Generic.Dictionary{System.String,System.Object},System.Data.Common.DbCommand)">
            <summary>
            将字典转换成命令参数
            </summary>
            <param name="keyValues">字典</param>
            <param name="dbCommand">数据库命令对象</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbHelpers.ConfigureDbParameter(System.String,System.Object,Furion.DatabaseAccessor.DbParameterAttribute,System.Data.Common.DbParameter)">
            <summary>
            配置数据库命令参数
            </summary>
            <param name="name">参数名</param>
            <param name="value">参数值</param>
            <param name="dbParameterAttribute">参数特性</param>
            <param name="dbParameter">数据库命令参数</param>
            <returns>DbParameter</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbHelpers.GenerateFunctionSql(System.String,Furion.DatabaseAccessor.DbFunctionType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            生成函数执行 sql 语句
            </summary>
            <param name="providerName">ADO.NET 数据库对象</param>
            <param name="dbFunctionType">函数类型</param>
            <param name="funcName">函数名词</param>
            <param name="parameters">函数参数</param>
            <returns>sql 语句</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbHelpers.GenerateFunctionSql(System.String,Furion.DatabaseAccessor.DbFunctionType,System.String,System.Object)">
             <summary>
             生成函数执行 sql 语句
             </summary>
            <param name="providerName">ADO.NET 数据库对象</param>
             <param name="dbFunctionType">函数类型</param>
             <param name="funcName">函数名词</param>
             <param name="model">参数模型</param>
             <returns>(string sql, DbParameter[] parameters)</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbHelpers.GenerateFunctionSql(System.String,Furion.DatabaseAccessor.DbFunctionType,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
             <summary>
             生成函数执行 sql 语句
             </summary>
            <param name="providerName">ADO.NET 数据库对象</param>
             <param name="dbFunctionType">函数类型</param>
             <param name="funcName">函数名词</param>
             <param name="keyValues">字典类型参数</param>
             <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbHelpers.WrapperProcedureOutput(System.String,System.Data.Common.DbParameter[],System.Data.DataSet)">
            <summary>
            包裹存储过程返回结果集
            </summary>
            <param name="providerName"></param>
            <param name="parameters">命令参数</param>
            <param name="dataSet">数据集</param>
            <returns>ProcedureOutput</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbHelpers.WrapperProcedureOutput``1(System.String,System.Data.Common.DbParameter[],System.Data.DataSet)">
            <summary>
            包裹存储过程返回结果集
            </summary>
            <typeparam name="TResult">数据集结果</typeparam>
            <param name="providerName"></param>
            <param name="parameters">命令参数</param>
            <param name="dataSet">数据集</param>
            <returns>ProcedureOutput</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbHelpers.WrapperProcedureOutput(System.String,System.Data.Common.DbParameter[],System.Data.DataSet,System.Type)">
            <summary>
            包裹存储过程返回结果集
            </summary>
            <param name="providerName"></param>
            <param name="parameters">命令参数</param>
            <param name="dataSet">数据集</param>
            <param name="type">返回类型</param>
            <returns>ProcedureOutput</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbHelpers.DataNotFoundException">
            <summary>
            数据没找到异常
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbHelpers.FixSqlParameterPlaceholder(System.String,System.String,System.Boolean)">
            <summary>
            修正不同数据库命令参数前缀不一致问题
            </summary>
            <param name="providerName"></param>
            <param name="parameterName"></param>
            <param name="isFixed"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbHelpers.ReadOuputValue(System.String,System.Data.Common.DbParameter[],System.Collections.Generic.IEnumerable{Furion.DatabaseAccessor.ProcedureOutputValue}@,System.Object@)">
            <summary>
            读取输出返回值
            </summary>
            <param name="providerName"></param>
            <param name="parameters">参数</param>
            <param name="outputValues">输出参数</param>
            <param name="returnValue">返回值</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbHelpers.GenerateDbFunctionSql(System.String,Furion.DatabaseAccessor.DbFunctionType,System.String,System.String[])">
            <summary>
            生存表值函数 sql
            </summary>
            <param name="providerName"></param>
            <param name="dbFunctionType"></param>
            <param name="funcName"></param>
            <param name="parameterNames"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbHelpers.CheckSqlParamsCount(System.Data.Common.DbCommand,System.Boolean@,System.String[]@)">
            <summary>
            检查 Sql 中命令参数个数
            </summary>
            <remarks>如果是存储过程，则返回 true</remarks>
            <param name="dbCommand"></param>
            <param name="isMatch"></param>
            <param name="paramNames"></param>
        </member>
        <member name="T:Furion.DatabaseAccessor.DbContextSaveChangesInterceptor">
            <summary>
            数据库上下文提交拦截器
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbContextSaveChangesInterceptor.SavingChanges(Microsoft.EntityFrameworkCore.Diagnostics.DbContextEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult{System.Int32})">
            <summary>
            拦截保存数据库之前
            </summary>
            <param name="eventData"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbContextSaveChangesInterceptor.SavingChangesAsync(Microsoft.EntityFrameworkCore.Diagnostics.DbContextEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult{System.Int32},System.Threading.CancellationToken)">
            <summary>
            拦截保存数据库之前
            </summary>
            <param name="eventData"></param>
            <param name="result"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbContextSaveChangesInterceptor.SavedChanges(Microsoft.EntityFrameworkCore.Diagnostics.SaveChangesCompletedEventData,System.Int32)">
            <summary>
            拦截保存数据库成功
            </summary>
            <param name="eventData"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbContextSaveChangesInterceptor.SavedChangesAsync(Microsoft.EntityFrameworkCore.Diagnostics.SaveChangesCompletedEventData,System.Int32,System.Threading.CancellationToken)">
            <summary>
            拦截保存数据库成功
            </summary>
            <param name="eventData"></param>
            <param name="result"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbContextSaveChangesInterceptor.SaveChangesFailed(Microsoft.EntityFrameworkCore.Diagnostics.DbContextErrorEventData)">
            <summary>
            拦截保存数据库失败
            </summary>
            <param name="eventData"></param>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbContextSaveChangesInterceptor.SaveChangesFailedAsync(Microsoft.EntityFrameworkCore.Diagnostics.DbContextErrorEventData,System.Threading.CancellationToken)">
            <summary>
            拦截保存数据库失败
            </summary>
            <param name="eventData"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.DatabaseAccessor.SqlCommandProfilerInterceptor">
            <summary>
            数据库执行命令拦截
            </summary>
        </member>
        <member name="T:Furion.DatabaseAccessor.SqlConnectionProfilerInterceptor">
            <summary>
            数据库连接拦截分析器
            </summary>
        </member>
        <member name="F:Furion.DatabaseAccessor.SqlConnectionProfilerInterceptor.IsPrintDbConnectionInfo">
            <summary>
            是否打印数据库连接信息
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlConnectionProfilerInterceptor.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlConnectionProfilerInterceptor.ConnectionOpening(System.Data.Common.DbConnection,Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult)">
            <summary>
            拦截数据库连接
            </summary>
            <param name="connection">数据库连接对象</param>
            <param name="eventData">数据库连接事件数据</param>
            <param name="result">拦截结果</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlConnectionProfilerInterceptor.ConnectionOpeningAsync(System.Data.Common.DbConnection,Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult,System.Threading.CancellationToken)">
            <summary>
            拦截数据库连接
            </summary>
            <param name="connection">数据库连接对象</param>
            <param name="eventData">数据库连接事件数据</param>
            <param name="result">拦截器结果</param>
            <param name="cancellationToken">取消异步Token</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlConnectionProfilerInterceptor.PrintConnectionToMiniProfiler(System.Data.Common.DbConnection,Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEventData)">
            <summary>
            打印数据库连接信息到 MiniProfiler
            </summary>
            <param name="connection">数据库连接对象</param>
            <param name="eventData">数据库连接事件数据</param>
        </member>
        <member name="T:Furion.DatabaseAccessor.DbProvider">
            <summary>
            数据库提供器选项
            </summary>
        </member>
        <member name="F:Furion.DatabaseAccessor.DbProvider.SqlServer">
            <summary>
            SqlServer 提供器程序集
            </summary>
        </member>
        <member name="F:Furion.DatabaseAccessor.DbProvider.Sqlite">
            <summary>
            Sqlite 提供器程序集
            </summary>
        </member>
        <member name="F:Furion.DatabaseAccessor.DbProvider.Cosmos">
            <summary>
            Cosmos 提供器程序集
            </summary>
        </member>
        <member name="F:Furion.DatabaseAccessor.DbProvider.InMemoryDatabase">
            <summary>
            内存数据库 提供器程序集
            </summary>
        </member>
        <member name="F:Furion.DatabaseAccessor.DbProvider.MySql">
            <summary>
            MySql 提供器程序集
            </summary>
        </member>
        <member name="F:Furion.DatabaseAccessor.DbProvider.MySqlOfficial">
            <summary>
            MySql 官方包（更新不及时，只支持 8.0.23+ 版本， 所以单独弄一个分类）
            </summary>
        </member>
        <member name="F:Furion.DatabaseAccessor.DbProvider.Npgsql">
            <summary>
            PostgreSQL 提供器程序集
            </summary>
        </member>
        <member name="F:Furion.DatabaseAccessor.DbProvider.Oracle">
            <summary>
            Oracle 提供器程序集
            </summary>
        </member>
        <member name="F:Furion.DatabaseAccessor.DbProvider.Firebird">
            <summary>
            Firebird 提供器程序集
            </summary>
        </member>
        <member name="F:Furion.DatabaseAccessor.DbProvider.Dm">
            <summary>
            Dm 提供器程序集
            </summary>
        </member>
        <member name="F:Furion.DatabaseAccessor.DbProvider.NotSupportStoredProcedureDatabases">
            <summary>
            不支持存储过程的数据库
            </summary>
        </member>
        <member name="F:Furion.DatabaseAccessor.DbProvider.NotSupportFunctionDatabases">
            <summary>
            不支持函数的数据库
            </summary>
        </member>
        <member name="F:Furion.DatabaseAccessor.DbProvider.NotSupportTableFunctionDatabases">
            <summary>
            不支持表值函数的数据库
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbProvider.#cctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbProvider.IsDatabaseFor(System.String,System.String)">
            <summary>
            判断是否是特定数据库
            </summary>
            <param name="providerName"></param>
            <param name="dbAssemblyName"></param>
            <returns>bool</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbProvider.GetConnectionString``1(System.String)">
            <summary>
            获取数据库上下文连接字符串
            </summary>
            <typeparam name="TDbContext"></typeparam>
            <param name="connectionMetadata">支持数据库连接字符串，配置文件的 ConnectionStrings 中的Key或 配置文件的完整的配置路径，如果是内存数据库，则为数据库名称</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbProvider.GetDefaultInterceptors">
            <summary>
            获取默认拦截器
            </summary>
        </member>
        <member name="F:Furion.DatabaseAccessor.DbProvider.DbContextAppDbContextAttributes">
            <summary>
            数据库上下文 [AppDbContext] 特性缓存
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbProvider.GetAppDbContextAttribute(System.Type)">
            <summary>
            获取数据库上下文 [AppDbContext] 特性
            </summary>
            <param name="dbContexType"></param>
            <returns></returns>
        </member>
        <member name="F:Furion.DatabaseAccessor.DbProvider.NotSupportException">
            <summary>
            不支持操作类型
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbProvider.CheckStoredProcedureSupported(System.String,System.Data.CommandType)">
            <summary>
            检查是否支持存储过程
            </summary>
            <param name="providerName">数据库提供器名词</param>
            <param name="commandType">命令类型</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbProvider.CheckFunctionSupported(System.String,Furion.DatabaseAccessor.DbFunctionType)">
            <summary>
            检查是否支持函数
            </summary>
            <param name="providerName">数据库提供器名</param>
            <param name="dbFunctionType">数据库函数类型</param>
        </member>
        <member name="T:Furion.DatabaseAccessor.EntityExecutePart`1">
            <summary>
            实体执行部件
            </summary>
            <typeparam name="TEntity"></typeparam>
            <summary>
            实体执行组件
            </summary>
            <summary>
            实体执行部件
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.EntityExecutePart`1.Default">
            <summary>
            静态缺省 Entity 部件
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.EntityExecutePart`1.Entity">
            <summary>
            实体
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.EntityExecutePart`1.DbContextLocator">
            <summary>
            数据库上下文定位器
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.EntityExecutePart`1.ContextScoped">
            <summary>
            数据库上下文执行作用域
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.EntityExecutePart`1.Ethnics">
            <summary>
            获取实体同类（族群）
            </summary>
            <returns>DbSet{TEntity}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EntityExecutePart`1.Insert(System.Nullable{System.Boolean})">
            <summary>
            新增一条记录
            </summary>
            <param name="ignoreNullValues"></param>
            <returns>代理的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EntityExecutePart`1.InsertAsync(System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            新增一条记录
            </summary>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>代理的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EntityExecutePart`1.InsertNow(System.Nullable{System.Boolean})">
            <summary>
            新增一条记录并立即提交
            </summary>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EntityExecutePart`1.InsertNow(System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            新增一条记录并立即提交
            </summary>
            <param name="acceptAllChangesOnSuccess">接受所有提交更改</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EntityExecutePart`1.InsertNowAsync(System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            新增一条记录并立即提交
            </summary>
            <param name="cancellationToken">异步取消令牌</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EntityExecutePart`1.InsertNowAsync(System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            新增一条记录并立即提交
            </summary>
            <param name="acceptAllChangesOnSuccess">接受所有提交更改</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EntityExecutePart`1.Update(System.Nullable{System.Boolean})">
            <summary>
            更新一条记录
            </summary>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EntityExecutePart`1.UpdateAsync(System.Nullable{System.Boolean})">
            <summary>
            更新一条记录
            </summary>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EntityExecutePart`1.UpdateNow(System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并立即提交
            </summary>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EntityExecutePart`1.UpdateNow(System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并立即提交
            </summary>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EntityExecutePart`1.UpdateNowAsync(System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并立即提交
            </summary>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EntityExecutePart`1.UpdateNowAsync(System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并立即提交
            </summary>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EntityExecutePart`1.UpdateInclude(System.String[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中特定属性
            </summary>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EntityExecutePart`1.UpdateInclude(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中特定属性
            </summary>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EntityExecutePart`1.UpdateInclude(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中特定属性
            </summary>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EntityExecutePart`1.UpdateInclude(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中特定属性
            </summary>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EntityExecutePart`1.UpdateIncludeAsync(System.String[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性
            </summary>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EntityExecutePart`1.UpdateIncludeAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性
            </summary>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EntityExecutePart`1.UpdateIncludeAsync(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性
            </summary>
            <param name="propertyNames">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EntityExecutePart`1.UpdateIncludeAsync(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性
            </summary>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EntityExecutePart`1.UpdateIncludeNow(System.String[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EntityExecutePart`1.UpdateIncludeNow(System.String[],System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EntityExecutePart`1.UpdateIncludeNow(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EntityExecutePart`1.UpdateIncludeNow(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EntityExecutePart`1.UpdateIncludeNow(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EntityExecutePart`1.UpdateIncludeNow(System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EntityExecutePart`1.UpdateIncludeNow(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EntityExecutePart`1.UpdateIncludeNow(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}},System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EntityExecutePart`1.UpdateIncludeNowAsync(System.String[],System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EntityExecutePart`1.UpdateIncludeNowAsync(System.String[],System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EntityExecutePart`1.UpdateIncludeNowAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EntityExecutePart`1.UpdateIncludeNowAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EntityExecutePart`1.UpdateIncludeNowAsync(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EntityExecutePart`1.UpdateIncludeNowAsync(System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EntityExecutePart`1.UpdateIncludeNowAsync(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EntityExecutePart`1.UpdateIncludeNowAsync(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}},System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EntityExecutePart`1.UpdateExclude(System.String[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中特定属性
            </summary>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EntityExecutePart`1.UpdateExclude(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中特定属性
            </summary>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EntityExecutePart`1.UpdateExclude(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中特定属性
            </summary>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EntityExecutePart`1.UpdateExclude(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中特定属性
            </summary>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EntityExecutePart`1.UpdateExcludeAsync(System.String[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性
            </summary>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EntityExecutePart`1.UpdateExcludeAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性
            </summary>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EntityExecutePart`1.UpdateExcludeAsync(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性
            </summary>
            <param name="propertyNames">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EntityExecutePart`1.UpdateExcludeAsync(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性
            </summary>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EntityExecutePart`1.UpdateExcludeNow(System.String[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EntityExecutePart`1.UpdateExcludeNow(System.String[],System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EntityExecutePart`1.UpdateExcludeNow(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EntityExecutePart`1.UpdateExcludeNow(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EntityExecutePart`1.UpdateExcludeNow(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EntityExecutePart`1.UpdateExcludeNow(System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EntityExecutePart`1.UpdateExcludeNow(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EntityExecutePart`1.UpdateExcludeNow(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}},System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EntityExecutePart`1.UpdateExcludeNowAsync(System.String[],System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EntityExecutePart`1.UpdateExcludeNowAsync(System.String[],System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EntityExecutePart`1.UpdateExcludeNowAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EntityExecutePart`1.UpdateExcludeNowAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EntityExecutePart`1.UpdateExcludeNowAsync(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EntityExecutePart`1.UpdateExcludeNowAsync(System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EntityExecutePart`1.UpdateExcludeNowAsync(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EntityExecutePart`1.UpdateExcludeNowAsync(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}},System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EntityExecutePart`1.Delete">
            <summary>
            删除一条记录
            </summary>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EntityExecutePart`1.DeleteAsync">
            <summary>
            删除一条记录
            </summary>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EntityExecutePart`1.DeleteNow">
            <summary>
            删除一条记录并立即提交
            </summary>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EntityExecutePart`1.DeleteNow(System.Boolean)">
            <summary>
            删除一条记录并立即提交
            </summary>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EntityExecutePart`1.DeleteNowAsync(System.Threading.CancellationToken)">
            <summary>
            删除一条记录并立即提交
            </summary>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EntityExecutePart`1.DeleteNowAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            删除一条记录并立即提交
            </summary>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EntityExecutePart`1.GetRepository">
            <summary>
            获取实体仓储
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EntityExecutePart`1.SetEntity(`0)">
            <summary>
            设置实体
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EntityExecutePart`1.SetContextScoped(System.IServiceProvider)">
            <summary>
            设置数据库执行作用域
            </summary>
            <param name="serviceProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EntityExecutePart`1.Change``1">
            <summary>
            设置数据库上下文定位器
            </summary>
            <typeparam name="TDbContextLocator"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EntityExecutePart`1.Change(System.Type)">
            <summary>
            设置数据库上下文定位器
            </summary>
            <returns></returns>
        </member>
        <member name="T:Furion.DatabaseAccessor.ProcedureOutputResult">
            <summary>
            存储过程输出返回值
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.ProcedureOutputResult.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="T:Furion.DatabaseAccessor.ProcedureOutputResult`1">
            <summary>
            存储过程输出返回值
            </summary>
            <typeparam name="TResult">泛型版本</typeparam>
        </member>
        <member name="M:Furion.DatabaseAccessor.ProcedureOutputResult`1.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.ProcedureOutputResult`1.OutputValues">
            <summary>
            输出值
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.ProcedureOutputResult`1.ReturnValue">
            <summary>
            返回值
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.ProcedureOutputResult`1.Result">
            <summary>
            结果集
            </summary>
        </member>
        <member name="T:Furion.DatabaseAccessor.ProcedureOutputValue">
            <summary>
            存储过程输出值模型
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.ProcedureOutputValue.Name">
            <summary>
            输出参数名
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.ProcedureOutputValue.Value">
            <summary>
            输出参数值
            </summary>
        </member>
        <member name="T:Furion.DatabaseAccessor.SqlExecutePart">
            <summary>
            构建 Sql 字符串执行部件
            </summary>
            <summary>
            构建 Sql 字符串执行部件
            </summary>
            <summary>
            构建 Sql 字符串执行部件
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.Default">
            <summary>
            静态缺省 Sql 部件
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.SqlExecutePart.SqlString">
            <summary>
            Sql 字符串
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.SqlExecutePart.Timeout">
            <summary>
            设置超时时间
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.SqlExecutePart.DbContextLocator">
            <summary>
            数据库上下文定位器
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.SqlExecutePart.ContextScoped">
            <summary>
            设置服务提供器
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlQuery(System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 DataTable
            </summary>
            <param name="parameters">命令参数</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlQuery(System.Object)">
            <summary>
            Sql 查询返回 DataTable
            </summary>
            <param name="model">参数模型</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlQueryAsync(System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 DataTable
            </summary>
            <param name="parameters">命令参数</param>
            <returns>Task{DataTable}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlQueryAsync(System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 DataTable
            </summary>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>Task{DataTable}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlQueryAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 DataTable
            </summary>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>Task{DataTable}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlQuery``1(System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 List 集合
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="parameters">命令参数</param>
            <returns>List{T}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlQuery``1(System.Object)">
            <summary>
            Sql 查询返回 List 集合
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="model">参数模型</param>
            <returns>List{T}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlQueryAsync``1(System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 List 集合
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="parameters">命令参数</param>
            <returns>Task{List{T}}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlQueryAsync``1(System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 List 集合
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>Task{List{T}}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlQueryAsync``1(System.Object,System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 List 集合
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>Task{List{T}}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlQueries(System.Data.Common.DbParameter[])">
            <summary>
             Sql 查询返回 DataSet
            </summary>
            <param name="parameters">命令参数</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlQueries(System.Object)">
            <summary>
             Sql 查询返回 DataSet
            </summary>
            <param name="model">参数模型</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlQueriesAsync(System.Data.Common.DbParameter[])">
            <summary>
             Sql 查询返回 DataSet
            </summary>
            <param name="parameters">命令参数</param>
            <returns>Task{DataSet}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlQueriesAsync(System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
             Sql 查询返回 DataSet
            </summary>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>Task{DataSet}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlQueriesAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
             Sql 查询返回 DataSet
            </summary>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>Task{DataSet}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlQueries``1(System.Data.Common.DbParameter[])">
            <summary>
             Sql 查询返回 List 集合
            </summary>
            <typeparam name="T1">返回类型</typeparam>
            <param name="parameters">命令参数</param>
            <returns>List{T1}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlQueries``2(System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlQueries``3(System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlQueries``4(System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlQueries``5(System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlQueries``6(System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlQueries``7(System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlQueries``8(System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <typeparam name="T8">元组元素类型</typeparam>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlQueries``1(System.Object)">
            <summary>
             Sql 查询返回 List 集合
            </summary>
            <typeparam name="T1">返回类型</typeparam>
            <param name="model">参数模型</param>
            <returns>List{T1}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlQueries``2(System.Object)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <param name="model">参数模型</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlQueries``3(System.Object)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <param name="model">参数模型</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlQueries``4(System.Object)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <param name="model">参数模型</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlQueries``5(System.Object)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <param name="model">参数模型</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlQueries``6(System.Object)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <param name="model">参数模型</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlQueries``7(System.Object)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <param name="model">参数模型</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlQueries``8(System.Object)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <typeparam name="T8">元组元素类型</typeparam>
            <param name="model">参数模型</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlQueriesAsync``1(System.Data.Common.DbParameter[])">
            <summary>
             Sql 查询返回 List 集合
            </summary>
            <typeparam name="T1">返回类型</typeparam>
            <param name="parameters">命令参数</param>
            <returns>Task{List{T1}}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlQueriesAsync``1(System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
             Sql 查询返回 List 集合
            </summary>
            <typeparam name="T1">返回类型</typeparam>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>Task{List{T1}}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlQueriesAsync``2(System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlQueriesAsync``2(System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlQueriesAsync``3(System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlQueriesAsync``3(System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlQueriesAsync``4(System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlQueriesAsync``4(System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlQueriesAsync``5(System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlQueriesAsync``5(System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlQueriesAsync``6(System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlQueriesAsync``6(System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlQueriesAsync``7(System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlQueriesAsync``7(System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlQueriesAsync``8(System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <typeparam name="T8">元组元素类型</typeparam>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlQueriesAsync``8(System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <typeparam name="T8">元组元素类型</typeparam>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlQueriesAsync``1(System.Object,System.Threading.CancellationToken)">
            <summary>
             Sql 查询返回 List 集合
            </summary>
            <typeparam name="T1">返回类型</typeparam>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>List{T1}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlQueriesAsync``2(System.Object,System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlQueriesAsync``3(System.Object,System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlQueriesAsync``4(System.Object,System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlQueriesAsync``5(System.Object,System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlQueriesAsync``6(System.Object,System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlQueriesAsync``7(System.Object,System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlQueriesAsync``8(System.Object,System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <typeparam name="T8">元组元素类型</typeparam>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlNonQuery(System.Data.Common.DbParameter[])">
            <summary>
            执行 Sql 无数据返回
            </summary>
            <param name="parameters">命令参数</param>
            <returns>int</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlNonQuery(System.Object)">
            <summary>
            执行 Sql 无数据返回
            </summary>
            <param name="model">参数模型</param>
            <returns>int</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlNonQueryAsync(System.Data.Common.DbParameter[])">
            <summary>
            执行 Sql 无数据返回
            </summary>
            <param name="parameters">命令参数</param>
            <returns>int</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlNonQueryAsync(System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行 Sql 无数据返回
            </summary>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>int</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlNonQueryAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            执行 Sql 无数据返回
            </summary>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>int</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlScalar(System.Data.Common.DbParameter[])">
            <summary>
            执行 Sql 返回 单行单列
            </summary>
            <param name="parameters">命令参数</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlScalar(System.Object)">
            <summary>
            执行 Sql 返回 单行单列
            </summary>
            <param name="model">参数模型</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlScalarAsync(System.Data.Common.DbParameter[])">
            <summary>
            执行 Sql 返回 单行单列
            </summary>
            <param name="parameters">命令参数</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlScalarAsync(System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行 Sql 返回 单行单列
            </summary>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlScalarAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            执行 Sql 返回 单行单列
            </summary>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlScalar``1(System.Data.Common.DbParameter[])">
            <summary>
            执行 Sql 返回 单行单列
            </summary>
            <param name="parameters">命令参数</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlScalar``1(System.Object)">
            <summary>
            执行 Sql 返回 单行单列
            </summary>
            <param name="model">参数模型</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlScalarAsync``1(System.Data.Common.DbParameter[])">
            <summary>
            执行 Sql 返回 单行单列
            </summary>
            <param name="parameters">命令参数</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlScalarAsync``1(System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行 Sql 返回 单行单列
            </summary>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlScalarAsync``1(System.Object,System.Threading.CancellationToken)">
            <summary>
            执行 Sql 返回 单行单列
            </summary>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlProcedureQuery(System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 DataTable
            </summary>
            <param name="parameters">命令参数</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlProcedureQuery(System.Object)">
            <summary>
            执行存储过程返回 DataTable
            </summary>
            <param name="model">参数模型</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlProcedureQueryAsync(System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 DataTable
            </summary>
            <param name="parameters">命令参数</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlProcedureQueryAsync(System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 DataTable
            </summary>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlProcedureQueryAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 DataTable
            </summary>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlProcedureQuery``1(System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 List 集合
            </summary>
            <param name="parameters">命令参数</param>
            <returns>List{T}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlProcedureQuery``1(System.Object)">
            <summary>
            执行存储过程返回 List 集合
            </summary>
            <param name="model">参数模型</param>
            <returns>List{T}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlProcedureQueryAsync``1(System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 List 集合
            </summary>
            <param name="parameters">命令参数</param>
            <returns>List{T}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlProcedureQueryAsync``1(System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 List 集合
            </summary>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>List{T}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlProcedureQueryAsync``1(System.Object,System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 List 集合
            </summary>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>List{T}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlProcedureQueries(System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 DataSet
            </summary>
            <param name="parameters">命令参数</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlProcedureQueries(System.Object)">
            <summary>
            执行存储过程返回 DataSet
            </summary>
            <param name="model">参数模型</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlProcedureQueriesAsync(System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 DataSet
            </summary>
            <param name="parameters">命令参数</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlProcedureQueriesAsync(System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 DataSet
            </summary>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlProcedureQueriesAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 DataSet
            </summary>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlProcedureQueries``1(System.Data.Common.DbParameter[])">
            <summary>
             执行存储过程返回 List 集合
            </summary>
            <typeparam name="T1">返回类型</typeparam>
            <param name="parameters">命令参数</param>
            <returns>List{T1}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlProcedureQueries``2(System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlProcedureQueries``3(System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlProcedureQueries``4(System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlProcedureQueries``5(System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlProcedureQueries``6(System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlProcedureQueries``7(System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlProcedureQueries``8(System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <typeparam name="T8">元组元素类型</typeparam>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlProcedureQueries``1(System.Object)">
            <summary>
             执行存储过程返回 List 集合
            </summary>
            <typeparam name="T1">返回类型</typeparam>
            <param name="model">参数模型</param>
            <returns>List{T1}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlProcedureQueries``2(System.Object)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <param name="model">参数模型</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlProcedureQueries``3(System.Object)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <param name="model">参数模型</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlProcedureQueries``4(System.Object)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <param name="model">参数模型</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlProcedureQueries``5(System.Object)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <param name="model">参数模型</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlProcedureQueries``6(System.Object)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <param name="model">参数模型</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlProcedureQueries``7(System.Object)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <param name="model">参数模型</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlProcedureQueries``8(System.Object)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <typeparam name="T8">元组元素类型</typeparam>
            <param name="model">参数模型</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlProcedureQueriesAsync``1(System.Data.Common.DbParameter[])">
            <summary>
             执行存储过程返回 List 集合
            </summary>
            <typeparam name="T1">返回类型</typeparam>
            <param name="parameters">命令参数</param>
            <returns>Task{List{T1}}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlProcedureQueriesAsync``1(System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
             执行存储过程返回 List 集合
            </summary>
            <typeparam name="T1">返回类型</typeparam>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>Task{List{T1}}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlProcedureQueriesAsync``2(System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlProcedureQueriesAsync``2(System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlProcedureQueriesAsync``3(System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlProcedureQueriesAsync``3(System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlProcedureQueriesAsync``4(System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlProcedureQueriesAsync``4(System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlProcedureQueriesAsync``5(System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlProcedureQueriesAsync``5(System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlProcedureQueriesAsync``6(System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlProcedureQueriesAsync``6(System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlProcedureQueriesAsync``7(System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlProcedureQueriesAsync``7(System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlProcedureQueriesAsync``8(System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <typeparam name="T8">元组元素类型</typeparam>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlProcedureQueriesAsync``8(System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <typeparam name="T8">元组元素类型</typeparam>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlProcedureQueriesAsync``1(System.Object,System.Threading.CancellationToken)">
            <summary>
             执行存储过程返回 List 集合
            </summary>
            <typeparam name="T1">返回类型</typeparam>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>List{T1}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlProcedureQueriesAsync``2(System.Object,System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlProcedureQueriesAsync``3(System.Object,System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlProcedureQueriesAsync``4(System.Object,System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlProcedureQueriesAsync``5(System.Object,System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlProcedureQueriesAsync``6(System.Object,System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlProcedureQueriesAsync``7(System.Object,System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlProcedureQueriesAsync``8(System.Object,System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <typeparam name="T8">元组元素类型</typeparam>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlProcedureScalar(System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 单行单列
            </summary>
            <param name="parameters">命令参数</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlProcedureScalar(System.Object)">
            <summary>
            执行存储过程返回 单行单列
            </summary>
            <param name="model">参数模型</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlProcedureScalarAsync(System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 单行单列
            </summary>
            <param name="parameters">命令参数</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlProcedureScalarAsync(System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 单行单列
            </summary>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlProcedureScalarAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 单行单列
            </summary>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlProcedureScalar``1(System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 单行单列
            </summary>
            <param name="parameters">命令参数</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlProcedureScalar``1(System.Object)">
            <summary>
            执行存储过程返回 单行单列
            </summary>
            <param name="model">参数模型</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlProcedureScalarAsync``1(System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 单行单列
            </summary>
            <param name="parameters">命令参数</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlProcedureScalarAsync``1(System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 单行单列
            </summary>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlProcedureScalarAsync``1(System.Object,System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 单行单列
            </summary>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlProcedureNonQuery(System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程无数据返回
            </summary>
            <param name="parameters">命令参数</param>
            <returns>int</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlProcedureNonQuery(System.Object)">
            <summary>
            执行存储过程无数据返回
            </summary>
            <param name="model">参数模型</param>
            <returns>int</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlProcedureNonQueryAsync(System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程无数据返回
            </summary>
            <param name="parameters">命令参数</param>
            <returns>int</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlProcedureNonQueryAsync(System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行存储过程无数据返回
            </summary>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>int</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlProcedureNonQueryAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            执行存储过程无数据返回
            </summary>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>int</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlProcedureOutput(System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回OUPUT、RETURN、结果集
            </summary>
            <param name="parameters">命令参数</param>
            <returns>ProcedureOutput</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlProcedureOutputAsync(System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回OUPUT、RETURN、结果集
            </summary>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>ProcedureOutput</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlProcedureOutput(System.Object)">
            <summary>
            执行存储过程返回OUPUT、RETURN、结果集
            </summary>
            <param name="model">命令模型</param>
            <returns>ProcedureOutput</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlProcedureOutputAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回OUPUT、RETURN、结果集
            </summary>
            <param name="model">命令模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>ProcedureOutput</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlProcedureOutput``1(System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回OUPUT、RETURN、结果集
            </summary>
            <typeparam name="TResult">数据集结果</typeparam>
            <param name="parameters">命令参数</param>
            <returns>ProcedureOutput</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlProcedureOutputAsync``1(System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回OUPUT、RETURN、结果集
            </summary>
            <typeparam name="TResult">数据集结果</typeparam>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>ProcedureOutput</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlProcedureOutput``1(System.Object)">
            <summary>
            执行存储过程返回OUPUT、RETURN、结果集
            </summary>
            <typeparam name="TResult">数据集结果</typeparam>
            <param name="model">命令模型</param>
            <returns>ProcedureOutput</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlProcedureOutputAsync``1(System.Object,System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回OUPUT、RETURN、结果集
            </summary>
            <typeparam name="TResult">数据集结果</typeparam>
            <param name="model">命令模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>ProcedureOutput</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlFunctionScalar(System.Data.Common.DbParameter[])">
            <summary>
            执行标量函数返回 单行单列
            </summary>
            <param name="parameters">命令参数</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlFunctionScalar(System.Object)">
            <summary>
            执行标量函数返回 单行单列
            </summary>
            <param name="model"></param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlFunctionScalarAsync(System.Data.Common.DbParameter[])">
            <summary>
            执行标量函数返回 单行单列
            </summary>
            <param name="parameters">命令参数</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlFunctionScalarAsync(System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行标量函数返回 单行单列
            </summary>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlFunctionScalarAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            执行标量函数返回 单行单列
            </summary>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlFunctionScalar``1(System.Data.Common.DbParameter[])">
            <summary>
            执行标量函数返回 单行单列
            </summary>
            <typeparam name="TResult">返回值类型</typeparam>
            <param name="parameters">命令参数</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlFunctionScalar``1(System.Object)">
            <summary>
            执行标量函数返回 单行单列
            </summary>
            <typeparam name="TResult">返回值类型</typeparam>
            <param name="model">参数模型</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlFunctionScalarAsync``1(System.Data.Common.DbParameter[])">
            <summary>
            执行标量函数返回 单行单列
            </summary>
            <typeparam name="TResult">返回值类型</typeparam>
            <param name="parameters">命令参数</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlFunctionScalarAsync``1(System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行标量函数返回 单行单列
            </summary>
            <typeparam name="TResult">返回值类型</typeparam>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlFunctionScalarAsync``1(System.Object,System.Threading.CancellationToken)">
            <summary>
            执行标量函数返回 单行单列
            </summary>
            <typeparam name="TResult">返回值类型</typeparam>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlFunctionQuery(System.Data.Common.DbParameter[])">
            <summary>
            执行表值函数返回 DataTable
            </summary>
            <param name="parameters">命令参数</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlFunctionQuery(System.Object)">
            <summary>
            执行表值函数返回 DataTable
            </summary>
            <param name="model">参数模型</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlFunctionQueryAsync(System.Data.Common.DbParameter[])">
            <summary>
            执行表值函数返回 DataTable
            </summary>
            <param name="parameters">命令参数</param>
            <returns>Task{DataTable}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlFunctionQueryAsync(System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行表值函数返回 DataTable
            </summary>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>Task{DataTable}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlFunctionQueryAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            执行表值函数返回 DataTable
            </summary>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>Task{DataTable}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlFunctionQuery``1(System.Data.Common.DbParameter[])">
            <summary>
            执行表值函数返回 List 集合
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="parameters">命令参数</param>
            <returns>List{T}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlFunctionQuery``1(System.Object)">
            <summary>
            执行表值函数返回 List 集合
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="model">参数模型</param>
            <returns>List{T}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlFunctionQueryAsync``1(System.Data.Common.DbParameter[])">
            <summary>
            执行表值函数返回 List 集合
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="parameters">命令参数</param>
            <returns>Task{List{T}}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlFunctionQueryAsync``1(System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行表值函数返回 List 集合
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>Task{List{T}}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SqlFunctionQueryAsync``1(System.Object,System.Threading.CancellationToken)">
            <summary>
            执行表值函数返回 List 集合
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>Task{List{T}}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.GetSqlRepository">
            <summary>
            获取 Sql 执行仓储
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SetSqlString(System.String)">
            <summary>
            设置 Sql 字符串
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SetCommandTimeout(System.Int32)">
            <summary>
            设置 ADO.NET 超时时间
            </summary>
            <param name="timeout">单位秒</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.SetContextScoped(System.IServiceProvider)">
            <summary>
            设置数据库执行作用域
            </summary>
            <param name="serviceProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.Change``1">
            <summary>
            设置数据库上下文定位器
            </summary>
            <typeparam name="TDbContextLocator"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecutePart.Change(System.Type)">
            <summary>
            设置数据库上下文定位器
            </summary>
            <returns></returns>
        </member>
        <member name="T:Furion.DatabaseAccessor.IDbContextLocator">
            <summary>
            数据库上下文定位器
            </summary>
        </member>
        <member name="T:Furion.DatabaseAccessor.MasterDbContextLocator">
            <summary>
            默认数据库上下文定位器
            </summary>
        </member>
        <member name="T:Furion.DatabaseAccessor.IMultiTenantOnDatabase">
            <summary>
            基于多个数据库多租户模式
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.IMultiTenantOnDatabase.GetDatabaseConnectionString">
            <summary>
            获取数据库连接字符串
            </summary>
            <returns></returns>
        </member>
        <member name="T:Furion.DatabaseAccessor.IMultiTenantOnSchema">
            <summary>
            基于数据库架构的多租户模式
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.IMultiTenantOnSchema.GetSchemaName">
            <summary>
            获取数据库架构名称
            </summary>
            <returns></returns>
        </member>
        <member name="T:Furion.DatabaseAccessor.IMultiTenantOnTable">
            <summary>
            基于数据库表的多租户模式
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.IMultiTenantOnTable.GetTenantId">
            <summary>
            获取租户Id
            </summary>
            <returns></returns>
        </member>
        <member name="T:Furion.DatabaseAccessor.IPrivateMultiTenant">
            <summary>
            多租户依赖接口（禁止外部继承）
            </summary>
        </member>
        <member name="T:Furion.DatabaseAccessor.Tenant">
            <summary>
            租户实体
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.Tenant.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.Tenant.TenantId">
            <summary>
            租户Id
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.Tenant.Name">
            <summary>
            租户名
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.Tenant.Host">
            <summary>
            来源主机地址
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.Tenant.EmailAddress">
            <summary>
            电子邮箱
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.Tenant.PhoneNumber">
            <summary>
            手机号码
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.Tenant.Schema">
            <summary>
            架构名
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.Tenant.ConnectionString">
            <summary>
            数据库链接字符串
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.Tenant.CreatedTime">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="T:Furion.DatabaseAccessor.MultiTenantDbContextLocator">
            <summary>
            多租户数据库上下文定位器
            </summary>
        </member>
        <member name="T:Furion.DatabaseAccessor.DbRepository`1">
            <summary>
            多数据库仓储
            </summary>
            <typeparam name="TDbContextLocator"></typeparam>
        </member>
        <member name="F:Furion.DatabaseAccessor.DbRepository`1._serviceProvider">
            <summary>
            服务提供器
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbRepository`1.#ctor(System.IServiceProvider)">
            <summary>
            构造函数
            </summary>
            <param name="serviceProvider">服务提供器</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbRepository`1.Change``1">
            <summary>
            切换实体
            </summary>
            <typeparam name="TEntity"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbRepository`1.Sql">
            <summary>
            获取 Sql 操作仓储
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbRepository`1.GetService``1">
            <summary>
            解析服务
            </summary>
            <typeparam name="TService"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbRepository`1.GetRequiredService``1">
            <summary>
            解析服务
            </summary>
            <typeparam name="TService"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Furion.DatabaseAccessor.IDeletableRepository`1">
            <summary>
            可删除仓储接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IDeletableRepository`2">
            <summary>
            可删除仓储接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IPrivateDeletableRepository`1">
            <summary>
            可删除仓储接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateDeletableRepository`1.DeleteFromSegments(System.Func{System.String,System.Collections.Generic.IEnumerable{System.String}},System.Object[])">
            <summary>
            根据主键分表删除记录
            </summary>
            <param name="tableNamesAction"></param>
            <param name="keys"></param>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateDeletableRepository`1.DeleteFromSegmentsAsync(System.Func{System.String,System.Collections.Generic.IEnumerable{System.String}},System.Object[])">
            <summary>
            根据主键分表删除记录
            </summary>
            <param name="tableNamesAction"></param>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateDeletableRepository`1.Delete(`0)">
            <summary>
            删除一条记录
            </summary>
            <param name="entity">实体</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateDeletableRepository`1.Delete(`0[])">
            <summary>
            删除多条记录
            </summary>
            <param name="entities">多个实体</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateDeletableRepository`1.Delete(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            删除多条记录
            </summary>
            <param name="entities">多个实体</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateDeletableRepository`1.DeleteAsync(`0)">
            <summary>
            删除一条记录
            </summary>
            <param name="entity">实体</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateDeletableRepository`1.DeleteAsync(`0[])">
            <summary>
            删除多条记录
            </summary>
            <param name="entities">多个实体</param>
            <returns>Task</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateDeletableRepository`1.DeleteAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            删除多条记录
            </summary>
            <param name="entities">多个实体</param>
            <returns>Task</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateDeletableRepository`1.DeleteNow(`0)">
            <summary>
            删除一条记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateDeletableRepository`1.DeleteNow(`0,System.Boolean)">
            <summary>
            删除一条记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateDeletableRepository`1.DeleteNow(`0[])">
            <summary>
            删除多条记录并立即提交
            </summary>
            <param name="entities">多个实体</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateDeletableRepository`1.DeleteNow(`0[],System.Boolean)">
            <summary>
            删除多条记录并立即提交
            </summary>
            <param name="entities">多个实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateDeletableRepository`1.DeleteNow(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            删除多条记录并立即提交
            </summary>
            <param name="entities">多个实体</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateDeletableRepository`1.DeleteNow(System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
            删除多条记录并立即提交
            </summary>
            <param name="entities">多个实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateDeletableRepository`1.DeleteNowAsync(`0,System.Threading.CancellationToken)">
            <summary>
            删除一条记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateDeletableRepository`1.DeleteNowAsync(`0,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            删除一条记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateDeletableRepository`1.DeleteNowAsync(`0[])">
            <summary>
            删除多条记录并立即提交
            </summary>
            <param name="entities">多个实体</param>
            <returns>Task</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateDeletableRepository`1.DeleteNowAsync(`0[],System.Threading.CancellationToken)">
            <summary>
            删除多条记录并立即提交
            </summary>
            <param name="entities">多个实体</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>Task</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateDeletableRepository`1.DeleteNowAsync(`0[],System.Boolean,System.Threading.CancellationToken)">
            <summary>
            删除多条记录并立即提交
            </summary>
            <param name="entities">多个实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>Task</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateDeletableRepository`1.DeleteNowAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
            删除多条记录并立即提交
            </summary>
            <param name="entities">多个实体</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>Task</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateDeletableRepository`1.DeleteNowAsync(System.Collections.Generic.IEnumerable{`0},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            删除多条记录并立即提交
            </summary>
            <param name="entities">多个实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>Task</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateDeletableRepository`1.Delete(System.Object)">
            <summary>
            根据主键删除一条记录
            </summary>
            <param name="key">主键</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateDeletableRepository`1.DeleteAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            根据主键删除一条记录
            </summary>
            <param name="key">主键</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>Task</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateDeletableRepository`1.DeleteNow(System.Object)">
            <summary>
            根据主键删除一条记录并立即提交
            </summary>
            <param name="key">主键</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateDeletableRepository`1.DeleteNow(System.Object,System.Boolean)">
            <summary>
            根据主键删除一条记录并立即提交
            </summary>
            <param name="key">主键</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateDeletableRepository`1.DeleteNowAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            根据主键删除一条记录并立即提交
            </summary>
            <param name="key">主键</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateDeletableRepository`1.DeleteNowAsync(System.Object,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            根据主键删除一条记录并立即提交
            </summary>
            <param name="key">主键</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns></returns>
        </member>
        <member name="T:Furion.DatabaseAccessor.IInsertableRepository`1">
            <summary>
            可插入仓储接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IInsertableRepository`2">
            <summary>
            可插入仓储接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IPrivateInsertableRepository`1">
            <summary>
            可插入仓储接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateInsertableRepository`1.InsertFromSegments(System.Func{System.String,System.Collections.Generic.IEnumerable{System.String}},`0,System.Object)">
            <summary>
            分表插入一条记录
            </summary>
            <param name="tableNamesAction"></param>
            <param name="entity"></param>
            <param name="keySet"></param>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateInsertableRepository`1.InsertFromSegmentsAsync(System.Func{System.String,System.Collections.Generic.IEnumerable{System.String}},`0,System.Object)">
            <summary>
            分表插入一条记录
            </summary>
            <param name="tableNamesAction"></param>
            <param name="entity"></param>
            <param name="keySet"></param>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateInsertableRepository`1.Insert(`0,System.Nullable{System.Boolean})">
            <summary>
            新增一条记录
            </summary>
            <param name="entity">实体</param>
            <param name="ignoreNullValues"></param>
            <returns>代理的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateInsertableRepository`1.Insert(`0[])">
            <summary>
            新增多条记录
            </summary>
            <param name="entities">多个实体</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateInsertableRepository`1.Insert(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            新增多条记录
            </summary>
            <param name="entities">多个实体</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateInsertableRepository`1.InsertAsync(`0,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            新增一条记录
            </summary>
            <param name="entity">实体</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>代理的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateInsertableRepository`1.InsertAsync(`0[])">
            <summary>
            新增多条记录
            </summary>
            <param name="entities">多个实体</param>
            <returns>Task</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateInsertableRepository`1.InsertAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
            新增多条记录
            </summary>
            <param name="entities">多个实体</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateInsertableRepository`1.InsertNow(`0,System.Nullable{System.Boolean})">
            <summary>
            新增一条记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中返回的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateInsertableRepository`1.InsertNow(`0,System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            新增一条记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中返回的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateInsertableRepository`1.InsertNow(`0[])">
            <summary>
            新增多条记录
            </summary>
            <param name="entities">多个实体</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateInsertableRepository`1.InsertNow(`0[],System.Boolean)">
            <summary>
            新增多条记录
            </summary>
            <param name="entities">多个实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateInsertableRepository`1.InsertNow(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            新增多条记录
            </summary>
            <param name="entities">多个实体</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateInsertableRepository`1.InsertNow(System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
            新增多条记录
            </summary>
            <param name="entities">多个实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateInsertableRepository`1.InsertNowAsync(`0,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            新增一条记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中返回的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateInsertableRepository`1.InsertNowAsync(`0,System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            新增一条记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中返回的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateInsertableRepository`1.InsertNowAsync(`0[])">
            <summary>
            新增多条记录并立即提交
            </summary>
            <param name="entities">多个实体</param>
            <returns>Task</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateInsertableRepository`1.InsertNowAsync(`0[],System.Threading.CancellationToken)">
            <summary>
            新增多条记录并立即提交
            </summary>
            <param name="entities">多个实体</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>Task</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateInsertableRepository`1.InsertNowAsync(`0[],System.Boolean,System.Threading.CancellationToken)">
            <summary>
            新增多条记录并立即提交
            </summary>
            <param name="entities">多个实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>Task</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateInsertableRepository`1.InsertNowAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
            新增多条记录并立即提交
            </summary>
            <param name="entities">多个实体</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>Task</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateInsertableRepository`1.InsertNowAsync(System.Collections.Generic.IEnumerable{`0},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            新增多条记录并立即提交
            </summary>
            <param name="entities">多个实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>Task</returns>
        </member>
        <member name="T:Furion.DatabaseAccessor.IPrivateRootRepository">
            <summary>
            仓储依赖空接口
            </summary>
        </member>
        <member name="T:Furion.DatabaseAccessor.IReadableRepository`1">
            <summary>
            可读仓储接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IReadableRepository`2">
            <summary>
            可读仓储接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IPrivateReadableRepository`1">
            <summary>
            可读仓储接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateReadableRepository`1.Find(System.Object)">
            <summary>
            根据键查询一条记录
            </summary>
            <param name="key">键</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateReadableRepository`1.Find(System.Object[])">
            <summary>
            根据多个键查询一条记录
            </summary>
            <param name="keyValues">多个键</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateReadableRepository`1.FindAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            根据键查询一条记录
            </summary>
            <param name="key">键</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateReadableRepository`1.FindAsync(System.Object[])">
            <summary>
            根据多个键查询一条记录
            </summary>
            <param name="keyValues">多个键</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateReadableRepository`1.FindAsync(System.Object[],System.Threading.CancellationToken)">
            <summary>
            根据多个键查询一条记录
            </summary>
            <param name="keyValues">多个键</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateReadableRepository`1.FindOrDefault(System.Object)">
            <summary>
            根据键查询一条记录
            </summary>
            <param name="key">键</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateReadableRepository`1.FindOrDefault(System.Object[])">
            <summary>
            根据多个键查询一条记录
            </summary>
            <param name="keyValues">多个键</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateReadableRepository`1.FindOrDefaultAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            根据键查询一条记录
            </summary>
            <param name="key">键</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateReadableRepository`1.FindOrDefaultAsync(System.Object[])">
            <summary>
            根据多个键查询一条记录
            </summary>
            <param name="keyValues">多个键</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateReadableRepository`1.FindOrDefaultAsync(System.Object[],System.Threading.CancellationToken)">
            <summary>
            根据多个键查询一条记录
            </summary>
            <param name="keyValues">多个键</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateReadableRepository`1.Single(System.Nullable{System.Boolean})">
            <summary>
            查询一条记录
            </summary>
            <param name="tracking">是否跟踪实体</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateReadableRepository`1.Single(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Nullable{System.Boolean})">
            <summary>
            根据表达式查询一条记录
            </summary>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateReadableRepository`1.SingleOrDefault(System.Nullable{System.Boolean})">
            <summary>
            查询一条记录
            </summary>
            <param name="tracking">是否跟踪实体</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateReadableRepository`1.SingleOrDefault(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Nullable{System.Boolean})">
            <summary>
            根据表达式查询一条记录
            </summary>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateReadableRepository`1.SingleAsync(System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            查询一条记录
            </summary>
            <param name="tracking">是否跟踪实体</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateReadableRepository`1.SingleAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            根据表达式查询一条记录
            </summary>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateReadableRepository`1.SingleOrDefaultAsync(System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            查询一条记录
            </summary>
            <param name="tracking">是否跟踪实体</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateReadableRepository`1.SingleOrDefaultAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            根据表达式查询一条记录
            </summary>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateReadableRepository`1.First(System.Nullable{System.Boolean})">
            <summary>
            查询一条记录
            </summary>
            <param name="tracking">是否跟踪实体</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateReadableRepository`1.First(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Nullable{System.Boolean})">
            <summary>
            根据表达式查询一条记录
            </summary>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateReadableRepository`1.FirstOrDefault(System.Nullable{System.Boolean})">
            <summary>
            查询一条记录
            </summary>
            <param name="tracking">是否跟踪实体</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateReadableRepository`1.FirstOrDefault(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Nullable{System.Boolean})">
            <summary>
            根据表达式查询一条记录
            </summary>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateReadableRepository`1.FirstAsync(System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            查询一条记录
            </summary>
            <param name="tracking">是否跟踪实体</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateReadableRepository`1.FirstAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            根据表达式查询一条记录
            </summary>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateReadableRepository`1.FirstOrDefaultAsync(System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            查询一条记录
            </summary>
            <param name="tracking">是否跟踪实体</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateReadableRepository`1.FirstOrDefaultAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            根据表达式查询一条记录
            </summary>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateReadableRepository`1.Last(System.Nullable{System.Boolean})">
            <summary>
            查询一条记录
            </summary>
            <param name="tracking">是否跟踪实体</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateReadableRepository`1.Last(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Nullable{System.Boolean})">
            <summary>
            根据表达式查询一条记录
            </summary>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateReadableRepository`1.LastOrDefault(System.Nullable{System.Boolean})">
            <summary>
            查询一条记录
            </summary>
            <param name="tracking">是否跟踪实体</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateReadableRepository`1.LastOrDefault(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Nullable{System.Boolean})">
            <summary>
            根据表达式查询一条记录
            </summary>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateReadableRepository`1.LastAsync(System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            查询一条记录
            </summary>
            <param name="tracking">是否跟踪实体</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateReadableRepository`1.LastAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            根据表达式查询一条记录
            </summary>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateReadableRepository`1.LastOrDefaultAsync(System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            查询一条记录
            </summary>
            <param name="tracking">是否跟踪实体</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateReadableRepository`1.LastOrDefaultAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            根据表达式查询一条记录
            </summary>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateReadableRepository`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            根据表达式查询多条记录
            </summary>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <returns>数据库中的多个实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateReadableRepository`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Int32,System.Boolean}},System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            根据表达式查询多条记录
            </summary>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <returns>数据库中的多个实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateReadableRepository`1.Where(System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            根据条件执行表达式查询多条记录
            </summary>
            <param name="condition">条件</param>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <returns>数据库中的多个实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateReadableRepository`1.Where(System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Int32,System.Boolean}},System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            根据条件执行表达式查询多条记录
            </summary>
            <param name="condition">条件</param>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <returns>数据库中的多个实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateReadableRepository`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}[])">
            <summary>
            根据条件执行表达式查询多条记录
            </summary>
            <param name="predicates">表达式集合</param>
            <returns>数据库中的多个实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateReadableRepository`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}[],System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            根据条件执行表达式查询多条记录
            </summary>
            <param name="predicates">表达式集合</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <returns>数据库中的多个实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateReadableRepository`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Int32,System.Boolean}}[])">
            <summary>
            根据条件执行表达式查询多条记录
            </summary>
            <param name="predicates">表达式集合</param>
            <returns>数据库中的多个实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateReadableRepository`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Int32,System.Boolean}}[],System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            根据条件执行表达式查询多条记录
            </summary>
            <param name="predicates">表达式集合</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <returns>数据库中的多个实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateReadableRepository`1.Where(System.ValueTuple{System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}}[])">
            <summary>
            根据条件执行表达式查询多条记录
            </summary>
            <param name="conditionPredicates">条件表达式集合</param>
            <returns>数据库中的多个实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateReadableRepository`1.Where(System.ValueTuple{System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}}[],System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            根据条件执行表达式查询多条记录
            </summary>
            <param name="conditionPredicates">条件表达式集合</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <returns>数据库中的多个实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateReadableRepository`1.Where(System.ValueTuple{System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Int32,System.Boolean}}}[])">
            <summary>
            根据条件执行表达式查询多条记录
            </summary>
            <param name="conditionPredicates">条件表达式集合</param>
            <returns>数据库中的多个实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateReadableRepository`1.Where(System.ValueTuple{System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Int32,System.Boolean}}}[],System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            根据条件执行表达式查询多条记录
            </summary>
            <param name="conditionPredicates">条件表达式集合</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <returns>数据库中的多个实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateReadableRepository`1.Include``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            加载关联数据
            </summary>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <returns>数据库中的多个实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateReadableRepository`1.Include``1(System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            根据条件加载关联数据
            </summary>
            <param name="condition">条件</param>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <returns>数据库中的多个实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateReadableRepository`1.Any(System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            判断记录是否存在
            </summary>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <returns>bool</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateReadableRepository`1.Any(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            根据表达式判断记录是否存在
            </summary>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <returns>bool</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateReadableRepository`1.AnyAsync(System.Nullable{System.Boolean},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            判断记录是否存在
            </summary>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>bool</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateReadableRepository`1.AnyAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Nullable{System.Boolean},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            根据表达式判断记录是否存在
            </summary>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>bool</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateReadableRepository`1.All(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            根据表达式判断记录是否全部满足条件
            </summary>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <returns>bool</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateReadableRepository`1.AllAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Nullable{System.Boolean},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            根据表达式判断记录是否全部满足条件
            </summary>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>bool</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateReadableRepository`1.Count(System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            查看记录条数
            </summary>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <returns>int</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateReadableRepository`1.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            根据表达式查询记录条数
            </summary>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <returns>int</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateReadableRepository`1.CountAsync(System.Nullable{System.Boolean},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            查看记录条数
            </summary>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>int</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateReadableRepository`1.CountAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Nullable{System.Boolean},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            根据表达式查询记录条数
            </summary>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>int</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateReadableRepository`1.Min(System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            查看最小记录
            </summary>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <returns>实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateReadableRepository`1.Min``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            根据表达式查看最小值
            </summary>
            <typeparam name="TResult">最小值类型</typeparam>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateReadableRepository`1.MinAsync(System.Nullable{System.Boolean},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            查看最小记录
            </summary>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateReadableRepository`1.MinAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Nullable{System.Boolean},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            根据表达式查看最小值
            </summary>
            <typeparam name="TResult">最小值类型</typeparam>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateReadableRepository`1.Max(System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            查看最大记录
            </summary>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <returns>实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateReadableRepository`1.Max``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            根据表达式查看最大值
            </summary>
            <typeparam name="TResult">最大值类型</typeparam>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateReadableRepository`1.MaxAsync(System.Nullable{System.Boolean},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            查看最大记录
            </summary>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateReadableRepository`1.MaxAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Nullable{System.Boolean},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            根据表达式查看最大值
            </summary>
            <typeparam name="TResult">最大值类型</typeparam>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateReadableRepository`1.AsQueryable(System.Nullable{System.Boolean})">
            <summary>
            构建查询分析器
            </summary>
            <param name="tracking">是否跟踪实体</param>
            <returns>IQueryable{TEntity}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateReadableRepository`1.AsQueryable(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            构建查询分析器
            </summary>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <returns>IQueryable{TEntity}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateReadableRepository`1.AsQueryable(System.Linq.Expressions.Expression{System.Func{`0,System.Int32,System.Boolean}},System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            构建查询分析器
            </summary>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <returns>IQueryable{TEntity}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateReadableRepository`1.AsEnumerable(System.Nullable{System.Boolean})">
            <summary>
            直接返回数据库结果
            </summary>
            <param name="tracking">是否跟踪实体</param>
            <returns>IEnumerable{TEntity}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateReadableRepository`1.AsEnumerable(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            直接返回数据库结果
            </summary>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <returns>List{TEntity}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateReadableRepository`1.AsEnumerable(System.Linq.Expressions.Expression{System.Func{`0,System.Int32,System.Boolean}},System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            直接返回数据库结果
            </summary>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <returns>IEnumerable{TEntity}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateReadableRepository`1.AsAsyncEnumerable(System.Nullable{System.Boolean})">
            <summary>
            直接返回数据库结果
            </summary>
            <param name="tracking">是否跟踪实体</param>
            <returns>List{TEntity}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateReadableRepository`1.AsAsyncEnumerable(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            直接返回数据库结果
            </summary>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <returns>IAsyncEnumerable{TEntity}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateReadableRepository`1.AsAsyncEnumerable(System.Linq.Expressions.Expression{System.Func{`0,System.Int32,System.Boolean}},System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            直接返回数据库结果
            </summary>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <returns>IAsyncEnumerable{TEntity}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateReadableRepository`1.FromSqlRaw(System.String,System.Object[])">
            <summary>
            执行 Sql 返回 IQueryable
            </summary>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>IQueryable{TEntity}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateReadableRepository`1.FromSqlInterpolated(System.FormattableString)">
            <summary>
            执行 Sql 返回 IQueryable
            </summary>
            <remarks>
            支持字符串内插语法
            </remarks>
            <param name="sql">sql 语句</param>
            <returns>IQueryable{TEntity}</returns>
        </member>
        <member name="T:Furion.DatabaseAccessor.ISqlExecutableRepository">
            <summary>
            Sql 执行仓储接口
            </summary>
        </member>
        <member name="T:Furion.DatabaseAccessor.ISqlExecutableRepository`1">
            <summary>
            Sql 执行仓储接口
            </summary>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository">
            <summary>
            Sql 执行仓储接口
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlProcedureQuery(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 DataTable
            </summary>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlProcedureQuery(System.String,System.Object)">
            <summary>
            执行存储过程返回 DataTable
            </summary>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlProcedureQueryAsync(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 DataTable
            </summary>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlProcedureQueryAsync(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 DataTable
            </summary>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlProcedureQueryAsync(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 DataTable
            </summary>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlProcedureQuery``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 List 集合
            </summary>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>List{T}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlProcedureQuery``1(System.String,System.Object)">
            <summary>
            执行存储过程返回 List 集合
            </summary>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <returns>List{T}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlProcedureQueryAsync``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 List 集合
            </summary>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>List{T}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlProcedureQueryAsync``1(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 List 集合
            </summary>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>List{T}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlProcedureQueryAsync``1(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 List 集合
            </summary>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>List{T}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlProcedureQueries(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 DataSet
            </summary>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlProcedureQueries(System.String,System.Object)">
            <summary>
            执行存储过程返回 DataSet
            </summary>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlProcedureQueriesAsync(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 DataSet
            </summary>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlProcedureQueriesAsync(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 DataSet
            </summary>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlProcedureQueriesAsync(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 DataSet
            </summary>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlProcedureQueries``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
             执行存储过程返回 List 集合
            </summary>
            <typeparam name="T1">返回类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>List{T1}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlProcedureQueries``2(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlProcedureQueries``3(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlProcedureQueries``4(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlProcedureQueries``5(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlProcedureQueries``6(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlProcedureQueries``7(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlProcedureQueries``8(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <typeparam name="T8">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlProcedureQueries``1(System.String,System.Object)">
            <summary>
             执行存储过程返回 List 集合
            </summary>
            <typeparam name="T1">返回类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <returns>List{T1}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlProcedureQueries``2(System.String,System.Object)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlProcedureQueries``3(System.String,System.Object)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlProcedureQueries``4(System.String,System.Object)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlProcedureQueries``5(System.String,System.Object)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlProcedureQueries``6(System.String,System.Object)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlProcedureQueries``7(System.String,System.Object)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlProcedureQueries``8(System.String,System.Object)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <typeparam name="T8">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlProcedureQueriesAsync``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
             执行存储过程返回 List 集合
            </summary>
            <typeparam name="T1">返回类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>Task{List{T1}}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlProcedureQueriesAsync``1(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
             执行存储过程返回 List 集合
            </summary>
            <typeparam name="T1">返回类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>Task{List{T1}}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlProcedureQueriesAsync``2(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlProcedureQueriesAsync``2(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlProcedureQueriesAsync``3(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlProcedureQueriesAsync``3(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlProcedureQueriesAsync``4(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlProcedureQueriesAsync``4(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlProcedureQueriesAsync``5(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlProcedureQueriesAsync``5(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlProcedureQueriesAsync``6(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlProcedureQueriesAsync``6(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlProcedureQueriesAsync``7(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlProcedureQueriesAsync``7(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlProcedureQueriesAsync``8(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <typeparam name="T8">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlProcedureQueriesAsync``8(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <typeparam name="T8">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlProcedureQueriesAsync``1(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
             执行存储过程返回 List 集合
            </summary>
            <typeparam name="T1">返回类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>List{T1}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlProcedureQueriesAsync``2(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlProcedureQueriesAsync``3(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlProcedureQueriesAsync``4(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlProcedureQueriesAsync``5(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlProcedureQueriesAsync``6(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlProcedureQueriesAsync``7(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlProcedureQueriesAsync``8(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <typeparam name="T8">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlProcedureScalar(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 单行单列
            </summary>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlProcedureScalar(System.String,System.Object)">
            <summary>
            执行存储过程返回 单行单列
            </summary>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlProcedureScalarAsync(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 单行单列
            </summary>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlProcedureScalarAsync(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 单行单列
            </summary>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlProcedureScalarAsync(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 单行单列
            </summary>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlProcedureScalar``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 单行单列
            </summary>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlProcedureScalar``1(System.String,System.Object)">
            <summary>
            执行存储过程返回 单行单列
            </summary>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlProcedureScalarAsync``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 单行单列
            </summary>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlProcedureScalarAsync``1(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 单行单列
            </summary>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlProcedureScalarAsync``1(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 单行单列
            </summary>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlProcedureNonQuery(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程无数据返回
            </summary>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>int</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlProcedureNonQuery(System.String,System.Object)">
            <summary>
            执行存储过程无数据返回
            </summary>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <returns>int</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlProcedureNonQueryAsync(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程无数据返回
            </summary>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>int</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlProcedureNonQueryAsync(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行存储过程无数据返回
            </summary>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>int</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlProcedureNonQueryAsync(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行存储过程无数据返回
            </summary>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>int</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlNonQuery(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行 Sql 无数据返回
            </summary>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>int</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlNonQuery(System.String,System.Object)">
            <summary>
            执行 Sql 无数据返回
            </summary>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <returns>int</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlNonQueryAsync(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行 Sql 无数据返回
            </summary>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>int</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlNonQueryAsync(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行 Sql 无数据返回
            </summary>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>int</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlNonQueryAsync(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行 Sql 无数据返回
            </summary>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>int</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlScalar(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行 Sql 返回 单行单列
            </summary>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlScalar(System.String,System.Object)">
            <summary>
            执行 Sql 返回 单行单列
            </summary>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlScalarAsync(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行 Sql 返回 单行单列
            </summary>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlScalarAsync(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行 Sql 返回 单行单列
            </summary>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlScalarAsync(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行 Sql 返回 单行单列
            </summary>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlScalar``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行 Sql 返回 单行单列
            </summary>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlScalar``1(System.String,System.Object)">
            <summary>
            执行 Sql 返回 单行单列
            </summary>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlScalarAsync``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行 Sql 返回 单行单列
            </summary>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlScalarAsync``1(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行 Sql 返回 单行单列
            </summary>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlScalarAsync``1(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行 Sql 返回 单行单列
            </summary>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlProcedureOutput(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回OUPUT、RETURN、结果集
            </summary>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>ProcedureOutput</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlProcedureOutputAsync(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回OUPUT、RETURN、结果集
            </summary>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>ProcedureOutput</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlProcedureOutput(System.String,System.Object)">
            <summary>
            执行存储过程返回OUPUT、RETURN、结果集
            </summary>
            <param name="procName">存储过程名</param>
            <param name="model">命令模型</param>
            <returns>ProcedureOutput</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlProcedureOutputAsync(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回OUPUT、RETURN、结果集
            </summary>
            <param name="procName">存储过程名</param>
            <param name="model">命令模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>ProcedureOutput</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlProcedureOutput``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回OUPUT、RETURN、结果集
            </summary>
            <typeparam name="TResult">数据集结果</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>ProcedureOutput</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlProcedureOutputAsync``1(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回OUPUT、RETURN、结果集
            </summary>
            <typeparam name="TResult">数据集结果</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>ProcedureOutput</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlProcedureOutput``1(System.String,System.Object)">
            <summary>
            执行存储过程返回OUPUT、RETURN、结果集
            </summary>
            <typeparam name="TResult">数据集结果</typeparam>
            <param name="procName">存储过程名</param>
            <param name="model">命令模型</param>
            <returns>ProcedureOutput</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlProcedureOutputAsync``1(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回OUPUT、RETURN、结果集
            </summary>
            <typeparam name="TResult">数据集结果</typeparam>
            <param name="procName">存储过程名</param>
            <param name="model">命令模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>ProcedureOutput</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlFunctionScalar(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行标量函数返回 单行单列
            </summary>
            <param name="funcName">函数名</param>
            <param name="parameters">命令参数</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlFunctionScalar(System.String,System.Object)">
            <summary>
            执行标量函数返回 单行单列
            </summary>
            <param name="funcName">函数名</param>
            <param name="model">参数模型</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlFunctionScalarAsync(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行标量函数返回 单行单列
            </summary>
            <param name="funcName">函数名</param>
            <param name="parameters">命令参数</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlFunctionScalarAsync(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行标量函数返回 单行单列
            </summary>
            <param name="funcName">函数名</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlFunctionScalarAsync(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行标量函数返回 单行单列
            </summary>
            <param name="funcName">函数名</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlFunctionScalar``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行标量函数返回 单行单列
            </summary>
            <typeparam name="TResult">返回值类型</typeparam>
            <param name="funcName">函数名</param>
            <param name="parameters">命令参数</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlFunctionScalar``1(System.String,System.Object)">
            <summary>
            执行标量函数返回 单行单列
            </summary>
            <typeparam name="TResult">返回值类型</typeparam>
            <param name="funcName">函数名</param>
            <param name="model">参数模型</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlFunctionScalarAsync``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行标量函数返回 单行单列
            </summary>
            <typeparam name="TResult">返回值类型</typeparam>
            <param name="funcName">函数名</param>
            <param name="parameters">命令参数</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlFunctionScalarAsync``1(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行标量函数返回 单行单列
            </summary>
            <typeparam name="TResult">返回值类型</typeparam>
            <param name="funcName">函数名</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlFunctionScalarAsync``1(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行标量函数返回 单行单列
            </summary>
            <typeparam name="TResult">返回值类型</typeparam>
            <param name="funcName">函数名</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlFunctionQuery(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行表值函数返回 DataTable
            </summary>
            <param name="funcName">函数名</param>
            <param name="parameters">命令参数</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlFunctionQuery(System.String,System.Object)">
            <summary>
            执行表值函数返回 DataTable
            </summary>
            <param name="funcName">函数名</param>
            <param name="model">参数模型</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlFunctionQueryAsync(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行表值函数返回 DataTable
            </summary>
            <param name="funcName">函数名</param>
            <param name="parameters">命令参数</param>
            <returns>Task{DataTable}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlFunctionQueryAsync(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行表值函数返回 DataTable
            </summary>
            <param name="funcName">函数名</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>Task{DataTable}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlFunctionQueryAsync(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行表值函数返回 DataTable
            </summary>
            <param name="funcName">函数名</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>Task{DataTable}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlFunctionQuery``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行表值函数返回 List 集合
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="funcName">函数名</param>
            <param name="parameters">命令参数</param>
            <returns>List{T}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlFunctionQuery``1(System.String,System.Object)">
            <summary>
            执行表值函数返回 List 集合
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="funcName">函数名</param>
            <param name="model">参数模型</param>
            <returns>List{T}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlFunctionQueryAsync``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行表值函数返回 List 集合
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="funcName">函数名</param>
            <param name="parameters">命令参数</param>
            <returns>Task{List{T}}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlFunctionQueryAsync``1(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行表值函数返回 List 集合
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="funcName">函数名</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>Task{List{T}}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlExecutableRepository.SqlFunctionQueryAsync``1(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行表值函数返回 List 集合
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="funcName">函数名</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>Task{List{T}}</returns>
        </member>
        <member name="T:Furion.DatabaseAccessor.ISqlReaderRepository">
            <summary>
            Sql 查询仓储接口
            </summary>
        </member>
        <member name="T:Furion.DatabaseAccessor.ISqlReaderRepository`1">
            <summary>
            Sql 查询仓储接口
            </summary>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IPrivateSqlReaderRepository">
            <summary>
            Sql 查询仓储接口
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlReaderRepository.SqlQuery(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 DataTable
            </summary>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlReaderRepository.SqlQuery(System.String,System.Object)">
            <summary>
            Sql 查询返回 DataTable
            </summary>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlReaderRepository.SqlQueryAsync(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 DataTable
            </summary>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>Task{DataTable}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlReaderRepository.SqlQueryAsync(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 DataTable
            </summary>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>Task{DataTable}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlReaderRepository.SqlQueryAsync(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 DataTable
            </summary>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>Task{DataTable}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlReaderRepository.SqlQuery``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 List 集合
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>List{T}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlReaderRepository.SqlQuery``1(System.String,System.Object)">
            <summary>
            Sql 查询返回 List 集合
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <returns>List{T}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlReaderRepository.SqlQueryAsync``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 List 集合
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>Task{List{T}}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlReaderRepository.SqlQueryAsync``1(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 List 集合
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>Task{List{T}}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlReaderRepository.SqlQueryAsync``1(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 List 集合
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>Task{List{T}}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlReaderRepository.SqlQueries(System.String,System.Data.Common.DbParameter[])">
            <summary>
             Sql 查询返回 DataSet
            </summary>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlReaderRepository.SqlQueries(System.String,System.Object)">
            <summary>
             Sql 查询返回 DataSet
            </summary>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlReaderRepository.SqlQueriesAsync(System.String,System.Data.Common.DbParameter[])">
            <summary>
             Sql 查询返回 DataSet
            </summary>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>Task{DataSet}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlReaderRepository.SqlQueriesAsync(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
             Sql 查询返回 DataSet
            </summary>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>Task{DataSet}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlReaderRepository.SqlQueriesAsync(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
             Sql 查询返回 DataSet
            </summary>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>Task{DataSet}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlReaderRepository.SqlQueries``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
             Sql 查询返回 List 集合
            </summary>
            <typeparam name="T1">返回类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>List{T1}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlReaderRepository.SqlQueries``2(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlReaderRepository.SqlQueries``3(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlReaderRepository.SqlQueries``4(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlReaderRepository.SqlQueries``5(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlReaderRepository.SqlQueries``6(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlReaderRepository.SqlQueries``7(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlReaderRepository.SqlQueries``8(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <typeparam name="T8">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlReaderRepository.SqlQueries``1(System.String,System.Object)">
            <summary>
             Sql 查询返回 List 集合
            </summary>
            <typeparam name="T1">返回类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <returns>List{T1}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlReaderRepository.SqlQueries``2(System.String,System.Object)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlReaderRepository.SqlQueries``3(System.String,System.Object)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlReaderRepository.SqlQueries``4(System.String,System.Object)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlReaderRepository.SqlQueries``5(System.String,System.Object)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlReaderRepository.SqlQueries``6(System.String,System.Object)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlReaderRepository.SqlQueries``7(System.String,System.Object)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlReaderRepository.SqlQueries``8(System.String,System.Object)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <typeparam name="T8">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlReaderRepository.SqlQueriesAsync``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
             Sql 查询返回 List 集合
            </summary>
            <typeparam name="T1">返回类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>Task{List{T1}}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlReaderRepository.SqlQueriesAsync``1(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
             Sql 查询返回 List 集合
            </summary>
            <typeparam name="T1">返回类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>Task{List{T1}}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlReaderRepository.SqlQueriesAsync``2(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlReaderRepository.SqlQueriesAsync``2(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlReaderRepository.SqlQueriesAsync``3(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlReaderRepository.SqlQueriesAsync``3(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlReaderRepository.SqlQueriesAsync``4(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlReaderRepository.SqlQueriesAsync``4(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlReaderRepository.SqlQueriesAsync``5(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlReaderRepository.SqlQueriesAsync``5(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlReaderRepository.SqlQueriesAsync``6(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlReaderRepository.SqlQueriesAsync``6(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlReaderRepository.SqlQueriesAsync``7(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlReaderRepository.SqlQueriesAsync``7(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlReaderRepository.SqlQueriesAsync``8(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <typeparam name="T8">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlReaderRepository.SqlQueriesAsync``8(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <typeparam name="T8">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlReaderRepository.SqlQueriesAsync``1(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
             Sql 查询返回 List 集合
            </summary>
            <typeparam name="T1">返回类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>List{T1}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlReaderRepository.SqlQueriesAsync``2(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlReaderRepository.SqlQueriesAsync``3(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlReaderRepository.SqlQueriesAsync``4(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlReaderRepository.SqlQueriesAsync``5(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlReaderRepository.SqlQueriesAsync``6(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlReaderRepository.SqlQueriesAsync``7(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlReaderRepository.SqlQueriesAsync``8(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <typeparam name="T8">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="T:Furion.DatabaseAccessor.IUpdateableRepository`1">
            <summary>
            可更新仓储接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IUpdateableRepository`2">
            <summary>
            可更新仓储接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IPrivateUpdateableRepository`1">
            <summary>
            可更新仓储接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateUpdateableRepository`1.UpdateFromSegments(System.Func{System.String,System.Collections.Generic.IEnumerable{System.String}},`0,System.String[],System.String[])">
            <summary>
            分表更新一条记录
            </summary>
            <param name="tableNamesAction"></param>
            <param name="entity"></param>
            <param name="includePropertyNames"></param>
            <param name="excludePropertyNames"></param>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateUpdateableRepository`1.UpdateFromSegmentsAsync(System.Func{System.String,System.Collections.Generic.IEnumerable{System.String}},`0,System.String[],System.String[])">
            <summary>
            分表更新一条记录
            </summary>
            <param name="tableNamesAction"></param>
            <param name="entity"></param>
            <param name="includePropertyNames"></param>
            <param name="excludePropertyNames"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateUpdateableRepository`1.Update(`0,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录
            </summary>
            <param name="entity">实体</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateUpdateableRepository`1.Update(`0[])">
            <summary>
            更新多条记录
            </summary>
            <param name="entities">多个实体</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateUpdateableRepository`1.Update(System.Collections.Generic.IEnumerable{`0},System.String[],System.String[])">
            <summary>
            更新多条记录
            </summary>
            <param name="entities">多个实体</param>
            <param name="includePropertyNames">包含属性</param>
            <param name="excludePropertyNames">排除属性</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateUpdateableRepository`1.UpdateAsync(`0,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录
            </summary>
            <param name="entity">实体</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateUpdateableRepository`1.UpdateAsync(`0[])">
            <summary>
            更新多条记录
            </summary>
            <param name="entities">多个实体</param>
            <returns>Task</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateUpdateableRepository`1.UpdateAsync(System.Collections.Generic.IEnumerable{`0},System.String[],System.String[])">
            <summary>
            更新多条记录
            </summary>
            <param name="entities">多个实体</param>
            <param name="includePropertyNames">包含属性</param>
            <param name="excludePropertyNames">排除属性</param>
            <returns>Task</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateUpdateableRepository`1.UpdateNow(`0,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateUpdateableRepository`1.UpdateNow(`0,System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateUpdateableRepository`1.UpdateNow(`0[])">
            <summary>
            更新多条记录并立即提交
            </summary>
            <param name="entities">多个实体</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateUpdateableRepository`1.UpdateNow(`0[],System.Boolean,System.String[],System.String[])">
            <summary>
            更新多条记录并立即提交
            </summary>
            <param name="entities">多个实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="includePropertyNames">包含属性</param>
            <param name="excludePropertyNames">排除属性</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateUpdateableRepository`1.UpdateNow(System.Collections.Generic.IEnumerable{`0},System.String[],System.String[])">
            <summary>
            更新多条记录并立即提交
            </summary>
            <param name="entities">多个实体</param>
            <param name="includePropertyNames">包含属性</param>
            <param name="excludePropertyNames">排除属性</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateUpdateableRepository`1.UpdateNow(System.Collections.Generic.IEnumerable{`0},System.Boolean,System.String[],System.String[])">
            <summary>
            更新多条记录并立即提交
            </summary>
            <param name="entities">多个实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="includePropertyNames">包含属性</param>
            <param name="excludePropertyNames">排除属性</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateUpdateableRepository`1.UpdateNowAsync(`0,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="cancellationToken">取消异步令牌</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateUpdateableRepository`1.UpdateNowAsync(`0,System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateUpdateableRepository`1.UpdateNowAsync(`0[])">
            <summary>
            更新多条记录并立即提交
            </summary>
            <param name="entities">多个实体</param>
            <returns>Task</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateUpdateableRepository`1.UpdateNowAsync(`0[],System.Threading.CancellationToken,System.String[],System.String[])">
            <summary>
            更新多条记录并立即提交
            </summary>
            <param name="entities">多个实体</param>
            <param name="cancellationToken">取消异步令牌</param>
            <param name="includePropertyNames">包含属性</param>
            <param name="excludePropertyNames">排除属性</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateUpdateableRepository`1.UpdateNowAsync(`0[],System.Boolean,System.Threading.CancellationToken,System.String[],System.String[])">
            <summary>
            更新多条记录并立即提交
            </summary>
            <param name="entities">多个实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="cancellationToken">取消异步令牌</param>
            <param name="includePropertyNames">包含属性</param>
            <param name="excludePropertyNames">排除属性</param>
            <returns>Task</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateUpdateableRepository`1.UpdateNowAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken,System.String[],System.String[])">
            <summary>
            更新多条记录并立即提交
            </summary>
            <param name="entities">多个实体</param>
            <param name="cancellationToken">取消异步令牌</param>
            <param name="includePropertyNames">包含属性</param>
            <param name="excludePropertyNames">排除属性</param>
            <returns>Task</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateUpdateableRepository`1.UpdateNowAsync(System.Collections.Generic.IEnumerable{`0},System.Boolean,System.Threading.CancellationToken,System.String[],System.String[])">
            <summary>
            更新多条记录并立即提交
            </summary>
            <param name="entities">多个实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="cancellationToken">取消异步令牌</param>
            <param name="includePropertyNames">包含属性</param>
            <param name="excludePropertyNames">排除属性</param>
            <returns>Task</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateUpdateableRepository`1.UpdateInclude(`0,System.String[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中特定属性
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateUpdateableRepository`1.UpdateInclude(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中特定属性
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateUpdateableRepository`1.UpdateInclude(`0,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中特定属性
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateUpdateableRepository`1.UpdateInclude(`0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中特定属性
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateUpdateableRepository`1.UpdateIncludeAsync(`0,System.String[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateUpdateableRepository`1.UpdateIncludeAsync(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateUpdateableRepository`1.UpdateIncludeAsync(`0,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateUpdateableRepository`1.UpdateIncludeAsync(`0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateUpdateableRepository`1.UpdateIncludeNow(`0,System.String[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateUpdateableRepository`1.UpdateIncludeNow(`0,System.String[],System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateUpdateableRepository`1.UpdateIncludeNow(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateUpdateableRepository`1.UpdateIncludeNow(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateUpdateableRepository`1.UpdateIncludeNow(`0,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateUpdateableRepository`1.UpdateIncludeNow(`0,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateUpdateableRepository`1.UpdateIncludeNow(`0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateUpdateableRepository`1.UpdateIncludeNow(`0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}},System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateUpdateableRepository`1.UpdateIncludeNowAsync(`0,System.String[],System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateUpdateableRepository`1.UpdateIncludeNowAsync(`0,System.String[],System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateUpdateableRepository`1.UpdateIncludeNowAsync(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateUpdateableRepository`1.UpdateIncludeNowAsync(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateUpdateableRepository`1.UpdateIncludeNowAsync(`0,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateUpdateableRepository`1.UpdateIncludeNowAsync(`0,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateUpdateableRepository`1.UpdateIncludeNowAsync(`0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateUpdateableRepository`1.UpdateIncludeNowAsync(`0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}},System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateUpdateableRepository`1.UpdateExclude(`0,System.String[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateUpdateableRepository`1.UpdateExclude(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateUpdateableRepository`1.UpdateExclude(`0,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateUpdateableRepository`1.UpdateExclude(`0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateUpdateableRepository`1.UpdateExcludeAsync(`0,System.String[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateUpdateableRepository`1.UpdateExcludeAsync(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateUpdateableRepository`1.UpdateExcludeAsync(`0,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateUpdateableRepository`1.UpdateExcludeAsync(`0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateUpdateableRepository`1.UpdateExcludeNow(`0,System.String[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateUpdateableRepository`1.UpdateExcludeNow(`0,System.String[],System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateUpdateableRepository`1.UpdateExcludeNow(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateUpdateableRepository`1.UpdateExcludeNow(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateUpdateableRepository`1.UpdateExcludeNow(`0,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateUpdateableRepository`1.UpdateExcludeNow(`0,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateUpdateableRepository`1.UpdateExcludeNow(`0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateUpdateableRepository`1.UpdateExcludeNow(`0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}},System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateUpdateableRepository`1.UpdateExcludeNowAsync(`0,System.String[],System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateUpdateableRepository`1.UpdateExcludeNowAsync(`0,System.String[],System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateUpdateableRepository`1.UpdateExcludeNowAsync(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateUpdateableRepository`1.UpdateExcludeNowAsync(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateUpdateableRepository`1.UpdateExcludeNowAsync(`0,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateUpdateableRepository`1.UpdateExcludeNowAsync(`0,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateUpdateableRepository`1.UpdateExcludeNowAsync(`0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateUpdateableRepository`1.UpdateExcludeNowAsync(`0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}},System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="T:Furion.DatabaseAccessor.IWritableRepository`1">
            <summary>
            可写仓储接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IWritableRepository`2">
            <summary>
            可写仓储接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IPrivateWritableRepository`1">
            <summary>
            可写仓储接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateWritableRepository`1.AcceptAllChanges">
            <summary>
            接受所有更改
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateWritableRepository`1.SavePoolNow">
            <summary>
            保存数据库上下文池中所有已更改的数据库上下文
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateWritableRepository`1.SavePoolNow(System.Boolean)">
            <summary>
            保存数据库上下文池中所有已更改的数据库上下文
            </summary>
            <param name="acceptAllChangesOnSuccess"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateWritableRepository`1.SavePoolNowAsync(System.Threading.CancellationToken)">
            <summary>
            保存数据库上下文池中所有已更改的数据库上下文
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateWritableRepository`1.SavePoolNowAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            保存数据库上下文池中所有已更改的数据库上下文
            </summary>
            <param name="acceptAllChangesOnSuccess"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateWritableRepository`1.SaveNow">
            <summary>
            提交更改操作
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateWritableRepository`1.SaveNow(System.Boolean)">
            <summary>
            提交更改操作
            </summary>
            <param name="acceptAllChangesOnSuccess"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateWritableRepository`1.SaveNowAsync(System.Threading.CancellationToken)">
            <summary>
            提交更改操作（异步）
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateWritableRepository`1.SaveNowAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            提交更改操作（异步）
            </summary>
            <param name="acceptAllChangesOnSuccess"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.DatabaseAccessor.EFCoreRepository">
            <summary>
            非泛型EF Core仓储实现
            </summary>
        </member>
        <member name="F:Furion.DatabaseAccessor.EFCoreRepository._serviceProvider">
            <summary>
            服务提供器
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository.#ctor(System.IServiceProvider)">
            <summary>
            构造函数
            </summary>
            <param name="serviceProvider">服务提供器</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository.Change``1">
            <summary>
            切换仓储
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <returns>仓储</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository.Change``2">
            <summary>
            切换多数据库上下文仓储
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <returns>仓储</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository.BuildChange``1">
            <summary>
            重新构建并切换仓储
            </summary>
            <remarks>特别注意，Scoped 必须手动释放</remarks>
            <typeparam name="TEntity">实体类型</typeparam>
            <returns>仓储</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository.BuildChange``2">
            <summary>
            重新构建并切换多数据库上下文仓储
            </summary>
            <remarks>特别注意，Scoped 必须手动释放</remarks>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <returns>仓储</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository.Sql">
            <summary>
            获取 Sql 操作仓储
            </summary>
            <returns>ISqlRepository</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository.Sql``1">
            <summary>
            获取多数据库上下文 Sql 操作仓储
            </summary>
            <returns>ISqlRepository{TDbContextLocator}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository.GetService``1">
            <summary>
            解析服务
            </summary>
            <typeparam name="TService"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository.GetRequiredService``1">
            <summary>
            解析服务
            </summary>
            <typeparam name="TService"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Furion.DatabaseAccessor.EFCoreRepository`1">
            <summary>
            EF Core仓储实现
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`1.#ctor(System.IServiceProvider)">
            <summary>
            构造函数
            </summary>
            <param name="serviceProvider">服务提供器</param>
        </member>
        <member name="T:Furion.DatabaseAccessor.EFCoreRepository`2">
            <summary>
            多数据库上下文仓储
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.#ctor(System.IServiceProvider)">
            <summary>
            构造函数
            </summary>
            <param name="serviceProvider">服务提供器</param>
        </member>
        <member name="T:Furion.DatabaseAccessor.PrivateRepository`1">
            <summary>
            私有仓储
            </summary>
            <typeparam name="TEntity"></typeparam>
            <summary>
            可删除仓储分部类
            </summary>
            <summary>
            可插入仓储分部类
            </summary>
            <summary>
            可写仓储分部类
            </summary>
            <summary>
            可更新仓储分部类
            </summary>
            <summary>
            可写仓储分部类
            </summary>
        </member>
        <member name="F:Furion.DatabaseAccessor.PrivateRepository`1._repository">
            <summary>
            非泛型仓储
            </summary>
        </member>
        <member name="F:Furion.DatabaseAccessor.PrivateRepository`1._dbContextPool">
            <summary>
            数据库上下文池
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.#ctor(System.Type,System.IServiceProvider)">
            <summary>
            构造函数
            </summary>
            <param name="dbContextLocator"></param>
            <param name="serviceProvider">服务提供器</param>
        </member>
        <member name="P:Furion.DatabaseAccessor.PrivateRepository`1.Entities">
            <summary>
            实体集合
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.PrivateRepository`1.DetachedEntities">
            <summary>
            不跟踪的（脱轨）实体
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.PrivateRepository`1.EntityType">
            <summary>
            查看实体类型
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.PrivateRepository`1.DbConnection">
            <summary>
            数据库连接对象
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.PrivateRepository`1.ChangeTracker">
            <summary>
            实体追综器
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.PrivateRepository`1.Model">
            <summary>
            实体模型
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.PrivateRepository`1.Tenant">
            <summary>
            租户信息
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.PrivateRepository`1.ProviderName">
            <summary>
            数据库提供器名
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.PrivateRepository`1.ServiceProvider">
            <summary>
            服务提供器
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.PrivateRepository`1.TenantId">
            <summary>
            租户Id
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.GetFullTableName">
            <summary>
            获取完整的数据库表名
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.FromSegments(System.Func{System.String,System.Collections.Generic.IEnumerable{System.String}},System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            从分部表中构建查询对象
            </summary>
            <param name="tableNamesAction"></param>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.HasChanges">
            <summary>
            判断上下文是否更改
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.Entry(System.Object)">
            <summary>
            将实体加入数据上下文托管
            </summary>
            <param name="entity">实体</param>
            <returns>EntityEntry</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.Entry(`0)">
            <summary>
            将实体加入数据上下文托管
            </summary>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.EntityEntryState(System.Object)">
            <summary>
            获取实体状态
            </summary>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.EntityEntryState(`0)">
            <summary>
            获取实体状态
            </summary>
            <param name="entity">实体</param>
            <returns>EntityState</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.EntityPropertyEntry(System.Object,System.String)">
            <summary>
            将实体属性加入托管
            </summary>
            <param name="entity">实体</param>
            <param name="propertyName">属性名</param>
            <returns>PropertyEntry</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.EntityPropertyEntry(`0,System.String)">
            <summary>
            将实体属性加入托管
            </summary>
            <param name="entity">实体</param>
            <param name="propertyName">属性名</param>
            <returns>PropertyEntry</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.EntityPropertyEntry``1(`0,System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            将实体属性加入托管
            </summary>
            <typeparam name="TProperty">属性类型</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicate">属性表达式</param>
            <returns>PropertyEntry</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.ChangeEntityState(System.Object,Microsoft.EntityFrameworkCore.EntityState)">
            <summary>
            改变实体状态
            </summary>
            <param name="entity">实体</param>
            <param name="entityState">实体状态</param>
            <returns>EntityEntry</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.ChangeEntityState(`0,Microsoft.EntityFrameworkCore.EntityState)">
            <summary>
            改变实体状态
            </summary>
            <param name="entity">实体</param>
            <param name="entityState">实体状态</param>
            <returns>EntityEntry{TEntity}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.ChangeEntityState(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry,Microsoft.EntityFrameworkCore.EntityState)">
            <summary>
            改变实体状态
            </summary>
            <param name="entityEntry">实体条目</param>
            <param name="entityState">实体状态</param>
            <returns>EntityEntry</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.ChangeEntityState(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry{`0},Microsoft.EntityFrameworkCore.EntityState)">
            <summary>
            改变实体状态
            </summary>
            <param name="entityEntry">实体条目</param>
            <param name="entityState">实体状态</param>
            <returns>EntityEntry{TEntity}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.CheckTrackState(System.Object,Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry@,System.String)">
            <summary>
            检查实体跟踪状态
            </summary>
            <param name="id"></param>
            <param name="entityEntry"></param>
            <param name="keyName"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.CheckTrackState``1(System.Object,Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry@,System.String)">
            <summary>
            检查实体跟踪状态
            </summary>
            <typeparam name="TTrackEntity"></typeparam>
            <param name="id"></param>
            <param name="entityEntry"></param>
            <param name="keyName"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.IsAttached(System.Object)">
            <summary>
            判断是否被附加
            </summary>
            <param name="entity">实体</param>
            <returns>bool</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.IsAttached(`0)">
            <summary>
            判断是否被附加
            </summary>
            <param name="entity">实体</param>
            <returns>bool</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.Attach(System.Object)">
            <summary>
            附加实体
            </summary>
            <param name="entity">实体</param>
            <returns>EntityEntry</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.Attach(`0)">
            <summary>
            附加实体
            </summary>
            <param name="entity">实体</param>
            <returns>EntityEntry</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.AttachRange(System.Object[])">
            <summary>
            附加多个实体
            </summary>
            <param name="entities">多个实体</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.AttachRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            附加多个实体
            </summary>
            <param name="entities">多个实体</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.Detach(System.Object)">
            <summary>
            取消附加实体
            </summary>
            <param name="entity">实体</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.Detach(`0)">
            <summary>
            取消附加实体
            </summary>
            <param name="entity">实体</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.Detach(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry)">
            <summary>
            取消附加实体
            </summary>
            <param name="entityEntry">实体条目</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.Detach(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry{`0})">
            <summary>
            取消附加实体
            </summary>
            <param name="entityEntry">实体条目</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.GetDbContexts">
            <summary>
            获取所有数据库上下文
            </summary>
            <returns>ConcurrentBag{DbContext}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.IsKeySet(`0)">
            <summary>
            判断实体是否设置了主键
            </summary>
            <param name="entity">实体</param>
            <returns>bool</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.EnsureDeleted">
            <summary>
            删除数据库
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.EnsureDeletedAsync(System.Threading.CancellationToken)">
            <summary>
            删除数据库
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.EnsureCreated">
            <summary>
            创建数据库
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.EnsureCreatedAsync(System.Threading.CancellationToken)">
            <summary>
            创建数据库
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.ChangeTable(System.String)">
            <summary>
            动态改变表名
            </summary>
            <param name="tableName">表名</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.ChangeDatabase(System.String)">
            <summary>
            动态改变数据库
            </summary>
            <param name="connectionString">连接字符串</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.ChangeDatabaseAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            动态改变数据库
            </summary>
            <param name="connectionString">连接字符串</param>
            <param name="cancellationToken">异步取消令牌</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.IsSqlServer">
            <summary>
            判断是否是 SqlServer 数据库
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.IsSqlite">
            <summary>
            判断是否是 Sqlite 数据库
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.IsCosmos">
            <summary>
            判断是否是 Cosmos 数据库
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.InMemoryDatabase">
            <summary>
            判断是否是 内存中 数据库
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.IsMySql">
            <summary>
            判断是否是 MySql 数据库
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.IsMySqlOfficial">
            <summary>
            判断是否是 MySql 数据库 官方包（更新不及时，只支持 8.0.23+ 版本， 所以单独弄一个分类）
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.IsNpgsql">
            <summary>
            判断是否是 PostgreSQL 数据库
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.IsOracle">
            <summary>
            判断是否是 Oracle 数据库
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.IsFirebird">
            <summary>
            判断是否是 Firebird 数据库
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.IsDm">
            <summary>
            判断是否是 Dm 数据库
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.IsRelational">
            <summary>
            判断是否是关系型数据库
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.Change``1">
            <summary>
            切换仓储
            </summary>
            <typeparam name="TChangeEntity">实体类型</typeparam>
            <returns>仓储</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.Change``2">
            <summary>
            切换多数据库上下文仓储
            </summary>
            <typeparam name="TChangeEntity">实体类型</typeparam>
            <typeparam name="TChangeDbContextLocator">数据库上下文定位器</typeparam>
            <returns>仓储</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.BuildChange``1">
            <summary>
            重新构建并切换仓储
            </summary>
            <remarks>特别注意，Scoped 必须手动释放</remarks>
            <typeparam name="TChangeEntity">实体类型</typeparam>
            <returns>仓储</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.BuildChange``2">
            <summary>
            重新构建并切换多数据库上下文仓储
            </summary>
            <remarks>特别注意，Scoped 必须手动释放</remarks>
            <typeparam name="TChangeEntity">实体类型</typeparam>
            <typeparam name="TChangeDbContextLocator">数据库上下文定位器</typeparam>
            <returns>仓储</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.FormatDbElement(System.String)">
            <summary>
            格式化数据元素
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.DeleteFromSegments(System.Func{System.String,System.Collections.Generic.IEnumerable{System.String}},System.Object[])">
            <summary>
            根据主键分表删除记录
            </summary>
            <param name="tableNamesAction"></param>
            <param name="keys"></param>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.DeleteFromSegmentsAsync(System.Func{System.String,System.Collections.Generic.IEnumerable{System.String}},System.Object[])">
            <summary>
            根据主键分表删除记录
            </summary>
            <param name="tableNamesAction"></param>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.Delete(`0)">
            <summary>
            删除一条记录
            </summary>
            <param name="entity">实体</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.Delete(`0[])">
            <summary>
            删除多条记录
            </summary>
            <param name="entities">多个实体</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.Delete(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            删除多条记录
            </summary>
            <param name="entities">多个实体</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.DeleteAsync(`0)">
            <summary>
            删除一条记录
            </summary>
            <param name="entity">实体</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.DeleteAsync(`0[])">
            <summary>
            删除多条记录
            </summary>
            <param name="entities">多个实体</param>
            <returns>Task</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.DeleteAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            删除多条记录
            </summary>
            <param name="entities">多个实体</param>
            <returns>Task</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.DeleteNow(`0)">
            <summary>
            删除一条记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.DeleteNow(`0,System.Boolean)">
            <summary>
            删除一条记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.DeleteNow(`0[])">
            <summary>
            删除多条记录并立即提交
            </summary>
            <param name="entities">多个实体</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.DeleteNow(`0[],System.Boolean)">
            <summary>
            删除多条记录并立即提交
            </summary>
            <param name="entities">多个实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.DeleteNow(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            删除多条记录并立即提交
            </summary>
            <param name="entities">多个实体</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.DeleteNow(System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
            删除多条记录并立即提交
            </summary>
            <param name="entities">多个实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.DeleteNowAsync(`0,System.Threading.CancellationToken)">
            <summary>
            删除一条记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.DeleteNowAsync(`0,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            删除一条记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.DeleteNowAsync(`0[])">
            <summary>
            删除多条记录并立即提交
            </summary>
            <param name="entities">多个实体</param>
            <returns>Task</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.DeleteNowAsync(`0[],System.Threading.CancellationToken)">
            <summary>
            删除多条记录并立即提交
            </summary>
            <param name="entities">多个实体</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>Task</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.DeleteNowAsync(`0[],System.Boolean,System.Threading.CancellationToken)">
            <summary>
            删除多条记录并立即提交
            </summary>
            <param name="entities">多个实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>Task</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.DeleteNowAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
            删除多条记录并立即提交
            </summary>
            <param name="entities">多个实体</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>Task</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.DeleteNowAsync(System.Collections.Generic.IEnumerable{`0},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            删除多条记录并立即提交
            </summary>
            <param name="entities">多个实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>Task</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.Delete(System.Object)">
            <summary>
            根据主键删除一条记录
            </summary>
            <param name="key">主键</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.DeleteAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            根据主键删除一条记录
            </summary>
            <param name="key">主键</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>Task</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.DeleteNow(System.Object)">
            <summary>
            根据主键删除一条记录并立即提交
            </summary>
            <param name="key">主键</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.DeleteNow(System.Object,System.Boolean)">
            <summary>
            根据主键删除一条记录并立即提交
            </summary>
            <param name="key">主键</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.DeleteNowAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            根据主键删除一条记录并立即提交
            </summary>
            <param name="key">主键</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.DeleteNowAsync(System.Object,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            根据主键删除一条记录并立即提交
            </summary>
            <param name="key">主键</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.BuildDeletedEntity(System.Object,System.Boolean)">
            <summary>
            构建被删除的实体
            </summary>
            <param name="key">主键</param>
            <param name="isRealDelete">是否真删除</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.GenerateDeleteSQL(System.Func{System.String,System.Collections.Generic.IEnumerable{System.String}},System.Object[],System.Text.StringBuilder@)">
            <summary>
            生成 Delete 语句
            </summary>
            <param name="tableNamesAction"></param>
            <param name="keys"></param>
            <param name="stringBuilder"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.InsertFromSegments(System.Func{System.String,System.Collections.Generic.IEnumerable{System.String}},`0,System.Object)">
            <summary>
            分表插入一条记录
            </summary>
            <param name="tableNamesAction"></param>
            <param name="entity"></param>
            <param name="keySet"></param>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.InsertFromSegmentsAsync(System.Func{System.String,System.Collections.Generic.IEnumerable{System.String}},`0,System.Object)">
            <summary>
            分表插入一条记录
            </summary>
            <param name="tableNamesAction"></param>
            <param name="entity"></param>
            <param name="keySet"></param>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.Insert(`0,System.Nullable{System.Boolean})">
            <summary>
            新增一条记录
            </summary>
            <param name="entity">实体</param>
            <param name="ignoreNullValues"></param>
            <returns>代理的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.Insert(`0[])">
            <summary>
            新增多条记录
            </summary>
            <param name="entities">多个实体</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.Insert(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            新增多条记录
            </summary>
            <param name="entities">多个实体</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.InsertAsync(`0,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            新增一条记录
            </summary>
            <param name="entity">实体</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>代理的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.InsertAsync(`0[])">
            <summary>
            新增多条记录
            </summary>
            <param name="entities">多个实体</param>
            <returns>Task</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.InsertAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
            新增多条记录
            </summary>
            <param name="entities">多个实体</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.InsertNow(`0,System.Nullable{System.Boolean})">
            <summary>
            新增一条记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中返回的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.InsertNow(`0,System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            新增一条记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中返回的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.InsertNow(`0[])">
            <summary>
            新增多条记录
            </summary>
            <param name="entities">多个实体</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.InsertNow(`0[],System.Boolean)">
            <summary>
            新增多条记录
            </summary>
            <param name="entities">多个实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.InsertNow(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            新增多条记录
            </summary>
            <param name="entities">多个实体</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.InsertNow(System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
            新增多条记录
            </summary>
            <param name="entities">多个实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.InsertNowAsync(`0,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            新增一条记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中返回的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.InsertNowAsync(`0,System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            新增一条记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中返回的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.InsertNowAsync(`0[])">
            <summary>
            新增多条记录并立即提交
            </summary>
            <param name="entities">多个实体</param>
            <returns>Task</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.InsertNowAsync(`0[],System.Threading.CancellationToken)">
            <summary>
            新增多条记录并立即提交
            </summary>
            <param name="entities">多个实体</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>Task</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.InsertNowAsync(`0[],System.Boolean,System.Threading.CancellationToken)">
            <summary>
            新增多条记录并立即提交
            </summary>
            <param name="entities">多个实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>Task</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.InsertNowAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
            新增多条记录并立即提交
            </summary>
            <param name="entities">多个实体</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>Task</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.InsertNowAsync(System.Collections.Generic.IEnumerable{`0},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            新增多条记录并立即提交
            </summary>
            <param name="entities">多个实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>Task</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.GenerateInsertSQL(System.Func{System.String,System.Collections.Generic.IEnumerable{System.String}},`0,System.Text.StringBuilder@,System.Collections.Generic.List{System.Object}@,System.Object)">
            <summary>
            生成 INSERT 语句
            </summary>
            <param name="tableNamesAction"></param>
            <param name="entity"></param>
            <param name="stringBuilder"></param>
            <param name="parameters"></param>
            <param name="keySet"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.Find(System.Object)">
            <summary>
            根据键查询一条记录
            </summary>
            <param name="key">键</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.Find(System.Object[])">
            <summary>
            根据多个键查询一条记录
            </summary>
            <param name="keyValues">多个键</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.FindAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            根据键查询一条记录
            </summary>
            <param name="key">键</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.FindAsync(System.Object[])">
            <summary>
            根据多个键查询一条记录
            </summary>
            <param name="keyValues">多个键</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.FindAsync(System.Object[],System.Threading.CancellationToken)">
            <summary>
            根据多个键查询一条记录
            </summary>
            <param name="keyValues">多个键</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.FindOrDefault(System.Object)">
            <summary>
            根据键查询一条记录
            </summary>
            <param name="key">键</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.FindOrDefault(System.Object[])">
            <summary>
            根据多个键查询一条记录
            </summary>
            <param name="keyValues">多个键</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.FindOrDefaultAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            根据键查询一条记录
            </summary>
            <param name="key">键</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.FindOrDefaultAsync(System.Object[])">
            <summary>
            根据多个键查询一条记录
            </summary>
            <param name="keyValues">多个键</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.FindOrDefaultAsync(System.Object[],System.Threading.CancellationToken)">
            <summary>
            根据多个键查询一条记录
            </summary>
            <param name="keyValues">多个键</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.Single(System.Nullable{System.Boolean})">
            <summary>
            查询一条记录
            </summary>
            <param name="tracking">是否跟踪实体</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.Single(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Nullable{System.Boolean})">
            <summary>
            根据表达式查询一条记录
            </summary>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.SingleOrDefault(System.Nullable{System.Boolean})">
            <summary>
            查询一条记录
            </summary>
            <param name="tracking">是否跟踪实体</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.SingleOrDefault(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Nullable{System.Boolean})">
            <summary>
            根据表达式查询一条记录
            </summary>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.SingleAsync(System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            查询一条记录
            </summary>
            <param name="tracking">是否跟踪实体</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.SingleAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            根据表达式查询一条记录
            </summary>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.SingleOrDefaultAsync(System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            查询一条记录
            </summary>
            <param name="tracking">是否跟踪实体</param>
            <returns>数据库中的实体</returns>
            <param name="cancellationToken">异步取消令牌</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.SingleOrDefaultAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            根据表达式查询一条记录
            </summary>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.First(System.Nullable{System.Boolean})">
            <summary>
            查询一条记录
            </summary>
            <param name="tracking">是否跟踪实体</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.First(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Nullable{System.Boolean})">
            <summary>
            根据表达式查询一条记录
            </summary>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.FirstOrDefault(System.Nullable{System.Boolean})">
            <summary>
            查询一条记录
            </summary>
            <param name="tracking">是否跟踪实体</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.FirstOrDefault(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Nullable{System.Boolean})">
            <summary>
            根据表达式查询一条记录
            </summary>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.FirstAsync(System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            查询一条记录
            </summary>
            <param name="tracking">是否跟踪实体</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.FirstAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            根据表达式查询一条记录
            </summary>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.FirstOrDefaultAsync(System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            查询一条记录
            </summary>
            <param name="tracking">是否跟踪实体</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.FirstOrDefaultAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            根据表达式查询一条记录
            </summary>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.Last(System.Nullable{System.Boolean})">
            <summary>
            查询一条记录
            </summary>
            <param name="tracking">是否跟踪实体</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.Last(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Nullable{System.Boolean})">
            <summary>
            根据表达式查询一条记录
            </summary>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.LastOrDefault(System.Nullable{System.Boolean})">
            <summary>
            查询一条记录
            </summary>
            <param name="tracking">是否跟踪实体</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.LastOrDefault(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Nullable{System.Boolean})">
            <summary>
            根据表达式查询一条记录
            </summary>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.LastAsync(System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            查询一条记录
            </summary>
            <param name="tracking">是否跟踪实体</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.LastAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            根据表达式查询一条记录
            </summary>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.LastOrDefaultAsync(System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            查询一条记录
            </summary>
            <param name="tracking">是否跟踪实体</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.LastOrDefaultAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            根据表达式查询一条记录
            </summary>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            根据表达式查询多条记录
            </summary>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <returns>数据库中的多个实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Int32,System.Boolean}},System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            根据表达式查询多条记录
            </summary>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <returns>数据库中的多个实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.Where(System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            根据条件执行表达式查询多条记录
            </summary>
            <param name="condition">条件</param>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <returns>数据库中的多个实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.Where(System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Int32,System.Boolean}},System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            根据条件执行表达式查询多条记录
            </summary>
            <param name="condition">条件</param>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <returns>数据库中的多个实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}[])">
            <summary>
            根据条件执行表达式查询多条记录
            </summary>
            <param name="predicates">表达式集合</param>
            <returns>数据库中的多个实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}[],System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            根据条件执行表达式查询多条记录
            </summary>
            <param name="predicates">表达式集合</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <returns>数据库中的多个实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Int32,System.Boolean}}[])">
            <summary>
            根据条件执行表达式查询多条记录
            </summary>
            <param name="predicates">表达式集合</param>
            <returns>数据库中的多个实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Int32,System.Boolean}}[],System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            根据条件执行表达式查询多条记录
            </summary>
            <param name="predicates">表达式集合</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <returns>数据库中的多个实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.Where(System.ValueTuple{System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}}[])">
            <summary>
            根据条件执行表达式查询多条记录
            </summary>
            <param name="conditionPredicates">条件表达式集合</param>
            <returns>数据库中的多个实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.Where(System.ValueTuple{System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}}[],System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            根据条件执行表达式查询多条记录
            </summary>
            <param name="conditionPredicates">条件表达式集合</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <returns>数据库中的多个实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.Where(System.ValueTuple{System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Int32,System.Boolean}}}[])">
            <summary>
            根据条件执行表达式查询多条记录
            </summary>
            <param name="conditionPredicates">条件表达式集合</param>
            <returns>数据库中的多个实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.Where(System.ValueTuple{System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Int32,System.Boolean}}}[],System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            根据条件执行表达式查询多条记录
            </summary>
            <param name="conditionPredicates">条件表达式集合</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <returns>数据库中的多个实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.Include``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            加载关联数据
            </summary>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <returns>数据库中的多个实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.Include``1(System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            根据条件加载关联数据
            </summary>
            <param name="condition">条件</param>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <returns>数据库中的多个实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.Any(System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            判断记录是否存在
            </summary>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <returns>bool</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.Any(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            根据表达式判断记录是否存在
            </summary>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <returns>bool</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.AnyAsync(System.Nullable{System.Boolean},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            判断记录是否存在
            </summary>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>bool</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.AnyAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Nullable{System.Boolean},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            根据表达式判断记录是否存在
            </summary>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>bool</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.All(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            根据表达式判断记录是否全部满足条件
            </summary>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <returns>bool</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.AllAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Nullable{System.Boolean},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            根据表达式判断记录是否全部满足条件
            </summary>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>bool</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.Count(System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            查看记录条数
            </summary>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <returns>int</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            根据表达式查询记录条数
            </summary>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <returns>int</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.CountAsync(System.Nullable{System.Boolean},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            查看记录条数
            </summary>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>int</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.CountAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Nullable{System.Boolean},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            根据表达式查询记录条数
            </summary>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>int</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.Min(System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            查看最小记录
            </summary>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <returns>实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.Min``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            根据表达式查看最小值
            </summary>
            <typeparam name="TResult">最小值类型</typeparam>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.MinAsync(System.Nullable{System.Boolean},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            查看最小记录
            </summary>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.MinAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Nullable{System.Boolean},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            根据表达式查看最小值
            </summary>
            <typeparam name="TResult">最小值类型</typeparam>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.Max(System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            查看最大记录
            </summary>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <returns>实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.Max``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            根据表达式查看最大值
            </summary>
            <typeparam name="TResult">最大值类型</typeparam>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.MaxAsync(System.Nullable{System.Boolean},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            查看最大记录
            </summary>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.MaxAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Nullable{System.Boolean},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            根据表达式查看最大值
            </summary>
            <typeparam name="TResult">最大值类型</typeparam>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.AsQueryable(System.Nullable{System.Boolean})">
            <summary>
            构建查询分析器
            </summary>
            <param name="tracking">是否跟踪实体</param>
            <returns>IQueryable{TEntity}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.AsQueryable(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            构建查询分析器
            </summary>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <returns>IQueryable{TEntity}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.AsQueryable(System.Linq.Expressions.Expression{System.Func{`0,System.Int32,System.Boolean}},System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            构建查询分析器
            </summary>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <returns>IQueryable{TEntity}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.AsEnumerable(System.Nullable{System.Boolean})">
            <summary>
            直接返回数据库结果
            </summary>
            <param name="tracking">是否跟踪实体</param>
            <returns>IEnumerable{TEntity}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.AsEnumerable(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            直接返回数据库结果
            </summary>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <returns>List{TEntity}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.AsEnumerable(System.Linq.Expressions.Expression{System.Func{`0,System.Int32,System.Boolean}},System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            直接返回数据库结果
            </summary>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <returns>IEnumerable{TEntity}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.AsAsyncEnumerable(System.Nullable{System.Boolean})">
            <summary>
            直接返回数据库结果
            </summary>
            <param name="tracking">是否跟踪实体</param>
            <returns>List{TEntity}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.AsAsyncEnumerable(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            直接返回数据库结果
            </summary>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <returns>IAsyncEnumerable{TEntity}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.AsAsyncEnumerable(System.Linq.Expressions.Expression{System.Func{`0,System.Int32,System.Boolean}},System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            直接返回数据库结果
            </summary>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <returns>IAsyncEnumerable{TEntity}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.FromSqlRaw(System.String,System.Object[])">
            <summary>
            执行 Sql 返回 IQueryable
            </summary>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>IQueryable</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.FromSqlInterpolated(System.FormattableString)">
            <summary>
            执行 Sql 返回 IQueryable
            </summary>
            <remarks>
            支持字符串内插语法
            </remarks>
            <param name="sql">sql 语句</param>
            <returns>IQueryable</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.UpdateFromSegments(System.Func{System.String,System.Collections.Generic.IEnumerable{System.String}},`0,System.String[],System.String[])">
            <summary>
            分表更新一条记录
            </summary>
            <param name="tableNamesAction"></param>
            <param name="entity"></param>
            <param name="includePropertyNames"></param>
            <param name="excludePropertyNames"></param>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.UpdateFromSegmentsAsync(System.Func{System.String,System.Collections.Generic.IEnumerable{System.String}},`0,System.String[],System.String[])">
            <summary>
            分表更新一条记录
            </summary>
            <param name="tableNamesAction"></param>
            <param name="entity"></param>
            <param name="includePropertyNames"></param>
            <param name="excludePropertyNames"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.Update(`0,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录
            </summary>
            <param name="entity">实体</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.Update(`0[])">
            <summary>
            更新多条记录
            </summary>
            <param name="entities">多个实体</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.Update(System.Collections.Generic.IEnumerable{`0},System.String[],System.String[])">
            <summary>
            更新多条记录
            </summary>
            <param name="entities">多个实体</param>
            <param name="includePropertyNames">包含属性</param>
            <param name="excludePropertyNames">排除属性</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.UpdateAsync(`0,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录
            </summary>
            <param name="entity">实体</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.UpdateAsync(`0[])">
            <summary>
            更新多条记录
            </summary>
            <param name="entities">多个实体</param>
            <returns>Task</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.UpdateAsync(System.Collections.Generic.IEnumerable{`0},System.String[],System.String[])">
            <summary>
            更新多条记录
            </summary>
            <param name="entities">多个实体</param>
            <param name="includePropertyNames">包含属性</param>
            <param name="excludePropertyNames">排除属性</param>
            <returns>Task</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.UpdateNow(`0,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.UpdateNow(`0,System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.UpdateNow(`0[])">
            <summary>
            更新多条记录并立即提交
            </summary>
            <param name="entities">多个实体</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.UpdateNow(`0[],System.Boolean,System.String[],System.String[])">
            <summary>
            更新多条记录并立即提交
            </summary>
            <param name="entities">多个实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="includePropertyNames">包含属性</param>
            <param name="excludePropertyNames">排除属性</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.UpdateNow(System.Collections.Generic.IEnumerable{`0},System.String[],System.String[])">
            <summary>
            更新多条记录并立即提交
            </summary>
            <param name="entities">多个实体</param>
            <param name="includePropertyNames">包含属性</param>
            <param name="excludePropertyNames">排除属性</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.UpdateNow(System.Collections.Generic.IEnumerable{`0},System.Boolean,System.String[],System.String[])">
            <summary>
            更新多条记录并立即提交
            </summary>
            <param name="entities">多个实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="includePropertyNames">包含属性</param>
            <param name="excludePropertyNames">排除属性</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.UpdateNowAsync(`0,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="cancellationToken">取消异步令牌</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.UpdateNowAsync(`0,System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.UpdateNowAsync(`0[])">
            <summary>
            更新多条记录并立即提交
            </summary>
            <param name="entities">多个实体</param>
            <returns>Task</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.UpdateNowAsync(`0[],System.Threading.CancellationToken,System.String[],System.String[])">
            <summary>
            更新多条记录并立即提交
            </summary>
            <param name="entities">多个实体</param>
            <param name="cancellationToken">取消异步令牌</param>
            <param name="includePropertyNames">包含属性</param>
            <param name="excludePropertyNames">排除属性</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.UpdateNowAsync(`0[],System.Boolean,System.Threading.CancellationToken,System.String[],System.String[])">
            <summary>
            更新多条记录并立即提交
            </summary>
            <param name="entities">多个实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="cancellationToken">取消异步令牌</param>
            <param name="includePropertyNames">包含属性</param>
            <param name="excludePropertyNames">排除属性</param>
            <returns>Task</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.UpdateNowAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken,System.String[],System.String[])">
            <summary>
            更新多条记录并立即提交
            </summary>
            <param name="entities">多个实体</param>
            <param name="cancellationToken">取消异步令牌</param>
            <param name="includePropertyNames">包含属性</param>
            <param name="excludePropertyNames">排除属性</param>
            <returns>Task</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.UpdateNowAsync(System.Collections.Generic.IEnumerable{`0},System.Boolean,System.Threading.CancellationToken,System.String[],System.String[])">
            <summary>
            更新多条记录并立即提交
            </summary>
            <param name="entities">多个实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="cancellationToken">取消异步令牌</param>
            <param name="includePropertyNames">包含属性</param>
            <param name="excludePropertyNames">排除属性</param>
            <returns>Task</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.UpdateInclude(`0,System.String[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中特定属性
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.UpdateInclude(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中特定属性
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.UpdateInclude(`0,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中特定属性
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.UpdateInclude(`0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中特定属性
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.UpdateIncludeAsync(`0,System.String[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.UpdateIncludeAsync(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.UpdateIncludeAsync(`0,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.UpdateIncludeAsync(`0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.UpdateIncludeNow(`0,System.String[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.UpdateIncludeNow(`0,System.String[],System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.UpdateIncludeNow(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.UpdateIncludeNow(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.UpdateIncludeNow(`0,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.UpdateIncludeNow(`0,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.UpdateIncludeNow(`0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.UpdateIncludeNow(`0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}},System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.UpdateIncludeNowAsync(`0,System.String[],System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.UpdateIncludeNowAsync(`0,System.String[],System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.UpdateIncludeNowAsync(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.UpdateIncludeNowAsync(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.UpdateIncludeNowAsync(`0,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.UpdateIncludeNowAsync(`0,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.UpdateIncludeNowAsync(`0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.UpdateIncludeNowAsync(`0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}},System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.UpdateExclude(`0,System.String[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.UpdateExclude(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.UpdateExclude(`0,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.UpdateExclude(`0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.UpdateExcludeAsync(`0,System.String[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.UpdateExcludeAsync(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.UpdateExcludeAsync(`0,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.UpdateExcludeAsync(`0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.UpdateExcludeNow(`0,System.String[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.UpdateExcludeNow(`0,System.String[],System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.UpdateExcludeNow(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.UpdateExcludeNow(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.UpdateExcludeNow(`0,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.UpdateExcludeNow(`0,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.UpdateExcludeNow(`0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.UpdateExcludeNow(`0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}},System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.UpdateExcludeNowAsync(`0,System.String[],System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.UpdateExcludeNowAsync(`0,System.String[],System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.UpdateExcludeNowAsync(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.UpdateExcludeNowAsync(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.UpdateExcludeNowAsync(`0,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.UpdateExcludeNowAsync(`0,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.UpdateExcludeNowAsync(`0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.UpdateExcludeNowAsync(`0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}},System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.IgnoreNullValues(`0@,System.Nullable{System.Boolean})">
            <summary>
            忽略空值属性
            </summary>
            <param name="entity"></param>
            <param name="ignoreNullValues"></param>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.GenerateUpdateSQL(System.Func{System.String,System.Collections.Generic.IEnumerable{System.String}},`0,System.Text.StringBuilder@,System.Collections.Generic.List{System.Object}@,System.String[],System.String[])">
            <summary>
            生成 UPDATE 语句
            </summary>
            <param name="tableNamesAction"></param>
            <param name="entity"></param>
            <param name="stringBuilder"></param>
            <param name="parameters"></param>
            <param name="includePropertyNames"></param>
            <param name="excludePropertyNames"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.AcceptAllChanges">
            <summary>
            接受所有更改
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.SavePoolNow">
            <summary>
            保存数据库上下文池中所有已更改的数据库上下文
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.SavePoolNow(System.Boolean)">
            <summary>
            保存数据库上下文池中所有已更改的数据库上下文
            </summary>
            <param name="acceptAllChangesOnSuccess"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.SavePoolNowAsync(System.Threading.CancellationToken)">
            <summary>
            保存数据库上下文池中所有已更改的数据库上下文
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.SavePoolNowAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            保存数据库上下文池中所有已更改的数据库上下文
            </summary>
            <param name="acceptAllChangesOnSuccess"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.SaveNow">
            <summary>
            提交更改操作
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.SaveNow(System.Boolean)">
            <summary>
            提交更改操作
            </summary>
            <param name="acceptAllChangesOnSuccess"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.SaveNowAsync(System.Threading.CancellationToken)">
            <summary>
            提交更改操作（异步）
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateRepository`1.SaveNowAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            提交更改操作（异步）
            </summary>
            <param name="acceptAllChangesOnSuccess"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.DatabaseAccessor.IDbRepository`1">
            <summary>
            多数据库仓储
            </summary>
            <typeparam name="TDbContextLocator"></typeparam>
        </member>
        <member name="M:Furion.DatabaseAccessor.IDbRepository`1.Change``1">
            <summary>
            切换仓储
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <returns>仓储</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IDbRepository`1.Sql">
            <summary>
            获取 Sql 操作仓储
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IDbRepository`1.GetService``1">
            <summary>
            解析服务
            </summary>
            <typeparam name="TService"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IDbRepository`1.GetRequiredService``1">
            <summary>
            解析服务
            </summary>
            <typeparam name="TService"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Furion.DatabaseAccessor.PrivateSqlRepository">
            <summary>
            Sql 执行仓储分部类
            </summary>
            <summary>
            Sql 查询仓储分部类
            </summary>
            <summary>
            私有 Sql 仓储
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlProcedureQuery(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 DataTable
            </summary>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlProcedureQuery(System.String,System.Object)">
            <summary>
            执行存储过程返回 DataTable
            </summary>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlProcedureQueryAsync(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 DataTable
            </summary>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlProcedureQueryAsync(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 DataTable
            </summary>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlProcedureQueryAsync(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 DataTable
            </summary>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlProcedureQuery``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 List 集合
            </summary>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>List{T}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlProcedureQuery``1(System.String,System.Object)">
            <summary>
            执行存储过程返回 List 集合
            </summary>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <returns>List{T}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlProcedureQueryAsync``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 List 集合
            </summary>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>List{T}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlProcedureQueryAsync``1(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 List 集合
            </summary>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>List{T}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlProcedureQueryAsync``1(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 List 集合
            </summary>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>List{T}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlProcedureQueries(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 DataSet
            </summary>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlProcedureQueries(System.String,System.Object)">
            <summary>
            执行存储过程返回 DataSet
            </summary>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlProcedureQueriesAsync(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 DataSet
            </summary>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlProcedureQueriesAsync(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 DataSet
            </summary>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlProcedureQueriesAsync(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 DataSet
            </summary>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlProcedureQueries``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
             执行存储过程返回 List 集合
            </summary>
            <typeparam name="T1">返回类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>List{T1}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlProcedureQueries``2(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlProcedureQueries``3(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlProcedureQueries``4(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlProcedureQueries``5(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlProcedureQueries``6(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlProcedureQueries``7(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlProcedureQueries``8(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <typeparam name="T8">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlProcedureQueries``1(System.String,System.Object)">
            <summary>
             执行存储过程返回 List 集合
            </summary>
            <typeparam name="T1">返回类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <returns>List{T1}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlProcedureQueries``2(System.String,System.Object)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlProcedureQueries``3(System.String,System.Object)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlProcedureQueries``4(System.String,System.Object)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlProcedureQueries``5(System.String,System.Object)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlProcedureQueries``6(System.String,System.Object)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlProcedureQueries``7(System.String,System.Object)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlProcedureQueries``8(System.String,System.Object)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <typeparam name="T8">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlProcedureQueriesAsync``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
             执行存储过程返回 List 集合
            </summary>
            <typeparam name="T1">返回类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>Task{List{T1}}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlProcedureQueriesAsync``1(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
             执行存储过程返回 List 集合
            </summary>
            <typeparam name="T1">返回类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>Task{List{T1}}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlProcedureQueriesAsync``2(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlProcedureQueriesAsync``2(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlProcedureQueriesAsync``3(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlProcedureQueriesAsync``3(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlProcedureQueriesAsync``4(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlProcedureQueriesAsync``4(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlProcedureQueriesAsync``5(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlProcedureQueriesAsync``5(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlProcedureQueriesAsync``6(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlProcedureQueriesAsync``6(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlProcedureQueriesAsync``7(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlProcedureQueriesAsync``7(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlProcedureQueriesAsync``8(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <typeparam name="T8">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlProcedureQueriesAsync``8(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <typeparam name="T8">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlProcedureQueriesAsync``1(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
             执行存储过程返回 List 集合
            </summary>
            <typeparam name="T1">返回类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>List{T1}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlProcedureQueriesAsync``2(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlProcedureQueriesAsync``3(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlProcedureQueriesAsync``4(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlProcedureQueriesAsync``5(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlProcedureQueriesAsync``6(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlProcedureQueriesAsync``7(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlProcedureQueriesAsync``8(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <typeparam name="T8">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlProcedureScalar(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 单行单列
            </summary>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlProcedureScalar(System.String,System.Object)">
            <summary>
            执行存储过程返回 单行单列
            </summary>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlProcedureScalarAsync(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 单行单列
            </summary>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlProcedureScalarAsync(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 单行单列
            </summary>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlProcedureScalarAsync(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 单行单列
            </summary>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlProcedureScalar``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 单行单列
            </summary>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlProcedureScalar``1(System.String,System.Object)">
            <summary>
            执行存储过程返回 单行单列
            </summary>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlProcedureScalarAsync``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 单行单列
            </summary>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlProcedureScalarAsync``1(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 单行单列
            </summary>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlProcedureScalarAsync``1(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 单行单列
            </summary>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlProcedureNonQuery(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程无数据返回
            </summary>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>int</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlProcedureNonQuery(System.String,System.Object)">
            <summary>
            执行存储过程无数据返回
            </summary>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <returns>int</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlProcedureNonQueryAsync(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程无数据返回
            </summary>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>int</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlProcedureNonQueryAsync(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行存储过程无数据返回
            </summary>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>int</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlProcedureNonQueryAsync(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行存储过程无数据返回
            </summary>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>int</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlNonQuery(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行 Sql 无数据返回
            </summary>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>int</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlNonQuery(System.String,System.Object)">
            <summary>
            执行 Sql 无数据返回
            </summary>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <returns>int</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlNonQueryAsync(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行 Sql 无数据返回
            </summary>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>int</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlNonQueryAsync(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行 Sql 无数据返回
            </summary>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>int</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlNonQueryAsync(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行 Sql 无数据返回
            </summary>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>int</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlScalar(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行 Sql 返回 单行单列
            </summary>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlScalar(System.String,System.Object)">
            <summary>
            执行 Sql 返回 单行单列
            </summary>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlScalarAsync(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行 Sql 返回 单行单列
            </summary>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlScalarAsync(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行 Sql 返回 单行单列
            </summary>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlScalarAsync(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行 Sql 返回 单行单列
            </summary>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlScalar``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行 Sql 返回 单行单列
            </summary>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlScalar``1(System.String,System.Object)">
            <summary>
            执行 Sql 返回 单行单列
            </summary>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlScalarAsync``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行 Sql 返回 单行单列
            </summary>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlScalarAsync``1(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行 Sql 返回 单行单列
            </summary>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlScalarAsync``1(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行 Sql 返回 单行单列
            </summary>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlProcedureOutput(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回OUPUT、RETURN、结果集
            </summary>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>ProcedureOutput</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlProcedureOutputAsync(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回OUPUT、RETURN、结果集
            </summary>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>ProcedureOutput</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlProcedureOutput(System.String,System.Object)">
            <summary>
            执行存储过程返回OUPUT、RETURN、结果集
            </summary>
            <param name="procName">存储过程名</param>
            <param name="model">命令模型</param>
            <returns>ProcedureOutput</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlProcedureOutputAsync(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回OUPUT、RETURN、结果集
            </summary>
            <param name="procName">存储过程名</param>
            <param name="model">命令模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>ProcedureOutput</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlProcedureOutput``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回OUPUT、RETURN、结果集
            </summary>
            <typeparam name="TResult">数据集结果</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>ProcedureOutput</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlProcedureOutputAsync``1(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回OUPUT、RETURN、结果集
            </summary>
            <typeparam name="TResult">数据集结果</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>ProcedureOutput</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlProcedureOutput``1(System.String,System.Object)">
            <summary>
            执行存储过程返回OUPUT、RETURN、结果集
            </summary>
            <typeparam name="TResult">数据集结果</typeparam>
            <param name="procName">存储过程名</param>
            <param name="model">命令模型</param>
            <returns>ProcedureOutput</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlProcedureOutputAsync``1(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回OUPUT、RETURN、结果集
            </summary>
            <typeparam name="TResult">数据集结果</typeparam>
            <param name="procName">存储过程名</param>
            <param name="model">命令模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>ProcedureOutput</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlFunctionScalar(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行标量函数返回 单行单列
            </summary>
            <param name="funcName">函数名</param>
            <param name="parameters">命令参数</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlFunctionScalar(System.String,System.Object)">
            <summary>
            执行标量函数返回 单行单列
            </summary>
            <param name="funcName">函数名</param>
            <param name="model">参数模型</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlFunctionScalarAsync(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行标量函数返回 单行单列
            </summary>
            <param name="funcName">函数名</param>
            <param name="parameters">命令参数</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlFunctionScalarAsync(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行标量函数返回 单行单列
            </summary>
            <param name="funcName">函数名</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlFunctionScalarAsync(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行标量函数返回 单行单列
            </summary>
            <param name="funcName">函数名</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlFunctionScalar``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行标量函数返回 单行单列
            </summary>
            <typeparam name="TResult">返回值类型</typeparam>
            <param name="funcName">函数名</param>
            <param name="parameters">命令参数</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlFunctionScalar``1(System.String,System.Object)">
            <summary>
            执行标量函数返回 单行单列
            </summary>
            <typeparam name="TResult">返回值类型</typeparam>
            <param name="funcName">函数名</param>
            <param name="model">参数模型</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlFunctionScalarAsync``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行标量函数返回 单行单列
            </summary>
            <typeparam name="TResult">返回值类型</typeparam>
            <param name="funcName">函数名</param>
            <param name="parameters">命令参数</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlFunctionScalarAsync``1(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行标量函数返回 单行单列
            </summary>
            <typeparam name="TResult">返回值类型</typeparam>
            <param name="funcName">函数名</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlFunctionScalarAsync``1(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行标量函数返回 单行单列
            </summary>
            <typeparam name="TResult">返回值类型</typeparam>
            <param name="funcName">函数名</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlFunctionQuery(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行表值函数返回 DataTable
            </summary>
            <param name="funcName">函数名</param>
            <param name="parameters">命令参数</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlFunctionQuery(System.String,System.Object)">
            <summary>
            执行表值函数返回 DataTable
            </summary>
            <param name="funcName">函数名</param>
            <param name="model">参数模型</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlFunctionQueryAsync(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行表值函数返回 DataTable
            </summary>
            <param name="funcName">函数名</param>
            <param name="parameters">命令参数</param>
            <returns>Task{DataTable}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlFunctionQueryAsync(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行表值函数返回 DataTable
            </summary>
            <param name="funcName">函数名</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>Task{DataTable}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlFunctionQueryAsync(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行表值函数返回 DataTable
            </summary>
            <param name="funcName">函数名</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>Task{DataTable}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlFunctionQuery``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行表值函数返回 List 集合
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="funcName">函数名</param>
            <param name="parameters">命令参数</param>
            <returns>List{T}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlFunctionQuery``1(System.String,System.Object)">
            <summary>
            执行表值函数返回 List 集合
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="funcName">函数名</param>
            <param name="model">参数模型</param>
            <returns>List{T}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlFunctionQueryAsync``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行表值函数返回 List 集合
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="funcName">函数名</param>
            <param name="parameters">命令参数</param>
            <returns>Task{List{T}}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlFunctionQueryAsync``1(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行表值函数返回 List 集合
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="funcName">函数名</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>Task{List{T}}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlFunctionQueryAsync``1(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行表值函数返回 List 集合
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="funcName">函数名</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>Task{List{T}}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlQuery(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 DataTable
            </summary>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlQuery(System.String,System.Object)">
            <summary>
            Sql 查询返回 DataTable
            </summary>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlQueryAsync(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 DataTable
            </summary>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>Task{DataTable}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlQueryAsync(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 DataTable
            </summary>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>Task{DataTable}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlQueryAsync(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 DataTable
            </summary>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>Task{DataTable}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlQuery``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 List 集合
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>List{T}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlQuery``1(System.String,System.Object)">
            <summary>
            Sql 查询返回 List 集合
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <returns>List{T}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlQueryAsync``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 List 集合
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>Task{List{T}}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlQueryAsync``1(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 List 集合
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>Task{List{T}}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlQueryAsync``1(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 List 集合
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>Task{List{T}}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlQueries(System.String,System.Data.Common.DbParameter[])">
            <summary>
             Sql 查询返回 DataSet
            </summary>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlQueries(System.String,System.Object)">
            <summary>
             Sql 查询返回 DataSet
            </summary>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlQueriesAsync(System.String,System.Data.Common.DbParameter[])">
            <summary>
             Sql 查询返回 DataSet
            </summary>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>Task{DataSet}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlQueriesAsync(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
             Sql 查询返回 DataSet
            </summary>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>Task{DataSet}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlQueriesAsync(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
             Sql 查询返回 DataSet
            </summary>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>Task{DataSet}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlQueries``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
             Sql 查询返回 List 集合
            </summary>
            <typeparam name="T1">返回类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>List{T1}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlQueries``2(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlQueries``3(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlQueries``4(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlQueries``5(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlQueries``6(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlQueries``7(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlQueries``8(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <typeparam name="T8">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlQueries``1(System.String,System.Object)">
            <summary>
             Sql 查询返回 List 集合
            </summary>
            <typeparam name="T1">返回类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <returns>List{T1}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlQueries``2(System.String,System.Object)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlQueries``3(System.String,System.Object)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlQueries``4(System.String,System.Object)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlQueries``5(System.String,System.Object)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlQueries``6(System.String,System.Object)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlQueries``7(System.String,System.Object)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlQueries``8(System.String,System.Object)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <typeparam name="T8">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlQueriesAsync``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
             Sql 查询返回 List 集合
            </summary>
            <typeparam name="T1">返回类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>Task{List{T1}}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlQueriesAsync``1(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
             Sql 查询返回 List 集合
            </summary>
            <typeparam name="T1">返回类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>Task{List{T1}}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlQueriesAsync``2(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlQueriesAsync``2(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlQueriesAsync``3(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlQueriesAsync``3(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlQueriesAsync``4(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlQueriesAsync``4(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlQueriesAsync``5(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlQueriesAsync``5(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlQueriesAsync``6(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlQueriesAsync``6(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlQueriesAsync``7(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlQueriesAsync``7(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlQueriesAsync``8(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <typeparam name="T8">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlQueriesAsync``8(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <typeparam name="T8">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlQueriesAsync``1(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
             Sql 查询返回 List 集合
            </summary>
            <typeparam name="T1">返回类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>List{T1}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlQueriesAsync``2(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlQueriesAsync``3(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlQueriesAsync``4(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlQueriesAsync``5(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlQueriesAsync``6(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlQueriesAsync``7(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.SqlQueriesAsync``8(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <typeparam name="T8">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="F:Furion.DatabaseAccessor.PrivateSqlRepository._serviceProvider">
            <summary>
            服务提供器
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.#ctor(System.Type,System.IServiceProvider)">
            <summary>
            构造函数
            </summary>
            <param name="dbContextLocator"></param>
            <param name="serviceProvider">服务提供器</param>
        </member>
        <member name="P:Furion.DatabaseAccessor.PrivateSqlRepository.Context">
            <summary>
            数据库上下文
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.PrivateSqlRepository.DynamicContext">
            <summary>
            动态数据库上下文
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.PrivateSqlRepository.Database">
            <summary>
            数据库操作对象
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.PrivateSqlRepository.UndisposedContext">
            <summary>
            标记是否是未释放的上下文
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.Change``1">
            <summary>
            切换仓储
            </summary>
            <typeparam name="TChangeDbContextLocator">数据库上下文定位器</typeparam>
            <returns>仓储</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.GetService``1">
            <summary>
            解析服务
            </summary>
            <typeparam name="TService"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.GetRequiredService``1">
            <summary>
            解析服务
            </summary>
            <typeparam name="TService"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.Constraint``1">
            <summary>
            将仓储约束为特定仓储
            </summary>
            <typeparam name="TRestrainRepository">特定仓储</typeparam>
            <returns>TRestrainRepository</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.EnsureTransaction">
            <summary>
            确保工作单元（事务）可用
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateSqlRepository.Dispose">
            <summary>
            释放上下文
            </summary>
        </member>
        <member name="T:Furion.DatabaseAccessor.IMSRepository">
            <summary>
            随机主从库仓储（主库是默认数据库）
            </summary>
        </member>
        <member name="T:Furion.DatabaseAccessor.IMSRepository`1">
            <summary>
            随机主从库仓储
            </summary>
            <typeparam name="TMasterDbContextLocator">主库</typeparam>
        </member>
        <member name="M:Furion.DatabaseAccessor.IMSRepository`1.Master``1">
            <summary>
            获取主库仓储
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IMSRepository`1.Slave``1">
            <summary>
            动态获取从库（随机）
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IMSRepository`1.Slave``1(System.Func{System.Type})">
            <summary>
            动态获取从库（自定义）
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <returns></returns>
        </member>
        <member name="T:Furion.DatabaseAccessor.IMSRepository`2">
            <summary>
            主从库仓储
            </summary>
            <typeparam name="TMasterDbContextLocator">主库</typeparam>
            <typeparam name="TSlaveDbContextLocator1">从库</typeparam>
        </member>
        <member name="M:Furion.DatabaseAccessor.IMSRepository`2.Master``1">
            <summary>
            获取主库仓储
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IMSRepository`2.Slave1``1">
            <summary>
            获取从库仓储
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <returns></returns>
        </member>
        <member name="T:Furion.DatabaseAccessor.IMSRepository`3">
            <summary>
            主从库仓储
            </summary>
            <typeparam name="TMasterDbContextLocator">主库</typeparam>
            <typeparam name="TSlaveDbContextLocator1">从库</typeparam>
            <typeparam name="TSlaveDbContextLocator2">从库</typeparam>
        </member>
        <member name="M:Furion.DatabaseAccessor.IMSRepository`3.Slave2``1">
            <summary>
            获取从库仓储2
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <returns></returns>
        </member>
        <member name="T:Furion.DatabaseAccessor.IMSRepository`4">
            <summary>
            主从库仓储
            </summary>
            <typeparam name="TMasterDbContextLocator">主库</typeparam>
            <typeparam name="TSlaveDbContextLocator1">从库</typeparam>
            <typeparam name="TSlaveDbContextLocator2">从库</typeparam>
            <typeparam name="TSlaveDbContextLocator3">从库</typeparam>
        </member>
        <member name="M:Furion.DatabaseAccessor.IMSRepository`4.Slave3``1">
            <summary>
            获取从库仓储3
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <returns></returns>
        </member>
        <member name="T:Furion.DatabaseAccessor.IMSRepository`5">
            <summary>
            主从库仓储
            </summary>
            <typeparam name="TMasterDbContextLocator">主库</typeparam>
            <typeparam name="TSlaveDbContextLocator1">从库</typeparam>
            <typeparam name="TSlaveDbContextLocator2">从库</typeparam>
            <typeparam name="TSlaveDbContextLocator3">从库</typeparam>
            <typeparam name="TSlaveDbContextLocator4">从库</typeparam>
        </member>
        <member name="M:Furion.DatabaseAccessor.IMSRepository`5.Slave4``1">
            <summary>
            获取从库仓储4
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <returns></returns>
        </member>
        <member name="T:Furion.DatabaseAccessor.IMSRepository`6">
            <summary>
            主从库仓储
            </summary>
            <typeparam name="TMasterDbContextLocator">主库</typeparam>
            <typeparam name="TSlaveDbContextLocator1">从库</typeparam>
            <typeparam name="TSlaveDbContextLocator2">从库</typeparam>
            <typeparam name="TSlaveDbContextLocator3">从库</typeparam>
            <typeparam name="TSlaveDbContextLocator4">从库</typeparam>
            <typeparam name="TSlaveDbContextLocator5">从库</typeparam>
        </member>
        <member name="M:Furion.DatabaseAccessor.IMSRepository`6.Slave5``1">
            <summary>
            获取从库仓储5
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <returns></returns>
        </member>
        <member name="T:Furion.DatabaseAccessor.IMSRepository`7">
            <summary>
            主从库仓储
            </summary>
            <typeparam name="TMasterDbContextLocator">主库</typeparam>
            <typeparam name="TSlaveDbContextLocator1">从库</typeparam>
            <typeparam name="TSlaveDbContextLocator2">从库</typeparam>
            <typeparam name="TSlaveDbContextLocator3">从库</typeparam>
            <typeparam name="TSlaveDbContextLocator4">从库</typeparam>
            <typeparam name="TSlaveDbContextLocator5">从库</typeparam>
            <typeparam name="TSlaveDbContextLocator6">从库</typeparam>
        </member>
        <member name="M:Furion.DatabaseAccessor.IMSRepository`7.Slave6``1">
            <summary>
            获取从库仓储6
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <returns></returns>
        </member>
        <member name="T:Furion.DatabaseAccessor.IMSRepository`8">
            <summary>
            主从库仓储
            </summary>
            <typeparam name="TMasterDbContextLocator">主库</typeparam>
            <typeparam name="TSlaveDbContextLocator1">从库</typeparam>
            <typeparam name="TSlaveDbContextLocator2">从库</typeparam>
            <typeparam name="TSlaveDbContextLocator3">从库</typeparam>
            <typeparam name="TSlaveDbContextLocator4">从库</typeparam>
            <typeparam name="TSlaveDbContextLocator5">从库</typeparam>
            <typeparam name="TSlaveDbContextLocator6">从库</typeparam>
            <typeparam name="TSlaveDbContextLocator7">从库</typeparam>
        </member>
        <member name="M:Furion.DatabaseAccessor.IMSRepository`8.Slave7``1">
            <summary>
            获取从库仓储7
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <returns></returns>
        </member>
        <member name="T:Furion.DatabaseAccessor.IRepository">
            <summary>
            非泛型仓储
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.IRepository.Change``1">
            <summary>
            切换仓储
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <returns>仓储</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IRepository.Change``2">
            <summary>
            切换多数据库上下文仓储
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <returns>仓储</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IRepository.BuildChange``1">
            <summary>
            重新构建并切换仓储
            </summary>
            <remarks>特别注意，Scoped 必须手动释放</remarks>
            <typeparam name="TEntity">实体类型</typeparam>
            <returns>仓储</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IRepository.BuildChange``2">
            <summary>
            重新构建并切换多数据库上下文仓储
            </summary>
            <remarks>特别注意，Scoped 必须手动释放</remarks>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <returns>仓储</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IRepository.Sql">
            <summary>
            获取 Sql 操作仓储
            </summary>
            <returns>ISqlRepository</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IRepository.Sql``1">
            <summary>
            获取多数据库上下文 Sql 操作仓储
            </summary>
            <returns>ISqlRepository{TDbContextLocator}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IRepository.GetService``1">
            <summary>
            解析服务
            </summary>
            <typeparam name="TService"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IRepository.GetRequiredService``1">
            <summary>
            解析服务
            </summary>
            <typeparam name="TService"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Furion.DatabaseAccessor.IRepository`1">
            <summary>
            仓储接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IRepository`2">
            <summary>
            多数据库上下文仓储
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IPrivateRepository`1">
            <summary>
            私有公共实体
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="P:Furion.DatabaseAccessor.IPrivateRepository`1.Entities">
            <summary>
            实体集合
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.IPrivateRepository`1.DetachedEntities">
            <summary>
            不跟踪的（脱轨）实体
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.IPrivateRepository`1.EntityType">
            <summary>
            查看实体类型
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.IPrivateRepository`1.DbConnection">
            <summary>
            数据库连接对象
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.IPrivateRepository`1.ChangeTracker">
            <summary>
            实体追综器
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.IPrivateRepository`1.Model">
            <summary>
            实体模型
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.IPrivateRepository`1.Tenant">
            <summary>
            租户信息
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.IPrivateRepository`1.ProviderName">
            <summary>
            数据库提供器名
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.IPrivateRepository`1.ServiceProvider">
            <summary>
            服务提供器
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.IPrivateRepository`1.TenantId">
            <summary>
            租户Id
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateRepository`1.GetFullTableName">
            <summary>
            获取完整的数据库表名
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateRepository`1.FromSegments(System.Func{System.String,System.Collections.Generic.IEnumerable{System.String}},System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            从分部表中构建查询对象
            </summary>
            <param name="tableNamesAction"></param>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateRepository`1.HasChanges">
            <summary>
            判断上下文是否更改
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateRepository`1.Entry(System.Object)">
            <summary>
            将实体加入数据上下文托管
            </summary>
            <param name="entity">实体</param>
            <returns>EntityEntry</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateRepository`1.Entry(`0)">
            <summary>
            将实体加入数据上下文托管
            </summary>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateRepository`1.EntityEntryState(System.Object)">
            <summary>
            获取实体状态
            </summary>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateRepository`1.EntityEntryState(`0)">
            <summary>
            获取实体状态
            </summary>
            <param name="entity">实体</param>
            <returns>EntityState</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateRepository`1.EntityPropertyEntry(System.Object,System.String)">
            <summary>
            将实体属性加入托管
            </summary>
            <param name="entity">实体</param>
            <param name="propertyName">属性名</param>
            <returns>PropertyEntry</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateRepository`1.EntityPropertyEntry(`0,System.String)">
            <summary>
            将实体属性加入托管
            </summary>
            <param name="entity">实体</param>
            <param name="propertyName">属性名</param>
            <returns>PropertyEntry</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateRepository`1.EntityPropertyEntry``1(`0,System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            将实体属性加入托管
            </summary>
            <typeparam name="TProperty">属性类型</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicate">属性表达式</param>
            <returns>PropertyEntry</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateRepository`1.ChangeEntityState(System.Object,Microsoft.EntityFrameworkCore.EntityState)">
            <summary>
            改变实体状态
            </summary>
            <param name="entity">实体</param>
            <param name="entityState">实体状态</param>
            <returns>EntityEntry</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateRepository`1.ChangeEntityState(`0,Microsoft.EntityFrameworkCore.EntityState)">
            <summary>
            改变实体状态
            </summary>
            <param name="entity">实体</param>
            <param name="entityState">实体状态</param>
            <returns>EntityEntry{TEntity}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateRepository`1.ChangeEntityState(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry,Microsoft.EntityFrameworkCore.EntityState)">
            <summary>
            改变实体状态
            </summary>
            <param name="entityEntry">实体条目</param>
            <param name="entityState">实体状态</param>
            <returns>EntityEntry</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateRepository`1.ChangeEntityState(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry{`0},Microsoft.EntityFrameworkCore.EntityState)">
            <summary>
            改变实体状态
            </summary>
            <param name="entityEntry">实体条目</param>
            <param name="entityState">实体状态</param>
            <returns>EntityEntry{TEntity}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateRepository`1.CheckTrackState(System.Object,Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry@,System.String)">
            <summary>
            检查实体跟踪状态
            </summary>
            <param name="id"></param>
            <param name="entityEntry"></param>
            <param name="keyName"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateRepository`1.CheckTrackState``1(System.Object,Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry@,System.String)">
            <summary>
            检查实体跟踪状态
            </summary>
            <typeparam name="TTrackEntity"></typeparam>
            <param name="id"></param>
            <param name="entityEntry"></param>
            <param name="keyName"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateRepository`1.IsAttached(System.Object)">
            <summary>
            判断是否被附加
            </summary>
            <param name="entity">实体</param>
            <returns>bool</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateRepository`1.IsAttached(`0)">
            <summary>
            判断是否被附加
            </summary>
            <param name="entity">实体</param>
            <returns>bool</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateRepository`1.Attach(System.Object)">
            <summary>
            附加实体
            </summary>
            <param name="entity">实体</param>
            <returns>EntityEntry</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateRepository`1.Attach(`0)">
            <summary>
            附加实体
            </summary>
            <param name="entity">实体</param>
            <returns>EntityEntry</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateRepository`1.AttachRange(System.Object[])">
            <summary>
            附加多个实体
            </summary>
            <param name="entities">多个实体</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateRepository`1.AttachRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            附加多个实体
            </summary>
            <param name="entities">多个实体</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateRepository`1.Detach(System.Object)">
            <summary>
            取消附加实体
            </summary>
            <param name="entity">实体</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateRepository`1.Detach(`0)">
            <summary>
            取消附加实体
            </summary>
            <param name="entity">实体</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateRepository`1.Detach(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry)">
            <summary>
            取消附加实体
            </summary>
            <param name="entityEntry">实体条目</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateRepository`1.Detach(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry{`0})">
            <summary>
            取消附加实体
            </summary>
            <param name="entityEntry">实体条目</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateRepository`1.GetDbContexts">
            <summary>
            获取所有数据库上下文
            </summary>
            <returns>ConcurrentBag{DbContext}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateRepository`1.IsKeySet(`0)">
            <summary>
            判断实体是否设置了主键
            </summary>
            <param name="entity">实体</param>
            <returns>bool</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateRepository`1.EnsureDeleted">
            <summary>
            删除数据库
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateRepository`1.EnsureDeletedAsync(System.Threading.CancellationToken)">
            <summary>
            删除数据库
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateRepository`1.EnsureCreated">
            <summary>
            创建数据库
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateRepository`1.EnsureCreatedAsync(System.Threading.CancellationToken)">
            <summary>
            创建数据库
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateRepository`1.ChangeTable(System.String)">
            <summary>
            动态改变表名
            </summary>
            <param name="tableName">表名</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateRepository`1.ChangeDatabase(System.String)">
            <summary>
            动态改变数据库
            </summary>
            <param name="connectionString">连接字符串</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateRepository`1.ChangeDatabaseAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            动态改变数据库
            </summary>
            <param name="connectionString">连接字符串</param>
            <param name="cancellationToken">异步取消令牌</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateRepository`1.IsSqlServer">
            <summary>
            判断是否是 SqlServer 数据库
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateRepository`1.IsSqlite">
            <summary>
            判断是否是 Sqlite 数据库
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateRepository`1.IsCosmos">
            <summary>
            判断是否是 Cosmos 数据库
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateRepository`1.InMemoryDatabase">
            <summary>
            判断是否是 内存中 数据库
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateRepository`1.IsMySql">
            <summary>
            判断是否是 MySql 数据库
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateRepository`1.IsMySqlOfficial">
            <summary>
            判断是否是 MySql 数据库 官方包（更新不及时，只支持 8.0.23+ 版本， 所以单独弄一个分类）
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateRepository`1.IsNpgsql">
            <summary>
            判断是否是 PostgreSQL 数据库
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateRepository`1.IsOracle">
            <summary>
            判断是否是 Oracle 数据库
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateRepository`1.IsFirebird">
            <summary>
            判断是否是 Firebird 数据库
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateRepository`1.IsDm">
            <summary>
            判断是否是 Dm 数据库
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateRepository`1.IsRelational">
            <summary>
            判断是否是关系型数据库
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateRepository`1.Change``1">
            <summary>
            切换仓储
            </summary>
            <typeparam name="TChangeEntity">实体类型</typeparam>
            <returns>仓储</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateRepository`1.Change``2">
            <summary>
            切换多数据库上下文仓储
            </summary>
            <typeparam name="TChangeEntity">实体类型</typeparam>
            <typeparam name="TChangeDbContextLocator">数据库上下文定位器</typeparam>
            <returns>仓储</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateRepository`1.BuildChange``1">
            <summary>
            重新构建并切换仓储
            </summary>
            <remarks>特别注意，Scoped 必须手动释放</remarks>
            <typeparam name="TChangeEntity">实体类型</typeparam>
            <returns>仓储</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateRepository`1.BuildChange``2">
            <summary>
            重新构建并切换多数据库上下文仓储
            </summary>
            <remarks>特别注意，Scoped 必须手动释放</remarks>
            <typeparam name="TChangeEntity">实体类型</typeparam>
            <typeparam name="TChangeDbContextLocator">数据库上下文定位器</typeparam>
            <returns>仓储</returns>
        </member>
        <member name="T:Furion.DatabaseAccessor.IRepositoryFactory`1">
            <summary>
            仓储工厂接口
            </summary>
        </member>
        <member name="T:Furion.DatabaseAccessor.IRepositoryFactory`2">
            <summary>
            仓储工厂接口
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.IRepositoryFactory`2.CreateRepository">
            <summary>
            创建实体仓储（需要手动 using）
            </summary>
            <returns></returns>
        </member>
        <member name="T:Furion.DatabaseAccessor.ISqlRepository">
            <summary>
            Sql 操作仓储接口
            </summary>
        </member>
        <member name="T:Furion.DatabaseAccessor.ISqlRepository`1">
            <summary>
            Sql 操作仓储接口
            </summary>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IPrivateSqlRepository">
            <summary>
            私有 Sql 仓储
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.IPrivateSqlRepository.Database">
            <summary>
            数据库操作对象
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.IPrivateSqlRepository.Context">
            <summary>
            数据库上下文
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.IPrivateSqlRepository.DynamicContext">
            <summary>
            动态数据库上下文
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlRepository.Change``1">
            <summary>
            切换仓储
            </summary>
            <typeparam name="TChangeDbContextLocator">数据库上下文定位器</typeparam>
            <returns>仓储</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlRepository.GetService``1">
            <summary>
            解析服务
            </summary>
            <typeparam name="TService"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlRepository.GetRequiredService``1">
            <summary>
            解析服务
            </summary>
            <typeparam name="TService"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlRepository.Constraint``1">
            <summary>
            将仓储约束为特定仓储
            </summary>
            <typeparam name="TRestrainRepository">特定仓储</typeparam>
            <returns>TRestrainRepository</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateSqlRepository.EnsureTransaction">
            <summary>
            确保工作单元（事务）可用
            </summary>
        </member>
        <member name="T:Furion.DatabaseAccessor.MSRepository">
            <summary>
            默认主库主从仓储
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.MSRepository.#ctor(System.IServiceProvider,Furion.DatabaseAccessor.IRepository)">
            <summary>
            构造函数
            </summary>
            <param name="serviceProvider"></param>
            <param name="repository">非泛型仓储</param>
        </member>
        <member name="T:Furion.DatabaseAccessor.MSRepository`1">
            <summary>
            主从库仓储
            </summary>
            <typeparam name="TMasterDbContextLocator">主库</typeparam>
        </member>
        <member name="F:Furion.DatabaseAccessor.MSRepository`1._serviceProvider">
            <summary>
            服务提供器
            </summary>
        </member>
        <member name="F:Furion.DatabaseAccessor.MSRepository`1._repository">
            <summary>
            非泛型仓储
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.MSRepository`1.#ctor(System.IServiceProvider,Furion.DatabaseAccessor.IRepository)">
            <summary>
            构造函数
            </summary>
            <param name="serviceProvider"></param>
            <param name="repository">非泛型仓储</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.MSRepository`1.Master``1">
            <summary>
            获取主库仓储
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.MSRepository`1.Slave``1">
            <summary>
            动态获取从库（随机）
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.MSRepository`1.Slave``1(System.Func{System.Type})">
            <summary>
            动态获取从库（自定义）
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <returns></returns>
        </member>
        <member name="T:Furion.DatabaseAccessor.MSRepository`2">
            <summary>
            主从库仓储
            </summary>
            <typeparam name="TMasterDbContextLocator">主库</typeparam>
            <typeparam name="TSlaveDbContextLocator1">从库</typeparam>
        </member>
        <member name="F:Furion.DatabaseAccessor.MSRepository`2._repository">
            <summary>
            非泛型仓储
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.MSRepository`2.#ctor(Furion.DatabaseAccessor.IRepository)">
            <summary>
            构造函数
            </summary>
            <param name="repository">非泛型仓储</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.MSRepository`2.Master``1">
            <summary>
            获取主库仓储
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.MSRepository`2.Slave1``1">
            <summary>
            获取从库仓储
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <returns></returns>
        </member>
        <member name="T:Furion.DatabaseAccessor.MSRepository`3">
            <summary>
            主从库仓储
            </summary>
            <typeparam name="TMasterDbContextLocator">主库</typeparam>
            <typeparam name="TSlaveDbContextLocator1">从库</typeparam>
            <typeparam name="TSlaveDbContextLocator2">从库</typeparam>
        </member>
        <member name="F:Furion.DatabaseAccessor.MSRepository`3._repository">
            <summary>
            非泛型仓储
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.MSRepository`3.#ctor(Furion.DatabaseAccessor.IRepository)">
            <summary>
            构造函数
            </summary>
            <param name="repository">非泛型仓储</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.MSRepository`3.Slave2``1">
            <summary>
            获取从库仓储2
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <returns></returns>
        </member>
        <member name="T:Furion.DatabaseAccessor.MSRepository`4">
            <summary>
            主从库仓储
            </summary>
            <typeparam name="TMasterDbContextLocator">主库</typeparam>
            <typeparam name="TSlaveDbContextLocator1">从库</typeparam>
            <typeparam name="TSlaveDbContextLocator2">从库</typeparam>
            <typeparam name="TSlaveDbContextLocator3">从库</typeparam>
        </member>
        <member name="F:Furion.DatabaseAccessor.MSRepository`4._repository">
            <summary>
            非泛型仓储
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.MSRepository`4.#ctor(Furion.DatabaseAccessor.IRepository)">
            <summary>
            构造函数
            </summary>
            <param name="repository">非泛型仓储</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.MSRepository`4.Slave3``1">
            <summary>
            获取从库仓储3
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <returns></returns>
        </member>
        <member name="T:Furion.DatabaseAccessor.MSRepository`5">
            <summary>
            主从库仓储
            </summary>
            <typeparam name="TMasterDbContextLocator">主库</typeparam>
            <typeparam name="TSlaveDbContextLocator1">从库</typeparam>
            <typeparam name="TSlaveDbContextLocator2">从库</typeparam>
            <typeparam name="TSlaveDbContextLocator3">从库</typeparam>
            <typeparam name="TSlaveDbContextLocator4">从库</typeparam>
        </member>
        <member name="F:Furion.DatabaseAccessor.MSRepository`5._repository">
            <summary>
            非泛型仓储
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.MSRepository`5.#ctor(Furion.DatabaseAccessor.IRepository)">
            <summary>
            构造函数
            </summary>
            <param name="repository">非泛型仓储</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.MSRepository`5.Slave4``1">
            <summary>
            获取从库仓储4
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <returns></returns>
        </member>
        <member name="T:Furion.DatabaseAccessor.MSRepository`6">
            <summary>
            主从库仓储
            </summary>
            <typeparam name="TMasterDbContextLocator">主库</typeparam>
            <typeparam name="TSlaveDbContextLocator1">从库</typeparam>
            <typeparam name="TSlaveDbContextLocator2">从库</typeparam>
            <typeparam name="TSlaveDbContextLocator3">从库</typeparam>
            <typeparam name="TSlaveDbContextLocator4">从库</typeparam>
            <typeparam name="TSlaveDbContextLocator5">从库</typeparam>
        </member>
        <member name="F:Furion.DatabaseAccessor.MSRepository`6._repository">
            <summary>
            非泛型仓储
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.MSRepository`6.#ctor(Furion.DatabaseAccessor.IRepository)">
            <summary>
            构造函数
            </summary>
            <param name="repository">非泛型仓储</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.MSRepository`6.Slave5``1">
            <summary>
            获取从库仓储5
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <returns></returns>
        </member>
        <member name="T:Furion.DatabaseAccessor.MSRepository`7">
            <summary>
            主从库仓储
            </summary>
            <typeparam name="TMasterDbContextLocator">主库</typeparam>
            <typeparam name="TSlaveDbContextLocator1">从库</typeparam>
            <typeparam name="TSlaveDbContextLocator2">从库</typeparam>
            <typeparam name="TSlaveDbContextLocator3">从库</typeparam>
            <typeparam name="TSlaveDbContextLocator4">从库</typeparam>
            <typeparam name="TSlaveDbContextLocator5">从库</typeparam>
            <typeparam name="TSlaveDbContextLocator6">从库</typeparam>
        </member>
        <member name="F:Furion.DatabaseAccessor.MSRepository`7._repository">
            <summary>
            非泛型仓储
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.MSRepository`7.#ctor(Furion.DatabaseAccessor.IRepository)">
            <summary>
            构造函数
            </summary>
            <param name="repository">非泛型仓储</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.MSRepository`7.Slave6``1">
            <summary>
            获取从库仓储6
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <returns></returns>
        </member>
        <member name="T:Furion.DatabaseAccessor.MSRepository`8">
            <summary>
            主从库仓储
            </summary>
            <typeparam name="TMasterDbContextLocator">主库</typeparam>
            <typeparam name="TSlaveDbContextLocator1">从库</typeparam>
            <typeparam name="TSlaveDbContextLocator2">从库</typeparam>
            <typeparam name="TSlaveDbContextLocator3">从库</typeparam>
            <typeparam name="TSlaveDbContextLocator4">从库</typeparam>
            <typeparam name="TSlaveDbContextLocator5">从库</typeparam>
            <typeparam name="TSlaveDbContextLocator6">从库</typeparam>
            <typeparam name="TSlaveDbContextLocator7">从库</typeparam>
        </member>
        <member name="F:Furion.DatabaseAccessor.MSRepository`8._repository">
            <summary>
            非泛型仓储
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.MSRepository`8.#ctor(Furion.DatabaseAccessor.IRepository)">
            <summary>
            构造函数
            </summary>
            <param name="repository">非泛型仓储</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.MSRepository`8.Slave7``1">
            <summary>
            获取从库仓储7
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <returns></returns>
        </member>
        <member name="T:Furion.DatabaseAccessor.RepositoryFactory`1">
            <summary>
            仓储工厂实现
            </summary>
        </member>
        <member name="T:Furion.DatabaseAccessor.RepositoryFactory`2">
            <summary>
            仓储工厂实现
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.RepositoryFactory`2.CreateRepository">
            <summary>
            创建实体仓储（需要手动 using）
            </summary>
            <returns></returns>
        </member>
        <member name="T:Furion.DatabaseAccessor.SqlRepository">
            <summary>
            Sql 操作仓储实现
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository.#ctor(System.IServiceProvider)">
            <summary>
            构造函数
            </summary>
            <param name="serviceProvider">服务提供器</param>
        </member>
        <member name="T:Furion.DatabaseAccessor.SqlRepository`1">
            <summary>
            Sql 操作仓储实现
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.#ctor(System.IServiceProvider)">
            <summary>
            构造函数
            </summary>
            <param name="serviceProvider">服务提供器</param>
        </member>
        <member name="T:Furion.DatabaseAccessor.SqlObjectProxyAttribute">
            <summary>
            Sql 对象类型执行代理
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlObjectProxyAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="name">对象名</param>
        </member>
        <member name="P:Furion.DatabaseAccessor.SqlObjectProxyAttribute.Name">
            <summary>
            对象名
            </summary>
        </member>
        <member name="T:Furion.DatabaseAccessor.SqlProxyAttribute">
            <summary>
            Sql 执行代理基特性
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.SqlProxyAttribute.InterceptorId">
            <summary>
            配置拦截唯一 ID（比方法名优先级高）
            </summary>
        </member>
        <member name="T:Furion.DatabaseAccessor.SqlSentenceProxyAttribute">
            <summary>
            Sql 语句执行代理
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlSentenceProxyAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="sql"></param>
        </member>
        <member name="P:Furion.DatabaseAccessor.SqlSentenceProxyAttribute.Sql">
            <summary>
            Sql 语句
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.SqlSentenceProxyAttribute.CommandType">
            <summary>
            命令类型
            </summary>
        </member>
        <member name="T:Furion.DatabaseAccessor.SqlDbContextLocatorAttribute">
            <summary>
            Sql 代理指定定位器特性
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlDbContextLocatorAttribute.#ctor(System.Type)">
            <summary>
            构造函数
            </summary>
            <param name="dbContextLocator"></param>
        </member>
        <member name="P:Furion.DatabaseAccessor.SqlDbContextLocatorAttribute.Locator">
            <summary>
            定位器
            </summary>
        </member>
        <member name="T:Furion.DatabaseAccessor.SqlExecuteAttribute">
            <summary>
            Sql 执行特性
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecuteAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="sql">sql 语句</param>
        </member>
        <member name="P:Furion.DatabaseAccessor.SqlExecuteAttribute.RowEffects">
            <summary>
            返回受影响行数
            </summary>
            <remarks>只有非查询类操作有效</remarks>
        </member>
        <member name="T:Furion.DatabaseAccessor.SqlFunctionAttribute">
            <summary>
            Sql 函数特性
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlFunctionAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="name">函数名</param>
        </member>
        <member name="T:Furion.DatabaseAccessor.SqlInterceptorAttribute">
            <summary>
            Sql 代理拦截器
            </summary>
            <remarks>如果贴在静态方法中且 InterceptorId/MethodName 为空，则为全局拦截</remarks>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlInterceptorAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlInterceptorAttribute.#ctor(System.String[])">
            <summary>
            构造函数
            </summary>
            <param name="interceptorIds"></param>
        </member>
        <member name="P:Furion.DatabaseAccessor.SqlInterceptorAttribute.InterceptorIds">
            <summary>
            方法名称
            </summary>
        </member>
        <member name="T:Furion.DatabaseAccessor.SqlProcedureAttribute">
            <summary>
            数据库存储过程特性
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlProcedureAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="name">存储过程名</param>
        </member>
        <member name="T:Furion.DatabaseAccessor.TimeoutAttribute">
            <summary>
            配置 ADO.NET 超时时间
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.TimeoutAttribute.#ctor(System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="seconds"></param>
        </member>
        <member name="P:Furion.DatabaseAccessor.TimeoutAttribute.Seconds">
            <summary>
            超时时间（秒）
            </summary>
        </member>
        <member name="T:Furion.DatabaseAccessor.SqlProxyMethod">
            <summary>
            Sql 代理方法元数据
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.SqlProxyMethod.ParameterModel">
            <summary>
            参数模型
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.SqlProxyMethod.ReturnType">
            <summary>
            方法返回值
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.SqlProxyMethod.Context">
            <summary>
            数据库操作上下文
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.SqlProxyMethod.IsAsync">
            <summary>
            是否是异步方法
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.SqlProxyMethod.CommandType">
            <summary>
            命令类型
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.SqlProxyMethod.FinalSql">
            <summary>
            最终 Sql 语句
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.SqlProxyMethod.Method">
            <summary>
            当前执行的方法
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.SqlProxyMethod.Arguments">
            <summary>
            传递参数
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.SqlProxyMethod.InterceptorId">
            <summary>
            拦截Id
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.SqlProxyMethod.RowEffects">
            <summary>
            返回受影响行数
            </summary>
            <remarks>只有非查询类操作有效</remarks>
        </member>
        <member name="T:Furion.DatabaseAccessor.ISqlDispatchProxy">
            <summary>
            Sql 执行代理依赖接口
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlDispatchProxy.Change``1">
            <summary>
            切换数据库上下文定位器
            </summary>
            <typeparam name="TDbContextLocator"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlDispatchProxy.ResetIt">
            <summary>
            重置运行时数据库上下文定位器
            </summary>
        </member>
        <member name="T:Furion.DatabaseAccessor.SqlDispatchProxy">
            <summary>
            Sql 执行代理类
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.SqlDispatchProxy.Target">
            <summary>
            实例对象
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.SqlDispatchProxy.Services">
            <summary>
            服务提供器
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.SqlDispatchProxy.DbContextLocator">
            <summary>
            数据库上下文定位器类型
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlDispatchProxy.Invoke(System.Reflection.MethodInfo,System.Object[])">
            <summary>
            拦截同步方法
            </summary>
            <param name="method"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlDispatchProxy.InvokeAsync(System.Reflection.MethodInfo,System.Object[])">
            <summary>
            拦截异步方法
            </summary>
            <param name="method"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlDispatchProxy.InvokeAsyncT``1(System.Reflection.MethodInfo,System.Object[])">
            <summary>
            拦截异步带返回值方法
            </summary>
            <typeparam name="T"></typeparam>
            <param name="method"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlDispatchProxy.ExecuteSql(Furion.DatabaseAccessor.SqlProxyMethod)">
            <summary>
            执行 Sql 操作
            </summary>
            <param name="sqlProxyMethod">代理方法</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlDispatchProxy.ExecuteSqlAsync(Furion.DatabaseAccessor.SqlProxyMethod)">
            <summary>
            执行 Sql 操作
            </summary>
            <param name="sqlProxyMethod">代理方法</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlDispatchProxy.ExecuteSqlOfTAsync``1(Furion.DatabaseAccessor.SqlProxyMethod)">
            <summary>
            执行 Sql 操作
            </summary>
            <param name="sqlProxyMethod">代理方法</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlDispatchProxy.GetProxyMethod(System.Reflection.MethodInfo,System.Object[])">
            <summary>
            获取代理方法信息
            </summary>
            <param name="method">方法</param>
            <param name="args">参数列表</param>
            <returns>SqlProxyMethod</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlDispatchProxy.CombineDbParameter(System.Reflection.MethodInfo,System.Object[])">
            <summary>
            创建数据库命令参数字典
            </summary>
            <param name="method"></param>
            <param name="arguments"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlDispatchProxy.GetDbContext(System.Reflection.MethodInfo)">
            <summary>
            获取数据库上下文
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlDispatchProxy.CallMethodInterceptors(System.Type,Furion.DatabaseAccessor.SqlProxyMethod)">
            <summary>
            添加方法拦截
            </summary>
            <param name="declaringType"></param>
            <param name="sqlProxyMethod"></param>
        </member>
        <member name="T:Furion.DatabaseAccessor.EFCoreUnitOfWork">
            <summary>
            EFCore 工作单元实现
            </summary>
        </member>
        <member name="F:Furion.DatabaseAccessor.EFCoreUnitOfWork._dbContextPool">
            <summary>
            数据库上下文池
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreUnitOfWork.#ctor(Furion.DatabaseAccessor.IDbContextPool)">
            <summary>
            构造函数
            </summary>
            <param name="dbContextPool"></param>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreUnitOfWork.BeginTransaction(Microsoft.AspNetCore.Mvc.Filters.FilterContext,Furion.DatabaseAccessor.UnitOfWorkAttribute)">
            <summary>
            开启工作单元处理
            </summary>
            <param name="context"></param>
            <param name="unitOfWork"></param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreUnitOfWork.CommitTransaction(Microsoft.AspNetCore.Mvc.Filters.FilterContext,Furion.DatabaseAccessor.UnitOfWorkAttribute)">
            <summary>
            提交工作单元处理
            </summary>
            <param name="resultContext"></param>
            <param name="unitOfWork"></param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreUnitOfWork.RollbackTransaction(Microsoft.AspNetCore.Mvc.Filters.FilterContext,Furion.DatabaseAccessor.UnitOfWorkAttribute)">
            <summary>
            回滚工作单元处理
            </summary>
            <param name="resultContext"></param>
            <param name="unitOfWork"></param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreUnitOfWork.OnCompleted(Microsoft.AspNetCore.Mvc.Filters.FilterContext,Microsoft.AspNetCore.Mvc.Filters.FilterContext)">
            <summary>
            执行完毕（无论成功失败）
            </summary>
            <param name="context"></param>
            <param name="resultContext"></param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Furion.DatabaseAccessor.ManualCommitAttribute">
            <summary>
            手动提交标识
            <para>默认情况下，框架会自动在方法结束之时调用 SaveChanges 方法，贴此特性可以忽略该行为</para>
            </summary>
        </member>
        <member name="T:Furion.DatabaseAccessor.UnitOfWorkAttribute">
            <summary>
            工作单元配置特性
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.UnitOfWorkAttribute.EnsureTransaction">
            <summary>
            确保事务可用
            <para>此方法为了解决静态类方式操作数据库的问题</para>
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.UnitOfWorkAttribute.UseAmbientTransaction">
            <summary>
            是否使用分布式环境事务
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.UnitOfWorkAttribute.TransactionScope">
            <summary>
            分布式环境事务范围
            </summary>
            <remarks><see cref="P:Furion.DatabaseAccessor.UnitOfWorkAttribute.UseAmbientTransaction"/> 为 true 有效</remarks>
        </member>
        <member name="P:Furion.DatabaseAccessor.UnitOfWorkAttribute.TransactionIsolationLevel">
            <summary>
            分布式环境事务隔离级别
            </summary>
            <remarks><see cref="P:Furion.DatabaseAccessor.UnitOfWorkAttribute.UseAmbientTransaction"/> 为 true 有效</remarks>
        </member>
        <member name="P:Furion.DatabaseAccessor.UnitOfWorkAttribute.TransactionTimeout">
            <summary>
            分布式环境事务超时时间
            </summary>
            <remarks>单位秒</remarks>
        </member>
        <member name="P:Furion.DatabaseAccessor.UnitOfWorkAttribute.TransactionScopeAsyncFlow">
            <summary>
            支持分布式环境事务异步流
            </summary>
            <remarks><see cref="P:Furion.DatabaseAccessor.UnitOfWorkAttribute.UseAmbientTransaction"/> 为 true 有效</remarks>
        </member>
        <member name="F:Furion.DatabaseAccessor.UnitOfWorkAttribute.MiniProfilerCategory">
            <summary>
             MiniProfiler 分类名
            </summary>
        </member>
        <member name="F:Furion.DatabaseAccessor.UnitOfWorkAttribute.FilterOrder">
            <summary>
            过滤器排序
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.UnitOfWorkAttribute.Order">
            <summary>
            排序属性
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.UnitOfWorkAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.UnitOfWorkAttribute.#ctor(System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="ensureTransaction"></param>
        </member>
        <member name="M:Furion.DatabaseAccessor.UnitOfWorkAttribute.OnActionExecutionAsync(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext,Microsoft.AspNetCore.Mvc.Filters.ActionExecutionDelegate)">
            <summary>
            拦截请求
            </summary>
            <param name="context">动作方法上下文</param>
            <param name="next">中间件委托</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.UnitOfWorkAttribute.OnPageHandlerSelectionAsync(Microsoft.AspNetCore.Mvc.Filters.PageHandlerSelectedContext)">
            <summary>
            模型绑定拦截
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.UnitOfWorkAttribute.OnPageHandlerExecutionAsync(Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutingContext,Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutionDelegate)">
            <summary>
            拦截请求
            </summary>
            <param name="context"></param>
            <param name="next"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.UnitOfWorkAttribute.CreateTransactionScope(Microsoft.AspNetCore.Mvc.Filters.FilterContext)">
            <summary>
            创建分布式环境事务
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.UnitOfWorkAttribute.BeginTransaction(Microsoft.AspNetCore.Mvc.Filters.FilterContext,System.Reflection.MethodInfo,Furion.DatabaseAccessor.IUnitOfWork@,Furion.DatabaseAccessor.UnitOfWorkAttribute@)">
            <summary>
            开始事务
            </summary>
            <param name="context"></param>
            <param name="method"></param>
            <param name="_unitOfWork"></param>
            <param name="unitOfWorkAttribute"></param>
        </member>
        <member name="M:Furion.DatabaseAccessor.UnitOfWorkAttribute.CommitTransaction(Microsoft.AspNetCore.Mvc.Filters.FilterContext,Furion.DatabaseAccessor.IUnitOfWork,Furion.DatabaseAccessor.UnitOfWorkAttribute,Microsoft.AspNetCore.Mvc.Filters.FilterContext)">
            <summary>
            提交事务
            </summary>
            <param name="context"></param>
            <param name="_unitOfWork"></param>
            <param name="unitOfWorkAttribute"></param>
            <param name="resultContext"></param>
        </member>
        <member name="T:Furion.DatabaseAccessor.IUnitOfWork">
            <summary>
            工作单元依赖接口
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUnitOfWork.BeginTransaction(Microsoft.AspNetCore.Mvc.Filters.FilterContext,Furion.DatabaseAccessor.UnitOfWorkAttribute)">
            <summary>
            开启工作单元处理
            </summary>
            <param name="context"></param>
            <param name="unitOfWork"></param>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUnitOfWork.CommitTransaction(Microsoft.AspNetCore.Mvc.Filters.FilterContext,Furion.DatabaseAccessor.UnitOfWorkAttribute)">
            <summary>
            提交工作单元处理
            </summary>
            <param name="resultContext"></param>
            <param name="unitOfWork"></param>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUnitOfWork.RollbackTransaction(Microsoft.AspNetCore.Mvc.Filters.FilterContext,Furion.DatabaseAccessor.UnitOfWorkAttribute)">
            <summary>
            回滚工作单元处理
            </summary>
            <param name="resultContext"></param>
            <param name="unitOfWork"></param>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUnitOfWork.OnCompleted(Microsoft.AspNetCore.Mvc.Filters.FilterContext,Microsoft.AspNetCore.Mvc.Filters.FilterContext)">
            <summary>
            执行完毕（无论成功失败）
            </summary>
            <param name="context"></param>
            <param name="resultContext"></param>
        </member>
        <member name="T:Furion.DependencyInjection.Scoped">
            <summary>
            创建作用域静态类
            </summary>
            <summary>
            创建作用域静态类
            </summary>
        </member>
        <member name="M:Furion.DependencyInjection.Scoped.CreateUow(System.Action{Microsoft.Extensions.DependencyInjection.IServiceScopeFactory,Microsoft.Extensions.DependencyInjection.IServiceScope},Microsoft.Extensions.DependencyInjection.IServiceScopeFactory)">
            <summary>
            创建一个工作单元作用域
            </summary>
            <param name="handler"></param>
            <param name="scopeFactory"></param>
        </member>
        <member name="M:Furion.DependencyInjection.Scoped.CreateUowAsync(System.Func{Microsoft.Extensions.DependencyInjection.IServiceScopeFactory,Microsoft.Extensions.DependencyInjection.IServiceScope,System.Threading.Tasks.Task},Microsoft.Extensions.DependencyInjection.IServiceScopeFactory)">
            <summary>
            创建一个工作单元作用域（异步）
            </summary>
            <param name="handler"></param>
            <param name="scopeFactory"></param>
        </member>
        <member name="M:Furion.DependencyInjection.Scoped.Create(System.Action{Microsoft.Extensions.DependencyInjection.IServiceScopeFactory,Microsoft.Extensions.DependencyInjection.IServiceScope},Microsoft.Extensions.DependencyInjection.IServiceScopeFactory)">
            <summary>
            创建一个作用域范围
            </summary>
            <param name="handler"></param>
            <param name="scopeFactory"></param>
        </member>
        <member name="M:Furion.DependencyInjection.Scoped.CreateAsync(System.Func{Microsoft.Extensions.DependencyInjection.IServiceScopeFactory,Microsoft.Extensions.DependencyInjection.IServiceScope,System.Threading.Tasks.Task},Microsoft.Extensions.DependencyInjection.IServiceScopeFactory)">
            <summary>
            创建一个作用域范围（异步）
            </summary>
            <param name="handler"></param>
            <param name="scopeFactory"></param>
        </member>
        <member name="M:Furion.DependencyInjection.Scoped.CreateScope(Microsoft.Extensions.DependencyInjection.IServiceScopeFactory@)">
            <summary>
            创建一个作用域
            </summary>
            <param name="scopeFactory"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.DependencyInjection.InjectionAttribute">
            <summary>
            设置依赖注入方式
            </summary>
        </member>
        <member name="M:Furion.DependencyInjection.InjectionAttribute.#ctor(System.Type[])">
            <summary>
            构造函数
            </summary>
            <param name="exceptInterfaces"></param>
        </member>
        <member name="M:Furion.DependencyInjection.InjectionAttribute.#ctor(Furion.DependencyInjection.InjectionActions,System.Type[])">
            <summary>
            构造函数
            </summary>
            <param name="action"></param>
            <param name="exceptInterfaces"></param>
        </member>
        <member name="P:Furion.DependencyInjection.InjectionAttribute.Action">
            <summary>
            添加服务方式，存在不添加，或继续添加
            </summary>
        </member>
        <member name="P:Furion.DependencyInjection.InjectionAttribute.Pattern">
            <summary>
            注册选项
            </summary>
        </member>
        <member name="P:Furion.DependencyInjection.InjectionAttribute.Named">
            <summary>
            注册别名
            </summary>
            <remarks>多服务时使用</remarks>
        </member>
        <member name="P:Furion.DependencyInjection.InjectionAttribute.Order">
            <summary>
            排序，排序越大，则在后面注册
            </summary>
        </member>
        <member name="P:Furion.DependencyInjection.InjectionAttribute.ExceptInterfaces">
            <summary>
            排除接口
            </summary>
        </member>
        <member name="P:Furion.DependencyInjection.InjectionAttribute.Proxy">
            <summary>
            代理类型，必须继承 DispatchProxy、IDispatchProxy
            </summary>
        </member>
        <member name="T:Furion.DependencyInjection.SuppressProxyAttribute">
            <summary>
            跳过全局代理
            </summary>
        </member>
        <member name="T:Furion.DependencyInjection.SuppressSnifferAttribute">
            <summary>
            不被扫描和发现的特性
            </summary>
            <remarks>用于程序集扫描类型或方法时候</remarks>
        </member>
        <member name="T:Furion.DependencyInjection.IPrivateDependency">
            <summary>
            依赖空接口（禁止外部继承）
            </summary>
        </member>
        <member name="T:Furion.DependencyInjection.IScoped">
            <summary>
            作用域服务注册依赖
            </summary>
        </member>
        <member name="T:Furion.DependencyInjection.ISingleton">
            <summary>
            单例服务注册依赖
            </summary>
        </member>
        <member name="T:Furion.DependencyInjection.ITransient">
            <summary>
            瞬时服务注册依赖
            </summary>
        </member>
        <member name="T:Furion.DependencyInjection.InjectionActions">
            <summary>
            服务注册方式
            </summary>
        </member>
        <member name="F:Furion.DependencyInjection.InjectionActions.Add">
            <summary>
            如果存在则覆盖
            </summary>
        </member>
        <member name="F:Furion.DependencyInjection.InjectionActions.TryAdd">
            <summary>
            如果存在则跳过，默认方式
            </summary>
        </member>
        <member name="T:Furion.DependencyInjection.InjectionPatterns">
            <summary>
            注册范围
            </summary>
        </member>
        <member name="F:Furion.DependencyInjection.InjectionPatterns.Self">
            <summary>
            只注册自己
            </summary>
        </member>
        <member name="F:Furion.DependencyInjection.InjectionPatterns.FirstInterface">
            <summary>
            第一个接口
            </summary>
        </member>
        <member name="F:Furion.DependencyInjection.InjectionPatterns.SelfWithFirstInterface">
            <summary>
            自己和第一个接口，默认值
            </summary>
        </member>
        <member name="F:Furion.DependencyInjection.InjectionPatterns.ImplementedInterfaces">
            <summary>
            所有接口
            </summary>
        </member>
        <member name="F:Furion.DependencyInjection.InjectionPatterns.All">
            <summary>
            注册自己包括所有接口
            </summary>
        </member>
        <member name="T:Furion.DependencyInjection.RegisterType">
            <summary>
            注册类型
            </summary>
        </member>
        <member name="F:Furion.DependencyInjection.RegisterType.Transient">
            <summary>
            瞬时
            </summary>
        </member>
        <member name="F:Furion.DependencyInjection.RegisterType.Scoped">
            <summary>
            作用域
            </summary>
        </member>
        <member name="F:Furion.DependencyInjection.RegisterType.Singleton">
            <summary>
            单例
            </summary>
        </member>
        <member name="T:Furion.DependencyInjection.ExternalService">
            <summary>
            外部注册类型模型
            </summary>
        </member>
        <member name="P:Furion.DependencyInjection.ExternalService.Interface">
            <summary>
            接口类型，格式："程序集名称;接口完整名称"
            </summary>
        </member>
        <member name="P:Furion.DependencyInjection.ExternalService.Service">
            <summary>
            实例类型，格式："程序集名称;接口完整名称"
            </summary>
        </member>
        <member name="P:Furion.DependencyInjection.ExternalService.RegisterType">
            <summary>
            注册类型
            </summary>
        </member>
        <member name="P:Furion.DependencyInjection.ExternalService.Action">
            <summary>
            添加服务方式，存在不添加，或继续添加
            </summary>
        </member>
        <member name="P:Furion.DependencyInjection.ExternalService.Pattern">
            <summary>
            注册选项
            </summary>
        </member>
        <member name="P:Furion.DependencyInjection.ExternalService.Named">
            <summary>
            注册别名
            </summary>
            <remarks>多服务时使用</remarks>
        </member>
        <member name="P:Furion.DependencyInjection.ExternalService.Order">
            <summary>
            排序，排序越大，则在后面注册
            </summary>
        </member>
        <member name="P:Furion.DependencyInjection.ExternalService.Proxy">
            <summary>
            代理类型，格式："程序集名称;接口完整名称"
            </summary>
        </member>
        <member name="T:Furion.DependencyInjection.DependencyInjectionSettingsOptions">
            <summary>
            依赖注入配置选项
            </summary>
        </member>
        <member name="P:Furion.DependencyInjection.DependencyInjectionSettingsOptions.Definitions">
            <summary>
            外部注册定义
            </summary>
        </member>
        <member name="M:Furion.DependencyInjection.DependencyInjectionSettingsOptions.PostConfigure(Furion.DependencyInjection.DependencyInjectionSettingsOptions,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            后期配置
            </summary>
            <param name="options"></param>
            <param name="configuration"></param>
        </member>
        <member name="T:Furion.DependencyInjection.INamedServiceProvider`1">
            <summary>
            命名服务提供器
            </summary>
            <typeparam name="TService">目标服务接口</typeparam>
        </member>
        <member name="M:Furion.DependencyInjection.INamedServiceProvider`1.GetService(System.String)">
            <summary>
            根据服务名称获取服务
            </summary>
            <param name="serviceName">服务名称</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DependencyInjection.INamedServiceProvider`1.GetService``1(System.String)">
            <summary>
            根据服务名称获取服务
            </summary>
            <typeparam name="ILifetime">服务生存周期接口，<see cref="T:Furion.DependencyInjection.ITransient"/>，<see cref="T:Furion.DependencyInjection.IScoped"/>，<see cref="T:Furion.DependencyInjection.ISingleton"/></typeparam>
            <param name="serviceName">服务名称</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DependencyInjection.INamedServiceProvider`1.GetRequiredService(System.String)">
            <summary>
            根据服务名称获取服务
            </summary>
            <param name="serviceName">服务名称</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DependencyInjection.INamedServiceProvider`1.GetRequiredService``1(System.String)">
            <summary>
            根据服务名称获取服务
            </summary>
            <typeparam name="ILifetime">服务生存周期接口，<see cref="T:Furion.DependencyInjection.ITransient"/>，<see cref="T:Furion.DependencyInjection.IScoped"/>，<see cref="T:Furion.DependencyInjection.ISingleton"/></typeparam>
            <param name="serviceName">服务名称</param>
            <returns></returns>
        </member>
        <member name="T:Furion.DependencyInjection.NamedServiceProvider`1">
            <summary>
            命名服务提供器默认实现
            </summary>
            <typeparam name="TService">目标服务接口</typeparam>
        </member>
        <member name="F:Furion.DependencyInjection.NamedServiceProvider`1._serviceProvider">
            <summary>
            服务提供器
            </summary>
        </member>
        <member name="M:Furion.DependencyInjection.NamedServiceProvider`1.#ctor(System.IServiceProvider)">
            <summary>
            构造函数
            </summary>
            <param name="serviceProvider">服务提供器</param>
        </member>
        <member name="M:Furion.DependencyInjection.NamedServiceProvider`1.GetService(System.String)">
            <summary>
            根据服务名称获取服务
            </summary>
            <param name="serviceName">服务名称</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DependencyInjection.NamedServiceProvider`1.GetService``1(System.String)">
            <summary>
            根据服务名称获取服务
            </summary>
            <typeparam name="ILifetime">服务生存周期接口，<see cref="T:Furion.DependencyInjection.ITransient"/>，<see cref="T:Furion.DependencyInjection.IScoped"/>，<see cref="T:Furion.DependencyInjection.ISingleton"/></typeparam>
            <param name="serviceName">服务名称</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DependencyInjection.NamedServiceProvider`1.GetRequiredService(System.String)">
            <summary>
            根据服务名称获取服务
            </summary>
            <param name="serviceName">服务名称</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DependencyInjection.NamedServiceProvider`1.GetRequiredService``1(System.String)">
            <summary>
            根据服务名称获取服务
            </summary>
            <typeparam name="ILifetime">服务生存周期接口，<see cref="T:Furion.DependencyInjection.ITransient"/>，<see cref="T:Furion.DependencyInjection.IScoped"/>，<see cref="T:Furion.DependencyInjection.ISingleton"/></typeparam>
            <param name="serviceName">服务名称</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DependencyInjection.NamedServiceProvider`1.ResovleServiceName(System.Type)">
            <summary>
            解析服务名称
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.DataEncryption.AESEncryption">
            <summary>
            AES 加解密
            </summary>
        </member>
        <member name="M:Furion.DataEncryption.AESEncryption.Encrypt(System.String,System.String,System.Byte[],System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
            加密
            </summary>
            <param name="text">加密文本</param>
            <param name="skey">密钥</param>
            <param name="iv">偏移量</param>
            <param name="mode">模式</param>
            <param name="padding">填充</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DataEncryption.AESEncryption.Decrypt(System.String,System.String,System.Byte[],System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
            解密
            </summary>
            <param name="hash">加密后字符串</param>
            <param name="skey">密钥</param>
            <param name="iv">偏移量</param>
            <param name="mode">模式</param>
            <param name="padding">填充</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DataEncryption.AESEncryption.Encrypt(System.Byte[],System.String,System.Byte[],System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
            加密
            </summary>
            <param name="bytes">源文件 字节数组</param>
            <param name="skey">密钥</param>
            <param name="iv">偏移量</param>
            <param name="mode">模式</param>
            <param name="padding">填充</param>
            <returns>加密后的字节数组</returns>
        </member>
        <member name="M:Furion.DataEncryption.AESEncryption.Decrypt(System.Byte[],System.String,System.Byte[],System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
            解密
            </summary>
            <param name="bytes">加密后文件 字节数组</param>
            <param name="skey">密钥</param>
            <param name="iv">偏移量</param>
            <param name="mode">模式</param>
            <param name="padding">填充</param>
            <returns></returns>
        </member>
        <member name="T:Furion.DataEncryption.DESEncryption">
            <summary>
            DES 加解密
            </summary>
        </member>
        <member name="M:Furion.DataEncryption.DESEncryption.Encrypt(System.String,System.String,System.Boolean)">
            <summary>
            加密
            </summary>
            <param name="text">加密文本</param>
            <param name="skey">密钥</param>
            <param name="uppercase">是否输出大写加密，默认 false</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DataEncryption.DESEncryption.Decrypt(System.String,System.String,System.Boolean)">
            <summary>
            解密
            </summary>
            <param name="hash">加密后字符串</param>
            <param name="skey">密钥</param>
            <param name="uppercase">是否输出大写加密，默认 false</param>
            <returns></returns>
        </member>
        <member name="T:Furion.DataEncryption.KSortEncryption">
            <summary>
            KSort 加密（数据签名）
            </summary>
        </member>
        <member name="M:Furion.DataEncryption.KSortEncryption.Encrypt(System.String,System.String,System.String,System.String,System.Nullable{System.Int64})">
            <summary>
            数据加密（签名）
            </summary>
            <param name="appId">APP_ID</param>
            <param name="appKey">APP_KEY</param>
            <param name="command">命令</param>
            <param name="data">序列化后的字符串</param>
            <param name="timestamp">时间戳</param>
            <returns><see cref="T:System.Object"/></returns>
        </member>
        <member name="M:Furion.DataEncryption.KSortEncryption.Compare(Furion.DataEncryption.KSortSignature)">
            <summary>
            比较数据签名
            </summary>
            <param name="kSortSignature"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DataEncryption.KSortEncryption.Compare(System.String,System.String,System.String)">
            <summary>
            比较数据签名
            </summary>
            <param name="signatureData">签名数据</param>
            <param name="appId">新的 APP_ID</param>
            <param name="appKey">新的 APP_KEY</param>
            <returns></returns>
        </member>
        <member name="T:Furion.DataEncryption.KSortSignature">
            <summary>
            KSort 签名类
            </summary>
        </member>
        <member name="P:Furion.DataEncryption.KSortSignature.app_id">
            <summary>
            APP_ID
            </summary>
        </member>
        <member name="P:Furion.DataEncryption.KSortSignature.app_key">
            <summary>
            APP_KEY
            </summary>
        </member>
        <member name="P:Furion.DataEncryption.KSortSignature.command">
            <summary>
            命令
            </summary>
        </member>
        <member name="P:Furion.DataEncryption.KSortSignature.data">
            <summary>
            序列化的字符串
            </summary>
        </member>
        <member name="P:Furion.DataEncryption.KSortSignature.timestamp">
            <summary>
            时间戳
            </summary>
        </member>
        <member name="P:Furion.DataEncryption.KSortSignature.signature">
            <summary>
            签名
            </summary>
        </member>
        <member name="M:Furion.DataEncryption.KSortSignature.Equals(Furion.DataEncryption.KSortSignature)">
            <inheritdoc />
        </member>
        <member name="M:Furion.DataEncryption.KSortSignature.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Furion.DataEncryption.KSortSignature.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Furion.DataEncryption.KSortSignature.op_Equality(Furion.DataEncryption.KSortSignature,Furion.DataEncryption.KSortSignature)">
            <inheritdoc />
        </member>
        <member name="M:Furion.DataEncryption.KSortSignature.op_Inequality(Furion.DataEncryption.KSortSignature,Furion.DataEncryption.KSortSignature)">
            <inheritdoc />
        </member>
        <member name="T:Furion.DataEncryption.MD5Encryption">
            <summary>
            MD5 加密
            </summary>
        </member>
        <member name="M:Furion.DataEncryption.MD5Encryption.Compare(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            MD5 比较
            </summary>
            <param name="text">加密文本</param>
            <param name="hash">MD5 字符串</param>
            <param name="uppercase">是否输出大写加密，默认 false</param>
            <param name="is16">是否输出 16 位</param>
            <returns>bool</returns>
        </member>
        <member name="M:Furion.DataEncryption.MD5Encryption.Encrypt(System.String,System.Boolean,System.Boolean)">
            <summary>
            MD5 加密
            </summary>
            <param name="text">加密文本</param>
            <param name="uppercase">是否输出大写加密，默认 false</param>
            <param name="is16">是否输出 16 位</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DataEncryption.MD5Encryption.Encrypt(System.Byte[],System.Boolean,System.Boolean)">
            <summary>
            MD5 加密
            </summary>
            <param name="bytes">字节数组</param>
            <param name="uppercase">是否输出大写加密，默认 false</param>
            <param name="is16">是否输出 16 位</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DataEncryption.MD5Encryption.Compare(System.Byte[],System.String,System.Boolean,System.Boolean)">
            <summary>
            MD5 比较
            </summary>
            <param name="bytes">字节数组</param>
            <param name="hash">MD5 字符串</param>
            <param name="uppercase">是否输出大写加密，默认 false</param>
            <param name="is16">是否输出 16 位</param>
            <returns>bool</returns>
        </member>
        <member name="T:Furion.DataEncryption.PBKDF2Encryption">
            <summary>
            PBKDF2 加密
            </summary>
        </member>
        <member name="M:Furion.DataEncryption.PBKDF2Encryption.Encrypt(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            PBKDF2 加密
            </summary>
            <param name="text">加密文本</param>
            <param name="saltSize">随机 salt 大小</param>
            <param name="iterationCount">迭代次数</param>
            <param name="derivedKeyLength">密钥长度</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DataEncryption.PBKDF2Encryption.Compare(System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            PBKDF2 比较
            </summary>
            <param name="text">加密文本</param>
            <param name="hash">PBKDF2 字符串</param>
            <param name="saltSize">随机 salt 大小</param>
            <param name="iterationCount">迭代次数</param>
            <param name="derivedKeyLength">密钥长度</param>
            <returns></returns>
        </member>
        <member name="T:Furion.DataEncryption.RSAEncryption">
            <summary>
            RSA 加密
            </summary>
        </member>
        <member name="M:Furion.DataEncryption.RSAEncryption.GenerateSecretKey(System.Int32)">
            <summary>
            生成 RSA 秘钥
            </summary>
            <param name="keySize">大小必须为 2048 到 16384 之间，且必须能被 8 整除</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DataEncryption.RSAEncryption.Encrypt(System.String,System.String,System.Int32)">
            <summary>
            加密
            </summary>
            <param name="text">明文内容</param>
            <param name="publicKey">公钥</param>
            <param name="keySize"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DataEncryption.RSAEncryption.Decrypt(System.String,System.String,System.Int32)">
            <summary>
            解密
            </summary>
            <param name="text">密文内容</param>
            <param name="privateKey">私钥</param>
            <param name="keySize"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DataEncryption.RSAEncryption.CheckRSAKeySize(System.Int32)">
            <summary>
            检查 RSA 长度
            </summary>
            <param name="keySize"></param>
        </member>
        <member name="T:Furion.DataEncryption.SHA1Encryption">
            <summary>
            SHA1 加密
            </summary>
        </member>
        <member name="M:Furion.DataEncryption.SHA1Encryption.Encrypt(System.String,System.Boolean)">
            <summary>
            SHA1 加密
            </summary>
            <param name="text">加密文本</param>
            <param name="uppercase">是否输出大写加密，默认 false</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DataEncryption.SHA1Encryption.Compare(System.String,System.String,System.Boolean)">
            <summary>
            SHA1 比较
            </summary>
            <param name="text">加密文本</param>
            <param name="hash">SHA1 字符串</param>
            <param name="uppercase">是否输出大写加密，默认 false</param>
            <returns>bool</returns>
        </member>
        <member name="M:Furion.DataEncryption.SHA1Encryption.Encrypt(System.Byte[],System.Boolean)">
            <summary>
            SHA1 加密
            </summary>
            <param name="bytes">字节数组</param>
            <param name="uppercase">是否输出大写加密，默认 false</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DataEncryption.SHA1Encryption.Compare(System.Byte[],System.String,System.Boolean)">
            <summary>
            SHA1 比较
            </summary>
            <param name="bytes">字节数组</param>
            <param name="hash">SHA1 字符串</param>
            <param name="uppercase">是否输出大写加密，默认 false</param>
            <returns>bool</returns>
        </member>
        <member name="T:Furion.DataEncryption.Extensions.StringEncryptionExtensions">
            <summary>
            DataEncryption 字符串加密拓展
            </summary>
        </member>
        <member name="M:Furion.DataEncryption.Extensions.StringEncryptionExtensions.ToMD5Encrypt(System.String,System.Boolean,System.Boolean)">
            <summary>
            字符串的 MD5 加密
            </summary>
            <param name="text"></param>
            <param name="uppercase">是否输出大写加密，默认 false</param>
            <param name="is16">是否输出 16 位</param>
            <returns>string</returns>
        </member>
        <member name="M:Furion.DataEncryption.Extensions.StringEncryptionExtensions.ToMD5Compare(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            字符串的 MD5 对比
            </summary>
            <param name="text"></param>
            <param name="hash"></param>
            <param name="uppercase">是否输出大写加密，默认 false</param>
            <param name="is16">是否输出 16 位</param>
            <returns>string</returns>
        </member>
        <member name="M:Furion.DataEncryption.Extensions.StringEncryptionExtensions.ToMD5Encrypt(System.Byte[],System.Boolean,System.Boolean)">
            <summary>
            字节数组的 MD5 加密
            </summary>
            <param name="bytes"></param>
            <param name="uppercase">是否输出大写加密，默认 false</param>
            <param name="is16">是否输出 16 位</param>
            <returns>string</returns>
        </member>
        <member name="M:Furion.DataEncryption.Extensions.StringEncryptionExtensions.ToMD5Compare(System.Byte[],System.String,System.Boolean,System.Boolean)">
            <summary>
            字节数组的 MD5 对比
            </summary>
            <param name="bytes"></param>
            <param name="hash"></param>
            <param name="uppercase">是否输出大写加密，默认 false</param>
            <param name="is16">是否输出 16 位</param>
            <returns>string</returns>
        </member>
        <member name="M:Furion.DataEncryption.Extensions.StringEncryptionExtensions.ToAESEncrypt(System.String,System.String,System.Byte[],System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
            字符串 AES 加密
            </summary>
            <param name="text">加密文本</param>
            <param name="skey">密钥</param>
            <param name="iv">偏移量</param>
            <param name="mode">模式</param>
            <param name="padding">填充</param>
            <returns>string</returns>
        </member>
        <member name="M:Furion.DataEncryption.Extensions.StringEncryptionExtensions.ToAESDecrypt(System.String,System.String,System.Byte[],System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
            字符串 AES 解密
            </summary>
            <param name="text">加密文本</param>
            <param name="skey">密钥</param>
            <param name="iv">偏移量</param>
            <param name="mode">模式</param>
            <param name="padding">填充</param>
            <returns>string</returns>
        </member>
        <member name="M:Furion.DataEncryption.Extensions.StringEncryptionExtensions.ToAESEncrypt(System.Byte[],System.String,System.Byte[],System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
            字节数组（文件） AES 加密
            </summary>
            <param name="bytes">源文件 字节数组</param>
            <param name="skey">密钥</param>
            <param name="iv">偏移量</param>
            <param name="mode">模式</param>
            <param name="padding">填充</param>
            <returns>string</returns>
        </member>
        <member name="M:Furion.DataEncryption.Extensions.StringEncryptionExtensions.ToAESDecrypt(System.Byte[],System.String,System.Byte[],System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
            字节数组（文件） AES 解密
            </summary>
            <param name="bytes">加密后文件 字节数组</param>
            <param name="skey">密钥</param>
            <param name="iv">偏移量</param>
            <param name="mode">模式</param>
            <param name="padding">填充</param>
            <returns>string</returns>
        </member>
        <member name="M:Furion.DataEncryption.Extensions.StringEncryptionExtensions.ToDESEncrypt(System.String,System.String,System.Boolean)">
            <summary>
            字符串 DES 加密
            </summary>
            <param name="text">需要加密的字符串</param>
            <param name="skey">密钥</param>
            <param name="uppercase">是否输出大写加密，默认 false</param>
            <returns>string</returns>
        </member>
        <member name="M:Furion.DataEncryption.Extensions.StringEncryptionExtensions.ToDESDecrypt(System.String,System.String,System.Boolean)">
            <summary>
            字符串 DES 解密
            </summary>
            <param name="text"></param>
            <param name="skey">密钥</param>
            <param name="uppercase">是否输出大写加密，默认 false</param>
            <returns>string</returns>
        </member>
        <member name="M:Furion.DataEncryption.Extensions.StringEncryptionExtensions.ToRSAEncrpyt(System.String,System.String)">
            <summary>
            字符串 RSA 加密
            </summary>
            <param name="text">需要加密的文本</param>
            <param name="publicKey">公钥</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DataEncryption.Extensions.StringEncryptionExtensions.ToRSADecrypt(System.String,System.String)">
            <summary>
            字符串 RSA 解密
            </summary>
            <param name="text">需要解密的文本</param>
            <param name="privateKey">私钥</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DataEncryption.Extensions.StringEncryptionExtensions.ToSHA1Encrypt(System.String,System.Boolean)">
            <summary>
            字符串 SHA1 加密
            </summary>
            <param name="text">需要加密的文本</param>
            <param name="uppercase">是否输出大写加密，默认 false</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DataEncryption.Extensions.StringEncryptionExtensions.ToSHA1Encrypt(System.Byte[],System.Boolean)">
            <summary>
            字节数组的 SHA1 加密
            </summary>
            <param name="bytes">字节数组</param>
            <param name="uppercase">是否输出大写加密，默认 false</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DataEncryption.Extensions.StringEncryptionExtensions.ToSHA1Compare(System.String,System.String,System.Boolean)">
            <summary>
            字符串的 SHA1 对比
            </summary>
            <param name="text"></param>
            <param name="hash"></param>
            <param name="uppercase">是否输出大写加密，默认 false</param>
            <returns>string</returns>
        </member>
        <member name="M:Furion.DataEncryption.Extensions.StringEncryptionExtensions.ToSHA1Compare(System.Byte[],System.String,System.Boolean)">
            <summary>
            字节数组的 SHA1 对比
            </summary>
            <param name="bytes"></param>
            <param name="hash"></param>
            <param name="uppercase">是否输出大写加密，默认 false</param>
            <returns>string</returns>
        </member>
        <member name="M:Furion.DataEncryption.Extensions.StringEncryptionExtensions.ToPBKDF2Encrypt(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            字符串的 PBKDF2 加密
            </summary>
            <param name="text">加密文本</param>
            <param name="saltSize">随机 salt 大小</param>
            <param name="iterationCount">迭代次数</param>
            <param name="derivedKeyLength">密钥长度</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DataEncryption.Extensions.StringEncryptionExtensions.ToPBKDF2Compare(System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            字符串的 PBKDF2 比较
            </summary>
            <param name="text">加密文本</param>
            <param name="hash">PBKDF2 字符串</param>
            <param name="saltSize">随机 salt 大小</param>
            <param name="iterationCount">迭代次数</param>
            <param name="derivedKeyLength">密钥长度</param>
            <returns></returns>
        </member>
        <member name="T:Furion.DataValidation.ValidationItemMetadataAttribute">
            <summary>
            验证项元数据
            </summary>
        </member>
        <member name="M:Furion.DataValidation.ValidationItemMetadataAttribute.#ctor(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            构造函数
            </summary>
            <param name="regularExpression">正则表达式</param>
            <param name="defaultErrorMessage">失败提示默认消息</param>
            <param name="regexOptions">正则表达式匹配选项</param>
        </member>
        <member name="P:Furion.DataValidation.ValidationItemMetadataAttribute.RegularExpression">
            <summary>
            正则表达式
            </summary>
        </member>
        <member name="P:Furion.DataValidation.ValidationItemMetadataAttribute.DefaultErrorMessage">
            <summary>
            默认验证失败类型
            </summary>
        </member>
        <member name="P:Furion.DataValidation.ValidationItemMetadataAttribute.RegexOptions">
            <summary>
            正则表达式选项
            </summary>
        </member>
        <member name="T:Furion.DataValidation.ValidationMessageAttribute">
            <summary>
            验证消息特性
            </summary>
        </member>
        <member name="M:Furion.DataValidation.ValidationMessageAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="errorMessage"></param>
        </member>
        <member name="P:Furion.DataValidation.ValidationMessageAttribute.ErrorMessage">
            <summary>
            错误消息
            </summary>
        </member>
        <member name="T:Furion.DataValidation.ValidationMessageTypeAttribute">
            <summary>
            验证消息类型特性
            </summary>
        </member>
        <member name="T:Furion.DataValidation.ValidationTypeAttribute">
            <summary>
            验证类型特性
            </summary>
        </member>
        <member name="T:Furion.DataValidation.ValidationTypes">
            <summary>
            验证类型
            </summary>
        </member>
        <member name="F:Furion.DataValidation.ValidationTypes.Numeric">
            <summary>
            数值类型
            <para>
            表达式：^\+?(:?(:?\d+\.\d+)?$|(:?\d+))?$|(-?\d+)(\.\d+)?$
            </para>
            </summary>
        </member>
        <member name="F:Furion.DataValidation.ValidationTypes.PositiveNumber">
            <summary>
            正数
            <para>
            表达式：^(0\.0*[1-9]+[0-9]*$|[1-9]+[0-9]*\.[0-9]*[0-9]$|[1-9]+[0-9]*$)
            </para>
            </summary>
        </member>
        <member name="F:Furion.DataValidation.ValidationTypes.NegativeNumber">
            <summary>
            负数
            <para>
            表达式：^-(0\.0*[1-9]+[0-9]*$|[1-9]+[0-9]*\.[0-9]*[0-9]$|[1-9]+[0-9]*$)
            </para>
            </summary>
        </member>
        <member name="F:Furion.DataValidation.ValidationTypes.Integer">
            <summary>
            整数
            <para>
            表达式：^-?[1-9]+[0-9]*$|^0$
            </para>
            </summary>
        </member>
        <member name="F:Furion.DataValidation.ValidationTypes.Money">
            <summary>
            金钱类型
            <para>
            表达式：^(([0-9]|([1-9][0-9]{0,9}))((\.[0-9]{1,2})?))$
            </para>
            </summary>
        </member>
        <member name="F:Furion.DataValidation.ValidationTypes.Date">
            <summary>
            日期类型
            <para>
            表达式：^(?:(?:1[6-9]|[2-9][0-9])[0-9]{2}([-/.]?)(?:(?:0?[1-9]|1[0-2])\1(?:0?[1-9]|1[0-9]|2[0-8])|(?:0?[13-9]|1[0-2])\1(?:29|30)|(?:0?[13578]|1[02])\1(?:31))|(?:(?:1[6-9]|[2-9][0-9])(?:0[48]|[2468][048]|[13579][26])|(?:16|[2468][048]|[3579][26])00)([-/.]?)0?2\2(?:29))(\s+([01][0-9]:|2[0-3]:)?[0-5][0-9]:[0-5][0-9])?$
            </para>
            </summary>
        </member>
        <member name="F:Furion.DataValidation.ValidationTypes.Time">
            <summary>
            时间类型
            <para>
            表达式：^(\d{1,2})(:)?(\d{1,2})\2(\d{1,2})$
            </para>
            </summary>
        </member>
        <member name="F:Furion.DataValidation.ValidationTypes.IDCard">
            <summary>
            身份证号码
            <para>
            表达式：(^\d{15}$)|(^\d{18}$)|(^\d{17}(\d|X|x)$)
            </para>
            </summary>
        </member>
        <member name="F:Furion.DataValidation.ValidationTypes.PostCode">
            <summary>
            邮政编码
            <para>
            表达式：^[0-9]{6}$
            </para>
            </summary>
        </member>
        <member name="F:Furion.DataValidation.ValidationTypes.PhoneNumber">
            <summary>
            手机号码
            <para>
            表达式：^1[3456789][0-9]{9}$
            </para>
            </summary>
        </member>
        <member name="F:Furion.DataValidation.ValidationTypes.Telephone">
            <summary>
            固话格式
            <para>
            表达式：(^[0-9]{3,4}\-[0-9]{3,8}$)|(^[0-9]{3,8}$)|(^\([0-9]{3,4}\)[0-9]{3,8}$)|(^0{0,1}13[0-9]{9}$)
            </para>
            </summary>
        </member>
        <member name="F:Furion.DataValidation.ValidationTypes.PhoneOrTelNumber">
            <summary>
            手机或固话类型
            <para>
            表达式：(^1[3456789][0-9]{9}$)|((^[0-9]{3,4}\-[0-9]{3,8}$)|(^[0-9]{3,8}$)|(^\([0-9]{3,4}\)[0-9]{3,8}$)|(^0{0,1}13[0-9]{9}$))
            </para>
            </summary>
        </member>
        <member name="F:Furion.DataValidation.ValidationTypes.EmailAddress">
            <summary>
            邮件类型
            <para>
            表达式：^\w+([-+.']\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$
            </para>
            </summary>
        </member>
        <member name="F:Furion.DataValidation.ValidationTypes.Url">
            <summary>
            网址类型
            <para>
            表达式：^(((ht|f)tps?):\/\/)?([^!@#$%^与*?.\s-]([^!@#$%^与*?.\s]{0,63}[^!@#$%^与*?.\s])?\.)+[a-z]{2,6}\/?
            </para>
            </summary>
        </member>
        <member name="F:Furion.DataValidation.ValidationTypes.Color">
            <summary>
            颜色类型
            <para>
            表达式：^(?:#(?:(?:[0-9a-fA-F]{3}){1,2}|[0-9a-fA-F]{8})|rgba?\((?:\s*\d+\%?\s*,){2}\s*(?:\d+\%?\s*(?:,\s*[0-9.]+\s*)?)?\)|hsla?\((?:\s*\d+\%?\s*,){2}\s*(?:\d+\%?\s*(?:,\s*[0-9.]+\s*)?)?\)|hwb\((?:\s*\d+\%?\s*,){2}\s*(?:\d+\%?\s*)?\)|lch\((?:\s*\d+\%?\s*,){2}\s*(?:\d+\%?\s*)?\)|oklch\((?:\s*\d+\%?\s*,){2}\s*(?:\d+\%?\s*)?\)|lab\((?:\s*[-+]?\d+\%?\s*,){2}\s*[-+]?\d+\%?\s*\)|oklab\((?:\s*[-+]?\d+\%?\s*,){2}\s*[-+]?\d+\%?\s*\))$
            </para>
            </summary>
        </member>
        <member name="F:Furion.DataValidation.ValidationTypes.Chinese">
            <summary>
            中文
            <para>
            表达式：^[\u4e00-\u9fa5]+$
            </para>
            </summary>
        </member>
        <member name="F:Furion.DataValidation.ValidationTypes.IPv4">
            <summary>
            IPv4 类型
            <para>
            表达式：^((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\.){3}(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})$
            </para>
            </summary>
        </member>
        <member name="F:Furion.DataValidation.ValidationTypes.IPv6">
            <summary>
            IPv6 类型
            <para>
            表达式：/^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*$
            </para>
            </summary>
        </member>
        <member name="F:Furion.DataValidation.ValidationTypes.Age">
            <summary>
            年龄
            <para>
            表达式：^[1-99]?\d*$
            </para>
            </summary>
        </member>
        <member name="F:Furion.DataValidation.ValidationTypes.ChineseName">
            <summary>
            中文名
            <para>
            表达式：^[\u0391-\uFFE5]{2,15}$
            </para>
            </summary>
        </member>
        <member name="F:Furion.DataValidation.ValidationTypes.EnglishName">
            <summary>
            英文名
            <para>
            表达式：^[A-Za-z]{1,161}$
            </para>
            </summary>
        </member>
        <member name="F:Furion.DataValidation.ValidationTypes.Capital">
            <summary>
            纯大写
            <para>
            表达式：^[A-Z]+$
            </para>
            </summary>
        </member>
        <member name="F:Furion.DataValidation.ValidationTypes.Lowercase">
            <summary>
            纯小写
            <para>
            表达式：^[a-z]+$
            </para>
            </summary>
        </member>
        <member name="F:Furion.DataValidation.ValidationTypes.Ascii">
            <summary>
            ASCII 编码
            <para>
            表达式：^[\x00-\xFF]+$
            </para>
            </summary>
        </member>
        <member name="F:Furion.DataValidation.ValidationTypes.Md5">
            <summary>
            MD5 加密字符串
            <para>
            表达式：^([a-fA-F0-9]{32})$
            </para>
            </summary>
        </member>
        <member name="F:Furion.DataValidation.ValidationTypes.Zip">
            <summary>
            压缩文件格式
            <para>
            表达式：(.*)\.(rar|zip|7zip|tgz)$
            </para>
            </summary>
        </member>
        <member name="F:Furion.DataValidation.ValidationTypes.Image">
            <summary>
            图片格式
            <para>
            表达式：(.*)\.(jpg|gif|ico|jpeg|png)$
            </para>
            </summary>
        </member>
        <member name="F:Furion.DataValidation.ValidationTypes.Document">
            <summary>
            文档格式
            <para>
            表达式：(.*)\.(doc|xls|docx|xlsx|pdf|md)$
            </para>
            </summary>
        </member>
        <member name="F:Furion.DataValidation.ValidationTypes.Mp3">
            <summary>
            MP3 格式
            <para>
            表达式：(.*)\.(mp3)$
            </para>
            </summary>
        </member>
        <member name="F:Furion.DataValidation.ValidationTypes.Flash">
            <summary>
            Flash 格式
            <para>
            表达式：(.*)\.(swf|fla|flv)$
            </para>
            </summary>
        </member>
        <member name="F:Furion.DataValidation.ValidationTypes.Video">
            <summary>
            视频文件格式
            <para>
            表达式：(.*)\.(rm|rmvb|wmv|avi|mp4|3gp|mkv)$
            </para>
            </summary>
        </member>
        <member name="F:Furion.DataValidation.ValidationTypes.WordWithNumber">
            <summary>
            字母加数字组合
            <para>
            表达式：^(?![0-9]+$)(?![a-zA-Z]+$)[0-9A-Za-z]*$
            </para>
            </summary>
        </member>
        <member name="F:Furion.DataValidation.ValidationTypes.Html">
            <summary>
            Html 标签格式
            <para>
            表达式：lt(\w+)[^gt]*>(.*?lt\/\1gt)?
            </para>
            </summary>
        </member>
        <member name="F:Furion.DataValidation.ValidationTypes.IMEI">
            <summary>
            手机机身码
            </summary>
        </member>
        <member name="F:Furion.DataValidation.ValidationTypes.SocialCreditCode">
            <summary>
            统一社会信用代码
            </summary>
        </member>
        <member name="F:Furion.DataValidation.ValidationTypes.GUID_OR_UUID">
            <summary>
            GUID 或者 UUID
            </summary>
        </member>
        <member name="F:Furion.DataValidation.ValidationTypes.Base64">
            <summary>
            base64 格式
            </summary>
        </member>
        <member name="F:Furion.DataValidation.ValidationTypes.Username">
            <summary>
            用户名
            <para>
            表达式：^[a-zA-Z][a-zA-Z0-9_]{3,18}[a-zA-Z0-9]$
            </para>
            </summary>
        </member>
        <member name="T:Furion.DataValidation.DataValidationExtensions">
            <summary>
            数据验证拓展类
            </summary>
        </member>
        <member name="M:Furion.DataValidation.DataValidationExtensions.TryValidate(System.Object,System.Boolean)">
            <summary>
            拓展方法，验证类类型对象
            </summary>
            <param name="obj">对象实例</param>
            <param name="validateAllProperties">是否验证所有属性</param>
            <returns>验证结果</returns>
        </member>
        <member name="M:Furion.DataValidation.DataValidationExtensions.TryValidate(System.Object,System.ComponentModel.DataAnnotations.ValidationAttribute[])">
            <summary>
            拓展方法，验证单个值
            </summary>
            <param name="value">单个值</param>
            <param name="validationAttributes">验证特性</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DataValidation.DataValidationExtensions.TryValidate(System.Object,System.Object[])">
            <summary>
            拓展方法，验证单个值
            </summary>
            <param name="value">单个值</param>
            <param name="validationTypes">验证类型</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DataValidation.DataValidationExtensions.TryValidate(System.Object,System.ComponentModel.DataAnnotations.ValidationPattern,System.Object[])">
            <summary>
            拓展方法，验证单个值
            </summary>
            <param name="value">单个值</param>
            <param name="validationOptionss">验证逻辑</param>
            <param name="validationTypes">验证类型</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DataValidation.DataValidationExtensions.Validate(System.Object,System.Boolean)">
            <summary>
            拓展方法，验证类类型对象
            </summary>
            <param name="obj">对象实例</param>
            <param name="validateAllProperties">是否验证所有属性</param>
        </member>
        <member name="M:Furion.DataValidation.DataValidationExtensions.Validate(System.Object,System.ComponentModel.DataAnnotations.ValidationAttribute[])">
            <summary>
            拓展方法，验证单个值
            </summary>
            <param name="value">单个值</param>
            <param name="validationAttributes">验证特性</param>
        </member>
        <member name="M:Furion.DataValidation.DataValidationExtensions.Validate(System.Object,System.Object[])">
            <summary>
            拓展方法，验证单个值
            </summary>
            <param name="value">单个值</param>
            <param name="validationTypes">验证类型</param>
        </member>
        <member name="M:Furion.DataValidation.DataValidationExtensions.Validate(System.Object,System.ComponentModel.DataAnnotations.ValidationPattern,System.Object[])">
            <summary>
            拓展方法，验证单个值
            </summary>
            <param name="value">单个值</param>
            <param name="validationOptionss">验证逻辑</param>
            <param name="validationTypes">验证类型</param>
        </member>
        <member name="M:Furion.DataValidation.DataValidationExtensions.TryValidate(System.Object,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            拓展方法，验证单个值
            </summary>
            <param name="value">单个值</param>
            <param name="regexPattern">正则表达式</param>
            <param name="regexOptions">正则表达式选项</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DataValidation.DataValidationExtensions.ThrowValidateFailedModel(Furion.DataValidation.DataValidationResult)">
            <summary>
            直接抛出异常信息
            </summary>
            <param name="dataValidationResult"></param>
        </member>
        <member name="T:Furion.DataValidation.DataValidationOptions">
            <summary>
            AddInject 数据验证配置选项
            </summary>
        </member>
        <member name="P:Furion.DataValidation.DataValidationOptions.GlobalEnabled">
            <summary>
            启用全局数据验证
            </summary>
        </member>
        <member name="P:Furion.DataValidation.DataValidationOptions.SuppressImplicitRequiredAttributeForNonNullableReferenceTypes">
            <summary>
            禁止C# 8.0 验证非可空引用类型
            </summary>
        </member>
        <member name="P:Furion.DataValidation.DataValidationOptions.SuppressModelStateInvalidFilter">
            <summary>
            是否禁用模型验证过滤器
            </summary>
            <remarks>只会改变启用全局验证的情况，也就是 <see cref="P:Furion.DataValidation.DataValidationOptions.GlobalEnabled"/> 为 true 的情况</remarks>
        </member>
        <member name="P:Furion.DataValidation.DataValidationOptions.SuppressMapClientErrors">
            <summary>
            是否禁用映射异常
            </summary>
        </member>
        <member name="T:Furion.DataValidation.DataValidationFilter">
            <summary>
            数据验证拦截器
            </summary>
        </member>
        <member name="F:Furion.DataValidation.DataValidationFilter._apiBehaviorOptions">
            <summary>
            Api 行为配置选项
            </summary>
        </member>
        <member name="F:Furion.DataValidation.DataValidationFilter._unifyResultSettingsOptions">
            <summary>
            规范化配置选项
            </summary>
        </member>
        <member name="M:Furion.DataValidation.DataValidationFilter.#ctor(Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Mvc.ApiBehaviorOptions},Microsoft.Extensions.Options.IOptions{Furion.UnifyResult.UnifyResultSettingsOptions})">
            <summary>
            构造函数
            </summary>
            <param name="options"></param>
            <param name="unifyResultSettingsOptions"></param>
        </member>
        <member name="F:Furion.DataValidation.DataValidationFilter.FilterOrder">
            <summary>
            过滤器排序
            </summary>
        </member>
        <member name="P:Furion.DataValidation.DataValidationFilter.Order">
            <summary>
            排序属性
            </summary>
        </member>
        <member name="P:Furion.DataValidation.DataValidationFilter.IsReusable">
            <summary>
            是否是可重复使用的
            </summary>
        </member>
        <member name="M:Furion.DataValidation.DataValidationFilter.OnActionExecutionAsync(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext,Microsoft.AspNetCore.Mvc.Filters.ActionExecutionDelegate)">
            <summary>
            拦截请求
            </summary>
            <param name="context">动作方法上下文</param>
            <param name="next">中间件委托</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DataValidation.DataValidationFilter.CallUnHandleResult(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext,Microsoft.AspNetCore.Mvc.Filters.ActionExecutionDelegate,Microsoft.AspNetCore.Mvc.Controllers.ControllerActionDescriptor,System.Reflection.MethodInfo)">
            <summary>
            调用未处理的结果类型
            </summary>
            <param name="context"></param>
            <param name="next"></param>
            <param name="actionDescriptor"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DataValidation.DataValidationFilter.HandleValidation(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext,System.Reflection.MethodInfo,Microsoft.AspNetCore.Mvc.Controllers.ControllerActionDescriptor,System.Object,Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext,Furion.FriendlyException.AppFriendlyException)">
            <summary>
            内部处理异常
            </summary>
            <param name="context"></param>
            <param name="method"></param>
            <param name="actionDescriptor"></param>
            <param name="errors"></param>
            <param name="resultContext"></param>
            <param name="friendlyException"></param>
            <returns>返回 false 表示结果没有处理</returns>
        </member>
        <member name="T:Furion.DataValidation.DataValidationPageFilter">
            <summary>
            数据验证拦截器（Razor Pages）
            </summary>
        </member>
        <member name="F:Furion.DataValidation.DataValidationPageFilter._apiBehaviorOptions">
            <summary>
            Api 行为配置选项
            </summary>
        </member>
        <member name="M:Furion.DataValidation.DataValidationPageFilter.#ctor(Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Mvc.ApiBehaviorOptions})">
            <summary>
            构造函数
            </summary>
            <param name="options"></param>
        </member>
        <member name="F:Furion.DataValidation.DataValidationPageFilter.FilterOrder">
            <summary>
            过滤器排序
            </summary>
        </member>
        <member name="P:Furion.DataValidation.DataValidationPageFilter.Order">
            <summary>
            排序属性
            </summary>
        </member>
        <member name="P:Furion.DataValidation.DataValidationPageFilter.IsReusable">
            <summary>
            是否是可重复使用的
            </summary>
        </member>
        <member name="M:Furion.DataValidation.DataValidationPageFilter.OnPageHandlerSelectionAsync(Microsoft.AspNetCore.Mvc.Filters.PageHandlerSelectedContext)">
            <summary>
            模型绑定拦截
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DataValidation.DataValidationPageFilter.OnPageHandlerExecutionAsync(Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutingContext,Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutionDelegate)">
            <summary>
            拦截请求
            </summary>
            <param name="context"></param>
            <param name="next"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DataValidation.DataValidationPageFilter.CallUnHandleResult(Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutingContext,Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutionDelegate)">
            <summary>
            调用未处理的结果类型
            </summary>
            <param name="context"></param>
            <param name="next"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DataValidation.DataValidationPageFilter.HandleValidation(Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutingContext,System.Object,Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutedContext,Furion.FriendlyException.AppFriendlyException)">
            <summary>
            内部处理异常
            </summary>
            <param name="context"></param>
            <param name="errors"></param>
            <param name="resultContext"></param>
            <param name="friendlyException"></param>
            <returns>返回 false 表示结果没有处理</returns>
        </member>
        <member name="T:Furion.DataValidation.DataValidationResult">
            <summary>
            数据验证结果
            </summary>
        </member>
        <member name="P:Furion.DataValidation.DataValidationResult.IsValid">
            <summary>
            验证状态
            </summary>
        </member>
        <member name="P:Furion.DataValidation.DataValidationResult.ValidationResults">
            <summary>
            验证结果
            </summary>
        </member>
        <member name="P:Furion.DataValidation.DataValidationResult.MemberOrValue">
            <summary>
            成员或值
            </summary>
        </member>
        <member name="T:Furion.DataValidation.ValidationMetadata">
            <summary>
            验证信息元数据
            </summary>
        </member>
        <member name="P:Furion.DataValidation.ValidationMetadata.ValidationResult">
            <summary>
            验证结果
            </summary>
            <remarks>返回字典或字符串类型</remarks>
        </member>
        <member name="P:Furion.DataValidation.ValidationMetadata.Message">
            <summary>
            异常消息
            </summary>
        </member>
        <member name="P:Furion.DataValidation.ValidationMetadata.ModelState">
            <summary>
            验证状态
            </summary>
        </member>
        <member name="P:Furion.DataValidation.ValidationMetadata.ErrorCode">
            <summary>
            错误码
            </summary>
        </member>
        <member name="P:Furion.DataValidation.ValidationMetadata.OriginErrorCode">
            <summary>
            错误码（没被复写过的 ErrorCode ）
            </summary>
        </member>
        <member name="P:Furion.DataValidation.ValidationMetadata.StatusCode">
            <summary>
            状态码
            </summary>
        </member>
        <member name="P:Furion.DataValidation.ValidationMetadata.FirstErrorProperty">
            <summary>
            首个错误属性
            </summary>
        </member>
        <member name="P:Furion.DataValidation.ValidationMetadata.FirstErrorMessage">
            <summary>
            首个错误消息
            </summary>
        </member>
        <member name="P:Furion.DataValidation.ValidationMetadata.Data">
            <summary>
            额外数据
            </summary>
        </member>
        <member name="P:Furion.DataValidation.ValidationMetadata.SingleValidationErrorDisplay">
            <summary>
            默认只显示验证错误的首个消息
            </summary>
        </member>
        <member name="T:Furion.DataValidation.ValidationTypeMessageSettingsOptions">
            <summary>
            验证消息配置选项
            </summary>
        </member>
        <member name="P:Furion.DataValidation.ValidationTypeMessageSettingsOptions.Definitions">
            <summary>
            验证消息配置表
            </summary>
        </member>
        <member name="T:Furion.DataValidation.IValidationMessageTypeProvider">
            <summary>
            验证消息类型提供器
            </summary>
        </member>
        <member name="P:Furion.DataValidation.IValidationMessageTypeProvider.Definitions">
            <summary>
            验证消息类型定义
            </summary>
        </member>
        <member name="T:Furion.DataValidation.ValidatorContext">
            <summary>
            验证上下文
            </summary>
        </member>
        <member name="M:Furion.DataValidation.ValidatorContext.GetValidationMetadata(System.Object)">
            <summary>
            获取验证错误信息
            </summary>
            <param name="errors"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.DataValidation.DataValidator">
            <summary>
            数据验证器
            </summary>
        </member>
        <member name="F:Furion.DataValidation.DataValidator.ValidationTypes">
            <summary>
            所有验证类型
            </summary>
        </member>
        <member name="F:Furion.DataValidation.DataValidator.ValidationMessageTypes">
            <summary>
            所有验证类型
            </summary>
        </member>
        <member name="F:Furion.DataValidation.DataValidator.ValidationItemMetadatas">
            <summary>
            验证类型正则表达式
            </summary>
        </member>
        <member name="M:Furion.DataValidation.DataValidator.#cctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.DataValidation.DataValidator.TryValidateObject(System.Object,System.Boolean)">
            <summary>
            验证类类型对象
            </summary>
            <param name="obj">对象实例</param>
            <param name="validateAllProperties">是否验证所有属性</param>
            <returns>验证结果</returns>
        </member>
        <member name="M:Furion.DataValidation.DataValidator.TryValidateValue(System.Object,System.ComponentModel.DataAnnotations.ValidationAttribute[])">
            <summary>
            验证单个值
            </summary>
            <param name="value">单个值</param>
            <param name="validationAttributes">验证特性</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DataValidation.DataValidator.TryValidateValue(System.Object,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            正则表达式验证
            </summary>
            <param name="value"></param>
            <param name="regexPattern"></param>
            <param name="regexOptions">正则表达式选项</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DataValidation.DataValidator.TryValidateValue(System.Object,System.Object[])">
            <summary>
            验证类型验证
            </summary>
            <param name="value"></param>
            <param name="validationTypes"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DataValidation.DataValidator.TryValidateValue(System.Object,System.ComponentModel.DataAnnotations.ValidationPattern,System.Object[])">
            <summary>
            验证类型验证
            </summary>
            <param name="value"></param>
            <param name="validationOptionss">验证方式</param>
            <param name="validationTypes"></param>
            <returns></returns>
        </member>
        <member name="F:Furion.DataValidation.DataValidator.GetValidationTypeValidationItemMetadataCached">
            <summary>
            获取验证类型验证Item集合
            </summary>
        </member>
        <member name="M:Furion.DataValidation.DataValidator.GetValidationTypeValidationItemMetadata(System.Object)">
            <summary>
            获取验证类型正则表达式（需要缓存）
            </summary>
            <param name="validationType"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DataValidation.DataValidator.GetValidationTypes">
            <summary>
            获取所有验证类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.DataValidation.DataValidator.GetValidationMessageTypes">
            <summary>
            获取所有验证消息类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.DataValidation.DataValidator.GetValidationValidationItemMetadatas">
            <summary>
            获取验证类型所有有效的正则表达式
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.DataValidation.DataValidator.ReplaceValidateErrorMessage(System.String,System.Reflection.FieldInfo,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            替换默认验证失败消息
            </summary>
            <param name="name">验证唯一名称</param>
            <param name="field"></param>
            <param name="customErrorMessages"></param>
        </member>
        <member name="T:Furion.DistributedIDGenerator.SequentialGuidType">
            <summary>
            连续 GUID 类型选项
            </summary>
        </member>
        <member name="F:Furion.DistributedIDGenerator.SequentialGuidType.SequentialAsString">
            <summary>
            标准连续 GUID 字符串
            </summary>
        </member>
        <member name="F:Furion.DistributedIDGenerator.SequentialGuidType.SequentialAsBinary">
            <summary>
            Byte 数组类型的连续 `GUID` 字符串
            </summary>
        </member>
        <member name="F:Furion.DistributedIDGenerator.SequentialGuidType.SequentialAtEnd">
            <summary>
            连续部分在末尾展示
            </summary>
        </member>
        <member name="T:Furion.DistributedIDGenerator.IDistributedIDGenerator">
            <summary>
            分布式 ID 生成器
            </summary>
        </member>
        <member name="M:Furion.DistributedIDGenerator.IDistributedIDGenerator.Create(System.Object)">
            <summary>
            生成逻辑
            </summary>
            <param name="idGeneratorOptions"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.DistributedIDGenerator.SequentialGuidIDGenerator">
            <summary>
            连续 GUID ID 生成器
            <para>代码参考自：https://github.com/PomeloFoundation/Pomelo.EntityFrameworkCore.MySql/blob/ebe011a6f1b2a2a9709fe558cfc7ed3215b55c37/src/EFCore.MySql/ValueGeneration/Internal/MySqlSequentialGuidValueGenerator.cs </para>
            </summary>
        </member>
        <member name="F:Furion.DistributedIDGenerator.SequentialGuidIDGenerator._rng">
            <summary>
            随机数生成器
            </summary>
        </member>
        <member name="M:Furion.DistributedIDGenerator.SequentialGuidIDGenerator.Create(System.Object)">
            <summary>
            生成逻辑
            </summary>
            <param name="idGeneratorOptions"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.DistributedIDGenerator.IDGen">
            <summary>
            ID 生成器
            </summary>
        </member>
        <member name="M:Furion.DistributedIDGenerator.IDGen.NextID(System.Object,System.IServiceProvider)">
            <summary>
            生成唯一 ID
            </summary>
            <param name="idGeneratorOptions"></param>
            <param name="serviceProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DistributedIDGenerator.IDGen.NextID(System.IServiceProvider)">
            <summary>
            生成连续 GUID
            </summary>
            <param name="serviceProvider"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.DistributedIDGenerator.SequentialGuidSettings">
            <summary>
            连续 GUID 配置
            </summary>
        </member>
        <member name="P:Furion.DistributedIDGenerator.SequentialGuidSettings.TimeNow">
            <summary>
            当前时间
            </summary>
        </member>
        <member name="P:Furion.DistributedIDGenerator.SequentialGuidSettings.LittleEndianBinary16Format">
            <summary>
            LittleEndianBinary 16 格式化
            </summary>
        </member>
        <member name="T:Furion.DistributedIDGenerator.Constants">
            <summary>
            短 ID 约束
            </summary>
        </member>
        <member name="F:Furion.DistributedIDGenerator.Constants.MinimumAutoLength">
            <summary>
            最小长度
            </summary>
        </member>
        <member name="F:Furion.DistributedIDGenerator.Constants.MaximumAutoLength">
            <summary>
            最大长度
            </summary>
        </member>
        <member name="F:Furion.DistributedIDGenerator.Constants.MinimumCharacterSetLength">
            <summary>
            最小可选字符长度
            </summary>
        </member>
        <member name="T:Furion.DistributedIDGenerator.RandomHelpers">
            <summary>
            随机数帮助类
            </summary>
        </member>
        <member name="F:Furion.DistributedIDGenerator.RandomHelpers.Random">
            <summary>
            随机数对象
            </summary>
        </member>
        <member name="F:Furion.DistributedIDGenerator.RandomHelpers.ThreadLock">
            <summary>
            线程锁
            </summary>
        </member>
        <member name="M:Furion.DistributedIDGenerator.RandomHelpers.GenerateNumberInRange(System.Int32,System.Int32)">
            <summary>
            生成线程安全的范围内随机数
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.DistributedIDGenerator.GenerationOptions">
            <summary>
            短 ID 生成配置选项
            </summary>
        </member>
        <member name="P:Furion.DistributedIDGenerator.GenerationOptions.UseNumbers">
            <summary>
            是否使用数字
            <para>默认 false</para>
            </summary>
        </member>
        <member name="P:Furion.DistributedIDGenerator.GenerationOptions.UseSpecialCharacters">
            <summary>
            是否使用特殊字符
            <para>默认 true</para>
            </summary>
        </member>
        <member name="P:Furion.DistributedIDGenerator.GenerationOptions.Length">
            <summary>
            设置短 ID 长度
            </summary>
        </member>
        <member name="T:Furion.DistributedIDGenerator.ShortIDGen">
            <summary>
            短 ID 生成核心代码
            <para>代码参考自：https://github.com/bolorundurowb/shortid </para>
            </summary>
        </member>
        <member name="F:Furion.DistributedIDGenerator.ShortIDGen._random">
            <summary>
            短 ID 生成器期初数据
            </summary>
        </member>
        <member name="F:Furion.DistributedIDGenerator.ShortIDGen.ThreadLock">
            <summary>
            线程安全锁
            </summary>
        </member>
        <member name="M:Furion.DistributedIDGenerator.ShortIDGen.NextID">
            <summary>
            生成目前比较主流的短 ID
            <para>包含字母、数字，不包含特殊字符</para>
            <para>默认生成 8 位</para>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.DistributedIDGenerator.ShortIDGen.NextID(Furion.DistributedIDGenerator.GenerationOptions)">
            <summary>
            生成短 ID
            </summary>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DistributedIDGenerator.ShortIDGen.SetCharacters(System.String)">
            <summary>
            设置参与运算的字符，最少 50 位
            </summary>
            <param name="characters"></param>
        </member>
        <member name="M:Furion.DistributedIDGenerator.ShortIDGen.SetSeed(System.Int32)">
            <summary>
            设置种子步长
            </summary>
            <param name="seed"></param>
        </member>
        <member name="M:Furion.DistributedIDGenerator.ShortIDGen.Reset">
            <summary>
            重置所有配置
            </summary>
        </member>
        <member name="T:Furion.DynamicApiController.QueryParametersAttribute">
            <summary>
            将 Action 所有参数 [FromQuery] 化
            </summary>
        </member>
        <member name="M:Furion.DynamicApiController.QueryParametersAttribute.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="T:Furion.DynamicApiController.DynamicApiControllerApplicationModelConvention">
            <summary>
            动态接口控制器应用模型转换器
            </summary>
        </member>
        <member name="F:Furion.DynamicApiController.DynamicApiControllerApplicationModelConvention._dynamicApiControllerSettings">
            <summary>
            动态接口控制器配置实例
            </summary>
        </member>
        <member name="F:Furion.DynamicApiController.DynamicApiControllerApplicationModelConvention._nameVersionRegex">
            <summary>
            带版本的名称正则表达式
            </summary>
        </member>
        <member name="F:Furion.DynamicApiController.DynamicApiControllerApplicationModelConvention._services">
            <summary>
            服务集合
            </summary>
        </member>
        <member name="F:Furion.DynamicApiController.DynamicApiControllerApplicationModelConvention.commonTemplatePattern">
            <summary>
            模板正则表达式
            </summary>
        </member>
        <member name="M:Furion.DynamicApiController.DynamicApiControllerApplicationModelConvention.#ctor(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            构造函数
            </summary>
            <param name="services">服务集合</param>
        </member>
        <member name="M:Furion.DynamicApiController.DynamicApiControllerApplicationModelConvention.Apply(Microsoft.AspNetCore.Mvc.ApplicationModels.ApplicationModel)">
            <summary>
            配置应用模型信息
            </summary>
            <param name="application">引用模型</param>
        </member>
        <member name="M:Furion.DynamicApiController.DynamicApiControllerApplicationModelConvention.ConfigureController(Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerModel,Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute)">
            <summary>
            配置控制器
            </summary>
            <param name="controller">控制器模型</param>
            <param name="controllerApiDescriptionSettings">接口描述配置</param>
        </member>
        <member name="M:Furion.DynamicApiController.DynamicApiControllerApplicationModelConvention.ConfigureControllerArea(Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerModel,Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute)">
            <summary>
            配置控制器区域
            </summary>
            <param name="controller"></param>
            <param name="controllerApiDescriptionSettings"></param>
        </member>
        <member name="M:Furion.DynamicApiController.DynamicApiControllerApplicationModelConvention.ConfigureControllerName(Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerModel,Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute)">
            <summary>
            配置控制器名称
            </summary>
            <param name="controller">控制器模型</param>
            <param name="controllerApiDescriptionSettings">接口描述配置</param>
            <returns></returns>
        </member>
        <member name="P:Furion.DynamicApiController.DynamicApiControllerApplicationModelConvention.ForceWithDefaultPrefixRouteControllerTypes">
            <summary>
            强制处理了 ForceWithDefaultPrefix 的控制器
            </summary>
            <remarks>避免路由无限追加</remarks>
        </member>
        <member name="M:Furion.DynamicApiController.DynamicApiControllerApplicationModelConvention.ConfigureControllerRouteAttribute(Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerModel,Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute,System.Boolean)">
            <summary>
            配置控制器路由特性
            </summary>
            <param name="controller"></param>
            <param name="controllerApiDescriptionSettings"></param>
            <param name="isLowercaseRoute"></param>
        </member>
        <member name="M:Furion.DynamicApiController.DynamicApiControllerApplicationModelConvention.ConfigureAction(Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel,Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute,Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute,System.Boolean)">
            <summary>
            配置动作方法
            </summary>
            <param name="action">控制器模型</param>
            <param name="apiDescriptionSettings">接口描述配置</param>
            <param name="controllerApiDescriptionSettings">控制器接口描述配置</param>
            <param name="hasApiControllerAttribute">是否贴有 ApiController 特性</param>
        </member>
        <member name="M:Furion.DynamicApiController.DynamicApiControllerApplicationModelConvention.ConfigureActionApiExplorer(Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel)">
            <summary>
            配置动作方法接口可见性
            </summary>
            <param name="action">动作方法模型</param>
        </member>
        <member name="M:Furion.DynamicApiController.DynamicApiControllerApplicationModelConvention.ConfigureActionName(Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel,Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute,Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute)">
            <summary>
            配置动作方法名称
            </summary>
            <param name="action">动作方法模型</param>
            <param name="apiDescriptionSettings">接口描述配置</param>
            <param name="controllerApiDescriptionSettings"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DynamicApiController.DynamicApiControllerApplicationModelConvention.ConfigureActionHttpMethodAttribute(Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel)">
            <summary>
            配置动作方法请求谓词特性
            </summary>
            <param name="action">动作方法模型</param>
        </member>
        <member name="M:Furion.DynamicApiController.DynamicApiControllerApplicationModelConvention.ConfigureClassTypeParameter(Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel)">
            <summary>
            处理类类型参数（添加[FromBody] 特性）
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:Furion.DynamicApiController.DynamicApiControllerApplicationModelConvention.ConfigureActionRouteAttribute(Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel,Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute,Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            配置动作方法路由特性
            </summary>
            <param name="action">动作方法模型</param>
            <param name="apiDescriptionSettings">接口描述配置</param>
            <param name="controllerApiDescriptionSettings">控制器接口描述配置</param>
            <param name="isLowercaseRoute"></param>
            <param name="isKeepName"></param>
            <param name="isLowerCamelCase"></param>
            <param name="hasApiControllerAttribute"></param>
        </member>
        <member name="M:Furion.DynamicApiController.DynamicApiControllerApplicationModelConvention.GenerateControllerRouteTemplate(Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerModel,Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute,Furion.DynamicApiController.ParameterRouteTemplate)">
            <summary>
            生成控制器路由模板
            </summary>
            <param name="controller"></param>
            <param name="apiDescriptionSettings"></param>
            <param name="parameterRouteTemplate">参数路由模板</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DynamicApiController.DynamicApiControllerApplicationModelConvention.GenerateParameterRouteTemplates(Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            生成参数路由模板（非引用类型）
            </summary>
            <param name="action">动作方法模型</param>
            <param name="isLowercaseRoute"></param>
            <param name="isLowerCamelCase"></param>
            <param name="hasApiControllerAttribute"></param>
        </member>
        <member name="M:Furion.DynamicApiController.DynamicApiControllerApplicationModelConvention.ConfigureControllerAndActionName(Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute,System.String,System.String[],System.Func{System.String,System.String},Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute,System.String)">
            <summary>
            配置控制器和动作方法名称
            </summary>
            <param name="apiDescriptionSettings"></param>
            <param name="orignalName"></param>
            <param name="affixes"></param>
            <param name="configure"></param>
            <param name="controllerApiDescriptionSettings"></param>
            <param name="actionName">针对 [ActionName] 特性和 [HttpMethod] 特性处理</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DynamicApiController.DynamicApiControllerApplicationModelConvention.CheckIsKeepName(Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute,Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute)">
            <summary>
            检查是否设置了 KeepName参数
            </summary>
            <param name="apiDescriptionSettings"></param>
            <param name="controllerApiDescriptionSettings"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DynamicApiController.DynamicApiControllerApplicationModelConvention.CheckIsKeepVerb(Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute,Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute)">
            <summary>
            检查是否设置了 KeepVerb 参数
            </summary>
            <param name="apiDescriptionSettings"></param>
            <param name="controllerApiDescriptionSettings"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DynamicApiController.DynamicApiControllerApplicationModelConvention.CheckIsForceWithDefaultRoute(Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute)">
            <summary>
            检查是否设置了 ForceWithRoutePrefix  参数
            </summary>
            <param name="controllerApiDescriptionSettings"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DynamicApiController.DynamicApiControllerApplicationModelConvention.CheckIsLowerCamelCase(Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute,Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute)">
            <summary>
            检查是否设置了 AsLowerCamelCase 参数
            </summary>
            <param name="apiDescriptionSettings"></param>
            <param name="controllerApiDescriptionSettings"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DynamicApiController.DynamicApiControllerApplicationModelConvention.CheckIsSplitCamelCase(Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute,Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute)">
            <summary>
            判断切割命名参数是否配置
            </summary>
            <param name="apiDescriptionSettings"></param>
            <param name="controllerApiDescriptionSettings"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DynamicApiController.DynamicApiControllerApplicationModelConvention.CheckIsLowercaseRoute(Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute,Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute)">
            <summary>
            检查是否启用小写路由
            </summary>
            <param name="apiDescriptionSettings"></param>
            <param name="controllerApiDescriptionSettings"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DynamicApiController.DynamicApiControllerApplicationModelConvention.ConfigureActionUnifyResultAttribute(Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel)">
            <summary>
            配置规范化结果类型
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:Furion.DynamicApiController.DynamicApiControllerApplicationModelConvention.ResolveNameVersion(System.String)">
            <summary>
            解析名称中的版本号
            </summary>
            <param name="name">名称</param>
            <returns>名称和版本号</returns>
        </member>
        <member name="M:Furion.DynamicApiController.DynamicApiControllerApplicationModelConvention.LoadVerbToHttpMethodsConfigure">
            <summary>
            获取方法名映射 [HttpMethod] 规则
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.DynamicApiController.DynamicApiControllerApplicationModelConvention.HandleRouteTemplateRepeat(System.String)">
            <summary>
            处理路由模板重复参数
            </summary>
            <param name="template"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DynamicApiController.DynamicApiControllerApplicationModelConvention.ConvertToLowerCaseExceptBrackets(System.String)">
            <summary>
            排除自定义参数模板并进行路由小写
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.DynamicApiController.IDynamicApiController">
            <summary>
            动态Api控制器依赖接口
            </summary>
        </member>
        <member name="T:Furion.DynamicApiController.ParameterRouteTemplate">
            <summary>
            参数路由模板
            </summary>
        </member>
        <member name="M:Furion.DynamicApiController.ParameterRouteTemplate.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:Furion.DynamicApiController.ParameterRouteTemplate.ControllerStartTemplates">
            <summary>
            控制器之前的参数
            </summary>
        </member>
        <member name="P:Furion.DynamicApiController.ParameterRouteTemplate.ControllerEndTemplates">
            <summary>
            控制器之后的参数
            </summary>
        </member>
        <member name="P:Furion.DynamicApiController.ParameterRouteTemplate.ActionStartTemplates">
            <summary>
            行为之前的参数
            </summary>
        </member>
        <member name="P:Furion.DynamicApiController.ParameterRouteTemplate.ActionEndTemplates">
            <summary>
            行为之后的参数
            </summary>
        </member>
        <member name="T:Furion.DynamicApiController.Penetrates">
            <summary>
            常量、公共方法配置类
            </summary>
        </member>
        <member name="F:Furion.DynamicApiController.Penetrates.GroupSeparator">
            <summary>
            分组分隔符
            </summary>
        </member>
        <member name="P:Furion.DynamicApiController.Penetrates.VerbToHttpMethods">
            <summary>
            请求动词映射字典
            </summary>
        </member>
        <member name="P:Furion.DynamicApiController.Penetrates.ControllerOrderCollection">
            <summary>
            控制器排序集合
            </summary>
        </member>
        <member name="M:Furion.DynamicApiController.Penetrates.#cctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="F:Furion.DynamicApiController.Penetrates.IsApiControllerCached">
            <summary>
            <see cref="M:Furion.DynamicApiController.Penetrates.IsApiController(System.Type)"/> 缓存集合
            </summary>
        </member>
        <member name="M:Furion.DynamicApiController.Penetrates.IsApiController(System.Type)">
            <summary>
            是否是Api控制器
            </summary>
            <param name="type">type</param>
            <returns></returns>
        </member>
        <member name="T:Furion.DynamicApiController.DynamicApiControllerSettingsOptions">
            <summary>
            动态接口控制器配置
            </summary>
        </member>
        <member name="P:Furion.DynamicApiController.DynamicApiControllerSettingsOptions.DefaultRoutePrefix">
            <summary>
            默认路由前缀
            </summary>
        </member>
        <member name="P:Furion.DynamicApiController.DynamicApiControllerSettingsOptions.DefaultHttpMethod">
            <summary>
            默认请求谓词
            </summary>
        </member>
        <member name="P:Furion.DynamicApiController.DynamicApiControllerSettingsOptions.DefaultModule">
            <summary>
            默认模块名称
            </summary>
        </member>
        <member name="P:Furion.DynamicApiController.DynamicApiControllerSettingsOptions.LowercaseRoute">
            <summary>
            小写路由
            </summary>
        </member>
        <member name="P:Furion.DynamicApiController.DynamicApiControllerSettingsOptions.AsLowerCamelCase">
            <summary>
            小驼峰命名（首字符小写）
            </summary>
        </member>
        <member name="P:Furion.DynamicApiController.DynamicApiControllerSettingsOptions.KeepVerb">
            <summary>
            保留行为名称谓词
            </summary>
        </member>
        <member name="P:Furion.DynamicApiController.DynamicApiControllerSettingsOptions.KeepName">
            <summary>
            保留名称
            </summary>
        </member>
        <member name="P:Furion.DynamicApiController.DynamicApiControllerSettingsOptions.CamelCaseSeparator">
            <summary>
            骆驼命名分隔符
            </summary>
        </member>
        <member name="P:Furion.DynamicApiController.DynamicApiControllerSettingsOptions.VersionSeparator">
            <summary>
            版本号分隔符
            </summary>
        </member>
        <member name="P:Furion.DynamicApiController.DynamicApiControllerSettingsOptions.VersionInFront">
            <summary>
            版本号在前面
            </summary>
        </member>
        <member name="P:Furion.DynamicApiController.DynamicApiControllerSettingsOptions.ModelToQuery">
            <summary>
            模型转查询参数（只有GET、HEAD请求有效）
            </summary>
        </member>
        <member name="P:Furion.DynamicApiController.DynamicApiControllerSettingsOptions.SupportedMvcController">
            <summary>
            支持Mvc控制器处理
            </summary>
        </member>
        <member name="P:Furion.DynamicApiController.DynamicApiControllerSettingsOptions.UrlParameterization">
            <summary>
            配置参数 [FromQuery] 化，默认 false ([FromRoute])
            </summary>
        </member>
        <member name="P:Furion.DynamicApiController.DynamicApiControllerSettingsOptions.AbandonControllerAffixes">
            <summary>
            被舍弃的控制器名称前后缀
            </summary>
        </member>
        <member name="P:Furion.DynamicApiController.DynamicApiControllerSettingsOptions.AbandonActionAffixes">
            <summary>
            被舍弃的行为名称前后缀
            </summary>
        </member>
        <member name="P:Furion.DynamicApiController.DynamicApiControllerSettingsOptions.VerbToHttpMethods">
            <summary>
            复写默认配置路由规则配置
            </summary>
        </member>
        <member name="P:Furion.DynamicApiController.DynamicApiControllerSettingsOptions.DefaultArea">
            <summary>
            默认区域
            </summary>
        </member>
        <member name="P:Furion.DynamicApiController.DynamicApiControllerSettingsOptions.ForceWithRoutePrefix">
            <summary>
            强制携带路由前缀，即使使用 [Route] 重写
            </summary>
        </member>
        <member name="P:Furion.DynamicApiController.DynamicApiControllerSettingsOptions.DefaultBindingInfo">
            <summary>
            默认基元参数绑定方式
            </summary>
        </member>
        <member name="M:Furion.DynamicApiController.DynamicApiControllerSettingsOptions.PostConfigure(Furion.DynamicApiController.DynamicApiControllerSettingsOptions,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            选项后期配置
            </summary>
            <param name="options"></param>
            <param name="configuration"></param>
        </member>
        <member name="T:Furion.DynamicApiController.DynamicApiControllerFeatureProvider">
            <summary>
            动态接口控制器特性提供器
            </summary>
        </member>
        <member name="M:Furion.DynamicApiController.DynamicApiControllerFeatureProvider.IsController(System.Reflection.TypeInfo)">
            <summary>
            扫描控制器
            </summary>
            <param name="typeInfo">类型</param>
            <returns>bool</returns>
        </member>
        <member name="T:Furion.DynamicApiController.MvcActionDescriptorChangeProvider">
            <summary>
            MVC 控制器感知提供器
            </summary>
        </member>
        <member name="M:Furion.DynamicApiController.MvcActionDescriptorChangeProvider.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.DynamicApiController.MvcActionDescriptorChangeProvider.GetChangeToken">
            <summary>
            获取改变 ChangeToken
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.DynamicApiController.MvcActionDescriptorChangeProvider.NotifyChanges">
            <summary>
            通知变化
            </summary>
        </member>
        <member name="T:Furion.DynamicApiController.DynamicApiRuntimeChangeProvider">
            <summary>
            动态 WebAPI 运行时感知提供器
            </summary>
        </member>
        <member name="F:Furion.DynamicApiController.DynamicApiRuntimeChangeProvider._applicationPartManager">
            <summary>
            应用程序部件管理器
            </summary>
        </member>
        <member name="F:Furion.DynamicApiController.DynamicApiRuntimeChangeProvider._mvcActionDescriptorChangeProvider">
            <summary>
            MVC 控制器感知提供器
            </summary>
        </member>
        <member name="M:Furion.DynamicApiController.DynamicApiRuntimeChangeProvider.#ctor(Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartManager,Furion.DynamicApiController.MvcActionDescriptorChangeProvider)">
            <summary>
            构造函数
            </summary>
            <param name="applicationPartManager">应用程序部件管理器</param>
            <param name="mvcActionDescriptorChangeProvider">MVC 控制器感知提供器</param>
        </member>
        <member name="M:Furion.DynamicApiController.DynamicApiRuntimeChangeProvider.AddAssemblies(System.Reflection.Assembly[])">
            <summary>
            添加程序集
            </summary>
            <param name="assemblies">程序集</param>
        </member>
        <member name="M:Furion.DynamicApiController.DynamicApiRuntimeChangeProvider.AddAssembliesWithNotifyChanges(System.Reflection.Assembly[])">
            <summary>
            添加程序集并立即感知变化
            </summary>
            <param name="assemblies">程序集</param>
        </member>
        <member name="M:Furion.DynamicApiController.DynamicApiRuntimeChangeProvider.RemoveAssemblies(System.String[])">
            <summary>
            移除程序集
            </summary>
            <param name="assemblyNames">程序集名称</param>
        </member>
        <member name="M:Furion.DynamicApiController.DynamicApiRuntimeChangeProvider.RemoveAssemblies(System.Reflection.Assembly[])">
            <summary>
            移除程序集
            </summary>
            <param name="assemblies">程序集</param>
        </member>
        <member name="M:Furion.DynamicApiController.DynamicApiRuntimeChangeProvider.RemoveAssembliesWithNotifyChanges(System.String[])">
            <summary>
            移除程序集并立即感知变化
            </summary>
            <param name="assemblyNames">程序集名称</param>
        </member>
        <member name="M:Furion.DynamicApiController.DynamicApiRuntimeChangeProvider.RemoveAssembliesWithNotifyChanges(System.Reflection.Assembly[])">
            <summary>
            移除程序集并立即感知变化
            </summary>
            <param name="assemblies">程序集</param>
        </member>
        <member name="M:Furion.DynamicApiController.DynamicApiRuntimeChangeProvider.NotifyChanges">
            <summary>
            感知变化
            </summary>
        </member>
        <member name="T:Furion.DynamicApiController.IDynamicApiRuntimeChangeProvider">
            <summary>
            动态 WebAPI 运行时感知提供器
            </summary>
        </member>
        <member name="M:Furion.DynamicApiController.IDynamicApiRuntimeChangeProvider.AddAssemblies(System.Reflection.Assembly[])">
            <summary>
            添加程序集
            </summary>
            <param name="assemblies">程序集</param>
        </member>
        <member name="M:Furion.DynamicApiController.IDynamicApiRuntimeChangeProvider.AddAssembliesWithNotifyChanges(System.Reflection.Assembly[])">
            <summary>
            添加程序集并立即感知变化
            </summary>
            <param name="assemblies">程序集</param>
        </member>
        <member name="M:Furion.DynamicApiController.IDynamicApiRuntimeChangeProvider.RemoveAssemblies(System.String[])">
            <summary>
            移除程序集
            </summary>
            <param name="assemblyNames">程序集名称</param>
        </member>
        <member name="M:Furion.DynamicApiController.IDynamicApiRuntimeChangeProvider.RemoveAssemblies(System.Reflection.Assembly[])">
            <summary>
            移除程序集
            </summary>
            <param name="assemblies">程序集</param>
        </member>
        <member name="M:Furion.DynamicApiController.IDynamicApiRuntimeChangeProvider.RemoveAssembliesWithNotifyChanges(System.String[])">
            <summary>
            移除程序集并立即感知变化
            </summary>
            <param name="assemblyNames">程序集名称</param>
        </member>
        <member name="M:Furion.DynamicApiController.IDynamicApiRuntimeChangeProvider.RemoveAssembliesWithNotifyChanges(System.Reflection.Assembly[])">
            <summary>
            移除程序集并立即感知变化
            </summary>
            <param name="assemblies">程序集</param>
        </member>
        <member name="M:Furion.DynamicApiController.IDynamicApiRuntimeChangeProvider.NotifyChanges">
            <summary>
            感知变化
            </summary>
        </member>
        <member name="T:Furion.EventBus.EventSubscribeAttribute">
            <summary>
            事件处理程序特性
            </summary>
            <remarks>
            <para>作用于 <see cref="T:Furion.EventBus.IEventSubscriber"/> 实现类实例方法</para>
            <para>支持多个事件 Id 触发同一个事件处理程序</para>
            </remarks>
        </member>
        <member name="M:Furion.EventBus.EventSubscribeAttribute.#ctor(System.Object)">
            <summary>
            构造函数
            </summary>
            <param name="eventId">事件 Id</param>
            <remarks>只支持事件类型和 Enum 类型</remarks>
        </member>
        <member name="P:Furion.EventBus.EventSubscribeAttribute.EventId">
            <summary>
            事件 Id
            </summary>
        </member>
        <member name="P:Furion.EventBus.EventSubscribeAttribute.FuzzyMatch">
            <summary>
            是否启用模糊匹配消息
            </summary>
            <remarks>支持正则表达式，bool 类型，默认为 null</remarks>
        </member>
        <member name="P:Furion.EventBus.EventSubscribeAttribute.GCCollect">
            <summary>
            是否启用执行完成触发 GC 回收
            </summary>
            <remarks>bool 类型，默认为 null</remarks>
        </member>
        <member name="P:Furion.EventBus.EventSubscribeAttribute.NumRetries">
            <summary>
            重试次数
            </summary>
        </member>
        <member name="P:Furion.EventBus.EventSubscribeAttribute.RetryTimeout">
            <summary>
            重试间隔时间
            </summary>
            <remarks>默认1000毫秒</remarks>
        </member>
        <member name="P:Furion.EventBus.EventSubscribeAttribute.ExceptionTypes">
            <summary>
            可以指定特定异常类型才重试
            </summary>
        </member>
        <member name="P:Furion.EventBus.EventSubscribeAttribute.FallbackPolicy">
            <summary>
            重试失败策略配置
            </summary>
            <remarks>如果没有注册，必须通过 options.AddFallbackPolicy(type) 注册</remarks>
        </member>
        <member name="P:Furion.EventBus.EventSubscribeAttribute.Order">
            <summary>
            排序
            </summary>
            <remarks>数值越大的先执行</remarks>
        </member>
        <member name="T:Furion.EventBus.EventBusOptionsBuilder">
            <summary>
            事件总线配置选项构建器
            </summary>
        </member>
        <member name="F:Furion.EventBus.EventBusOptionsBuilder._eventSubscribers">
            <summary>
            事件订阅者类型集合
            </summary>
        </member>
        <member name="F:Furion.EventBus.EventBusOptionsBuilder._eventPublisher">
            <summary>
            事件发布者类型
            </summary>
        </member>
        <member name="F:Furion.EventBus.EventBusOptionsBuilder._eventSourceStorerImplementationFactory">
            <summary>
            事件存储器实现工厂
            </summary>
        </member>
        <member name="F:Furion.EventBus.EventBusOptionsBuilder._eventHandlerMonitor">
            <summary>
            事件处理程序监视器
            </summary>
        </member>
        <member name="F:Furion.EventBus.EventBusOptionsBuilder._eventHandlerExecutor">
            <summary>
            事件处理程序执行器
            </summary>
        </member>
        <member name="F:Furion.EventBus.EventBusOptionsBuilder._fallbackPolicyTypes">
            <summary>
            事件重试策略类型集合
            </summary>
        </member>
        <member name="P:Furion.EventBus.EventBusOptionsBuilder.ChannelCapacity">
            <summary>
            默认内置事件源存储器内存通道容量
            </summary>
            <remarks>超过 n 条待处理消息，第 n+1 条将进入等待，默认为 12000</remarks>
        </member>
        <member name="P:Furion.EventBus.EventBusOptionsBuilder.UseUtcTimestamp">
            <summary>
            是否使用 UTC 时间戳，默认 false
            </summary>
        </member>
        <member name="P:Furion.EventBus.EventBusOptionsBuilder.FuzzyMatch">
            <summary>
            是否启用模糊匹配消息
            </summary>
            <remarks>支持正则表达式</remarks>
        </member>
        <member name="P:Furion.EventBus.EventBusOptionsBuilder.GCCollect">
            <summary>
            是否启用执行完成触发 GC 回收
            </summary>
        </member>
        <member name="P:Furion.EventBus.EventBusOptionsBuilder.LogEnabled">
            <summary>
            是否启用日志记录
            </summary>
        </member>
        <member name="P:Furion.EventBus.EventBusOptionsBuilder.FallbackPolicy">
            <summary>
            重试失败策略配置
            </summary>
        </member>
        <member name="P:Furion.EventBus.EventBusOptionsBuilder.UnobservedTaskExceptionHandler">
            <summary>
            未察觉任务异常事件处理程序
            </summary>
        </member>
        <member name="M:Furion.EventBus.EventBusOptionsBuilder.AddSubscriber``1">
            <summary>
            注册事件订阅者
            </summary>
            <typeparam name="TEventSubscriber">实现自 <see cref="T:Furion.EventBus.IEventSubscriber"/></typeparam>
            <returns><see cref="T:Furion.EventBus.EventBusOptionsBuilder"/> 实例</returns>
        </member>
        <member name="M:Furion.EventBus.EventBusOptionsBuilder.AddSubscriber(System.Type)">
            <summary>
            注册事件订阅者
            </summary>
            <param name="eventSubscriberType"><see cref="T:Furion.EventBus.IEventSubscriber"/> 派生类型</param>
            <returns><see cref="T:Furion.EventBus.EventBusOptionsBuilder"/> 实例</returns>
        </member>
        <member name="M:Furion.EventBus.EventBusOptionsBuilder.AddSubscribers(System.Reflection.Assembly[])">
            <summary>
            批量注册事件订阅者
            </summary>
            <param name="assemblies">程序集</param>
            <returns><see cref="T:Furion.EventBus.EventBusOptionsBuilder"/> 实例</returns>
        </member>
        <member name="M:Furion.EventBus.EventBusOptionsBuilder.ReplacePublisher``1">
            <summary>
            替换事件发布者
            </summary>
            <typeparam name="TEventPublisher">实现自 <see cref="T:Furion.EventBus.IEventPublisher"/></typeparam>
            <returns><see cref="T:Furion.EventBus.EventBusOptionsBuilder"/> 实例</returns>
        </member>
        <member name="M:Furion.EventBus.EventBusOptionsBuilder.ReplaceStorer(System.Func{System.IServiceProvider,Furion.EventBus.IEventSourceStorer})">
            <summary>
            替换事件源存储器
            </summary>
            <param name="implementationFactory">自定义事件源存储器工厂</param>
            <returns><see cref="T:Furion.EventBus.EventBusOptionsBuilder"/> 实例</returns>
        </member>
        <member name="M:Furion.EventBus.EventBusOptionsBuilder.ReplaceStorerOrFallback(System.Func{Furion.EventBus.IEventSourceStorer})">
            <summary>
            替换事件源存储器（如果初始化失败则回退为默认的）
            </summary>
            <param name="createStorer"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Furion.EventBus.EventBusOptionsBuilder.ReplaceStorerOrFallback(System.Func{System.IServiceProvider,Furion.EventBus.IEventSourceStorer})">
            <summary>
            替换事件源存储器（如果初始化失败则回退为默认的）
            </summary>
            <param name="createStorer"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Furion.EventBus.EventBusOptionsBuilder.AddMonitor``1">
            <summary>
            注册事件处理程序监视器
            </summary>
            <typeparam name="TEventHandlerMonitor">实现自 <see cref="T:Furion.EventBus.IEventHandlerMonitor"/></typeparam>
            <returns><see cref="T:Furion.EventBus.EventBusOptionsBuilder"/> 实例</returns>
        </member>
        <member name="M:Furion.EventBus.EventBusOptionsBuilder.AddExecutor``1">
            <summary>
            注册事件处理程序执行器
            </summary>
            <typeparam name="TEventHandlerExecutor">实现自 <see cref="T:Furion.EventBus.IEventHandlerExecutor"/></typeparam>
            <returns><see cref="T:Furion.EventBus.EventBusOptionsBuilder"/> 实例</returns>
        </member>
        <member name="M:Furion.EventBus.EventBusOptionsBuilder.AddFallbackPolicy``1">
            <summary>
            注册事件重试策略
            </summary>
            <typeparam name="TEventFallbackPolicy">实现自 <see cref="T:Furion.EventBus.IEventFallbackPolicy"/></typeparam>
            <returns><see cref="T:Furion.EventBus.EventBusOptionsBuilder"/> 实例</returns>
        </member>
        <member name="M:Furion.EventBus.EventBusOptionsBuilder.AddFallbackPolicy(System.Type)">
            <summary>
            注册事件重试策略
            </summary>
            <param name="fallbackPolicyType"><see cref="T:Furion.EventBus.IEventFallbackPolicy"/> 派生类型</param>
            <returns><see cref="T:Furion.EventBus.EventBusOptionsBuilder"/> 实例</returns>
        </member>
        <member name="M:Furion.EventBus.EventBusOptionsBuilder.Build(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            构建事件总线配置选项
            </summary>
            <param name="services">服务集合对象</param>
        </member>
        <member name="T:Furion.EventBus.EventSubscribeOperates">
            <summary>
            事件订阅器操作选项
            </summary>
            <remarks>控制动态新增/删除事件订阅器</remarks>
        </member>
        <member name="F:Furion.EventBus.EventSubscribeOperates.Append">
            <summary>
            添加一条订阅器
            </summary>
        </member>
        <member name="F:Furion.EventBus.EventSubscribeOperates.Remove">
            <summary>
            删除一条订阅器
            </summary>
        </member>
        <member name="T:Furion.EventBus.EventHandlerContext">
            <summary>
            事件处理程序上下文
            </summary>
        </member>
        <member name="M:Furion.EventBus.EventHandlerContext.#ctor(Furion.EventBus.IEventSource,System.Collections.Generic.IDictionary{System.Object,System.Object},System.Reflection.MethodInfo,Furion.EventBus.EventSubscribeAttribute)">
            <summary>
            构造函数
            </summary>
            <param name="eventSource">事件源（事件承载对象）</param>
            <param name="properties">共享上下文数据</param>
            <param name="handlerMethod">触发的方法</param>
            <param name="attribute">订阅特性</param>
        </member>
        <member name="P:Furion.EventBus.EventHandlerContext.Source">
            <summary>
            事件源（事件承载对象）
            </summary>
        </member>
        <member name="P:Furion.EventBus.EventHandlerContext.Properties">
            <summary>
            共享上下文数据
            </summary>
        </member>
        <member name="P:Furion.EventBus.EventHandlerContext.HandlerMethod">
            <summary>
            触发的方法
            </summary>
            <remarks>如果是动态订阅，可能为 null</remarks>
        </member>
        <member name="P:Furion.EventBus.EventHandlerContext.Attribute">
            <summary>
            订阅特性
            </summary>
            <remarks><remarks>如果是动态订阅，可能为 null</remarks></remarks>
        </member>
        <member name="M:Furion.EventBus.EventHandlerContext.GetPayload``1">
            <summary>
            获取负载数据
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Furion.EventBus.EventHandlerExecutedContext">
            <summary>
            事件处理程序执行后上下文
            </summary>
        </member>
        <member name="M:Furion.EventBus.EventHandlerExecutedContext.#ctor(Furion.EventBus.IEventSource,System.Collections.Generic.IDictionary{System.Object,System.Object},System.Reflection.MethodInfo,Furion.EventBus.EventSubscribeAttribute)">
            <summary>
            构造函数
            </summary>
            <param name="eventSource">事件源（事件承载对象）</param>
            <param name="properties">共享上下文数据</param>
            <param name="handlerMethod">触发的方法</param>
            <param name="attribute">订阅特性</param>
        </member>
        <member name="P:Furion.EventBus.EventHandlerExecutedContext.ExecutedTime">
            <summary>
            执行后时间
            </summary>
        </member>
        <member name="P:Furion.EventBus.EventHandlerExecutedContext.Exception">
            <summary>
            异常信息
            </summary>
        </member>
        <member name="T:Furion.EventBus.EventHandlerExecutingContext">
            <summary>
            事件处理程序执行前上下文
            </summary>
        </member>
        <member name="M:Furion.EventBus.EventHandlerExecutingContext.#ctor(Furion.EventBus.IEventSource,System.Collections.Generic.IDictionary{System.Object,System.Object},System.Reflection.MethodInfo,Furion.EventBus.EventSubscribeAttribute)">
            <summary>
            构造函数
            </summary>
            <param name="eventSource">事件源（事件承载对象）</param>
            <param name="properties">共享上下文数据</param>
            <param name="handlerMethod">触发的方法</param>
            <param name="attribute">订阅特性</param>
        </member>
        <member name="P:Furion.EventBus.EventHandlerExecutingContext.ExecutingTime">
            <summary>
            执行前时间
            </summary>
        </member>
        <member name="T:Furion.EventBus.IEventPublisher">
            <summary>
            事件发布服务依赖接口
            </summary>
        </member>
        <member name="E:Furion.EventBus.IEventPublisher.OnExecuted">
            <summary>
            事件处理程序事件
            </summary>
        </member>
        <member name="M:Furion.EventBus.IEventPublisher.PublishAsync(Furion.EventBus.IEventSource)">
            <summary>
            发布一条消息
            </summary>
            <param name="eventSource">事件源</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/> 实例</returns>
        </member>
        <member name="M:Furion.EventBus.IEventPublisher.PublishDelayAsync(Furion.EventBus.IEventSource,System.Int64)">
            <summary>
            延迟发布一条消息
            </summary>
            <param name="eventSource">事件源</param>
            <param name="delay">延迟数（毫秒）</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/> 实例</returns>
        </member>
        <member name="M:Furion.EventBus.IEventPublisher.PublishAsync(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            发布一条消息
            </summary>
            <param name="eventId">事件 Id</param>
            <param name="payload">事件承载（携带）数据</param>
            <param name="cancellationToken"> 取消任务 Token</param>
            <returns></returns>
        </member>
        <member name="M:Furion.EventBus.IEventPublisher.PublishAsync(System.Enum,System.Object,System.Threading.CancellationToken)">
            <summary>
            发布一条消息
            </summary>
            <param name="eventId">事件 Id</param>
            <param name="payload">事件承载（携带）数据</param>
            <param name="cancellationToken"> 取消任务 Token</param>
            <returns></returns>
        </member>
        <member name="M:Furion.EventBus.IEventPublisher.PublishDelayAsync(System.String,System.Int64,System.Object,System.Threading.CancellationToken)">
            <summary>
            延迟发布一条消息
            </summary>
            <param name="eventId">事件 Id</param>
            <param name="delay">延迟数（毫秒）</param>
            <param name="payload">事件承载（携带）数据</param>
            <param name="cancellationToken"> 取消任务 Token</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/> 实例</returns>
        </member>
        <member name="M:Furion.EventBus.IEventPublisher.PublishDelayAsync(System.Enum,System.Int64,System.Object,System.Threading.CancellationToken)">
            <summary>
            延迟发布一条消息
            </summary>
            <param name="eventId">事件 Id</param>
            <param name="delay">延迟数（毫秒）</param>
            <param name="payload">事件承载（携带）数据</param>
            <param name="cancellationToken"> 取消任务 Token</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/> 实例</returns>
        </member>
        <member name="M:Furion.EventBus.IEventPublisher.InvokeEvents(Furion.EventBus.EventHandlerEventArgs)">
            <summary>
            触发事件处理程序事件
            </summary>
            <param name="args">事件参数</param>
        </member>
        <member name="T:Furion.EventBus.IEventSubscriber">
            <summary>
            事件订阅者依赖接口
            </summary>
            <remarks>
            <para>可自定义事件处理方法，但须符合 Func{EventSubscribeExecutingContext, Task} 签名</para>
            <para>通常只做依赖查找，不做服务调用</para>
            </remarks>
        </member>
        <member name="T:Furion.EventBus.EventHandlerEventArgs">
            <summary>
            事件处理程序事件参数
            </summary>
        </member>
        <member name="M:Furion.EventBus.EventHandlerEventArgs.#ctor(Furion.EventBus.IEventSource,System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="eventSource">事件源（事件承载对象）</param>
            <param name="success">任务处理委托调用结果</param>
        </member>
        <member name="P:Furion.EventBus.EventHandlerEventArgs.Source">
            <summary>
            事件源（事件承载对象）
            </summary>
        </member>
        <member name="P:Furion.EventBus.EventHandlerEventArgs.Status">
            <summary>
            执行状态
            </summary>
        </member>
        <member name="P:Furion.EventBus.EventHandlerEventArgs.Exception">
            <summary>
            异常信息
            </summary>
        </member>
        <member name="T:Furion.EventBus.IEventHandlerExecutor">
            <summary>
            事件处理程序执行器依赖接口
            </summary>
        </member>
        <member name="M:Furion.EventBus.IEventHandlerExecutor.ExecuteAsync(Furion.EventBus.EventHandlerExecutingContext,System.Func{Furion.EventBus.EventHandlerExecutingContext,System.Threading.Tasks.Task})">
            <summary>
            执行事件处理程序
            </summary>
            <remarks>在这里可以实现超时控制，失败重试控制等等</remarks>
            <param name="context">事件处理程序执行前上下文</param>
            <param name="handler">事件处理程序</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/> 实例</returns>
        </member>
        <member name="T:Furion.EventBus.EventBusFactory">
            <summary>
            事件总线工厂默认实现
            </summary>
        </member>
        <member name="F:Furion.EventBus.EventBusFactory._eventSourceStorer">
            <summary>
            事件源存储器
            </summary>
        </member>
        <member name="M:Furion.EventBus.EventBusFactory.#ctor(Furion.EventBus.IEventSourceStorer)">
            <summary>
            构造函数
            </summary>
            <param name="eventSourceStorer">事件源存储器</param>
        </member>
        <member name="M:Furion.EventBus.EventBusFactory.Subscribe(System.String,System.Func{Furion.EventBus.EventHandlerExecutingContext,System.Threading.Tasks.Task},Furion.EventBus.EventSubscribeAttribute,System.Reflection.MethodInfo,System.Threading.CancellationToken)">
            <summary>
            添加事件订阅者
            </summary>
            <param name="eventId">事件 Id</param>
            <param name="handler">事件订阅委托</param>
            <param name="attribute"><see cref="T:Furion.EventBus.EventSubscribeAttribute"/> 特性对象</param>
            <param name="handlerMethod"><see cref="T:System.Reflection.MethodInfo"/> 对象</param>
            <param name="cancellationToken">取消任务 Token</param>
            <returns></returns>
        </member>
        <member name="M:Furion.EventBus.EventBusFactory.Unsubscribe(System.String,System.Threading.CancellationToken)">
            <summary>
            删除事件订阅者
            </summary>
            <param name="eventId">事件 Id</param>
            <param name="cancellationToken">取消任务 Token</param>
            <returns></returns>
        </member>
        <member name="T:Furion.EventBus.IEventBusFactory">
            <summary>
            事件总线工厂接口
            </summary>
        </member>
        <member name="M:Furion.EventBus.IEventBusFactory.Subscribe(System.String,System.Func{Furion.EventBus.EventHandlerExecutingContext,System.Threading.Tasks.Task},Furion.EventBus.EventSubscribeAttribute,System.Reflection.MethodInfo,System.Threading.CancellationToken)">
            <summary>
            添加事件订阅者
            </summary>
            <param name="eventId">事件 Id</param>
            <param name="handler">事件订阅委托</param>
            <param name="attribute"><see cref="T:Furion.EventBus.EventSubscribeAttribute"/> 特性对象</param>
            <param name="handlerMethod"><see cref="T:System.Reflection.MethodInfo"/> 对象</param>
            <param name="cancellationToken">取消任务 Token</param>
            <returns></returns>
        </member>
        <member name="M:Furion.EventBus.IEventBusFactory.Unsubscribe(System.String,System.Threading.CancellationToken)">
            <summary>
            删除事件订阅者
            </summary>
            <param name="eventId">事件 Id</param>
            <param name="cancellationToken">取消任务 Token</param>
            <returns></returns>
        </member>
        <member name="T:Furion.EventBus.EventBusHostedService">
            <summary>
            事件总线后台主机服务
            </summary>
        </member>
        <member name="F:Furion.EventBus.EventBusHostedService.GC_COLLECT_INTERVAL_SECONDS">
            <summary>
            GC 回收默认间隔
            </summary>
        </member>
        <member name="E:Furion.EventBus.EventBusHostedService.UnobservedTaskException">
            <summary>
            避免由 CLR 的终结器捕获该异常从而终止应用程序，让所有未觉察异常被觉察
            </summary>
        </member>
        <member name="F:Furion.EventBus.EventBusHostedService._logger">
            <summary>
            日志对象
            </summary>
        </member>
        <member name="F:Furion.EventBus.EventBusHostedService._serviceProvider">
            <summary>
            服务提供器
            </summary>
        </member>
        <member name="F:Furion.EventBus.EventBusHostedService._eventSourceStorer">
            <summary>
            事件源存储器
            </summary>
        </member>
        <member name="F:Furion.EventBus.EventBusHostedService._eventPublisher">
            <summary>
            事件发布服务
            </summary>
        </member>
        <member name="F:Furion.EventBus.EventBusHostedService._eventHandlers">
            <summary>
            事件处理程序集合
            </summary>
        </member>
        <member name="M:Furion.EventBus.EventBusHostedService.#ctor(Microsoft.Extensions.Logging.ILogger{System.Logging.EventBusService},System.IServiceProvider,Furion.EventBus.IEventSourceStorer,Furion.EventBus.IEventPublisher,System.Collections.Generic.IEnumerable{Furion.EventBus.IEventSubscriber},System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="logger">日志对象</param>
            <param name="serviceProvider">服务提供器</param>
            <param name="eventSourceStorer">事件源存储器</param>
            <param name="eventPublisher">事件发布服务</param>
            <param name="eventSubscribers">事件订阅者集合</param>
            <param name="useUtcTimestamp">是否使用 Utc 时间</param>
            <param name="fuzzyMatch">是否启用模糊匹配事件消息</param>
            <param name="gcCollect">是否启用执行完成触发 GC 回收</param>
            <param name="logEnabled">是否启用日志记录</param>
        </member>
        <member name="P:Furion.EventBus.EventBusHostedService.Monitor">
            <summary>
            事件处理程序监视器
            </summary>
        </member>
        <member name="P:Furion.EventBus.EventBusHostedService.Executor">
            <summary>
            事件处理程序执行器
            </summary>
        </member>
        <member name="P:Furion.EventBus.EventBusHostedService.UseUtcTimestamp">
            <summary>
            是否使用 UTC 时间
            </summary>
        </member>
        <member name="P:Furion.EventBus.EventBusHostedService.FuzzyMatch">
            <summary>
            是否启用模糊匹配事件消息
            </summary>
        </member>
        <member name="P:Furion.EventBus.EventBusHostedService.GCCollect">
            <summary>
            是否启用执行完成触发 GC 回收
            </summary>
        </member>
        <member name="P:Furion.EventBus.EventBusHostedService.LogEnabled">
            <summary>
            是否启用日志记录
            </summary>
        </member>
        <member name="P:Furion.EventBus.EventBusHostedService.LastGCCollectTime">
            <summary>
            最近一次收集时间
            </summary>
        </member>
        <member name="M:Furion.EventBus.EventBusHostedService.ExecuteAsync(System.Threading.CancellationToken)">
            <summary>
            执行后台任务
            </summary>
            <param name="stoppingToken">后台主机服务停止时取消任务 Token</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/> 实例</returns>
        </member>
        <member name="M:Furion.EventBus.EventBusHostedService.BackgroundProcessing(System.Threading.CancellationToken)">
            <summary>
            后台调用处理程序
            </summary>
            <param name="stoppingToken">后台主机服务停止时取消任务 Token</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/> 实例</returns>
        </member>
        <member name="M:Furion.EventBus.EventBusHostedService.ManageEventSubscribers(Furion.EventBus.EventSubscribeOperateSource)">
            <summary>
            管理事件订阅器动态
            </summary>
            <param name="subscribeOperateSource"></param>
        </member>
        <member name="M:Furion.EventBus.EventBusHostedService.CheckIsSetFuzzyMatch(System.Object)">
            <summary>
            检查是否开启模糊匹配事件 Id 功能
            </summary>
            <param name="fuzzyMatch"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.EventBus.EventBusHostedService.CheckIsSetGCCollect(System.Object)">
            <summary>
            检查是否开启执行完成触发 GC 回收
            </summary>
            <param name="gcCollect"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.EventBus.EventBusHostedService.Log(Microsoft.Extensions.Logging.LogLevel,System.String,System.Object[],System.Exception)">
            <summary>
            记录日志
            </summary>
            <param name="logLevel">日志级别</param>
            <param name="message">消息</param>
            <param name="args">参数</param>
            <param name="ex">异常</param>
        </member>
        <member name="T:Furion.EventBus.ChannelEventPublisher">
            <summary>
            基于内存通道事件发布者（默认实现）
            </summary>
        </member>
        <member name="E:Furion.EventBus.ChannelEventPublisher.OnExecuted">
            <summary>
            事件处理程序事件
            </summary>
        </member>
        <member name="F:Furion.EventBus.ChannelEventPublisher._eventSourceStorer">
            <summary>
            事件源存储器
            </summary>
        </member>
        <member name="M:Furion.EventBus.ChannelEventPublisher.#ctor(Furion.EventBus.IEventSourceStorer)">
            <summary>
            构造函数
            </summary>
            <param name="eventSourceStorer">事件源存储器</param>
        </member>
        <member name="M:Furion.EventBus.ChannelEventPublisher.PublishAsync(Furion.EventBus.IEventSource)">
            <summary>
            发布一条消息
            </summary>
            <param name="eventSource">事件源</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/> 实例</returns>
        </member>
        <member name="M:Furion.EventBus.ChannelEventPublisher.PublishDelayAsync(Furion.EventBus.IEventSource,System.Int64)">
            <summary>
            延迟发布一条消息
            </summary>
            <param name="eventSource">事件源</param>
            <param name="delay">延迟数（毫秒）</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/> 实例</returns>
        </member>
        <member name="M:Furion.EventBus.ChannelEventPublisher.PublishAsync(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            发布一条消息
            </summary>
            <param name="eventId">事件 Id</param>
            <param name="payload">事件承载（携带）数据</param>
            <param name="cancellationToken"> 取消任务 Token</param>
            <returns></returns>
        </member>
        <member name="M:Furion.EventBus.ChannelEventPublisher.PublishAsync(System.Enum,System.Object,System.Threading.CancellationToken)">
            <summary>
            发布一条消息
            </summary>
            <param name="eventId">事件 Id</param>
            <param name="payload">事件承载（携带）数据</param>
            <param name="cancellationToken"> 取消任务 Token</param>
            <returns></returns>
        </member>
        <member name="M:Furion.EventBus.ChannelEventPublisher.PublishDelayAsync(System.String,System.Int64,System.Object,System.Threading.CancellationToken)">
            <summary>
            延迟发布一条消息
            </summary>
            <param name="eventId">事件 Id</param>
            <param name="delay">延迟数（毫秒）</param>
            <param name="payload">事件承载（携带）数据</param>
            <param name="cancellationToken"> 取消任务 Token</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/> 实例</returns>
        </member>
        <member name="M:Furion.EventBus.ChannelEventPublisher.PublishDelayAsync(System.Enum,System.Int64,System.Object,System.Threading.CancellationToken)">
            <summary>
            延迟发布一条消息
            </summary>
            <param name="eventId">事件 Id</param>
            <param name="delay">延迟数（毫秒）</param>
            <param name="payload">事件承载（携带）数据</param>
            <param name="cancellationToken"> 取消任务 Token</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/> 实例</returns>
        </member>
        <member name="M:Furion.EventBus.ChannelEventPublisher.InvokeEvents(Furion.EventBus.EventHandlerEventArgs)">
            <summary>
            触发事件处理程序事件
            </summary>
            <param name="args">事件参数</param>
        </member>
        <member name="T:Furion.EventBus.MessageCenter">
            <summary>
            全局事件总线静态类
            </summary>
        </member>
        <member name="M:Furion.EventBus.MessageCenter.PublishAsync(Furion.EventBus.IEventSource)">
            <summary>
            发布一条消息
            </summary>
            <param name="eventSource">事件源</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/> 实例</returns>
        </member>
        <member name="M:Furion.EventBus.MessageCenter.PublishDelayAsync(Furion.EventBus.IEventSource,System.Int64)">
            <summary>
            延迟发布一条消息
            </summary>
            <param name="eventSource">事件源</param>
            <param name="delay">延迟数（毫秒）</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/> 实例</returns>
        </member>
        <member name="M:Furion.EventBus.MessageCenter.PublishAsync(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            发布一条消息
            </summary>
            <param name="eventId">事件 Id</param>
            <param name="payload">事件承载（携带）数据</param>
            <param name="cancellationToken"> 取消任务 Token</param>
            <returns></returns>
        </member>
        <member name="M:Furion.EventBus.MessageCenter.PublishAsync(System.Enum,System.Object,System.Threading.CancellationToken)">
            <summary>
            发布一条消息
            </summary>
            <param name="eventId">事件 Id</param>
            <param name="payload">事件承载（携带）数据</param>
            <param name="cancellationToken"> 取消任务 Token</param>
            <returns></returns>
        </member>
        <member name="M:Furion.EventBus.MessageCenter.PublishDelayAsync(System.String,System.Int64,System.Object,System.Threading.CancellationToken)">
            <summary>
            延迟发布一条消息
            </summary>
            <param name="eventId">事件 Id</param>
            <param name="delay">延迟数（毫秒）</param>
            <param name="payload">事件承载（携带）数据</param>
            <param name="cancellationToken"> 取消任务 Token</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/> 实例</returns>
        </member>
        <member name="M:Furion.EventBus.MessageCenter.PublishDelayAsync(System.Enum,System.Int64,System.Object,System.Threading.CancellationToken)">
            <summary>
            延迟发布一条消息
            </summary>
            <param name="eventId">事件 Id</param>
            <param name="delay">延迟数（毫秒）</param>
            <param name="payload">事件承载（携带）数据</param>
            <param name="cancellationToken"> 取消任务 Token</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/> 实例</returns>
        </member>
        <member name="M:Furion.EventBus.MessageCenter.Subscribe(System.String,System.Func{Furion.EventBus.EventHandlerExecutingContext,System.Threading.Tasks.Task},Furion.EventBus.EventSubscribeAttribute,System.Reflection.MethodInfo,System.Threading.CancellationToken)">
            <summary>
            添加事件订阅者
            </summary>
            <param name="eventId">事件 Id</param>
            <param name="handler">事件订阅委托</param>
            <param name="attribute"><see cref="T:Furion.EventBus.EventSubscribeAttribute"/> 特性对象</param>
            <param name="handlerMethod"><see cref="T:System.Reflection.MethodInfo"/> 对象</param>
            <param name="cancellationToken">取消任务 Token</param>
            <returns></returns>
        </member>
        <member name="M:Furion.EventBus.MessageCenter.Unsubscribe(System.String,System.Threading.CancellationToken)">
            <summary>
            删除事件订阅者
            </summary>
            <param name="eventId">事件 Id</param>
            <param name="cancellationToken">取消任务 Token</param>
            <returns></returns>
        </member>
        <member name="M:Furion.EventBus.MessageCenter.GetEventPublisher">
            <summary>
            获取事件发布者
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.EventBus.MessageCenter.GetEventFactory">
            <summary>
            获取事件工厂
            </summary>
            <returns></returns>
        </member>
        <member name="T:Furion.EventBus.IEventHandlerMonitor">
            <summary>
            事件处理程序监视器
            </summary>
        </member>
        <member name="M:Furion.EventBus.IEventHandlerMonitor.OnExecutingAsync(Furion.EventBus.EventHandlerExecutingContext)">
            <summary>
            事件处理程序执行前
            </summary>
            <param name="context">上下文</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/> 实例</returns>
        </member>
        <member name="M:Furion.EventBus.IEventHandlerMonitor.OnExecutedAsync(Furion.EventBus.EventHandlerExecutedContext)">
            <summary>
            事件处理程序执行后
            </summary>
            <param name="context">上下文</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/> 实例</returns>
        </member>
        <member name="T:Furion.EventBus.IEventFallbackPolicy">
            <summary>
            事件重试失败回调服务
            </summary>
            <remarks>需注册为单例</remarks>
        </member>
        <member name="M:Furion.EventBus.IEventFallbackPolicy.CallbackAsync(Furion.EventBus.EventHandlerExecutingContext,System.Exception)">
            <summary>
            重试失败回调
            </summary>
            <param name="context"></param>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.EventBus.ChannelEventSource">
            <summary>
            内存通道事件源（事件承载对象）
            </summary>
        </member>
        <member name="M:Furion.EventBus.ChannelEventSource.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.EventBus.ChannelEventSource.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="eventId">事件 Id</param>
        </member>
        <member name="M:Furion.EventBus.ChannelEventSource.#ctor(System.String,System.Object)">
            <summary>
            构造函数
            </summary>
            <param name="eventId">事件 Id</param>
            <param name="payload">事件承载（携带）数据</param>
        </member>
        <member name="M:Furion.EventBus.ChannelEventSource.#ctor(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            构造函数
            </summary>
            <param name="eventId">事件 Id</param>
            <param name="payload">事件承载（携带）数据</param>
            <param name="cancellationToken">取消任务 Token</param>
        </member>
        <member name="M:Furion.EventBus.ChannelEventSource.#ctor(System.Enum)">
            <summary>
            构造函数
            </summary>
            <param name="eventId">事件 Id</param>
        </member>
        <member name="M:Furion.EventBus.ChannelEventSource.#ctor(System.Enum,System.Object)">
            <summary>
            构造函数
            </summary>
            <param name="eventId">事件 Id</param>
            <param name="payload">事件承载（携带）数据</param>
        </member>
        <member name="M:Furion.EventBus.ChannelEventSource.#ctor(System.Enum,System.Object,System.Threading.CancellationToken)">
            <summary>
            构造函数
            </summary>
            <param name="eventId">事件 Id</param>
            <param name="payload">事件承载（携带）数据</param>
            <param name="cancellationToken">取消任务 Token</param>
        </member>
        <member name="P:Furion.EventBus.ChannelEventSource.EventId">
            <summary>
            事件 Id
            </summary>
        </member>
        <member name="P:Furion.EventBus.ChannelEventSource.Payload">
            <summary>
            事件承载（携带）数据
            </summary>
        </member>
        <member name="P:Furion.EventBus.ChannelEventSource.CreatedTime">
            <summary>
            事件创建时间
            </summary>
        </member>
        <member name="P:Furion.EventBus.ChannelEventSource.IsConsumOnce">
            <summary>
            消息是否只消费一次
            </summary>
        </member>
        <member name="P:Furion.EventBus.ChannelEventSource.CancellationToken">
            <summary>
            取消任务 Token
            </summary>
            <remarks>用于取消本次消息处理</remarks>
        </member>
        <member name="T:Furion.EventBus.EventSubscribeOperateSource">
            <summary>
            事件总线订阅管理事件源
            </summary>
        </member>
        <member name="P:Furion.EventBus.EventSubscribeOperateSource.EventId">
            <summary>
            事件 Id
            </summary>
        </member>
        <member name="P:Furion.EventBus.EventSubscribeOperateSource.Payload">
            <summary>
            事件承载（携带）数据
            </summary>
        </member>
        <member name="P:Furion.EventBus.EventSubscribeOperateSource.CreatedTime">
            <summary>
            事件创建时间
            </summary>
        </member>
        <member name="P:Furion.EventBus.EventSubscribeOperateSource.IsConsumOnce">
            <summary>
            消息是否只消费一次
            </summary>
        </member>
        <member name="P:Furion.EventBus.EventSubscribeOperateSource.CancellationToken">
            <summary>
            取消任务 Token
            </summary>
            <remarks>用于取消本次消息处理</remarks>
        </member>
        <member name="P:Furion.EventBus.EventSubscribeOperateSource.Handler">
            <summary>
            事件处理程序
            </summary>
        </member>
        <member name="P:Furion.EventBus.EventSubscribeOperateSource.Attribute">
            <summary>
            订阅特性
            </summary>
        </member>
        <member name="P:Furion.EventBus.EventSubscribeOperateSource.HandlerMethod">
            <summary>
            触发的方法
            </summary>
        </member>
        <member name="P:Furion.EventBus.EventSubscribeOperateSource.SubscribeEventId">
            <summary>
            实际事件 Id
            </summary>
        </member>
        <member name="P:Furion.EventBus.EventSubscribeOperateSource.Operate">
            <summary>
            事件订阅器操作选项
            </summary>
        </member>
        <member name="T:Furion.EventBus.IEventSource">
            <summary>
            事件源（事件承载对象）依赖接口
            </summary>
        </member>
        <member name="P:Furion.EventBus.IEventSource.EventId">
            <summary>
            事件 Id
            </summary>
        </member>
        <member name="P:Furion.EventBus.IEventSource.Payload">
            <summary>
            事件承载（携带）数据
            </summary>
        </member>
        <member name="P:Furion.EventBus.IEventSource.CreatedTime">
            <summary>
            事件创建时间
            </summary>
        </member>
        <member name="P:Furion.EventBus.IEventSource.CancellationToken">
            <summary>
            取消任务 Token
            </summary>
            <remarks>用于取消本次消息处理</remarks>
        </member>
        <member name="P:Furion.EventBus.IEventSource.IsConsumOnce">
            <summary>
            消息是否只消费一次
            </summary>
        </member>
        <member name="T:Furion.EventBus.ChannelEventSourceStorer">
            <summary>
            内存通道事件源存储器（默认实现）
            </summary>
            <remarks>
            <para>顾名思义，这里指的是事件消息存储中心，提供读写能力</para>
            <para>默认实现为内存中的 <see cref="T:System.Threading.Channels.Channel"/>，可自由更换存储介质，如 Kafka，SQL Server 等</para>
            </remarks>
        </member>
        <member name="F:Furion.EventBus.ChannelEventSourceStorer._channel">
            <summary>
            内存通道事件源存储器
            </summary>
        </member>
        <member name="M:Furion.EventBus.ChannelEventSourceStorer.#ctor(System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="capacity">管道最多能够处理多少消息，超过该容量进入等待写入</param>
        </member>
        <member name="M:Furion.EventBus.ChannelEventSourceStorer.WriteAsync(Furion.EventBus.IEventSource,System.Threading.CancellationToken)">
            <summary>
            将事件源写入存储器
            </summary>
            <param name="eventSource">事件源对象</param>
            <param name="cancellationToken">取消任务 Token</param>
            <returns><see cref="T:System.Threading.Tasks.ValueTask"/></returns>
        </member>
        <member name="M:Furion.EventBus.ChannelEventSourceStorer.ReadAsync(System.Threading.CancellationToken)">
            <summary>
            从存储器中读取一条事件源
            </summary>
            <param name="cancellationToken">取消任务 Token</param>
            <returns>事件源对象</returns>
        </member>
        <member name="T:Furion.EventBus.IEventSourceStorer">
            <summary>
            事件源存储器
            </summary>
            <remarks>
            <para>顾名思义，这里指的是事件消息存储中心，提供读写能力</para>
            <para>默认实现为内存中的 <see cref="T:System.Threading.Channels.Channel"/>，可自由更换存储介质，如 Kafka，SQL Server 等</para>
            </remarks>
        </member>
        <member name="M:Furion.EventBus.IEventSourceStorer.WriteAsync(Furion.EventBus.IEventSource,System.Threading.CancellationToken)">
            <summary>
            将事件源写入存储器
            </summary>
            <param name="eventSource">事件源对象</param>
            <param name="cancellationToken">取消任务 Token</param>
            <returns><see cref="T:System.Threading.Tasks.ValueTask"/></returns>
        </member>
        <member name="M:Furion.EventBus.IEventSourceStorer.ReadAsync(System.Threading.CancellationToken)">
            <summary>
            从存储器中读取一条事件源
            </summary>
            <param name="cancellationToken">取消任务 Token</param>
            <returns>事件源对象</returns>
        </member>
        <member name="T:Furion.EventBus.EventHandlerWrapper">
            <summary>
            事件处理程序包装类
            </summary>
            <remarks>主要用于主机服务启动时将所有处理程序和事件 Id 进行包装绑定</remarks>
        </member>
        <member name="M:Furion.EventBus.EventHandlerWrapper.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="eventId">事件Id</param>
        </member>
        <member name="P:Furion.EventBus.EventHandlerWrapper.EventId">
            <summary>
            事件 Id
            </summary>
        </member>
        <member name="P:Furion.EventBus.EventHandlerWrapper.Handler">
            <summary>
            事件处理程序
            </summary>
        </member>
        <member name="P:Furion.EventBus.EventHandlerWrapper.HandlerMethod">
            <summary>
            触发的方法
            </summary>
        </member>
        <member name="P:Furion.EventBus.EventHandlerWrapper.Attribute">
            <summary>
            订阅特性
            </summary>
        </member>
        <member name="P:Furion.EventBus.EventHandlerWrapper.Pattern">
            <summary>
            正则表达式
            </summary>
        </member>
        <member name="P:Furion.EventBus.EventHandlerWrapper.GCCollect">
            <summary>
            是否启用执行完成触发 GC 回收
            </summary>
        </member>
        <member name="P:Furion.EventBus.EventHandlerWrapper.Order">
            <summary>
            排序
            </summary>
            <remarks>数值越大的先执行</remarks>
        </member>
        <member name="M:Furion.EventBus.EventHandlerWrapper.ShouldRun(System.String)">
            <summary>
            是否符合条件执行处理程序
            </summary>
            <remarks>支持正则表达式</remarks>
            <param name="eventId">事件 Id</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="T:Furion.Extensitions.EventBus.EventBusExtensitions">
            <summary>
            事件总线拓展类
            </summary>
        </member>
        <member name="M:Furion.Extensitions.EventBus.EventBusExtensitions.ParseToString(System.Enum)">
            <summary>
            将事件枚举 Id 转换成字符串对象
            </summary>
            <param name="em"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Extensitions.EventBus.EventBusExtensitions.ParseToEnum(System.String)">
            <summary>
            将事件枚举字符串转换成枚举对象
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.FriendlyException.ErrorCodeItemMetadataAttribute">
            <summary>
            异常元数据特性
            </summary>
        </member>
        <member name="M:Furion.FriendlyException.ErrorCodeItemMetadataAttribute.#ctor(System.String,System.Object[])">
            <summary>
            构造函数
            </summary>
            <param name="errorMessage">错误消息</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="P:Furion.FriendlyException.ErrorCodeItemMetadataAttribute.ErrorMessage">
            <summary>
            错误消息
            </summary>
        </member>
        <member name="P:Furion.FriendlyException.ErrorCodeItemMetadataAttribute.ErrorCode">
            <summary>
            错误码
            </summary>
        </member>
        <member name="P:Furion.FriendlyException.ErrorCodeItemMetadataAttribute.Args">
            <summary>
            格式化参数
            </summary>
        </member>
        <member name="T:Furion.FriendlyException.ErrorCodeTypeAttribute">
            <summary>
            错误代码类型特性
            </summary>
        </member>
        <member name="T:Furion.FriendlyException.IfExceptionAttribute">
            <summary>
            异常复写特性
            </summary>
        </member>
        <member name="M:Furion.FriendlyException.IfExceptionAttribute.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:Furion.FriendlyException.IfExceptionAttribute.#ctor(System.Object,System.Object[])">
            <summary>
            构造函数
            </summary>
            <param name="errorCode">错误编码</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:Furion.FriendlyException.IfExceptionAttribute.#ctor(System.Type)">
            <summary>
            捕获特定异常类型异常（用于全局异常捕获）
            </summary>
            <param name="exceptionType"></param>
        </member>
        <member name="P:Furion.FriendlyException.IfExceptionAttribute.ErrorCode">
            <summary>
            错误编码
            </summary>
        </member>
        <member name="P:Furion.FriendlyException.IfExceptionAttribute.ExceptionType">
            <summary>
            异常类型
            </summary>
        </member>
        <member name="P:Furion.FriendlyException.IfExceptionAttribute.ErrorMessage">
            <summary>
            错误消息
            </summary>
        </member>
        <member name="P:Furion.FriendlyException.IfExceptionAttribute.Args">
            <summary>
            格式化参数
            </summary>
        </member>
        <member name="T:Furion.FriendlyException.AppFriendlyException">
            <summary>
            自定义友好异常类
            </summary>
        </member>
        <member name="M:Furion.FriendlyException.AppFriendlyException.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.FriendlyException.AppFriendlyException.#ctor(System.String,System.Object)">
            <summary>
            构造函数
            </summary>
            <param name="message"></param>
            <param name="errorCode"></param>
        </member>
        <member name="M:Furion.FriendlyException.AppFriendlyException.#ctor(System.String,System.Object,System.Exception)">
            <summary>
            构造函数
            </summary>
            <param name="message"></param>
            <param name="errorCode"></param>
            <param name="innerException"></param>
        </member>
        <member name="P:Furion.FriendlyException.AppFriendlyException.ErrorCode">
            <summary>
            错误码
            </summary>
        </member>
        <member name="P:Furion.FriendlyException.AppFriendlyException.OriginErrorCode">
            <summary>
            错误码（没被复写过的 ErrorCode ）
            </summary>
        </member>
        <member name="P:Furion.FriendlyException.AppFriendlyException.ErrorMessage">
            <summary>
            错误消息（支持 Object 对象）
            </summary>
        </member>
        <member name="P:Furion.FriendlyException.AppFriendlyException.StatusCode">
            <summary>
            状态码
            </summary>
        </member>
        <member name="P:Furion.FriendlyException.AppFriendlyException.ValidationException">
            <summary>
            是否是数据验证异常
            </summary>
        </member>
        <member name="P:Furion.FriendlyException.AppFriendlyException.Data">
            <summary>
            额外数据
            </summary>
        </member>
        <member name="T:Furion.FriendlyException.AppFriendlyExceptionExtensions">
            <summary>
            异常拓展
            </summary>
        </member>
        <member name="M:Furion.FriendlyException.AppFriendlyExceptionExtensions.StatusCode(Furion.FriendlyException.AppFriendlyException,System.Int32)">
            <summary>
            设置异常状态码
            </summary>
            <param name="exception"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.FriendlyException.AppFriendlyExceptionExtensions.WithData(Furion.FriendlyException.AppFriendlyException,System.Object)">
            <summary>
            设置额外数据
            </summary>
            <param name="exception"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.FriendlyException.FriendlyExceptionOptions">
            <summary>
            AddInject 友好异常配置选项
            </summary>
        </member>
        <member name="P:Furion.FriendlyException.FriendlyExceptionOptions.GlobalEnabled">
            <summary>
            是否启用全局友好异常
            </summary>
        </member>
        <member name="T:Furion.FriendlyException.IGlobalExceptionHandler">
            <summary>
            全局异常处理
            </summary>
        </member>
        <member name="M:Furion.FriendlyException.IGlobalExceptionHandler.OnExceptionAsync(Microsoft.AspNetCore.Mvc.Filters.ExceptionContext)">
            <summary>
            异常拦截
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.FriendlyException.ExceptionMetadata">
            <summary>
            异常元数据
            </summary>
        </member>
        <member name="P:Furion.FriendlyException.ExceptionMetadata.StatusCode">
            <summary>
            状态码
            </summary>
        </member>
        <member name="P:Furion.FriendlyException.ExceptionMetadata.ErrorCode">
            <summary>
            错误码
            </summary>
        </member>
        <member name="P:Furion.FriendlyException.ExceptionMetadata.OriginErrorCode">
            <summary>
            错误码（没被复写过的 ErrorCode ）
            </summary>
        </member>
        <member name="P:Furion.FriendlyException.ExceptionMetadata.Errors">
            <summary>
            错误对象（信息）
            </summary>
        </member>
        <member name="P:Furion.FriendlyException.ExceptionMetadata.Data">
            <summary>
            额外数据
            </summary>
        </member>
        <member name="P:Furion.FriendlyException.ExceptionMetadata.Exception">
            <summary>
            异常对象
            </summary>
        </member>
        <member name="T:Furion.FriendlyException.MethodIfException">
            <summary>
            方法异常类
            </summary>
        </member>
        <member name="P:Furion.FriendlyException.MethodIfException.ErrorMethod">
            <summary>
            出异常的方法
            </summary>
        </member>
        <member name="P:Furion.FriendlyException.MethodIfException.IfExceptionAttributes">
            <summary>
            异常特性
            </summary>
        </member>
        <member name="T:Furion.FriendlyException.Oops">
            <summary>
            抛异常静态类
            </summary>
        </member>
        <member name="F:Furion.FriendlyException.Oops._errorMethods">
            <summary>
            方法错误异常特性
            </summary>
        </member>
        <member name="F:Furion.FriendlyException.Oops._errorCodeTypes">
            <summary>
            错误代码类型
            </summary>
        </member>
        <member name="F:Furion.FriendlyException.Oops._errorCodeMessages">
            <summary>
            错误消息字典
            </summary>
        </member>
        <member name="F:Furion.FriendlyException.Oops._friendlyExceptionSettings">
            <summary>
            友好异常设置
            </summary>
        </member>
        <member name="M:Furion.FriendlyException.Oops.#cctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.FriendlyException.Oops.Bah(System.String,System.Object[])">
            <summary>
            抛出业务异常信息
            </summary>
            <param name="errorMessage">异常消息</param>
            <param name="args">String.Format 参数</param>
            <returns>异常实例</returns>
        </member>
        <member name="M:Furion.FriendlyException.Oops.Bah(System.Object,System.Object[])">
            <summary>
            抛出业务异常信息
            </summary>
            <param name="errorCode">错误码</param>
            <param name="args">String.Format 参数</param>
            <returns>异常实例</returns>
        </member>
        <member name="M:Furion.FriendlyException.Oops.Oh(System.String,System.Object[])">
            <summary>
            抛出字符串异常
            </summary>
            <param name="errorMessage">异常消息</param>
            <param name="args">String.Format 参数</param>
            <returns>异常实例</returns>
        </member>
        <member name="M:Furion.FriendlyException.Oops.Oh(System.String,System.Type,System.Object[])">
            <summary>
            抛出字符串异常
            </summary>
            <param name="errorMessage">异常消息</param>
            <param name="exceptionType">具体异常类型</param>
            <param name="args">String.Format 参数</param>
            <returns>异常实例</returns>
        </member>
        <member name="M:Furion.FriendlyException.Oops.Oh``1(System.String,System.Object[])">
            <summary>
            抛出字符串异常
            </summary>
            <typeparam name="TException">具体异常类型</typeparam>
            <param name="errorMessage">异常消息</param>
            <param name="args">String.Format 参数</param>
            <returns>异常实例</returns>
        </member>
        <member name="M:Furion.FriendlyException.Oops.Oh(System.Object,System.Object[])">
            <summary>
            抛出错误码异常
            </summary>
            <param name="errorCode">错误码</param>
            <param name="args">String.Format 参数</param>
            <returns>异常实例</returns>
        </member>
        <member name="M:Furion.FriendlyException.Oops.Oh(System.Object,System.Type,System.Object[])">
            <summary>
            抛出错误码异常
            </summary>
            <param name="errorCode">错误码</param>
            <param name="exceptionType">具体异常类型</param>
            <param name="args">String.Format 参数</param>
            <returns>异常实例</returns>
        </member>
        <member name="M:Furion.FriendlyException.Oops.Oh``1(System.Object,System.Object[])">
            <summary>
            抛出错误码异常
            </summary>
            <typeparam name="TException">具体异常类型</typeparam>
            <param name="errorCode">错误码</param>
            <param name="args">String.Format 参数</param>
            <returns>异常实例</returns>
        </member>
        <member name="M:Furion.FriendlyException.Oops.Text(System.Object,System.Nullable{System.Boolean},System.Object[])">
            <summary>
            获取错误码错误消息
            </summary>
            <param name="errorCode"></param>
            <param name="hideErrorCode"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.FriendlyException.Oops.GetErrorCodeMessage(System.Object,System.Nullable{System.Boolean},System.Object[])">
            <summary>
            获取错误码消息
            </summary>
            <param name="errorCode"></param>
            <param name="hideErrorCode"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.FriendlyException.Oops.HandleEnumErrorCode(System.Object)">
            <summary>
            处理枚举类型错误码
            </summary>
            <param name="errorCode">错误码</param>
            <returns></returns>
        </member>
        <member name="M:Furion.FriendlyException.Oops.GetErrorCodeTypes">
            <summary>
            获取错误代码类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.FriendlyException.Oops.GetErrorCodeMessages">
            <summary>
            获取所有错误消息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.FriendlyException.Oops.FixErrorCodeSettingMessage(System.Object[])">
            <summary>
            处理异常配置数据
            </summary>
            <param name="errorCodes">错误消息配置对象</param>
            <remarks>
            方式：数组第一个元素为错误码，第二个参数为错误消息，剩下的参数为错误码格式化字符串
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Furion.FriendlyException.Oops.GetEndPointExceptionMethod">
            <summary>
            获取堆栈中顶部抛异常方法
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.FriendlyException.Oops.GetErrorCodeItemInformation(System.Reflection.FieldInfo)">
            <summary>
            获取错误代码信息
            </summary>
            <param name="fieldInfo">字段对象</param>
            <returns>(object key, object value)</returns>
        </member>
        <member name="M:Furion.FriendlyException.Oops.MontageErrorMessage(System.String,System.String,System.Nullable{System.Boolean},System.Object[])">
            <summary>
            获取错误码字符串
            </summary>
            <param name="errorMessage"></param>
            <param name="errorCode"></param>
            <param name="hideErrorCode">隐藏错误码</param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.FriendlyException.ErrorCodeMessageSettingsOptions">
            <summary>
            异常配置选项，最优的方式是采用后期配置，也就是所有异常状态码先不设置（推荐）
            </summary>
        </member>
        <member name="P:Furion.FriendlyException.ErrorCodeMessageSettingsOptions.Definitions">
            <summary>
            异常状态码配置列表
            </summary>
        </member>
        <member name="T:Furion.FriendlyException.FriendlyExceptionSettingsOptions">
            <summary>
            友好异常配置选项
            </summary>
        </member>
        <member name="P:Furion.FriendlyException.FriendlyExceptionSettingsOptions.HideErrorCode">
            <summary>
            隐藏错误码
            </summary>
        </member>
        <member name="P:Furion.FriendlyException.FriendlyExceptionSettingsOptions.DefaultErrorCode">
            <summary>
            默认错误码
            </summary>
        </member>
        <member name="P:Furion.FriendlyException.FriendlyExceptionSettingsOptions.DefaultErrorMessage">
            <summary>
            默认错误消息
            </summary>
        </member>
        <member name="P:Furion.FriendlyException.FriendlyExceptionSettingsOptions.ThrowBah">
            <summary>
            标记 Oops.Oh 为业务异常
            </summary>
            <remarks>也就是不会进入异常处理</remarks>
        </member>
        <member name="P:Furion.FriendlyException.FriendlyExceptionSettingsOptions.LogError">
            <summary>
            是否输出异常日志
            </summary>
        </member>
        <member name="M:Furion.FriendlyException.FriendlyExceptionSettingsOptions.PostConfigure(Furion.FriendlyException.FriendlyExceptionSettingsOptions,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            选项后期配置
            </summary>
            <param name="options"></param>
            <param name="configuration"></param>
        </member>
        <member name="T:Furion.FriendlyException.IErrorCodeTypeProvider">
            <summary>
            异常错误代码提供器
            </summary>
        </member>
        <member name="P:Furion.FriendlyException.IErrorCodeTypeProvider.Definitions">
            <summary>
            错误代码定义类型
            </summary>
        </member>
        <member name="T:Furion.FriendlyException.BadPageResult">
            <summary>
            错误页面
            </summary>
        </member>
        <member name="M:Furion.FriendlyException.BadPageResult.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.FriendlyException.BadPageResult.#ctor(System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="statusCode">状态码</param>
        </member>
        <member name="P:Furion.FriendlyException.BadPageResult.Title">
            <summary>
            标题
            </summary>
        </member>
        <member name="P:Furion.FriendlyException.BadPageResult.Description">
            <summary>
            描述
            </summary>
        </member>
        <member name="P:Furion.FriendlyException.BadPageResult.Base64Icon">
            <summary>
            图标
            </summary>
            <remarks>必须是 base64 类型</remarks>
        </member>
        <member name="P:Furion.FriendlyException.BadPageResult.Code">
            <summary>
            错误代码
            </summary>
        </member>
        <member name="P:Furion.FriendlyException.BadPageResult.CodeLang">
            <summary>
            错误代码语言
            </summary>
        </member>
        <member name="P:Furion.FriendlyException.BadPageResult.Status401Unauthorized">
            <summary>
            返回通用 401 错误页
            </summary>
        </member>
        <member name="P:Furion.FriendlyException.BadPageResult.Status403Forbidden">
            <summary>
            返回通用 403 错误页
            </summary>
        </member>
        <member name="P:Furion.FriendlyException.BadPageResult.Status404NotFound">
            <summary>
            返回通用 404 错误页
            </summary>
        </member>
        <member name="P:Furion.FriendlyException.BadPageResult.Status500InternalServerError">
            <summary>
            返回通用 500 错误页
            </summary>
        </member>
        <member name="M:Furion.FriendlyException.BadPageResult.ExecuteResult(Microsoft.AspNetCore.Mvc.ActionContext)">
            <summary>
            重写返回结果
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Furion.FriendlyException.BadPageResult.ToString">
            <summary>
            将 <see cref="T:Furion.FriendlyException.BadPageResult"/> 转换成字符串
            </summary>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:Furion.FriendlyException.BadPageResult.ToByteArray">
            <summary>
            将 <see cref="T:Furion.FriendlyException.BadPageResult"/> 转换成字节数组
            </summary>
            <returns><see cref="T:System.Byte"/></returns>
        </member>
        <member name="T:Furion.FriendlyException.Retry">
            <summary>
            重试静态类
            </summary>
        </member>
        <member name="M:Furion.FriendlyException.Retry.Invoke(System.Action,System.Int32,System.Int32,System.Boolean,System.Type[],System.Action{System.Exception},System.Action{System.Int32,System.Int32})">
            <summary>
            重试有异常的方法，还可以指定特定异常
            </summary>
            <param name="action"></param>
            <param name="numRetries">重试次数</param>
            <param name="retryTimeout">重试间隔时间</param>
            <param name="finalThrow">是否最终抛异常</param>
            <param name="exceptionTypes">异常类型,可多个</param>
            <param name="fallbackPolicy">重试失败回调</param>
            <param name="retryAction">重试时调用方法</param>
        </member>
        <member name="M:Furion.FriendlyException.Retry.InvokeAsync(System.Func{System.Threading.Tasks.Task},System.Int32,System.Int32,System.Boolean,System.Type[],System.Func{System.Exception,System.Threading.Tasks.Task},System.Action{System.Int32,System.Int32})">
            <summary>
            重试有异常的方法，还可以指定特定异常
            </summary>
            <param name="action"></param>
            <param name="numRetries">重试次数</param>
            <param name="retryTimeout">重试间隔时间</param>
            <param name="finalThrow">是否最终抛异常</param>
            <param name="exceptionTypes">异常类型,可多个</param>
            <param name="fallbackPolicy">重试失败回调</param>
            <param name="retryAction">重试时调用方法</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="T:Furion.InstantMessaging.MapHubAttribute">
            <summary>
            即时通信集线器配置特性
            </summary>
        </member>
        <member name="M:Furion.InstantMessaging.MapHubAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="pattern"></param>
        </member>
        <member name="P:Furion.InstantMessaging.MapHubAttribute.Pattern">
            <summary>
            配置终点路由地址
            </summary>
        </member>
        <member name="T:Furion.InstantMessaging.IM">
            <summary>
            即时通信静态类
            </summary>
        </member>
        <member name="M:Furion.InstantMessaging.IM.GetHub``1(System.IServiceProvider)">
            <summary>
            获取集线器实例
            </summary>
            <typeparam name="THub"></typeparam>
            <param name="serviceProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.InstantMessaging.IM.GetHub``2(System.IServiceProvider)">
            <summary>
            获取强类型集线器实例
            </summary>
            <typeparam name="THub"></typeparam>
            <typeparam name="TStronglyTyped"></typeparam>
            <param name="serviceProvider"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.IPCChannel.CallContext`1">
            <summary>
            提供线程异步流共享数据上下文（尽量在项目需要该操作的类中使用 AsyncLocal 方式使用，而不是调用 CallContext
            </summary>
            <typeparam name="T"></typeparam>
            <remarks>
            AsyncLocal 遇到 await 关键字时采用拷贝方式创建新的执行上下文并流转
            在Task方法内部修改其值，但在任务结束后仍为初始值，这是一种“写时复制”行为，AsyncLocal内部做了两步操作：
              进行AsyncLocal实例的拷贝副本，但这是浅复制行为而非深复制
              在设置新的值之前完成复制操作
            获取当前线程 Id：Thread.CurrentThread.ManagedThreadId
            </remarks>
        </member>
        <member name="F:Furion.IPCChannel.CallContext`1.localValues">
            <summary>
            保存本地数据
            </summary>
            <remarks>这里存在内存溢出问题，因为该定义对象并没有任何释放内存的方式提供，所以尽可能的少使用</remarks>
        </member>
        <member name="M:Furion.IPCChannel.CallContext`1.SetLocalValue(System.String,`0)">
            <summary>
            设置值
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Furion.IPCChannel.CallContext`1.GetLocalValue(System.String)">
            <summary>
            读取值
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.IPCChannel.CallContext">
            <summary>
            提供线程异步流共享数据上下文（尽量在项目需要该操作的类中使用 AsyncLocal 方式使用，而不是调用 CallContext
            </summary>
            <remarks>
            AsyncLocal 遇到 await 关键字时采用拷贝方式创建新的执行上下文并流转
            在Task方法内部修改其值，但在任务结束后仍为初始值，这是一种“写时复制”行为，AsyncLocal内部做了两步操作：
              进行AsyncLocal实例的拷贝副本，但这是浅复制行为而非深复制
              在设置新的值之前完成复制操作
            获取当前线程 Id：Thread.CurrentThread.ManagedThreadId
            </remarks>
        </member>
        <member name="F:Furion.IPCChannel.CallContext.localValues">
            <summary>
            保存本地数据
            </summary>
            <remarks>这里存在内存溢出问题，因为该定义对象并没有任何释放内存的方式提供，所以尽可能的少使用</remarks>
        </member>
        <member name="M:Furion.IPCChannel.CallContext.SetLocalValue(System.String,System.Object)">
            <summary>
            设置值
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Furion.IPCChannel.CallContext.GetLocalValue(System.String)">
            <summary>
            读取值
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.IPCChannel.ChannelContext`2">
            <summary>
            进程管道内通信上下文
            </summary>
            <typeparam name="TMessage"></typeparam>
            <typeparam name="THandler"></typeparam>
            <remarks>后续将通过 MemoryMapperFile 共享内存实现 IPC 通信：https://docs.microsoft.com/zh-cn/dotnet/api/system.io.memorymappedfiles.memorymappedfile?view=net-5.0 </remarks>
        </member>
        <member name="F:Furion.IPCChannel.ChannelContext`2._unBoundedChannel">
            <summary>
            通过懒加载创建无限容量通道
            </summary>
        </member>
        <member name="F:Furion.IPCChannel.ChannelContext`2._boundedChannel">
            <summary>
            通过懒加载创建有限容量通道
            </summary>
            <remarks>默认容量为 1000</remarks>
        </member>
        <member name="P:Furion.IPCChannel.ChannelContext`2.UnBoundedChannel">
            <summary>
            无限容量通道
            </summary>
        </member>
        <member name="P:Furion.IPCChannel.ChannelContext`2.BoundedChannel">
            <summary>
            有限容量通道
            </summary>
        </member>
        <member name="M:Furion.IPCChannel.ChannelContext`2.#ctor">
            <summary>
            私有构造函数
            </summary>
        </member>
        <member name="M:Furion.IPCChannel.ChannelContext`2.StartReader(System.Threading.Channels.Channel{`0})">
            <summary>
            创建一个读取器
            </summary>
            <param name="channel"></param>
        </member>
        <member name="T:Furion.IPCChannel.ChannelHandler`1">
            <summary>
            进程管道内通信处理程序
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:Furion.IPCChannel.ChannelHandler`1.InvokeAsync(`0)">
            <summary>
            管道执行器
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.JsonSerialization.NewtonsoftJsonClayJsonConverter">
            <summary>
            解决 Clay 问题
            </summary>
        </member>
        <member name="M:Furion.JsonSerialization.NewtonsoftJsonClayJsonConverter.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.JsonSerialization.NewtonsoftJsonClayJsonConverter.#ctor(System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="toCamelCaseKey"></param>
        </member>
        <member name="P:Furion.JsonSerialization.NewtonsoftJsonClayJsonConverter.ToCamelCaseKey">
            <summary>
            输出键小写
            </summary>
        </member>
        <member name="M:Furion.JsonSerialization.NewtonsoftJsonClayJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,Furion.ClayObject.Clay,System.Boolean,Newtonsoft.Json.JsonSerializer)">
            <summary>
            反序列化
            </summary>
            <param name="reader"></param>
            <param name="objectType"></param>
            <param name="existingValue"></param>
            <param name="hasExistingValue"></param>
            <param name="serializer"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.JsonSerialization.NewtonsoftJsonClayJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,Furion.ClayObject.Clay,Newtonsoft.Json.JsonSerializer)">
            <summary>
            序列化
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="serializer"></param>
        </member>
        <member name="M:Furion.JsonSerialization.NewtonsoftJsonClayJsonConverter.ConvertKeysToCamelCase(Newtonsoft.Json.Linq.JToken)">
            <summary>
            转换 Key 为小写
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.JsonSerialization.NewtonsoftJsonDateOnlyJsonConverter">
            <summary>
            DateOnly 类型序列化
            </summary>
        </member>
        <member name="M:Furion.JsonSerialization.NewtonsoftJsonDateOnlyJsonConverter.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.JsonSerialization.NewtonsoftJsonDateOnlyJsonConverter.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="format"></param>
        </member>
        <member name="P:Furion.JsonSerialization.NewtonsoftJsonDateOnlyJsonConverter.Format">
            <summary>
            日期格式化格式
            </summary>
        </member>
        <member name="M:Furion.JsonSerialization.NewtonsoftJsonDateOnlyJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.DateOnly,System.Boolean,Newtonsoft.Json.JsonSerializer)">
            <summary>
            反序列化
            </summary>
            <param name="reader"></param>
            <param name="objectType"></param>
            <param name="existingValue"></param>
            <param name="hasExistingValue"></param>
            <param name="serializer"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.JsonSerialization.NewtonsoftJsonDateOnlyJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.DateOnly,Newtonsoft.Json.JsonSerializer)">
            <summary>
            序列化
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="serializer"></param>
        </member>
        <member name="T:Furion.JsonSerialization.NewtonsoftJsonNullableDateOnlyJsonConverter">
            <summary>
            DateOnly? 类型序列化
            </summary>
        </member>
        <member name="M:Furion.JsonSerialization.NewtonsoftJsonNullableDateOnlyJsonConverter.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.JsonSerialization.NewtonsoftJsonNullableDateOnlyJsonConverter.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="format"></param>
        </member>
        <member name="P:Furion.JsonSerialization.NewtonsoftJsonNullableDateOnlyJsonConverter.Format">
            <summary>
            日期格式化格式
            </summary>
        </member>
        <member name="M:Furion.JsonSerialization.NewtonsoftJsonNullableDateOnlyJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Nullable{System.DateOnly},System.Boolean,Newtonsoft.Json.JsonSerializer)">
            <summary>
            反序列化
            </summary>
            <param name="reader"></param>
            <param name="objectType"></param>
            <param name="existingValue"></param>
            <param name="hasExistingValue"></param>
            <param name="serializer"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.JsonSerialization.NewtonsoftJsonNullableDateOnlyJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Nullable{System.DateOnly},Newtonsoft.Json.JsonSerializer)">
            <summary>
            序列化
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="serializer"></param>
        </member>
        <member name="T:Furion.JsonSerialization.NewtonsoftJsonDateTimeJsonConverter">
            <summary>
            DateTime 类型序列化
            </summary>
        </member>
        <member name="M:Furion.JsonSerialization.NewtonsoftJsonDateTimeJsonConverter.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:Furion.JsonSerialization.NewtonsoftJsonDateTimeJsonConverter.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="format"></param>
        </member>
        <member name="M:Furion.JsonSerialization.NewtonsoftJsonDateTimeJsonConverter.#ctor(System.String,System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="format"></param>
            <param name="outputToLocalDateTime"></param>
        </member>
        <member name="P:Furion.JsonSerialization.NewtonsoftJsonDateTimeJsonConverter.Format">
            <summary>
            时间格式化格式
            </summary>
        </member>
        <member name="P:Furion.JsonSerialization.NewtonsoftJsonDateTimeJsonConverter.Localized">
            <summary>
            是否输出为为当地时间
            </summary>
        </member>
        <member name="M:Furion.JsonSerialization.NewtonsoftJsonDateTimeJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.DateTime,System.Boolean,Newtonsoft.Json.JsonSerializer)">
            <summary>
            反序列化
            </summary>
            <param name="reader"></param>
            <param name="objectType"></param>
            <param name="existingValue"></param>
            <param name="hasExistingValue"></param>
            <param name="serializer"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Furion.JsonSerialization.NewtonsoftJsonDateTimeJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.DateTime,Newtonsoft.Json.JsonSerializer)">
            <summary>
            序列化
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="serializer"></param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Furion.JsonSerialization.NewtonsoftNullableJsonDateTimeJsonConverter">
            <summary>
            DateTime 类型序列化
            </summary>
        </member>
        <member name="M:Furion.JsonSerialization.NewtonsoftNullableJsonDateTimeJsonConverter.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:Furion.JsonSerialization.NewtonsoftNullableJsonDateTimeJsonConverter.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="format"></param>
        </member>
        <member name="M:Furion.JsonSerialization.NewtonsoftNullableJsonDateTimeJsonConverter.#ctor(System.String,System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="format"></param>
            <param name="outputToLocalDateTime"></param>
        </member>
        <member name="P:Furion.JsonSerialization.NewtonsoftNullableJsonDateTimeJsonConverter.Format">
            <summary>
            时间格式化格式
            </summary>
        </member>
        <member name="P:Furion.JsonSerialization.NewtonsoftNullableJsonDateTimeJsonConverter.Localized">
            <summary>
            是否输出为为当地时间
            </summary>
        </member>
        <member name="M:Furion.JsonSerialization.NewtonsoftNullableJsonDateTimeJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Nullable{System.DateTime},System.Boolean,Newtonsoft.Json.JsonSerializer)">
            <summary>
            反序列化
            </summary>
            <param name="reader"></param>
            <param name="objectType"></param>
            <param name="existingValue"></param>
            <param name="hasExistingValue"></param>
            <param name="serializer"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Furion.JsonSerialization.NewtonsoftNullableJsonDateTimeJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Nullable{System.DateTime},Newtonsoft.Json.JsonSerializer)">
            <summary>
            序列化
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="serializer"></param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Furion.JsonSerialization.NewtonsoftJsonDateTimeOffsetJsonConverter">
            <summary>
            DateTimeOffset 类型序列化
            </summary>
        </member>
        <member name="M:Furion.JsonSerialization.NewtonsoftJsonDateTimeOffsetJsonConverter.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.JsonSerialization.NewtonsoftJsonDateTimeOffsetJsonConverter.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="format"></param>
        </member>
        <member name="M:Furion.JsonSerialization.NewtonsoftJsonDateTimeOffsetJsonConverter.#ctor(System.String,System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="format"></param>
            <param name="outputToLocalDateTime"></param>
        </member>
        <member name="P:Furion.JsonSerialization.NewtonsoftJsonDateTimeOffsetJsonConverter.Format">
            <summary>
            时间格式化格式
            </summary>
        </member>
        <member name="P:Furion.JsonSerialization.NewtonsoftJsonDateTimeOffsetJsonConverter.Localized">
            <summary>
            是否输出为为当地时间
            </summary>
        </member>
        <member name="M:Furion.JsonSerialization.NewtonsoftJsonDateTimeOffsetJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.DateTimeOffset,System.Boolean,Newtonsoft.Json.JsonSerializer)">
            <summary>
            反序列化
            </summary>
            <param name="reader"></param>
            <param name="objectType"></param>
            <param name="existingValue"></param>
            <param name="hasExistingValue"></param>
            <param name="serializer"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Furion.JsonSerialization.NewtonsoftJsonDateTimeOffsetJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.DateTimeOffset,Newtonsoft.Json.JsonSerializer)">
            <summary>
            序列化
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="serializer"></param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Furion.JsonSerialization.NewtonsoftJsonNullableDateTimeOffsetJsonConverter">
            <summary>
            DateTimeOffset 类型序列化
            </summary>
        </member>
        <member name="M:Furion.JsonSerialization.NewtonsoftJsonNullableDateTimeOffsetJsonConverter.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.JsonSerialization.NewtonsoftJsonNullableDateTimeOffsetJsonConverter.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="format"></param>
        </member>
        <member name="M:Furion.JsonSerialization.NewtonsoftJsonNullableDateTimeOffsetJsonConverter.#ctor(System.String,System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="format"></param>
            <param name="outputToLocalDateTime"></param>
        </member>
        <member name="P:Furion.JsonSerialization.NewtonsoftJsonNullableDateTimeOffsetJsonConverter.Format">
            <summary>
            时间格式化格式
            </summary>
        </member>
        <member name="P:Furion.JsonSerialization.NewtonsoftJsonNullableDateTimeOffsetJsonConverter.Localized">
            <summary>
            是否输出为为当地时间
            </summary>
        </member>
        <member name="M:Furion.JsonSerialization.NewtonsoftJsonNullableDateTimeOffsetJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Nullable{System.DateTimeOffset},System.Boolean,Newtonsoft.Json.JsonSerializer)">
            <summary>
            反序列化
            </summary>
            <param name="reader"></param>
            <param name="objectType"></param>
            <param name="existingValue"></param>
            <param name="hasExistingValue"></param>
            <param name="serializer"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Furion.JsonSerialization.NewtonsoftJsonNullableDateTimeOffsetJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Nullable{System.DateTimeOffset},Newtonsoft.Json.JsonSerializer)">
            <summary>
            序列化
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="serializer"></param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Furion.JsonSerialization.NewtonsoftJsonLongToStringJsonConverter">
            <summary>
            解决 long 精度问题
            </summary>
        </member>
        <member name="M:Furion.JsonSerialization.NewtonsoftJsonLongToStringJsonConverter.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.JsonSerialization.NewtonsoftJsonLongToStringJsonConverter.#ctor(System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="overMaxLengthOf17"></param>
        </member>
        <member name="P:Furion.JsonSerialization.NewtonsoftJsonLongToStringJsonConverter.OverMaxLengthOf17">
            <summary>
            是否超过最大长度 17 再处理
            </summary>
        </member>
        <member name="M:Furion.JsonSerialization.NewtonsoftJsonLongToStringJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Int64,System.Boolean,Newtonsoft.Json.JsonSerializer)">
            <summary>
            反序列化
            </summary>
            <param name="reader"></param>
            <param name="objectType"></param>
            <param name="existingValue"></param>
            <param name="hasExistingValue"></param>
            <param name="serializer"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.JsonSerialization.NewtonsoftJsonLongToStringJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Int64,Newtonsoft.Json.JsonSerializer)">
            <summary>
            序列化
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="serializer"></param>
        </member>
        <member name="T:Furion.JsonSerialization.NewtonsoftJsonNullableLongToStringJsonConverter">
            <summary>
            解决 long? 精度问题
            </summary>
        </member>
        <member name="M:Furion.JsonSerialization.NewtonsoftJsonNullableLongToStringJsonConverter.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.JsonSerialization.NewtonsoftJsonNullableLongToStringJsonConverter.#ctor(System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="overMaxLengthOf17"></param>
        </member>
        <member name="P:Furion.JsonSerialization.NewtonsoftJsonNullableLongToStringJsonConverter.OverMaxLengthOf17">
            <summary>
            是否超过最大长度 17 再处理
            </summary>
        </member>
        <member name="M:Furion.JsonSerialization.NewtonsoftJsonNullableLongToStringJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Nullable{System.Int64},System.Boolean,Newtonsoft.Json.JsonSerializer)">
            <summary>
            反序列化
            </summary>
            <param name="reader"></param>
            <param name="objectType"></param>
            <param name="existingValue"></param>
            <param name="hasExistingValue"></param>
            <param name="serializer"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.JsonSerialization.NewtonsoftJsonNullableLongToStringJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Nullable{System.Int64},Newtonsoft.Json.JsonSerializer)">
            <summary>
            序列化
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="serializer"></param>
        </member>
        <member name="T:Furion.JsonSerialization.NewtonsoftJsonTimeOnlyJsonConverter">
            <summary>
            TimeOnly 类型序列化
            </summary>
        </member>
        <member name="M:Furion.JsonSerialization.NewtonsoftJsonTimeOnlyJsonConverter.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.JsonSerialization.NewtonsoftJsonTimeOnlyJsonConverter.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="format"></param>
        </member>
        <member name="P:Furion.JsonSerialization.NewtonsoftJsonTimeOnlyJsonConverter.Format">
            <summary>
            时间格式化格式
            </summary>
        </member>
        <member name="M:Furion.JsonSerialization.NewtonsoftJsonTimeOnlyJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.TimeOnly,System.Boolean,Newtonsoft.Json.JsonSerializer)">
            <summary>
            反序列化
            </summary>
            <param name="reader"></param>
            <param name="objectType"></param>
            <param name="existingValue"></param>
            <param name="hasExistingValue"></param>
            <param name="serializer"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.JsonSerialization.NewtonsoftJsonTimeOnlyJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.TimeOnly,Newtonsoft.Json.JsonSerializer)">
            <summary>
            序列化
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="serializer"></param>
        </member>
        <member name="T:Furion.JsonSerialization.NewtonsoftJsonNullableTimeOnlyJsonConverter">
            <summary>
            TimeOnly? 类型序列化
            </summary>
        </member>
        <member name="M:Furion.JsonSerialization.NewtonsoftJsonNullableTimeOnlyJsonConverter.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.JsonSerialization.NewtonsoftJsonNullableTimeOnlyJsonConverter.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="format"></param>
        </member>
        <member name="P:Furion.JsonSerialization.NewtonsoftJsonNullableTimeOnlyJsonConverter.Format">
            <summary>
            时间格式化格式
            </summary>
        </member>
        <member name="M:Furion.JsonSerialization.NewtonsoftJsonNullableTimeOnlyJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Nullable{System.TimeOnly},System.Boolean,Newtonsoft.Json.JsonSerializer)">
            <summary>
            反序列化
            </summary>
            <param name="reader"></param>
            <param name="objectType"></param>
            <param name="existingValue"></param>
            <param name="hasExistingValue"></param>
            <param name="serializer"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.JsonSerialization.NewtonsoftJsonNullableTimeOnlyJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Nullable{System.TimeOnly},Newtonsoft.Json.JsonSerializer)">
            <summary>
            序列化
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="serializer"></param>
        </member>
        <member name="T:Furion.JsonSerialization.SystemTextJsonClayJsonConverter">
            <summary>
            Clay 类型序列化
            </summary>
        </member>
        <member name="M:Furion.JsonSerialization.SystemTextJsonClayJsonConverter.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.JsonSerialization.SystemTextJsonClayJsonConverter.#ctor(System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="toCamelCaseKey"></param>
        </member>
        <member name="P:Furion.JsonSerialization.SystemTextJsonClayJsonConverter.ToCamelCaseKey">
            <summary>
            输出键小写
            </summary>
        </member>
        <member name="M:Furion.JsonSerialization.SystemTextJsonClayJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            反序列化
            </summary>
            <param name="reader"></param>
            <param name="typeToConvert"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.JsonSerialization.SystemTextJsonClayJsonConverter.Write(System.Text.Json.Utf8JsonWriter,Furion.ClayObject.Clay,System.Text.Json.JsonSerializerOptions)">
            <summary>
            序列化
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="options"></param>
        </member>
        <member name="M:Furion.JsonSerialization.SystemTextJsonClayJsonConverter.ConvertKeysToCamelCase(System.Text.Json.Nodes.JsonNode)">
            <summary>
            转换 Key 为小写
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.JsonSerialization.SystemTextJsonDateOnlyJsonConverter">
            <summary>
            DateOnly 类型序列化
            </summary>
        </member>
        <member name="M:Furion.JsonSerialization.SystemTextJsonDateOnlyJsonConverter.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.JsonSerialization.SystemTextJsonDateOnlyJsonConverter.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="format"></param>
        </member>
        <member name="P:Furion.JsonSerialization.SystemTextJsonDateOnlyJsonConverter.Format">
            <summary>
            日期格式化格式
            </summary>
        </member>
        <member name="M:Furion.JsonSerialization.SystemTextJsonDateOnlyJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            反序列化
            </summary>
            <param name="reader"></param>
            <param name="typeToConvert"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.JsonSerialization.SystemTextJsonDateOnlyJsonConverter.Write(System.Text.Json.Utf8JsonWriter,System.DateOnly,System.Text.Json.JsonSerializerOptions)">
            <summary>
            序列化
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="options"></param>
        </member>
        <member name="T:Furion.JsonSerialization.SystemTextJsonNullableDateOnlyJsonConverter">
            <summary>
            DateOnly? 类型序列化
            </summary>
        </member>
        <member name="M:Furion.JsonSerialization.SystemTextJsonNullableDateOnlyJsonConverter.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.JsonSerialization.SystemTextJsonNullableDateOnlyJsonConverter.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="format"></param>
        </member>
        <member name="P:Furion.JsonSerialization.SystemTextJsonNullableDateOnlyJsonConverter.Format">
            <summary>
            日期格式化格式
            </summary>
        </member>
        <member name="M:Furion.JsonSerialization.SystemTextJsonNullableDateOnlyJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            反序列化
            </summary>
            <param name="reader"></param>
            <param name="typeToConvert"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.JsonSerialization.SystemTextJsonNullableDateOnlyJsonConverter.Write(System.Text.Json.Utf8JsonWriter,System.Nullable{System.DateOnly},System.Text.Json.JsonSerializerOptions)">
            <summary>
            序列化
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="options"></param>
        </member>
        <member name="T:Furion.JsonSerialization.SystemTextJsonDateTimeJsonConverter">
            <summary>
            DateTime 类型序列化
            </summary>
        </member>
        <member name="M:Furion.JsonSerialization.SystemTextJsonDateTimeJsonConverter.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:Furion.JsonSerialization.SystemTextJsonDateTimeJsonConverter.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="format"></param>
        </member>
        <member name="M:Furion.JsonSerialization.SystemTextJsonDateTimeJsonConverter.#ctor(System.String,System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="format"></param>
            <param name="outputToLocalDateTime"></param>
        </member>
        <member name="P:Furion.JsonSerialization.SystemTextJsonDateTimeJsonConverter.Format">
            <summary>
            时间格式化格式
            </summary>
        </member>
        <member name="P:Furion.JsonSerialization.SystemTextJsonDateTimeJsonConverter.Localized">
            <summary>
            是否输出为为当地时间
            </summary>
        </member>
        <member name="M:Furion.JsonSerialization.SystemTextJsonDateTimeJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            反序列化
            </summary>
            <param name="reader"></param>
            <param name="typeToConvert"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.JsonSerialization.SystemTextJsonDateTimeJsonConverter.Write(System.Text.Json.Utf8JsonWriter,System.DateTime,System.Text.Json.JsonSerializerOptions)">
            <summary>
            序列化
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="options"></param>
        </member>
        <member name="T:Furion.JsonSerialization.SystemTextJsonNullableDateTimeJsonConverter">
            <summary>
            DateTime? 类型序列化
            </summary>
        </member>
        <member name="M:Furion.JsonSerialization.SystemTextJsonNullableDateTimeJsonConverter.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:Furion.JsonSerialization.SystemTextJsonNullableDateTimeJsonConverter.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="format"></param>
        </member>
        <member name="M:Furion.JsonSerialization.SystemTextJsonNullableDateTimeJsonConverter.#ctor(System.String,System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="format"></param>
            <param name="outputToLocalDateTime"></param>
        </member>
        <member name="P:Furion.JsonSerialization.SystemTextJsonNullableDateTimeJsonConverter.Format">
            <summary>
            时间格式化格式
            </summary>
        </member>
        <member name="P:Furion.JsonSerialization.SystemTextJsonNullableDateTimeJsonConverter.Localized">
            <summary>
            是否输出为为当地时间
            </summary>
        </member>
        <member name="M:Furion.JsonSerialization.SystemTextJsonNullableDateTimeJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            反序列化
            </summary>
            <param name="reader"></param>
            <param name="typeToConvert"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.JsonSerialization.SystemTextJsonNullableDateTimeJsonConverter.Write(System.Text.Json.Utf8JsonWriter,System.Nullable{System.DateTime},System.Text.Json.JsonSerializerOptions)">
            <summary>
            序列化
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="options"></param>
        </member>
        <member name="T:Furion.JsonSerialization.SystemTextJsonDateTimeOffsetJsonConverter">
            <summary>
            DateTimeOffset 类型序列化
            </summary>
        </member>
        <member name="M:Furion.JsonSerialization.SystemTextJsonDateTimeOffsetJsonConverter.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.JsonSerialization.SystemTextJsonDateTimeOffsetJsonConverter.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="format"></param>
        </member>
        <member name="M:Furion.JsonSerialization.SystemTextJsonDateTimeOffsetJsonConverter.#ctor(System.String,System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="format"></param>
            <param name="outputToLocalDateTime"></param>
        </member>
        <member name="P:Furion.JsonSerialization.SystemTextJsonDateTimeOffsetJsonConverter.Format">
            <summary>
            时间格式化格式
            </summary>
        </member>
        <member name="P:Furion.JsonSerialization.SystemTextJsonDateTimeOffsetJsonConverter.Localized">
            <summary>
            是否输出为为当地时间
            </summary>
        </member>
        <member name="M:Furion.JsonSerialization.SystemTextJsonDateTimeOffsetJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            反序列化
            </summary>
            <param name="reader"></param>
            <param name="typeToConvert"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.JsonSerialization.SystemTextJsonDateTimeOffsetJsonConverter.Write(System.Text.Json.Utf8JsonWriter,System.DateTimeOffset,System.Text.Json.JsonSerializerOptions)">
            <summary>
            序列化
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="options"></param>
        </member>
        <member name="T:Furion.JsonSerialization.SystemTextJsonNullableDateTimeOffsetJsonConverter">
            <summary>
            DateTimeOffset? 类型序列化
            </summary>
        </member>
        <member name="M:Furion.JsonSerialization.SystemTextJsonNullableDateTimeOffsetJsonConverter.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.JsonSerialization.SystemTextJsonNullableDateTimeOffsetJsonConverter.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="format"></param>
        </member>
        <member name="M:Furion.JsonSerialization.SystemTextJsonNullableDateTimeOffsetJsonConverter.#ctor(System.String,System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="format"></param>
            <param name="outputToLocalDateTime"></param>
        </member>
        <member name="P:Furion.JsonSerialization.SystemTextJsonNullableDateTimeOffsetJsonConverter.Format">
            <summary>
            时间格式化格式
            </summary>
        </member>
        <member name="P:Furion.JsonSerialization.SystemTextJsonNullableDateTimeOffsetJsonConverter.Localized">
            <summary>
            是否输出为为当地时间
            </summary>
        </member>
        <member name="M:Furion.JsonSerialization.SystemTextJsonNullableDateTimeOffsetJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            反序列化
            </summary>
            <param name="reader"></param>
            <param name="typeToConvert"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.JsonSerialization.SystemTextJsonNullableDateTimeOffsetJsonConverter.Write(System.Text.Json.Utf8JsonWriter,System.Nullable{System.DateTimeOffset},System.Text.Json.JsonSerializerOptions)">
            <summary>
            序列化
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="options"></param>
        </member>
        <member name="T:Furion.JsonSerialization.SystemTextJsonLongToStringJsonConverter">
            <summary>
            解决 long 精度问题
            </summary>
        </member>
        <member name="M:Furion.JsonSerialization.SystemTextJsonLongToStringJsonConverter.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.JsonSerialization.SystemTextJsonLongToStringJsonConverter.#ctor(System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="overMaxLengthOf17"></param>
        </member>
        <member name="P:Furion.JsonSerialization.SystemTextJsonLongToStringJsonConverter.OverMaxLengthOf17">
            <summary>
            是否超过最大长度 17 再处理
            </summary>
        </member>
        <member name="M:Furion.JsonSerialization.SystemTextJsonLongToStringJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            反序列化
            </summary>
            <param name="reader"></param>
            <param name="typeToConvert"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.JsonSerialization.SystemTextJsonLongToStringJsonConverter.Write(System.Text.Json.Utf8JsonWriter,System.Int64,System.Text.Json.JsonSerializerOptions)">
            <summary>
            序列化
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="options"></param>
        </member>
        <member name="T:Furion.JsonSerialization.SystemTextJsonNullableLongToStringJsonConverter">
            <summary>
            解决 long? 精度问题
            </summary>
        </member>
        <member name="M:Furion.JsonSerialization.SystemTextJsonNullableLongToStringJsonConverter.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.JsonSerialization.SystemTextJsonNullableLongToStringJsonConverter.#ctor(System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="overMaxLengthOf17"></param>
        </member>
        <member name="P:Furion.JsonSerialization.SystemTextJsonNullableLongToStringJsonConverter.OverMaxLengthOf17">
            <summary>
            是否超过最大长度 17 再处理
            </summary>
        </member>
        <member name="M:Furion.JsonSerialization.SystemTextJsonNullableLongToStringJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            反序列化
            </summary>
            <param name="reader"></param>
            <param name="typeToConvert"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.JsonSerialization.SystemTextJsonNullableLongToStringJsonConverter.Write(System.Text.Json.Utf8JsonWriter,System.Nullable{System.Int64},System.Text.Json.JsonSerializerOptions)">
            <summary>
            序列化
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="options"></param>
        </member>
        <member name="T:Furion.JsonSerialization.SystemTextJsonTimeOnlyJsonConverter">
            <summary>
            TimeOnly 类型序列化
            </summary>
        </member>
        <member name="M:Furion.JsonSerialization.SystemTextJsonTimeOnlyJsonConverter.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.JsonSerialization.SystemTextJsonTimeOnlyJsonConverter.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="format"></param>
        </member>
        <member name="P:Furion.JsonSerialization.SystemTextJsonTimeOnlyJsonConverter.Format">
            <summary>
            时间格式化格式
            </summary>
        </member>
        <member name="M:Furion.JsonSerialization.SystemTextJsonTimeOnlyJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            反序列化
            </summary>
            <param name="reader"></param>
            <param name="typeToConvert"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.JsonSerialization.SystemTextJsonTimeOnlyJsonConverter.Write(System.Text.Json.Utf8JsonWriter,System.TimeOnly,System.Text.Json.JsonSerializerOptions)">
            <summary>
            序列化
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="options"></param>
        </member>
        <member name="T:Furion.JsonSerialization.SystemTextJsonNullableTimeOnlyJsonConverter">
            <summary>
            TimeOnly? 类型序列化
            </summary>
        </member>
        <member name="M:Furion.JsonSerialization.SystemTextJsonNullableTimeOnlyJsonConverter.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:Furion.JsonSerialization.SystemTextJsonNullableTimeOnlyJsonConverter.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="format"></param>
        </member>
        <member name="P:Furion.JsonSerialization.SystemTextJsonNullableTimeOnlyJsonConverter.Format">
            <summary>
            时间格式化格式
            </summary>
        </member>
        <member name="M:Furion.JsonSerialization.SystemTextJsonNullableTimeOnlyJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            反序列化
            </summary>
            <param name="reader"></param>
            <param name="typeToConvert"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.JsonSerialization.SystemTextJsonNullableTimeOnlyJsonConverter.Write(System.Text.Json.Utf8JsonWriter,System.Nullable{System.TimeOnly},System.Text.Json.JsonSerializerOptions)">
            <summary>
            序列化
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="options"></param>
        </member>
        <member name="T:Furion.JsonSerialization.Penetrates">
            <summary>
            常量、公共方法配置类
            </summary>
        </member>
        <member name="M:Furion.JsonSerialization.Penetrates.ConvertToDateTime(System.Text.Json.Utf8JsonReader@)">
            <summary>
            转换
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.JsonSerialization.Penetrates.ConvertToDateTime(Newtonsoft.Json.JsonReader@)">
            <summary>
            转换
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.JsonSerialization.JSON">
            <summary>
            JSON 静态帮助类
            </summary>
        </member>
        <member name="M:Furion.JsonSerialization.JSON.GetJsonSerializer">
            <summary>
            获取 JSON 序列化提供器
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.JsonSerialization.JSON.Serialize(System.Object,System.Object)">
            <summary>
            序列化对象
            </summary>
            <param name="value"></param>
            <param name="jsonSerializerOptions"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.JsonSerialization.JSON.Deserialize``1(System.String,System.Object)">
            <summary>
            反序列化字符串
            </summary>
            <typeparam name="T"></typeparam>
            <param name="json"></param>
            <param name="jsonSerializerOptions"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.JsonSerialization.JSON.GetSerializerOptions``1">
            <summary>
            获取 JSON 配置选项
            </summary>
            <typeparam name="TOptions"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Furion.JsonSerialization.JSON.IsValid(System.String,System.Boolean)">
            <summary>
            检查 JSON 字符串是否有效
            </summary>
            <param name="jsonString">JSON 字符串</param>
            <param name="standard">标准 JSON</param>
            <returns></returns>
        </member>
        <member name="T:Furion.JsonSerialization.IJsonSerializerProvider">
            <summary>
            Json 序列化提供器
            </summary>
        </member>
        <member name="M:Furion.JsonSerialization.IJsonSerializerProvider.Serialize(System.Object,System.Object)">
            <summary>
            序列化对象
            </summary>
            <param name="value"></param>
            <param name="jsonSerializerOptions"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.JsonSerialization.IJsonSerializerProvider.Deserialize``1(System.String,System.Object)">
            <summary>
            反序列化字符串
            </summary>
            <typeparam name="T"></typeparam>
            <param name="json"></param>
            <param name="jsonSerializerOptions"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.JsonSerialization.IJsonSerializerProvider.Deserialize(System.String,System.Type,System.Object)">
            <summary>
            反序列化字符串
            </summary>
            <param name="json"></param>
            <param name="returnType"></param>
            <param name="jsonSerializerOptions"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.JsonSerialization.IJsonSerializerProvider.GetSerializerOptions">
            <summary>
            返回读取全局配置的 JSON 选项
            </summary>
            <returns></returns>
        </member>
        <member name="T:Furion.JsonSerialization.SystemTextJsonSerializerProvider">
            <summary>
            System.Text.Json 序列化提供器（默认实现）
            </summary>
        </member>
        <member name="F:Furion.JsonSerialization.SystemTextJsonSerializerProvider._jsonOptions">
            <summary>
            获取 JSON 配置选项
            </summary>
        </member>
        <member name="M:Furion.JsonSerialization.SystemTextJsonSerializerProvider.#ctor(Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Mvc.JsonOptions})">
            <summary>
            构造函数
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:Furion.JsonSerialization.SystemTextJsonSerializerProvider.Serialize(System.Object,System.Object)">
            <summary>
            序列化对象
            </summary>
            <param name="value"></param>
            <param name="jsonSerializerOptions"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.JsonSerialization.SystemTextJsonSerializerProvider.Deserialize``1(System.String,System.Object)">
            <summary>
            反序列化字符串
            </summary>
            <typeparam name="T"></typeparam>
            <param name="json"></param>
            <param name="jsonSerializerOptions"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.JsonSerialization.SystemTextJsonSerializerProvider.Deserialize(System.String,System.Type,System.Object)">
            <summary>
            反序列化字符串
            </summary>
            <param name="json"></param>
            <param name="returnType"></param>
            <param name="jsonSerializerOptions"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.JsonSerialization.SystemTextJsonSerializerProvider.GetSerializerOptions">
            <summary>
            返回读取全局配置的 JSON 选项
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.JsonSerialization.SystemTextJsonSerializerProvider.GetJsonSerializerOptions(System.Object)">
            <summary>
            获取默认的序列化配置
            </summary>
            <param name="jsonSerializerOptions"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.LinqBuilder.LinqExpression">
            <summary>
            EF Core Linq 拓展
            </summary>
        </member>
        <member name="M:Furion.LinqBuilder.LinqExpression.Create``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            创建 Linq/Lambda 表达式
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <param name="expression">表达式</param>
            <returns>新的表达式</returns>
        </member>
        <member name="M:Furion.LinqBuilder.LinqExpression.Create``1(System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
            <summary>
            创建 Linq/Lambda 表达式，支持索引器
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <param name="expression">表达式</param>
            <returns>新的表达式</returns>
        </member>
        <member name="M:Furion.LinqBuilder.LinqExpression.And``1">
            <summary>
            创建 And 表达式
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <returns>新的表达式</returns>
        </member>
        <member name="M:Furion.LinqBuilder.LinqExpression.IndexAnd``1">
            <summary>
            创建 And 表达式，支持索引器
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <returns>新的表达式</returns>
        </member>
        <member name="M:Furion.LinqBuilder.LinqExpression.Or``1">
            <summary>
            创建 Or 表达式
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <returns>新的表达式</returns>
        </member>
        <member name="M:Furion.LinqBuilder.LinqExpression.IndexOr``1">
            <summary>
            创建 Or 表达式，支持索引器
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <returns>新的表达式</returns>
        </member>
        <member name="T:Furion.LinqBuilder.ExpressionExtensions">
            <summary>
            表达式拓展类
            </summary>
        </member>
        <member name="M:Furion.LinqBuilder.ExpressionExtensions.Compose``1(System.Linq.Expressions.Expression{``0},System.Linq.Expressions.Expression{``0},System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <summary>
            组合两个表达式
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <param name="expression">表达式1</param>
            <param name="extendExpression">表达式2</param>
            <param name="mergeWay">组合方式</param>
            <returns>新的表达式</returns>
        </member>
        <member name="M:Furion.LinqBuilder.ExpressionExtensions.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            与操作合并两个表达式
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <param name="expression">表达式1</param>
            <param name="extendExpression">表达式2</param>
            <returns>新的表达式</returns>
        </member>
        <member name="M:Furion.LinqBuilder.ExpressionExtensions.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
            <summary>
            与操作合并两个表达式，支持索引器
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <param name="expression">表达式1</param>
            <param name="extendExpression">表达式2</param>
            <returns>新的表达式</returns>
        </member>
        <member name="M:Furion.LinqBuilder.ExpressionExtensions.AndIf``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据条件成立再与操作合并两个表达式
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <param name="expression">表达式1</param>
            <param name="condition">布尔条件</param>
            <param name="extendExpression">表达式2</param>
            <returns>新的表达式</returns>
        </member>
        <member name="M:Furion.LinqBuilder.ExpressionExtensions.AndIf``1(System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}},System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
            <summary>
            根据条件成立再与操作合并两个表达式，支持索引器
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <param name="expression">表达式1</param>
            <param name="condition">布尔条件</param>
            <param name="extendExpression">表达式2</param>
            <returns>新的表达式</returns>
        </member>
        <member name="M:Furion.LinqBuilder.ExpressionExtensions.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            或操作合并两个表达式
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <param name="expression">表达式1</param>
            <param name="extendExpression">表达式2</param>
            <returns>新的表达式</returns>
        </member>
        <member name="M:Furion.LinqBuilder.ExpressionExtensions.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
            <summary>
            或操作合并两个表达式，支持索引器
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <param name="expression">表达式1</param>
            <param name="extendExpression">表达式2</param>
            <returns>新的表达式</returns>
        </member>
        <member name="M:Furion.LinqBuilder.ExpressionExtensions.OrIf``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据条件成立再或操作合并两个表达式
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <param name="expression">表达式1</param>
            <param name="condition">布尔条件</param>
            <param name="extendExpression">表达式2</param>
            <returns>新的表达式</returns>
        </member>
        <member name="M:Furion.LinqBuilder.ExpressionExtensions.OrIf``1(System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}},System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
            <summary>
            根据条件成立再或操作合并两个表达式，支持索引器
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <param name="expression">表达式1</param>
            <param name="condition">布尔条件</param>
            <param name="extendExpression">表达式2</param>
            <returns>新的表达式</returns>
        </member>
        <member name="M:Furion.LinqBuilder.ExpressionExtensions.GetExpressionPropertyName``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            获取Lambda表达式属性名，只限 u=>u.Property 表达式
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <param name="expression">表达式</param>
            <returns>属性名</returns>
        </member>
        <member name="M:Furion.LinqBuilder.ExpressionExtensions.IsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            是否是空集合
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <param name="sources">集合对象</param>
            <returns>是否为空集合</returns>
        </member>
        <member name="T:Furion.LinqBuilder.ParameterReplaceExpressionVisitor">
            <summary>
            处理 Lambda 参数不一致问题
            </summary>
        </member>
        <member name="F:Furion.LinqBuilder.ParameterReplaceExpressionVisitor.parameterExpressionSetter">
            <summary>
            参数表达式映射集合
            </summary>
        </member>
        <member name="M:Furion.LinqBuilder.ParameterReplaceExpressionVisitor.#ctor(System.Collections.Generic.Dictionary{System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.ParameterExpression})">
            <summary>
            构造函数
            </summary>
            <param name="parameterExpressionSetter">参数表达式映射集合</param>
        </member>
        <member name="M:Furion.LinqBuilder.ParameterReplaceExpressionVisitor.ReplaceParameters(System.Collections.Generic.Dictionary{System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression)">
            <summary>
            替换表达式参数
            </summary>
            <param name="parameterExpressionSetter">参数表达式映射集合</param>
            <param name="expression">表达式</param>
            <returns>新的表达式</returns>
        </member>
        <member name="M:Furion.LinqBuilder.ParameterReplaceExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>
            重写基类参数访问器
            </summary>
            <param name="parameterExpression"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.Localization.Penetrates">
            <summary>
            常量、公共方法配置类
            </summary>
        </member>
        <member name="M:Furion.Localization.Penetrates.SetRequestLocalization(Microsoft.AspNetCore.Builder.RequestLocalizationOptions,Furion.Localization.LocalizationSettingsOptions)">
            <summary>
            设置请求多语言对象
            </summary>
            <param name="requestLocalization"></param>
            <param name="localizationSettings"></param>
        </member>
        <member name="M:Furion.Localization.Penetrates.FixedCultureDateTimeFormat(System.Globalization.CultureInfo,System.Globalization.CultureInfo)">
            <summary>
            修复多语言引起的 DateTime.Now 问题
            </summary>
            <param name="culture"></param>
            <param name="targetCulture"></param>
        </member>
        <member name="M:Furion.Localization.Penetrates.FixedCultureDateTimeFormat(Microsoft.AspNetCore.Localization.RequestCulture,System.Globalization.CultureInfo)">
            <summary>
            修复多语言引起的 DateTime.Now 问题
            </summary>
            <param name="culture"></param>
            <param name="targetCulture"></param>
        </member>
        <member name="M:Furion.Localization.Penetrates.FixedCultureDateTimeFormat(System.Globalization.CultureInfo,System.String)">
            <summary>
            修复多语言引起的 DateTime.Now 问题
            </summary>
            <param name="culture"></param>
            <param name="targetCulture"></param>
        </member>
        <member name="M:Furion.Localization.Penetrates.FixedCultureDateTimeFormat(Microsoft.AspNetCore.Localization.RequestCulture,System.String)">
            <summary>
            修复多语言引起的 DateTime.Now 问题
            </summary>
            <param name="culture"></param>
            <param name="targetCulture"></param>
        </member>
        <member name="T:Furion.Localization.L">
            <summary>
            全局多语言静态类
            </summary>
        </member>
        <member name="P:Furion.Localization.L.Text">
            <summary>
            String 多语言
            </summary>
        </member>
        <member name="P:Furion.Localization.L.Html">
            <summary>
            Html 多语言
            </summary>
        </member>
        <member name="M:Furion.Localization.L.TextOf``1">
            <summary>
            String 多语言
            </summary>
            <typeparam name="T">特定类型</typeparam>
            <remarks><see cref="T:Microsoft.Extensions.Localization.IStringLocalizer`1"/></remarks>
        </member>
        <member name="M:Furion.Localization.L.HtmlOf``1">
            <summary>
            Html 多语言
            </summary>
            <typeparam name="T">特定类型</typeparam>
            <remarks><see cref="T:Microsoft.AspNetCore.Mvc.Localization.IHtmlLocalizer`1"/></remarks>
        </member>
        <member name="M:Furion.Localization.L.SetCulture(System.String,System.Boolean)">
            <summary>
            设置当前选择的语言
            </summary>
            <param name="culture"></param>
            <param name="immediately">是否立即对当前线程有效，设置 true 表示立即有效，默认情况下只会影响下一次请求</param>
        </member>
        <member name="M:Furion.Localization.L.GetSelectCulture">
            <summary>
            获取当前选择的语言
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.Localization.L.SetCurrentUICulture(System.String)">
            <summary>
            设置当前线程 UI 区域性
            </summary>
            <param name="culture"></param>
            <remarks>对当前线程（代码）立即有效</remarks>
            <returns></returns>
        </member>
        <member name="M:Furion.Localization.L.GetCurrentUICulture">
            <summary>
            获取当前线程 UI 区域性
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.Localization.L.GetCultures">
            <summary>
            获取系统提供的语言列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.Localization.L.GetString``1(System.Linq.Expressions.Expression{System.Func{``0,System.String}})">
            <summary>
            根据实体类属性名获取对应的多语言配置
            </summary>
            <typeparam name="TResource">通常命名为 SharedResource </typeparam>
            <param name="propertyExpression">属性表达式</param>
            <returns></returns>
        </member>
        <member name="M:Furion.Localization.L.GetString(System.String,System.String)">
            <summary>
            获取指定区域的翻译
            </summary>
            <param name="name"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Localization.L.GetDefaultCulture">
            <summary>
            获取本地配置默认语言
            </summary>
            <returns></returns>
        </member>
        <member name="T:Furion.Localization.LocalizationSettingsOptions">
            <summary>
            多语言配置选项
            </summary>
        </member>
        <member name="P:Furion.Localization.LocalizationSettingsOptions.ResourcesPath">
            <summary>
            资源路径
            </summary>
        </member>
        <member name="P:Furion.Localization.LocalizationSettingsOptions.SupportedCultures">
            <summary>
            支持的语言列表
            </summary>
        </member>
        <member name="P:Furion.Localization.LocalizationSettingsOptions.DefaultCulture">
            <summary>
            默认的语言
            </summary>
        </member>
        <member name="P:Furion.Localization.LocalizationSettingsOptions.LanguageFilePrefix">
            <summary>
            资源文件名前缀
            </summary>
        </member>
        <member name="P:Furion.Localization.LocalizationSettingsOptions.AssemblyName">
            <summary>
            资源所在程序集名称
            </summary>
        </member>
        <member name="P:Furion.Localization.LocalizationSettingsOptions.DateTimeFormatCulture">
            <summary>
            设置 DateTime 格式化标准语言
            </summary>
            <remarks>不设置则自动根据当前语言</remarks>
        </member>
        <member name="M:Furion.Localization.LocalizationSettingsOptions.PostConfigure(Furion.Localization.LocalizationSettingsOptions,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            选项后期配置
            </summary>
            <param name="options"></param>
            <param name="configuration"></param>
        </member>
        <member name="T:Furion.Localization.CustomizeQueryStringRequestCultureProvider">
            <summary>
            自定义多语言查询参数
            </summary>
        </member>
        <member name="M:Furion.Localization.CustomizeQueryStringRequestCultureProvider.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="queryStringKey"></param>
            <param name="uiQueryStringKey"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:Furion.Logging.LogContextExtensions">
            <summary>
            LogContext 拓展
            </summary>
        </member>
        <member name="M:Furion.Logging.LogContextExtensions.Set(Furion.Logging.LogContext,System.Object,System.Object)">
            <summary>
            设置上下文数据
            </summary>
            <param name="logContext"></param>
            <param name="key">键</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Furion.Logging.LogContextExtensions.SetRange(Furion.Logging.LogContext,System.Collections.Generic.IDictionary{System.Object,System.Object})">
            <summary>
            批量设置上下文数据
            </summary>
            <param name="logContext"></param>
            <param name="properties"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Logging.LogContextExtensions.Get(Furion.Logging.LogContext,System.Object)">
            <summary>
            获取上下文数据
            </summary>
            <param name="logContext"></param>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:Furion.Logging.LogContextExtensions.Get``1(Furion.Logging.LogContext,System.Object)">
            <summary>
            获取上下文数据
            </summary>
            <param name="logContext"></param>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="T:Furion.Logging.LogMessageExtensions">
            <summary>
            <see cref="T:Furion.Logging.LogMessage"/> 拓展
            </summary>
        </member>
        <member name="M:Furion.Logging.LogMessageExtensions.Write(Furion.Logging.LogMessage,System.Action{System.Text.Json.Utf8JsonWriter},System.Boolean)">
            <summary>
            高性能创建 JSON 对象字符串
            </summary>
            <param name="_"><see cref="T:Furion.Logging.LogMessage"/></param>
            <param name="writeAction"></param>
            <param name="writeIndented">是否对 JSON 格式化</param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:Furion.Logging.LogMessageExtensions.WriteArray(Furion.Logging.LogMessage,System.Action{System.Text.Json.Utf8JsonWriter},System.Boolean)">
            <summary>
            高性能创建 JSON 数组字符串
            </summary>
            <param name="logMsg"><see cref="T:Furion.Logging.LogMessage"/></param>
            <param name="writeAction"></param>
            <param name="writeIndented">是否对 JSON 格式化</param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="T:Furion.Logging.Extensions.StringLoggingExtensions">
            <summary>
            字符串日志输出拓展
            </summary>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.SetArgs(System.String,System.Object[])">
            <summary>
            设置消息格式化参数
            </summary>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.SetLevel(System.String,Microsoft.Extensions.Logging.LogLevel)">
            <summary>
            设置日志级别
            </summary>
            <param name="message"></param>
            <param name="level"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.SetEventId(System.String,Microsoft.Extensions.Logging.EventId)">
            <summary>
            设置事件 Id
            </summary>
            <param name="message"></param>
            <param name="eventId"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.SetCategory``1(System.String)">
            <summary>
            设置日志分类
            </summary>
            <param name="message"></param>
            <typeparam name="TClass"></typeparam>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.SetException(System.String,System.Exception)">
            <summary>
            设置异常对象
            </summary>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.SetLoggerScoped(System.String,System.IServiceProvider)">
            <summary>
            设置日志服务作用域
            </summary>
            <param name="message"></param>
            <param name="serviceProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.ScopeContext(System.String,System.Collections.Generic.IDictionary{System.Object,System.Object})">
            <summary>
            配置日志上下文
            </summary>
            <param name="message"></param>
            <param name="properties">建议使用 ConcurrentDictionary 类型</param>
            <returns></returns>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.ScopeContext(System.String,System.Action{Furion.Logging.LogContext})">
            <summary>
            配置日志上下文
            </summary>
            <param name="message"></param>
            <param name="configure"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.ScopeContext(System.String,Furion.Logging.LogContext)">
            <summary>
            配置日志上下文
            </summary>
            <param name="message"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogInformation(System.String,System.Object[])">
            <summary>
            LogInformation
            </summary>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogInformation(System.String,Microsoft.Extensions.Logging.EventId,System.Object[])">
            <summary>
            LogInformation
            </summary>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogInformation(System.String,System.Exception,System.Object[])">
            <summary>
            LogInformation
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogInformation(System.String,Microsoft.Extensions.Logging.EventId,System.Exception,System.Object[])">
            <summary>
            LogInformation
            </summary>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogInformation``1(System.String,System.Object[])">
            <summary>
            LogInformation
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogInformation``1(System.String,Microsoft.Extensions.Logging.EventId,System.Object[])">
            <summary>
            LogInformation
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogInformation``1(System.String,System.Exception,System.Object[])">
            <summary>
            LogInformation
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogInformation``1(System.String,Microsoft.Extensions.Logging.EventId,System.Exception,System.Object[])">
            <summary>
            LogInformation
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogWarning(System.String,System.Object[])">
            <summary>
            LogWarning
            </summary>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogWarning(System.String,Microsoft.Extensions.Logging.EventId,System.Object[])">
            <summary>
            LogWarning
            </summary>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogWarning(System.String,System.Exception,System.Object[])">
            <summary>
            LogWarning
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogWarning(System.String,Microsoft.Extensions.Logging.EventId,System.Exception,System.Object[])">
            <summary>
            LogWarning
            </summary>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogWarning``1(System.String,System.Object[])">
            <summary>
            LogWarning
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogWarning``1(System.String,Microsoft.Extensions.Logging.EventId,System.Object[])">
            <summary>
            LogWarning
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogWarning``1(System.String,System.Exception,System.Object[])">
            <summary>
            LogWarning
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogWarning``1(System.String,Microsoft.Extensions.Logging.EventId,System.Exception,System.Object[])">
            <summary>
            LogWarning
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogError(System.String,System.Object[])">
            <summary>
            LogError
            </summary>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogError(System.String,Microsoft.Extensions.Logging.EventId,System.Object[])">
            <summary>
            LogError
            </summary>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogError(System.String,System.Exception,System.Object[])">
            <summary>
            LogError
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogError(System.String,Microsoft.Extensions.Logging.EventId,System.Exception,System.Object[])">
            <summary>
            LogError
            </summary>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogError``1(System.String,System.Object[])">
            <summary>
            LogError
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogError``1(System.String,Microsoft.Extensions.Logging.EventId,System.Object[])">
            <summary>
            LogError
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogError``1(System.String,System.Exception,System.Object[])">
            <summary>
            LogError
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogError``1(System.String,Microsoft.Extensions.Logging.EventId,System.Exception,System.Object[])">
            <summary>
            LogError
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogDebug(System.String,System.Object[])">
            <summary>
            LogDebug
            </summary>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogDebug(System.String,Microsoft.Extensions.Logging.EventId,System.Object[])">
            <summary>
            LogDebug
            </summary>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogDebug(System.String,System.Exception,System.Object[])">
            <summary>
            LogDebug
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogDebug(System.String,Microsoft.Extensions.Logging.EventId,System.Exception,System.Object[])">
            <summary>
            LogDebug
            </summary>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogDebug``1(System.String,System.Object[])">
            <summary>
            LogDebug
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogDebug``1(System.String,Microsoft.Extensions.Logging.EventId,System.Object[])">
            <summary>
            LogDebug
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogDebug``1(System.String,System.Exception,System.Object[])">
            <summary>
            LogDebug
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogDebug``1(System.String,Microsoft.Extensions.Logging.EventId,System.Exception,System.Object[])">
            <summary>
            LogDebug
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogTrace(System.String,System.Object[])">
            <summary>
            LogTrace
            </summary>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogTrace(System.String,Microsoft.Extensions.Logging.EventId,System.Object[])">
            <summary>
            LogTrace
            </summary>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogTrace(System.String,System.Exception,System.Object[])">
            <summary>
            LogTrace
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogTrace(System.String,Microsoft.Extensions.Logging.EventId,System.Exception,System.Object[])">
            <summary>
            LogTrace
            </summary>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogTrace``1(System.String,System.Object[])">
            <summary>
            LogTrace
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogTrace``1(System.String,Microsoft.Extensions.Logging.EventId,System.Object[])">
            <summary>
            LogTrace
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogTrace``1(System.String,System.Exception,System.Object[])">
            <summary>
            LogTrace
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogTrace``1(System.String,Microsoft.Extensions.Logging.EventId,System.Exception,System.Object[])">
            <summary>
            LogTrace
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogCritical(System.String,System.Object[])">
            <summary>
            LogCritical
            </summary>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogCritical(System.String,Microsoft.Extensions.Logging.EventId,System.Object[])">
            <summary>
            LogCritical
            </summary>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogCritical(System.String,System.Exception,System.Object[])">
            <summary>
            LogCritical
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogCritical(System.String,Microsoft.Extensions.Logging.EventId,System.Exception,System.Object[])">
            <summary>
            LogCritical
            </summary>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogCritical``1(System.String,System.Object[])">
            <summary>
            LogCritical
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogCritical``1(System.String,Microsoft.Extensions.Logging.EventId,System.Object[])">
            <summary>
            LogCritical
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogCritical``1(System.String,System.Exception,System.Object[])">
            <summary>
            LogCritical
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogCritical``1(System.String,Microsoft.Extensions.Logging.EventId,System.Exception,System.Object[])">
            <summary>
            LogCritical
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="T:Furion.Logging.ConsoleColors">
            <summary>
            控制台颜色结构
            </summary>
        </member>
        <member name="M:Furion.Logging.ConsoleColors.#ctor(System.Nullable{System.ConsoleColor},System.Nullable{System.ConsoleColor})">
            <summary>
            构造函数
            </summary>
            <param name="foreground"></param>
            <param name="background"></param>
        </member>
        <member name="P:Furion.Logging.ConsoleColors.Foreground">
            <summary>
            前景色
            </summary>
        </member>
        <member name="P:Furion.Logging.ConsoleColors.Background">
            <summary>
            背景色
            </summary>
        </member>
        <member name="T:Furion.Logging.ConsoleFormatterExtend">
            <summary>
            控制台默认格式化程序拓展
            </summary>
        </member>
        <member name="F:Furion.Logging.ConsoleFormatterExtend._formatOptionsReloadToken">
            <summary>
            日志格式化选项刷新 Token
            </summary>
        </member>
        <member name="F:Furion.Logging.ConsoleFormatterExtend._formatterOptions">
            <summary>
            日志格式化配置选项
            </summary>
        </member>
        <member name="F:Furion.Logging.ConsoleFormatterExtend._disableColors">
            <summary>
            是否启用控制台颜色
            </summary>
        </member>
        <member name="M:Furion.Logging.ConsoleFormatterExtend.#ctor(Microsoft.Extensions.Options.IOptionsMonitor{Furion.Logging.ConsoleFormatterExtendOptions})">
            <summary>
            构造函数
            </summary>
            <param name="formatterOptions"></param>
        </member>
        <member name="M:Furion.Logging.ConsoleFormatterExtend.Write``1(Microsoft.Extensions.Logging.Abstractions.LogEntry{``0}@,Microsoft.Extensions.Logging.IExternalScopeProvider,System.IO.TextWriter)">
            <summary>
            写入日志
            </summary>
            <typeparam name="TState"></typeparam>
            <param name="logEntry"></param>
            <param name="scopeProvider"></param>
            <param name="textWriter"></param>
        </member>
        <member name="M:Furion.Logging.ConsoleFormatterExtend.Dispose">
            <summary>
            释放非托管资源
            </summary>
        </member>
        <member name="M:Furion.Logging.ConsoleFormatterExtend.ReloadFormatterOptions(Furion.Logging.ConsoleFormatterExtendOptions)">
            <summary>
            刷新日志格式化选项
            </summary>
            <param name="options"></param>
        </member>
        <member name="T:Furion.Logging.ConsoleFormatterExtendOptions">
            <summary>
            控制台默认格式化选项拓展
            </summary>
        </member>
        <member name="M:Furion.Logging.ConsoleFormatterExtendOptions.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:Furion.Logging.ConsoleFormatterExtendOptions.ColorBehavior">
            <summary>
            控制是否启用颜色
            </summary>
        </member>
        <member name="P:Furion.Logging.ConsoleFormatterExtendOptions.MessageFormat">
            <summary>
            自定义日志消息格式化程序
            </summary>
        </member>
        <member name="P:Furion.Logging.ConsoleFormatterExtendOptions.DateFormat">
            <summary>
            日期格式化
            </summary>
        </member>
        <member name="P:Furion.Logging.ConsoleFormatterExtendOptions.WriteFilter">
            <summary>
            自定义日志筛选器
            </summary>
        </member>
        <member name="P:Furion.Logging.ConsoleFormatterExtendOptions.WriteHandler">
            <summary>
            自定义格式化日志处理程序
            </summary>
        </member>
        <member name="P:Furion.Logging.ConsoleFormatterExtendOptions.WithTraceId">
            <summary>
            显示跟踪/请求 Id
            </summary>
        </member>
        <member name="P:Furion.Logging.ConsoleFormatterExtendOptions.WithStackFrame">
            <summary>
            显示堆栈框架（程序集和方法签名）
            </summary>
        </member>
        <member name="P:Furion.Logging.ConsoleFormatterExtendOptions.MessageProcess">
            <summary>
            日志消息内容转换（如脱敏处理）
            </summary>
        </member>
        <member name="T:Furion.Logging.DatabaseLogger">
            <summary>
            数据库日志记录器
            </summary>
            <remarks>https://docs.microsoft.com/zh-cn/dotnet/core/extensions/custom-logging-provider</remarks>
        </member>
        <member name="F:Furion.Logging.DatabaseLogger._logName">
            <summary>
            记录器类别名称
            </summary>
        </member>
        <member name="F:Furion.Logging.DatabaseLogger._databaseLoggerProvider">
            <summary>
            数据库日志记录器提供器
            </summary>
        </member>
        <member name="F:Furion.Logging.DatabaseLogger._options">
            <summary>
            日志配置选项
            </summary>
        </member>
        <member name="M:Furion.Logging.DatabaseLogger.#ctor(System.String,Furion.Logging.DatabaseLoggerProvider)">
            <summary>
            构造函数
            </summary>
            <param name="logName">记录器类别名称</param>
            <param name="databaseLoggerProvider">数据库日志记录器提供器</param>
        </member>
        <member name="M:Furion.Logging.DatabaseLogger.BeginScope``1(``0)">
            <summary>
            开始逻辑操作范围
            </summary>
            <typeparam name="TState">标识符类型参数</typeparam>
            <param name="state">要写入的项/对象</param>
            <returns><see cref="T:System.IDisposable"/></returns>
        </member>
        <member name="M:Furion.Logging.DatabaseLogger.IsEnabled(Microsoft.Extensions.Logging.LogLevel)">
            <summary>
            检查是否已启用给定日志级别
            </summary>
            <param name="logLevel">日志级别</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Furion.Logging.DatabaseLogger.Log``1(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,``0,System.Exception,System.Func{``0,System.Exception,System.String})">
            <summary>
            写入日志项
            </summary>
            <typeparam name="TState">标识符类型参数</typeparam>
            <param name="logLevel">日志级别</param>
            <param name="eventId">事件 Id</param>
            <param name="state">要写入的项/对象</param>
            <param name="exception">异常对象</param>
            <param name="formatter">日志格式化器</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:Furion.Logging.DatabaseLoggerOptions">
            <summary>
            数据库记录器配置选项
            </summary>
        </member>
        <member name="P:Furion.Logging.DatabaseLoggerOptions.WriteFilter">
            <summary>
            自定义日志筛选器
            </summary>
        </member>
        <member name="P:Furion.Logging.DatabaseLoggerOptions.MinimumLevel">
            <summary>
            最低日志记录级别
            </summary>
        </member>
        <member name="P:Furion.Logging.DatabaseLoggerOptions.MessageFormat">
            <summary>
            自定义日志消息格式化程序
            </summary>
        </member>
        <member name="P:Furion.Logging.DatabaseLoggerOptions.HandleWriteError">
            <summary>
            自定义数据库日志写入错误程序
            </summary>
            <remarks>主要解决日志在写入过程出现异常问题</remarks>
            <example>
            options.HandleWriteError = (err) => {
                // do anything
            };
            </example>
        </member>
        <member name="P:Furion.Logging.DatabaseLoggerOptions.UseUtcTimestamp">
            <summary>
            是否使用 UTC 时间戳，默认 false
            </summary>
        </member>
        <member name="P:Furion.Logging.DatabaseLoggerOptions.DateFormat">
            <summary>
            日期格式化
            </summary>
        </member>
        <member name="P:Furion.Logging.DatabaseLoggerOptions.IncludeScopes">
            <summary>
            是否启用日志上下文
            </summary>
        </member>
        <member name="P:Furion.Logging.DatabaseLoggerOptions.IgnoreReferenceLoop">
            <summary>
            忽略日志循环输出
            </summary>
            <remarks>对性能有些许影响</remarks>
        </member>
        <member name="P:Furion.Logging.DatabaseLoggerOptions.WithTraceId">
            <summary>
            显示跟踪/请求 Id
            </summary>
        </member>
        <member name="P:Furion.Logging.DatabaseLoggerOptions.WithStackFrame">
            <summary>
            显示堆栈框架（程序集和方法签名）
            </summary>
        </member>
        <member name="P:Furion.Logging.DatabaseLoggerOptions.MessageProcess">
            <summary>
            日志消息内容转换（如脱敏处理）
            </summary>
        </member>
        <member name="T:Furion.Logging.DatabaseLoggerProvider">
            <summary>
            数据库日志记录器提供程序
            </summary>
            <remarks>https://docs.microsoft.com/zh-cn/dotnet/core/extensions/custom-logging-provider</remarks>
        </member>
        <member name="F:Furion.Logging.DatabaseLoggerProvider._databaseLoggers">
            <summary>
            存储多日志分类日志记录器
            </summary>
        </member>
        <member name="F:Furion.Logging.DatabaseLoggerProvider._logMessageQueue">
            <summary>
            日志消息队列（线程安全）
            </summary>
        </member>
        <member name="F:Furion.Logging.DatabaseLoggerProvider._scopeProvider">
            <summary>
            日志作用域提供器
            </summary>
        </member>
        <member name="F:Furion.Logging.DatabaseLoggerProvider._serviceScope">
            <summary>
            数据库日志写入器作用域范围
            </summary>
        </member>
        <member name="F:Furion.Logging.DatabaseLoggerProvider._databaseLoggingWriter">
            <summary>
            数据库日志写入器
            </summary>
        </member>
        <member name="F:Furion.Logging.DatabaseLoggerProvider._processQueueTask">
            <summary>
            长时间运行的后台任务
            </summary>
            <remarks>实现不间断写入</remarks>
        </member>
        <member name="M:Furion.Logging.DatabaseLoggerProvider.#ctor(Furion.Logging.DatabaseLoggerOptions)">
            <summary>
            构造函数
            </summary>
            <param name="databaseLoggerOptions">数据库日志记录器配置选项</param>
        </member>
        <member name="P:Furion.Logging.DatabaseLoggerProvider.LoggerOptions">
            <summary>
            数据库日志记录器配置选项
            </summary>
        </member>
        <member name="P:Furion.Logging.DatabaseLoggerProvider.ScopeProvider">
            <summary>
            日志作用域提供器
            </summary>
        </member>
        <member name="M:Furion.Logging.DatabaseLoggerProvider.CreateLogger(System.String)">
            <summary>
            创建数据库日志记录器
            </summary>
            <param name="categoryName">日志分类名</param>
            <returns><see cref="T:Microsoft.Extensions.Logging.ILogger"/></returns>
        </member>
        <member name="M:Furion.Logging.DatabaseLoggerProvider.SetScopeProvider(Microsoft.Extensions.Logging.IExternalScopeProvider)">
            <summary>
            设置作用域提供器
            </summary>
            <param name="scopeProvider"></param>
        </member>
        <member name="M:Furion.Logging.DatabaseLoggerProvider.Dispose">
            <summary>
            释放非托管资源
            </summary>
            <remarks>控制日志消息队列</remarks>
        </member>
        <member name="M:Furion.Logging.DatabaseLoggerProvider.WriteToQueue(Furion.Logging.LogMessage)">
            <summary>
            将日志消息写入队列中等待后台任务出队写入数据库
            </summary>
            <param name="logMsg">结构化日志消息</param>
        </member>
        <member name="M:Furion.Logging.DatabaseLoggerProvider.SetServiceProvider(System.IServiceProvider,System.Type)">
            <summary>
            设置服务提供器
            </summary>
            <param name="serviceProvider"></param>
            <param name="databaseLoggingWriterType"></param>
        </member>
        <member name="M:Furion.Logging.DatabaseLoggerProvider.ProcessQueueAsync">
            <summary>
            将日志消息写入数据库中
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:Furion.Logging.DatabaseLoggerSettings">
            <summary>
            数据库日志配置类
            </summary>
        </member>
        <member name="P:Furion.Logging.DatabaseLoggerSettings.MinimumLevel">
            <summary>
            最低日志记录级别
            </summary>
        </member>
        <member name="P:Furion.Logging.DatabaseLoggerSettings.UseUtcTimestamp">
            <summary>
            是否使用 UTC 时间戳，默认 false
            </summary>
        </member>
        <member name="P:Furion.Logging.DatabaseLoggerSettings.DateFormat">
            <summary>
            日期格式化
            </summary>
        </member>
        <member name="P:Furion.Logging.DatabaseLoggerSettings.IncludeScopes">
            <summary>
            是否启用日志上下文
            </summary>
        </member>
        <member name="P:Furion.Logging.DatabaseLoggerSettings.IgnoreReferenceLoop">
            <summary>
            忽略日志循环输出
            </summary>
            <remarks>对性能有些许影响</remarks>
        </member>
        <member name="P:Furion.Logging.DatabaseLoggerSettings.WithTraceId">
            <summary>
            显示跟踪/请求 Id
            </summary>
        </member>
        <member name="P:Furion.Logging.DatabaseLoggerSettings.WithStackFrame">
            <summary>
            显示堆栈框架（程序集和方法签名）
            </summary>
        </member>
        <member name="T:Furion.Logging.DatabaseWriteError">
            <summary>
            数据库写入错误信息上下文
            </summary>
        </member>
        <member name="M:Furion.Logging.DatabaseWriteError.#ctor(System.Exception)">
            <summary>
            构造函数
            </summary>
            <param name="exception">异常对象</param>
        </member>
        <member name="P:Furion.Logging.DatabaseWriteError.Exception">
            <summary>
            引起数据库写入异常信息
            </summary>
        </member>
        <member name="T:Furion.Logging.IDatabaseLoggingWriter">
            <summary>
            数据库日志写入器
            </summary>
        </member>
        <member name="M:Furion.Logging.IDatabaseLoggingWriter.WriteAsync(Furion.Logging.LogMessage,System.Boolean)">
            <summary>
            写入数据库
            </summary>
            <param name="logMsg">结构化日志消息</param>
            <param name="flush">清除缓冲区</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="T:Furion.Logging.EmptyLogger">
            <summary>
            空日志记录器
            </summary>
            <remarks>https://docs.microsoft.com/zh-cn/dotnet/core/extensions/custom-logging-provider</remarks>
        </member>
        <member name="M:Furion.Logging.EmptyLogger.BeginScope``1(``0)">
            <summary>
            开始逻辑操作范围
            </summary>
            <typeparam name="TState">标识符类型参数</typeparam>
            <param name="state">要写入的项/对象</param>
            <returns><see cref="T:System.IDisposable"/></returns>
        </member>
        <member name="M:Furion.Logging.EmptyLogger.IsEnabled(Microsoft.Extensions.Logging.LogLevel)">
            <summary>
            检查是否已启用给定日志级别
            </summary>
            <param name="logLevel">日志级别</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Furion.Logging.EmptyLogger.Log``1(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,``0,System.Exception,System.Func{``0,System.Exception,System.String})">
            <summary>
            写入日志项
            </summary>
            <typeparam name="TState">标识符类型参数</typeparam>
            <param name="logLevel">日志级别</param>
            <param name="eventId">事件 Id</param>
            <param name="state">要写入的项/对象</param>
            <param name="exception">异常对象</param>
            <param name="formatter">日志格式化器</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:Furion.Logging.EmptyLoggerProvider">
            <summary>
            空日志记录器提供程序
            </summary>
            <remarks>https://docs.microsoft.com/zh-cn/dotnet/core/extensions/custom-logging-provider</remarks>
        </member>
        <member name="F:Furion.Logging.EmptyLoggerProvider._emptyLoggers">
            <summary>
            存储多日志分类日志记录器
            </summary>
        </member>
        <member name="M:Furion.Logging.EmptyLoggerProvider.CreateLogger(System.String)">
            <summary>
            创建空日志记录器
            </summary>
            <param name="categoryName">日志分类名</param>
            <returns><see cref="T:Microsoft.Extensions.Logging.ILogger"/></returns>
        </member>
        <member name="M:Furion.Logging.EmptyLoggerProvider.Dispose">
            <summary>
            释放非托管资源
            </summary>
            <remarks>控制日志消息队列</remarks>
        </member>
        <member name="T:Furion.Logging.FileLogger">
            <summary>
            文件日志记录器
            </summary>
            <remarks>https://docs.microsoft.com/zh-cn/dotnet/core/extensions/custom-logging-provider</remarks>
        </member>
        <member name="F:Furion.Logging.FileLogger._logName">
            <summary>
            记录器类别名称
            </summary>
        </member>
        <member name="F:Furion.Logging.FileLogger._fileLoggerProvider">
            <summary>
            文件日志记录器提供器
            </summary>
        </member>
        <member name="F:Furion.Logging.FileLogger._options">
            <summary>
            日志配置选项
            </summary>
        </member>
        <member name="M:Furion.Logging.FileLogger.#ctor(System.String,Furion.Logging.FileLoggerProvider)">
            <summary>
            构造函数
            </summary>
            <param name="logName">记录器类别名称</param>
            <param name="fileLoggerProvider">文件日志记录器提供器</param>
        </member>
        <member name="M:Furion.Logging.FileLogger.BeginScope``1(``0)">
            <summary>
            开始逻辑操作范围
            </summary>
            <typeparam name="TState">标识符类型参数</typeparam>
            <param name="state">要写入的项/对象</param>
            <returns><see cref="T:System.IDisposable"/></returns>
        </member>
        <member name="M:Furion.Logging.FileLogger.IsEnabled(Microsoft.Extensions.Logging.LogLevel)">
            <summary>
            检查是否已启用给定日志级别
            </summary>
            <param name="logLevel">日志级别</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Furion.Logging.FileLogger.Log``1(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,``0,System.Exception,System.Func{``0,System.Exception,System.String})">
            <summary>
            写入日志项
            </summary>
            <typeparam name="TState">标识符类型参数</typeparam>
            <param name="logLevel">日志级别</param>
            <param name="eventId">事件 Id</param>
            <param name="state">要写入的项/对象</param>
            <param name="exception">异常对象</param>
            <param name="formatter">日志格式化器</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:Furion.Logging.FileLoggerOptions">
            <summary>
            文件日志记录器配置选项
            </summary>
        </member>
        <member name="P:Furion.Logging.FileLoggerOptions.Append">
            <summary>
            追加到已存在日志文件或覆盖它们
            </summary>
        </member>
        <member name="P:Furion.Logging.FileLoggerOptions.FileSizeLimitBytes">
            <summary>
            控制每一个日志文件最大存储大小，默认无限制，单位是 B，也就是 1024 才等于 1KB
            </summary>
            <remarks>如果指定了该值，那么日志文件大小超出了该配置就会创建的日志文件，新创建的日志文件命名规则：文件名+[递增序号].log</remarks>
        </member>
        <member name="P:Furion.Logging.FileLoggerOptions.MaxRollingFiles">
            <summary>
            控制最大创建的日志文件数量，默认无限制，配合 <see cref="P:Furion.Logging.FileLoggerOptions.FileSizeLimitBytes"/> 使用
            </summary>
            <remarks>如果指定了该值，那么超出该值将从最初日志文件中从头写入覆盖</remarks>
        </member>
        <member name="P:Furion.Logging.FileLoggerOptions.MinimumLevel">
            <summary>
            最低日志记录级别
            </summary>
        </member>
        <member name="P:Furion.Logging.FileLoggerOptions.UseUtcTimestamp">
            <summary>
            是否使用 UTC 时间戳，默认 false
            </summary>
        </member>
        <member name="P:Furion.Logging.FileLoggerOptions.MessageFormat">
            <summary>
            自定义日志消息格式化程序
            </summary>
        </member>
        <member name="P:Furion.Logging.FileLoggerOptions.WriteFilter">
            <summary>
            自定义日志筛选器
            </summary>
        </member>
        <member name="P:Furion.Logging.FileLoggerOptions.FileNameRule">
             <summary>
             自定义日志文件名格式化程序（规则）
             </summary>
             <example>
             options.FileNameRule = (fileName) => {
                 return String.Format(Path.GetFileNameWithoutExtension(fileName) + "_{0:yyyy}-{0:MM}-{0:dd}" + Path.GetExtension(fileName), DateTime.UtcNow);
            
                 // 或者每天创建一个文件
                 // return String.Format(fileName, DateTime.UtcNow);
             }
             </example>
        </member>
        <member name="P:Furion.Logging.FileLoggerOptions.HandleWriteError">
            <summary>
            自定义日志文件写入错误程序
            </summary>
            <remarks>主要解决日志在写入过程中文件被打开或其他应用程序占用的情况，一旦出现上述情况可创建备用日志文件继续写入</remarks>
            <example>
            options.HandleWriteError = (err) => {
                err.UseRollbackFileName(Path.GetFileNameWithoutExtension(err.CurrentFileName)+ "_alt" + Path.GetExtension(err.CurrentFileName));
            };
            </example>
        </member>
        <member name="P:Furion.Logging.FileLoggerOptions.DateFormat">
            <summary>
            日期格式化
            </summary>
        </member>
        <member name="P:Furion.Logging.FileLoggerOptions.IncludeScopes">
            <summary>
            是否启用日志上下文
            </summary>
        </member>
        <member name="P:Furion.Logging.FileLoggerOptions.WithTraceId">
            <summary>
            显示跟踪/请求 Id
            </summary>
        </member>
        <member name="P:Furion.Logging.FileLoggerOptions.WithStackFrame">
            <summary>
            显示堆栈框架（程序集和方法签名）
            </summary>
        </member>
        <member name="P:Furion.Logging.FileLoggerOptions.MessageProcess">
            <summary>
            日志消息内容转换（如脱敏处理）
            </summary>
        </member>
        <member name="T:Furion.Logging.FileLoggerProvider">
            <summary>
            文件日志记录器提供程序
            </summary>
            <remarks>https://docs.microsoft.com/zh-cn/dotnet/core/extensions/custom-logging-provider</remarks>
        </member>
        <member name="F:Furion.Logging.FileLoggerProvider._fileLoggers">
            <summary>
            存储多日志分类日志记录器
            </summary>
        </member>
        <member name="F:Furion.Logging.FileLoggerProvider._logMessageQueue">
            <summary>
            日志消息队列（线程安全）
            </summary>
        </member>
        <member name="F:Furion.Logging.FileLoggerProvider._scopeProvider">
            <summary>
            日志作用域提供器
            </summary>
        </member>
        <member name="F:Furion.Logging.FileLoggerProvider._rollingFileNames">
            <summary>
            记录日志所有滚动文件名
            </summary>
            <remarks>只有 MaxRollingFiles 和 FileSizeLimitBytes 大于 0 有效</remarks>
        </member>
        <member name="F:Furion.Logging.FileLoggerProvider._fileLoggingWriter">
            <summary>
            文件日志写入器
            </summary>
        </member>
        <member name="F:Furion.Logging.FileLoggerProvider._processQueueTask">
            <summary>
            长时间运行的后台任务
            </summary>
            <remarks>实现不间断写入</remarks>
        </member>
        <member name="M:Furion.Logging.FileLoggerProvider.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="fileName">日志文件名</param>
        </member>
        <member name="M:Furion.Logging.FileLoggerProvider.#ctor(System.String,System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="fileName">日志文件名</param>
            <param name="append">追加到已存在日志文件或覆盖它们</param>
        </member>
        <member name="M:Furion.Logging.FileLoggerProvider.#ctor(System.String,Furion.Logging.FileLoggerOptions)">
            <summary>
            构造函数
            </summary>
            <param name="fileName">日志文件名</param>
            <param name="fileLoggerOptions">文件日志记录器配置选项</param>
        </member>
        <member name="F:Furion.Logging.FileLoggerProvider.FileName">
            <summary>
            文件名
            </summary>
        </member>
        <member name="P:Furion.Logging.FileLoggerProvider.LoggerOptions">
            <summary>
            文件日志记录器配置选项
            </summary>
        </member>
        <member name="P:Furion.Logging.FileLoggerProvider.ScopeProvider">
            <summary>
            日志作用域提供器
            </summary>
        </member>
        <member name="M:Furion.Logging.FileLoggerProvider.CreateLogger(System.String)">
            <summary>
            创建文件日志记录器
            </summary>
            <param name="categoryName">日志分类名</param>
            <returns><see cref="T:Microsoft.Extensions.Logging.ILogger"/></returns>
        </member>
        <member name="M:Furion.Logging.FileLoggerProvider.SetScopeProvider(Microsoft.Extensions.Logging.IExternalScopeProvider)">
            <summary>
            设置作用域提供器
            </summary>
            <param name="scopeProvider"></param>
        </member>
        <member name="M:Furion.Logging.FileLoggerProvider.Dispose">
            <summary>
            释放非托管资源
            </summary>
            <remarks>控制日志消息队列</remarks>
        </member>
        <member name="M:Furion.Logging.FileLoggerProvider.WriteToQueue(Furion.Logging.LogMessage)">
            <summary>
            将日志消息写入队列中等待后台任务出队写入文件
            </summary>
            <param name="logMsg">日志消息</param>
        </member>
        <member name="M:Furion.Logging.FileLoggerProvider.ProcessQueueAsync">
            <summary>
            将日志消息写入文件中
            </summary>
            <returns></returns>
        </member>
        <member name="T:Furion.Logging.FileLoggerSettings">
            <summary>
            文件日志配置类
            </summary>
        </member>
        <member name="P:Furion.Logging.FileLoggerSettings.FileName">
            <summary>
            日志文件完整路径或文件名，推荐 .log 作为拓展名
            </summary>
        </member>
        <member name="P:Furion.Logging.FileLoggerSettings.Append">
            <summary>
            追加到已存在日志文件或覆盖它们
            </summary>
        </member>
        <member name="P:Furion.Logging.FileLoggerSettings.FileSizeLimitBytes">
            <summary>
            控制每一个日志文件最大存储大小，默认无限制，单位是 B，也就是 1024 才等于 1KB
            </summary>
            <remarks>如果指定了该值，那么日志文件大小超出了该配置就会创建的日志文件，新创建的日志文件命名规则：文件名+[递增序号].log</remarks>
        </member>
        <member name="P:Furion.Logging.FileLoggerSettings.MaxRollingFiles">
            <summary>
            控制最大创建的日志文件数量，默认无限制，配合 <see cref="P:Furion.Logging.FileLoggerSettings.FileSizeLimitBytes"/> 使用
            </summary>
            <remarks>如果指定了该值，那么超出该值将从最初日志文件中从头写入覆盖</remarks>
        </member>
        <member name="P:Furion.Logging.FileLoggerSettings.MinimumLevel">
            <summary>
            最低日志记录级别
            </summary>
        </member>
        <member name="P:Furion.Logging.FileLoggerSettings.UseUtcTimestamp">
            <summary>
            是否使用 UTC 时间戳，默认 false
            </summary>
        </member>
        <member name="P:Furion.Logging.FileLoggerSettings.DateFormat">
            <summary>
            日期格式化
            </summary>
        </member>
        <member name="P:Furion.Logging.FileLoggerSettings.IncludeScopes">
            <summary>
            是否启用日志上下文
            </summary>
        </member>
        <member name="P:Furion.Logging.FileLoggerSettings.WithTraceId">
            <summary>
            显示跟踪/请求 Id
            </summary>
        </member>
        <member name="P:Furion.Logging.FileLoggerSettings.WithStackFrame">
            <summary>
            显示堆栈框架（程序集和方法签名）
            </summary>
        </member>
        <member name="T:Furion.Logging.FileLoggingWriter">
            <summary>
            文件日志写入器
            </summary>
        </member>
        <member name="F:Furion.Logging.FileLoggingWriter._fileLoggerProvider">
            <summary>
            文件日志记录器提供程序
            </summary>
        </member>
        <member name="F:Furion.Logging.FileLoggingWriter._options">
            <summary>
            日志配置选项
            </summary>
        </member>
        <member name="F:Furion.Logging.FileLoggingWriter._fileName">
            <summary>
            日志文件名
            </summary>
        </member>
        <member name="F:Furion.Logging.FileLoggingWriter._fileStream">
            <summary>
            文件流
            </summary>
        </member>
        <member name="F:Furion.Logging.FileLoggingWriter._textWriter">
            <summary>
            文本写入器
            </summary>
        </member>
        <member name="F:Furion.Logging.FileLoggingWriter.__LastBaseFileName">
            <summary>
            缓存上次返回的基本日志文件名，避免重复解析
            </summary>
        </member>
        <member name="F:Furion.Logging.FileLoggingWriter._isEnabledRollingFiles">
            <summary>
            判断是否启动滚动日志功能
            </summary>
        </member>
        <member name="M:Furion.Logging.FileLoggingWriter.#ctor(Furion.Logging.FileLoggerProvider)">
            <summary>
            构造函数
            </summary>
            <param name="fileLoggerProvider">文件日志记录器提供程序</param>
        </member>
        <member name="M:Furion.Logging.FileLoggingWriter.GetBaseFileName">
            <summary>
            获取日志基础文件名
            </summary>
            <returns>日志文件名</returns>
        </member>
        <member name="M:Furion.Logging.FileLoggingWriter.GetCurrentFileName">
            <summary>
            解析当前写入日志的文件名
            </summary>
        </member>
        <member name="M:Furion.Logging.FileLoggingWriter.GetNextFileName">
            <summary>
            获取下一个匹配的日志文件名
            </summary>
            <remarks>只有配置了 <see cref="P:Furion.Logging.FileLoggerOptions.FileSizeLimitBytes"/> 或 <see cref="P:Furion.Logging.FileLoggerOptions.FileNameRule"/> 或 <see cref="P:Furion.Logging.FileLoggerOptions.MaxRollingFiles"/> 有效</remarks>
            <returns>新的文件名</returns>
        </member>
        <member name="M:Furion.Logging.FileLoggingWriter.OpenFileAsync(System.Boolean)">
            <summary>
            打开文件
            </summary>
            <param name="append"></param>
            <returns><see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:Furion.Logging.FileLoggingWriter.CheckForNewLogFileAsync">
            <summary>
            判断是否需要创建新文件写入
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:Furion.Logging.FileLoggingWriter.DropFilesIfOverLimit(System.IO.FileInfo)">
            <summary>
            删除超出滚动日志限制的文件
            </summary>
            <param name="fileInfo"></param>
        </member>
        <member name="M:Furion.Logging.FileLoggingWriter.WriteAsync(Furion.Logging.LogMessage,System.Boolean)">
            <summary>
            写入文件
            </summary>
            <param name="logMsg">日志消息</param>
            <param name="flush"></param>
            <returns><see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:Furion.Logging.FileLoggingWriter.CloseAsync">
            <summary>
            关闭文本写入器并释放
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="T:Furion.Logging.FileWriteError">
            <summary>
            文件写入错误信息上下文
            </summary>
        </member>
        <member name="M:Furion.Logging.FileWriteError.#ctor(System.String,System.Exception)">
            <summary>
            构造函数
            </summary>
            <param name="currentFileName">当前日志文件名</param>
            <param name="exception">异常对象</param>
        </member>
        <member name="P:Furion.Logging.FileWriteError.CurrentFileName">
            <summary>
            当前日志文件名
            </summary>
        </member>
        <member name="P:Furion.Logging.FileWriteError.Exception">
            <summary>
            引起文件写入异常信息
            </summary>
        </member>
        <member name="P:Furion.Logging.FileWriteError.RollbackFileName">
            <summary>
            备用日志文件名
            </summary>
        </member>
        <member name="M:Furion.Logging.FileWriteError.UseRollbackFileName(System.String)">
            <summary>
            配置日志文件写入错误后新的备用日志文件名
            </summary>
            <param name="rollbackFileName">备用日志文件名</param>
        </member>
        <member name="T:Furion.Logging.LogContext">
            <summary>
            日志上下文
            </summary>
        </member>
        <member name="M:Furion.Logging.LogContext.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:Furion.Logging.LogContext.Properties">
            <summary>
            日志上下文数据
            </summary>
        </member>
        <member name="P:Furion.Logging.LogContext.Scopes">
            <summary>
            原生日志上下文数据
            </summary>
        </member>
        <member name="M:Furion.Logging.LogContext.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Furion.Logging.LogMessage">
            <summary>
            日志结构化消息
            </summary>
        </member>
        <member name="M:Furion.Logging.LogMessage.#ctor(System.String,Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,System.String,System.Exception,Furion.Logging.LogContext,System.Object,System.DateTime,System.Int32,System.Boolean,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="logName">记录器类别名称</param>
            <param name="logLevel">日志级别</param>
            <param name="eventId">事件 Id</param>
            <param name="message">日志消息</param>
            <param name="exception">异常对象</param>
            <param name="context">日志上下文</param>
            <param name="state">当前状态值</param>
            <param name="logDateTime">日志记录时间</param>
            <param name="threadId">线程 Id</param>
            <param name="useUtcTimestamp">是否使用 UTC 时间戳</param>
            <param name="traceId">请求/跟踪 Id</param>
        </member>
        <member name="P:Furion.Logging.LogMessage.LogName">
            <summary>
            记录器类别名称
            </summary>
        </member>
        <member name="P:Furion.Logging.LogMessage.LogLevel">
            <summary>
            日志级别
            </summary>
        </member>
        <member name="P:Furion.Logging.LogMessage.EventId">
            <summary>
            事件 Id
            </summary>
        </member>
        <member name="P:Furion.Logging.LogMessage.Message">
            <summary>
            日志消息
            </summary>
        </member>
        <member name="P:Furion.Logging.LogMessage.Exception">
            <summary>
            异常对象
            </summary>
        </member>
        <member name="P:Furion.Logging.LogMessage.State">
            <summary>
            当前状态值
            </summary>
            <remarks>可以是任意类型</remarks>
        </member>
        <member name="P:Furion.Logging.LogMessage.LogDateTime">
            <summary>
            日志记录时间
            </summary>
        </member>
        <member name="P:Furion.Logging.LogMessage.ThreadId">
            <summary>
            线程 Id
            </summary>
        </member>
        <member name="P:Furion.Logging.LogMessage.UseUtcTimestamp">
            <summary>
            是否使用 UTC 时间戳
            </summary>
        </member>
        <member name="P:Furion.Logging.LogMessage.TraceId">
            <summary>
            请求/跟踪 Id
            </summary>
        </member>
        <member name="P:Furion.Logging.LogMessage.Context">
            <summary>
            日志上下文
            </summary>
        </member>
        <member name="M:Furion.Logging.LogMessage.ToString">
            <summary>
            重写默认输出
            </summary>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="T:Furion.Logging.ContractResolverTypes">
            <summary>
            LoggingMonitor 序列化属性命名规则选项
            </summary>
        </member>
        <member name="F:Furion.Logging.ContractResolverTypes.CamelCase">
            <summary>
            CamelCase 小驼峰
            </summary>
            <remarks>默认值</remarks>
        </member>
        <member name="F:Furion.Logging.ContractResolverTypes.Default">
            <summary>
            保持原样
            </summary>
        </member>
        <member name="T:Furion.Logging.JsonBehavior">
            <summary>
            LoggingMonitor JSON 输出行为
            </summary>
        </member>
        <member name="F:Furion.Logging.JsonBehavior.None">
            <summary>
            不输出 JSON 格式
            </summary>
            <remarks>默认值，输出文本日志</remarks>
        </member>
        <member name="F:Furion.Logging.JsonBehavior.OnlyJson">
            <summary>
            只输出 JSON 格式
            </summary>
        </member>
        <member name="F:Furion.Logging.JsonBehavior.All">
            <summary>
            输出 JSON 格式和文本日志
            </summary>
        </member>
        <member name="T:Furion.Logging.JsonElementConverter">
            <summary>
            解决 JsonElement 问题
            </summary>
        </member>
        <member name="M:Furion.Logging.JsonElementConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Text.Json.JsonElement,System.Boolean,Newtonsoft.Json.JsonSerializer)">
            <summary>
            反序列化
            </summary>
            <param name="reader"></param>
            <param name="objectType"></param>
            <param name="existingValue"></param>
            <param name="hasExistingValue"></param>
            <param name="serializer"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Logging.JsonElementConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Text.Json.JsonElement,Newtonsoft.Json.JsonSerializer)">
            <summary>
            序列化
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="serializer"></param>
        </member>
        <member name="T:Furion.Logging.LoggingMonitorContext">
            <summary>
            LoggingMonitor 上下文
            </summary>
        </member>
        <member name="M:Furion.Logging.LoggingMonitorContext.Append(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            追加附加信息
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:Furion.Logging.LoggingMonitorContext.Append(System.Action{System.Collections.Generic.Dictionary{System.String,System.Object},Microsoft.AspNetCore.Http.HttpContext})">
            <summary>
            追加附加信息
            </summary>
            <param name="action"></param>
        </member>
        <member name="T:Furion.Logging.LoggingMonitorMethod">
            <summary>
            LoggingMonitor 方法配置
            </summary>
        </member>
        <member name="P:Furion.Logging.LoggingMonitorMethod.FullName">
            <summary>
            方法名称
            </summary>
            <remarks>完全限定名</remarks>
        </member>
        <member name="P:Furion.Logging.LoggingMonitorMethod.WithReturnValue">
            <summary>
            是否记录返回值
            </summary>
            <remarks>bool 类型，默认输出</remarks>
        </member>
        <member name="P:Furion.Logging.LoggingMonitorMethod.ReturnValueThreshold">
            <summary>
            设置返回值阈值
            </summary>
            <remarks>配置返回值字符串阈值，超过这个阈值将截断，默认全量输出</remarks>
        </member>
        <member name="P:Furion.Logging.LoggingMonitorMethod.JsonBehavior">
            <summary>
            配置 Json 输出行为
            </summary>
        </member>
        <member name="P:Furion.Logging.LoggingMonitorMethod.IgnorePropertyNames">
            <summary>
            配置序列化忽略的属性名称
            </summary>
        </member>
        <member name="P:Furion.Logging.LoggingMonitorMethod.IgnorePropertyTypes">
            <summary>
            配置序列化忽略的属性类型
            </summary>
        </member>
        <member name="P:Furion.Logging.LoggingMonitorMethod.JsonIndented">
            <summary>
            JSON 输出格式化
            </summary>
        </member>
        <member name="P:Furion.Logging.LoggingMonitorMethod.LongTypeConverter">
            <summary>
            是否处理 Long 转 String
            </summary>
        </member>
        <member name="P:Furion.Logging.LoggingMonitorMethod.ContractResolver">
            <summary>
            序列化属性命名规则（返回值）
            </summary>
        </member>
        <member name="T:Furion.Logging.LoggingMonitorSettings">
            <summary>
            日志监视器配置
            </summary>
            <remarks>默认配置节点：Logging:Monitor，支持自定义</remarks>
        </member>
        <member name="P:Furion.Logging.LoggingMonitorSettings.GlobalEnabled">
            <summary>
            全局启用
            </summary>
        </member>
        <member name="P:Furion.Logging.LoggingMonitorSettings.IncludeOfMethods">
            <summary>
            配置包含拦截的方法名列表（完全限定名格式：程序集名称.类名.方法名），注意无需添加参数签名
            </summary>
            <remarks>结合 <seealso cref="P:Furion.Logging.LoggingMonitorSettings.GlobalEnabled"/> 使用，当 <see cref="P:Furion.Logging.LoggingMonitorSettings.GlobalEnabled"/> 为 false 时有效，</remarks>
        </member>
        <member name="P:Furion.Logging.LoggingMonitorSettings.ExcludeOfMethods">
            <summary>
            配置排除拦截的方法名列表（完全限定名格式：程序集名称.类名.方法名），注意无需添加参数签名
            </summary>
            <remarks>结合 <seealso cref="P:Furion.Logging.LoggingMonitorSettings.GlobalEnabled"/> 使用，当 <see cref="P:Furion.Logging.LoggingMonitorSettings.GlobalEnabled"/> 为 true 时有效，</remarks>
        </member>
        <member name="P:Furion.Logging.LoggingMonitorSettings.MethodsSettings">
            <summary>
            配置方法更多信息
            </summary>
        </member>
        <member name="P:Furion.Logging.LoggingMonitorSettings.BahLogLevel">
            <summary>
            业务日志消息级别
            </summary>
            <remarks>控制 Oops.Oh 或 Oops.Bah 日志记录位置，默认写入 <see cref="F:Microsoft.Extensions.Logging.LogLevel.Information"/></remarks>
        </member>
        <member name="P:Furion.Logging.LoggingMonitorSettings.LogLevel">
            <summary>
            默认输出日志级别
            </summary>
        </member>
        <member name="P:Furion.Logging.LoggingMonitorSettings.WithReturnValue">
            <summary>
            是否记录返回值
            </summary>
            <remarks>bool 类型，默认输出</remarks>
        </member>
        <member name="P:Furion.Logging.LoggingMonitorSettings.ReturnValueThreshold">
            <summary>
            设置返回值阈值
            </summary>
            <remarks>配置返回值字符串阈值，超过这个阈值将截断，默认全量输出</remarks>
        </member>
        <member name="P:Furion.Logging.LoggingMonitorSettings.JsonBehavior">
            <summary>
            配置 Json 输出行为
            </summary>
        </member>
        <member name="P:Furion.Logging.LoggingMonitorSettings.ContractResolver">
            <summary>
            配置 序列化属性命名规则（返回值）
            </summary>
        </member>
        <member name="P:Furion.Logging.LoggingMonitorSettings.IgnorePropertyNames">
            <summary>
            配置序列化忽略的属性名称
            </summary>
        </member>
        <member name="P:Furion.Logging.LoggingMonitorSettings.IgnorePropertyTypes">
            <summary>
            配置序列化忽略的属性类型
            </summary>
        </member>
        <member name="P:Furion.Logging.LoggingMonitorSettings.WriteFilter">
            <summary>
            自定义日志筛选器
            </summary>
        </member>
        <member name="P:Furion.Logging.LoggingMonitorSettings.IsMvcFilterRegister">
            <summary>
            是否 Mvc Filter 方式注册
            </summary>
            <remarks>解决过去 Mvc Filter 全局注册的问题</remarks>
        </member>
        <member name="P:Furion.Logging.LoggingMonitorSettings.FromGlobalFilter">
            <summary>
            是否来自全局触发器
            </summary>
            <remarks>解决局部和全局触发器同时配置触发两次问题</remarks>
        </member>
        <member name="P:Furion.Logging.LoggingMonitorSettings.Configure">
            <summary>
            添加日志更多配置
            </summary>
        </member>
        <member name="P:Furion.Logging.LoggingMonitorSettings.InternalWriteFilter">
            <summary>
            自定义日志筛选器
            </summary>
        </member>
        <member name="M:Furion.Logging.LoggingMonitorSettings.ConfigureLogger(System.Action{Microsoft.Extensions.Logging.ILogger,Furion.Logging.LogContext,Microsoft.AspNetCore.Mvc.Filters.FilterContext})">
            <summary>
            配置日志更多功能
            </summary>
            <param name="configure"></param>
        </member>
        <member name="P:Furion.Logging.LoggingMonitorSettings.JsonIndented">
            <summary>
            JSON 输出格式化
            </summary>
        </member>
        <member name="P:Furion.Logging.LoggingMonitorSettings.LongTypeConverter">
            <summary>
            是否处理 Long 转 String
            </summary>
        </member>
        <member name="P:Furion.Logging.LoggingMonitorSettings.JsonWriterOptions">
            <summary>
            配置 Json 写入选项
            </summary>
        </member>
        <member name="T:Furion.Logging.CamelCasePropertyNamesContractResolverWithIgnoreProperties">
            <summary>
            支持忽略特定属性的 CamelCase 序列化
            </summary>
        </member>
        <member name="F:Furion.Logging.CamelCasePropertyNamesContractResolverWithIgnoreProperties._names">
            <summary>
            被忽略的属性名称
            </summary>
        </member>
        <member name="F:Furion.Logging.CamelCasePropertyNamesContractResolverWithIgnoreProperties._type">
            <summary>
            被忽略的属性类型
            </summary>
        </member>
        <member name="M:Furion.Logging.CamelCasePropertyNamesContractResolverWithIgnoreProperties.#ctor(System.String[],System.Type[])">
            <summary>
            构造函数
            </summary>
            <param name="names"></param>
            <param name="types"></param>
        </member>
        <member name="M:Furion.Logging.CamelCasePropertyNamesContractResolverWithIgnoreProperties.CreateProperties(System.Type,Newtonsoft.Json.MemberSerialization)">
            <summary>
            重写需要序列化的属性名
            </summary>
            <param name="type"></param>
            <param name="memberSerialization"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.Logging.DefaultContractResolverWithIgnoreProperties">
            <summary>
            支持忽略特定属性的 Default 序列化
            </summary>
        </member>
        <member name="F:Furion.Logging.DefaultContractResolverWithIgnoreProperties._names">
            <summary>
            被忽略的属性名称
            </summary>
        </member>
        <member name="F:Furion.Logging.DefaultContractResolverWithIgnoreProperties._type">
            <summary>
            被忽略的属性类型
            </summary>
        </member>
        <member name="M:Furion.Logging.DefaultContractResolverWithIgnoreProperties.#ctor(System.String[],System.Type[])">
            <summary>
            构造函数
            </summary>
            <param name="names"></param>
            <param name="types"></param>
        </member>
        <member name="M:Furion.Logging.DefaultContractResolverWithIgnoreProperties.CreateProperties(System.Type,Newtonsoft.Json.MemberSerialization)">
            <summary>
            重写需要序列化的属性名
            </summary>
            <param name="type"></param>
            <param name="memberSerialization"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.Logging.Penetrates">
            <summary>
            常量、公共方法配置类
            </summary>
        </member>
        <member name="F:Furion.Logging.Penetrates.EXCEPTION_SEPARATOR">
            <summary>
            异常分隔符
            </summary>
        </member>
        <member name="M:Furion.Logging.Penetrates.CreateFromConfiguration(System.Func{System.String},System.Action{Furion.Logging.FileLoggerOptions})">
            <summary>
            从配置文件中加载配置并创建文件日志记录器提供程序
            </summary>
            <param name="configuraionKey">获取配置文件对应的 Key</param>
            <param name="configure">文件日志记录器配置选项委托</param>
            <returns><see cref="T:Furion.Logging.FileLoggerProvider"/></returns>
        </member>
        <member name="M:Furion.Logging.Penetrates.CreateFromConfiguration(System.Func{System.String},System.Action{Furion.Logging.DatabaseLoggerOptions})">
            <summary>
            从配置文件中加载配置并创建数据库日志记录器提供程序
            </summary>
            <param name="configuraionKey">获取配置文件对应的 Key</param>
            <param name="configure">数据库日志记录器配置选项委托</param>
            <returns><see cref="T:Furion.Logging.DatabaseLoggerProvider"/></returns>
        </member>
        <member name="M:Furion.Logging.Penetrates.OutputStandardMessage(Furion.Logging.LogMessage,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            输出标准日志消息
            </summary>
            <param name="logMsg"></param>
            <param name="dateFormat"></param>
            <param name="disableColors"></param>
            <param name="isConsole"></param>
            <param name="withTraceId"></param>
            <param name="withStackFrame"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Logging.Penetrates.PadLeftAlign(System.String)">
            <summary>
            将日志内容进行对齐
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Logging.Penetrates.GetLogLevelString(Microsoft.Extensions.Logging.LogLevel)">
            <summary>
            获取日志级别短名称
            </summary>
            <param name="logLevel">日志级别</param>
            <returns></returns>
        </member>
        <member name="M:Furion.Logging.Penetrates.SetLogContext(Microsoft.Extensions.Logging.IExternalScopeProvider,System.Boolean)">
            <summary>
            获取日志上下文
            </summary>
            <param name="scopeProvider"></param>
            <param name="includeScopes"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Logging.Penetrates.AppendWithColor(System.Text.StringBuilder,System.String,Furion.Logging.ConsoleColors)">
            <summary>
            拓展 StringBuilder 增加带颜色写入
            </summary>
            <param name="message"></param>
            <param name="colors"></param>
            <param name="formatString"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Logging.Penetrates.GetForegroundColorEscapeCode(System.ConsoleColor)">
            <summary>
            输出控制台字体颜色 UniCode 码
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Logging.Penetrates.GetBackgroundColorEscapeCode(System.ConsoleColor)">
            <summary>
            输出控制台背景颜色 UniCode 码
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Logging.Penetrates.GetLogLevelConsoleColors(Microsoft.Extensions.Logging.LogLevel,System.Boolean)">
            <summary>
            获取控制台日志级别对应的颜色
            </summary>
            <param name="logLevel"></param>
            <param name="disableColors"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.Logging.StringLoggingPart">
            <summary>
            构建字符串日志部分类
            </summary>
            <summary>
            构建字符串日志部分类
            </summary>
            <summary>
            构建字符串日志部分类
            </summary>
        </member>
        <member name="M:Furion.Logging.StringLoggingPart.Default">
            <summary>
            静态缺省日志部件
            </summary>
        </member>
        <member name="P:Furion.Logging.StringLoggingPart.Message">
            <summary>
            日志内容
            </summary>
        </member>
        <member name="P:Furion.Logging.StringLoggingPart.Level">
            <summary>
            日志级别
            </summary>
        </member>
        <member name="P:Furion.Logging.StringLoggingPart.Args">
            <summary>
            消息格式化参数
            </summary>
        </member>
        <member name="P:Furion.Logging.StringLoggingPart.EventId">
            <summary>
            事件 Id
            </summary>
        </member>
        <member name="P:Furion.Logging.StringLoggingPart.CategoryType">
            <summary>
            日志分类类型
            </summary>
        </member>
        <member name="P:Furion.Logging.StringLoggingPart.Exception">
            <summary>
            异常对象
            </summary>
        </member>
        <member name="P:Furion.Logging.StringLoggingPart.LoggerScoped">
            <summary>
            日志对象所在作用域
            </summary>
        </member>
        <member name="P:Furion.Logging.StringLoggingPart.LogContext">
            <summary>
            日志上下文
            </summary>
        </member>
        <member name="M:Furion.Logging.StringLoggingPart.LogInformation">
            <summary>
            Information
            </summary>
        </member>
        <member name="M:Furion.Logging.StringLoggingPart.LogWarning">
            <summary>
            Warning
            </summary>
        </member>
        <member name="M:Furion.Logging.StringLoggingPart.LogError">
            <summary>
            Error
            </summary>
        </member>
        <member name="M:Furion.Logging.StringLoggingPart.LogDebug">
            <summary>
            Debug
            </summary>
        </member>
        <member name="M:Furion.Logging.StringLoggingPart.LogTrace">
            <summary>
            Trace
            </summary>
        </member>
        <member name="M:Furion.Logging.StringLoggingPart.LogCritical">
            <summary>
            Critical
            </summary>
        </member>
        <member name="M:Furion.Logging.StringLoggingPart.Log">
            <summary>
            写入日志
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.Logging.StringLoggingPart.GetLogger">
            <summary>
            获取日志实例
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.Logging.StringLoggingPart.CreateDisposeLoggerFactory">
            <summary>
            创建待释放的日志工厂
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.Logging.StringLoggingPart.SetMessage(System.String)">
            <summary>
            设置消息
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Furion.Logging.StringLoggingPart.SetLevel(Microsoft.Extensions.Logging.LogLevel)">
            <summary>
            设置日志级别
            </summary>
            <param name="level"></param>
        </member>
        <member name="M:Furion.Logging.StringLoggingPart.SetArgs(System.Object[])">
            <summary>
            设置消息格式化参数
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.StringLoggingPart.SetEventId(Microsoft.Extensions.Logging.EventId)">
            <summary>
            设置事件 Id
            </summary>
            <param name="eventId"></param>
        </member>
        <member name="M:Furion.Logging.StringLoggingPart.SetCategory``1">
            <summary>
            设置日志分类
            </summary>
            <typeparam name="TClass"></typeparam>
        </member>
        <member name="M:Furion.Logging.StringLoggingPart.SetException(System.Exception)">
            <summary>
            设置异常对象
            </summary>
        </member>
        <member name="M:Furion.Logging.StringLoggingPart.SetLoggerScoped(System.IServiceProvider)">
            <summary>
            设置日志服务作用域
            </summary>
            <param name="serviceProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Logging.StringLoggingPart.ScopeContext(System.Collections.Generic.IDictionary{System.Object,System.Object})">
            <summary>
            配置日志上下文
            </summary>
            <param name="properties">建议使用 ConcurrentDictionary 类型</param>
            <returns></returns>
        </member>
        <member name="M:Furion.Logging.StringLoggingPart.ScopeContext(System.Action{Furion.Logging.LogContext})">
            <summary>
            配置日志上下文
            </summary>
            <param name="configure"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Logging.StringLoggingPart.ScopeContext(Furion.Logging.LogContext)">
            <summary>
            配置日志上下文
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.Logging.Log">
            <summary>
            全局日志静态类
            </summary>
        </member>
        <member name="M:Furion.Logging.Log.Default">
            <summary>
            手动构建方式
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.Logging.Log.CreateLogger``1">
            <summary>
            创建日志记录器
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.Logging.Log.CreateLoggerFactory(System.Action{Microsoft.Extensions.Logging.ILoggingBuilder})">
            <summary>
            创建日志工厂
            </summary>
            <param name="configure">日志构建器</param>
            <remarks><see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/> 实现了 <see cref="T:System.IDisposable"/> 接口，注意使用 `using` 控制</remarks>
            <returns></returns>
        </member>
        <member name="M:Furion.Logging.Log.ScopeContext(System.Collections.Generic.IDictionary{System.Object,System.Object})">
            <summary>
            配置日志上下文
            </summary>
            <param name="properties">建议使用 ConcurrentDictionary 类型</param>
            <returns></returns>
        </member>
        <member name="M:Furion.Logging.Log.ScopeContext(System.Action{Furion.Logging.LogContext})">
            <summary>
            配置日志上下文
            </summary>
            <param name="configure"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Logging.Log.ScopeContext(Furion.Logging.LogContext)">
            <summary>
            配置日志上下文
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Logging.Log.Information(System.String,System.Object[])">
            <summary>
            LogInformation
            </summary>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Log.Information(System.String,Microsoft.Extensions.Logging.EventId,System.Object[])">
            <summary>
            LogInformation
            </summary>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Log.Information(System.String,System.Exception,System.Object[])">
            <summary>
            LogInformation
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Log.Information(System.String,Microsoft.Extensions.Logging.EventId,System.Exception,System.Object[])">
            <summary>
            LogInformation
            </summary>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Log.Information``1(System.String,System.Object[])">
            <summary>
            LogInformation
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Log.Information``1(System.String,Microsoft.Extensions.Logging.EventId,System.Object[])">
            <summary>
            LogInformation
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Log.Information``1(System.String,System.Exception,System.Object[])">
            <summary>
            LogInformation
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Log.Information``1(System.String,Microsoft.Extensions.Logging.EventId,System.Exception,System.Object[])">
            <summary>
            LogInformation
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Log.Warning(System.String,System.Object[])">
            <summary>
            LogWarning
            </summary>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Log.Warning(System.String,Microsoft.Extensions.Logging.EventId,System.Object[])">
            <summary>
            LogWarning
            </summary>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Log.Warning(System.String,System.Exception,System.Object[])">
            <summary>
            LogWarning
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Log.Warning(System.String,Microsoft.Extensions.Logging.EventId,System.Exception,System.Object[])">
            <summary>
            LogWarning
            </summary>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Log.Warning``1(System.String,System.Object[])">
            <summary>
            LogWarning
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Log.Warning``1(System.String,Microsoft.Extensions.Logging.EventId,System.Object[])">
            <summary>
            LogWarning
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Log.Warning``1(System.String,System.Exception,System.Object[])">
            <summary>
            LogWarning
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Log.Warning``1(System.String,Microsoft.Extensions.Logging.EventId,System.Exception,System.Object[])">
            <summary>
            LogWarning
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Log.Error(System.String,System.Object[])">
            <summary>
            LogError
            </summary>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Log.Error(System.String,Microsoft.Extensions.Logging.EventId,System.Object[])">
            <summary>
            LogError
            </summary>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Log.Error(System.String,System.Exception,System.Object[])">
            <summary>
            LogError
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Log.Error(System.String,Microsoft.Extensions.Logging.EventId,System.Exception,System.Object[])">
            <summary>
            LogError
            </summary>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Log.Error``1(System.String,System.Object[])">
            <summary>
            LogError
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Log.Error``1(System.String,Microsoft.Extensions.Logging.EventId,System.Object[])">
            <summary>
            LogError
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Log.Error``1(System.String,System.Exception,System.Object[])">
            <summary>
            LogError
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Log.Error``1(System.String,Microsoft.Extensions.Logging.EventId,System.Exception,System.Object[])">
            <summary>
            LogError
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Log.Debug(System.String,System.Object[])">
            <summary>
            LogDebug
            </summary>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Log.Debug(System.String,Microsoft.Extensions.Logging.EventId,System.Object[])">
            <summary>
            LogDebug
            </summary>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Log.Debug(System.String,System.Exception,System.Object[])">
            <summary>
            LogDebug
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Log.Debug(System.String,Microsoft.Extensions.Logging.EventId,System.Exception,System.Object[])">
            <summary>
            LogDebug
            </summary>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Log.Debug``1(System.String,System.Object[])">
            <summary>
            LogDebug
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Log.Debug``1(System.String,Microsoft.Extensions.Logging.EventId,System.Object[])">
            <summary>
            LogDebug
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Log.Debug``1(System.String,System.Exception,System.Object[])">
            <summary>
            LogDebug
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Log.Debug``1(System.String,Microsoft.Extensions.Logging.EventId,System.Exception,System.Object[])">
            <summary>
            LogDebug
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Log.Trace(System.String,System.Object[])">
            <summary>
            LogTrace
            </summary>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Log.Trace(System.String,Microsoft.Extensions.Logging.EventId,System.Object[])">
            <summary>
            LogTrace
            </summary>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Log.Trace(System.String,System.Exception,System.Object[])">
            <summary>
            LogTrace
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Log.Trace(System.String,Microsoft.Extensions.Logging.EventId,System.Exception,System.Object[])">
            <summary>
            LogTrace
            </summary>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Log.Trace``1(System.String,System.Object[])">
            <summary>
            LogTrace
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Log.Trace``1(System.String,Microsoft.Extensions.Logging.EventId,System.Object[])">
            <summary>
            LogTrace
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Log.Trace``1(System.String,System.Exception,System.Object[])">
            <summary>
            LogTrace
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Log.Trace``1(System.String,Microsoft.Extensions.Logging.EventId,System.Exception,System.Object[])">
            <summary>
            LogTrace
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Log.Critical(System.String,System.Object[])">
            <summary>
            LogCritical
            </summary>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Log.Critical(System.String,Microsoft.Extensions.Logging.EventId,System.Object[])">
            <summary>
            LogCritical
            </summary>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Log.Critical(System.String,System.Exception,System.Object[])">
            <summary>
            LogCritical
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Log.Critical(System.String,Microsoft.Extensions.Logging.EventId,System.Exception,System.Object[])">
            <summary>
            LogCritical
            </summary>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Log.Critical``1(System.String,System.Object[])">
            <summary>
            LogCritical
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Log.Critical``1(System.String,Microsoft.Extensions.Logging.EventId,System.Object[])">
            <summary>
            LogCritical
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Log.Critical``1(System.String,System.Exception,System.Object[])">
            <summary>
            LogCritical
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Log.Critical``1(System.String,Microsoft.Extensions.Logging.EventId,System.Exception,System.Object[])">
            <summary>
            LogCritical
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Log.GetLogger(Furion.Logging.StringLoggingPart)">
            <summary>
            获取日志实例
            </summary>
            <param name="loggingPart"></param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="T:Furion.Options.FailureMessageAttribute">
            <summary>
            选项校验失败消息特性
            </summary>
        </member>
        <member name="M:Furion.Options.FailureMessageAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="text">文本内容</param>
        </member>
        <member name="P:Furion.Options.FailureMessageAttribute.Text">
            <summary>
            文本内容
            </summary>
        </member>
        <member name="T:Furion.Options.OptionsBuilderAttribute">
            <summary>
            选项构建器特性
            </summary>
        </member>
        <member name="M:Furion.Options.OptionsBuilderAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.Options.OptionsBuilderAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="sectionKey">配置节点</param>
        </member>
        <member name="P:Furion.Options.OptionsBuilderAttribute.SectionKey">
            <summary>
            配置节点
            </summary>
        </member>
        <member name="P:Furion.Options.OptionsBuilderAttribute.ErrorOnUnknownConfiguration">
            <summary>
            未知配置节点抛异常
            </summary>
        </member>
        <member name="P:Furion.Options.OptionsBuilderAttribute.BindNonPublicProperties">
            <summary>
            绑定非公开属性
            </summary>
        </member>
        <member name="P:Furion.Options.OptionsBuilderAttribute.ValidateDataAnnotations">
            <summary>
            启用验证特性支持
            </summary>
        </member>
        <member name="P:Furion.Options.OptionsBuilderAttribute.ValidateOptionsTypes">
            <summary>
            验证选项类型
            </summary>
        </member>
        <member name="T:Furion.Options.OptionsBuilderMethodMapAttribute">
            <summary>
            选项构建器方法映射特性
            </summary>
        </member>
        <member name="M:Furion.Options.OptionsBuilderMethodMapAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="methodName">映射方法名</param>
            <param name="voidReturn">无返回值</param>
        </member>
        <member name="P:Furion.Options.OptionsBuilderMethodMapAttribute.MethodName">
            <summary>
            方法名称
            </summary>
        </member>
        <member name="P:Furion.Options.OptionsBuilderMethodMapAttribute.VoidReturn">
            <summary>
            有无返回值
            </summary>
        </member>
        <member name="T:Furion.Options.Constants">
            <summary>
            Options 模块常量
            </summary>
        </member>
        <member name="F:Furion.Options.Constants.OptionsTypeSuffix">
            <summary>
            Options 类型后缀
            </summary>
            <remarks>主要用于匹配配置节点，自动去掉该后缀</remarks>
        </member>
        <member name="T:Furion.Options.IConfigureOptionsBuilder`1">
            <summary>
            选项配置依赖接口
            </summary>
            <typeparam name="TOptions">选项类型</typeparam>
        </member>
        <member name="M:Furion.Options.IConfigureOptionsBuilder`1.Configure(`0)">
            <summary>
            选项配置
            </summary>
            <param name="options">选项实例</param>
        </member>
        <member name="T:Furion.Options.IConfigureOptionsBuilder`2">
            <summary>
            选项配置依赖接口
            </summary>
            <typeparam name="TOptions">选项类型</typeparam>
            <typeparam name="TDep">依赖服务</typeparam>
        </member>
        <member name="M:Furion.Options.IConfigureOptionsBuilder`2.Configure(`0,`1)">
            <summary>
            选项配置
            </summary>
            <param name="options">选项实例</param>
            <param name="dep">依赖服务</param>
        </member>
        <member name="T:Furion.Options.IConfigureOptionsBuilder`3">
            <summary>
            选项配置依赖接口
            </summary>
            <typeparam name="TOptions">选项类型</typeparam>
            <typeparam name="TDep1">依赖服务</typeparam>
            <typeparam name="TDep2">依赖服务</typeparam>
        </member>
        <member name="M:Furion.Options.IConfigureOptionsBuilder`3.Configure(`0,`1,`2)">
            <summary>
            选项配置
            </summary>
            <param name="options">选项实例</param>
            <param name="dep1">依赖服务</param>
            <param name="dep2">依赖服务</param>
        </member>
        <member name="T:Furion.Options.IConfigureOptionsBuilder`4">
            <summary>
            选项配置依赖接口
            </summary>
            <typeparam name="TOptions">选项类型</typeparam>
            <typeparam name="TDep1">依赖服务</typeparam>
            <typeparam name="TDep2">依赖服务</typeparam>
            <typeparam name="TDep3">依赖服务</typeparam>
        </member>
        <member name="M:Furion.Options.IConfigureOptionsBuilder`4.Configure(`0,`1,`2,`3)">
            <summary>
            选项配置
            </summary>
            <param name="options">选项实例</param>
            <param name="dep1">依赖服务</param>
            <param name="dep2">依赖服务</param>
            <param name="dep3">依赖服务</param>
        </member>
        <member name="T:Furion.Options.IConfigureOptionsBuilder`5">
            <summary>
            选项配置依赖接口
            </summary>
            <typeparam name="TOptions">选项类型</typeparam>
            <typeparam name="TDep1">依赖服务</typeparam>
            <typeparam name="TDep2">依赖服务</typeparam>
            <typeparam name="TDep3">依赖服务</typeparam>
            <typeparam name="TDep4">依赖服务</typeparam>
        </member>
        <member name="M:Furion.Options.IConfigureOptionsBuilder`5.Configure(`0,`1,`2,`3,`4)">
            <summary>
            选项配置
            </summary>
            <param name="options">选项实例</param>
            <param name="dep1">依赖服务</param>
            <param name="dep2">依赖服务</param>
            <param name="dep3">依赖服务</param>
            <param name="dep4">依赖服务</param>
        </member>
        <member name="T:Furion.Options.IConfigureOptionsBuilder`6">
            <summary>
            选项配置依赖接口
            </summary>
            <typeparam name="TOptions">选项类型</typeparam>
            <typeparam name="TDep1">依赖服务</typeparam>
            <typeparam name="TDep2">依赖服务</typeparam>
            <typeparam name="TDep3">依赖服务</typeparam>
            <typeparam name="TDep4">依赖服务</typeparam>
            <typeparam name="TDep5">依赖服务</typeparam>
        </member>
        <member name="M:Furion.Options.IConfigureOptionsBuilder`6.Configure(`0,`1,`2,`3,`4,`5)">
            <summary>
            选项配置
            </summary>
            <param name="options">选项实例</param>
            <param name="dep1">依赖服务</param>
            <param name="dep2">依赖服务</param>
            <param name="dep3">依赖服务</param>
            <param name="dep4">依赖服务</param>
            <param name="dep5">依赖服务</param>
        </member>
        <member name="T:Furion.Options.IOptionsBuilderDependency`1">
            <summary>
            选项构建器依赖接口
            </summary>
            <typeparam name="TOptions">选项类型</typeparam>
        </member>
        <member name="T:Furion.Options.IPostConfigureOptionsBuilder`1">
            <summary>
            选项后期配置依赖接口
            </summary>
            <typeparam name="TOptions">选项类型</typeparam>
        </member>
        <member name="M:Furion.Options.IPostConfigureOptionsBuilder`1.PostConfigure(`0)">
            <summary>
            选项后期配置
            </summary>
            <param name="options">选项实例</param>
        </member>
        <member name="T:Furion.Options.IPostConfigureOptionsBuilder`2">
            <summary>
            选项后期配置依赖接口
            </summary>
            <typeparam name="TOptions">选项类型</typeparam>
            <typeparam name="TDep">依赖服务</typeparam>
        </member>
        <member name="M:Furion.Options.IPostConfigureOptionsBuilder`2.PostConfigure(`0,`1)">
            <summary>
            选项后期配置
            </summary>
            <param name="options">选项实例</param>
            <param name="dep">依赖服务</param>
        </member>
        <member name="T:Furion.Options.IPostConfigureOptionsBuilder`3">
            <summary>
            选项后期配置依赖接口
            </summary>
            <typeparam name="TOptions">选项类型</typeparam>
            <typeparam name="TDep1">依赖服务</typeparam>
            <typeparam name="TDep2">依赖服务</typeparam>
        </member>
        <member name="M:Furion.Options.IPostConfigureOptionsBuilder`3.PostConfigure(`0,`1,`2)">
            <summary>
            选项后期配置
            </summary>
            <param name="options">选项实例</param>
            <param name="dep1">依赖服务</param>
            <param name="dep2">依赖服务</param>
        </member>
        <member name="T:Furion.Options.IPostConfigureOptionsBuilder`4">
            <summary>
            选项后期配置依赖接口
            </summary>
            <typeparam name="TOptions">选项类型</typeparam>
            <typeparam name="TDep1">依赖服务</typeparam>
            <typeparam name="TDep2">依赖服务</typeparam>
            <typeparam name="TDep3">依赖服务</typeparam>
        </member>
        <member name="M:Furion.Options.IPostConfigureOptionsBuilder`4.PostConfigure(`0,`1,`2,`3)">
            <summary>
            选项后期配置
            </summary>
            <param name="options">选项实例</param>
            <param name="dep1">依赖服务</param>
            <param name="dep2">依赖服务</param>
            <param name="dep3">依赖服务</param>
        </member>
        <member name="T:Furion.Options.IPostConfigureOptionsBuilder`5">
            <summary>
            选项后期配置依赖接口
            </summary>
            <typeparam name="TOptions">选项类型</typeparam>
            <typeparam name="TDep1">依赖服务</typeparam>
            <typeparam name="TDep2">依赖服务</typeparam>
            <typeparam name="TDep3">依赖服务</typeparam>
            <typeparam name="TDep4">依赖服务</typeparam>
        </member>
        <member name="M:Furion.Options.IPostConfigureOptionsBuilder`5.PostConfigure(`0,`1,`2,`3,`4)">
            <summary>
            选项后期配置
            </summary>
            <param name="options">选项实例</param>
            <param name="dep1">依赖服务</param>
            <param name="dep2">依赖服务</param>
            <param name="dep3">依赖服务</param>
            <param name="dep4">依赖服务</param>
        </member>
        <member name="T:Furion.Options.IPostConfigureOptionsBuilder`6">
            <summary>
            选项后期配置依赖接口
            </summary>
            <typeparam name="TOptions">选项类型</typeparam>
            <typeparam name="TDep1">依赖服务</typeparam>
            <typeparam name="TDep2">依赖服务</typeparam>
            <typeparam name="TDep3">依赖服务</typeparam>
            <typeparam name="TDep4">依赖服务</typeparam>
            <typeparam name="TDep5">依赖服务</typeparam>
        </member>
        <member name="M:Furion.Options.IPostConfigureOptionsBuilder`6.PostConfigure(`0,`1,`2,`3,`4,`5)">
            <summary>
            选项后期配置
            </summary>
            <param name="options">选项实例</param>
            <param name="dep1">依赖服务</param>
            <param name="dep2">依赖服务</param>
            <param name="dep3">依赖服务</param>
            <param name="dep4">依赖服务</param>
            <param name="dep5">依赖服务</param>
        </member>
        <member name="T:Furion.Options.IValidateOptionsBuilder`1">
            <summary>
            选项验证依赖接口
            </summary>
            <typeparam name="TOptions">选项类型</typeparam>
        </member>
        <member name="M:Furion.Options.IValidateOptionsBuilder`1.Validate(`0)">
            <summary>
            复杂验证
            </summary>
            <param name="options">选项实例</param>
        </member>
        <member name="T:Furion.Options.IValidateOptionsBuilder`2">
            <summary>
            选项验证依赖接口
            </summary>
            <typeparam name="TOptions">选项类型</typeparam>
            <typeparam name="TDep">依赖服务</typeparam>
        </member>
        <member name="M:Furion.Options.IValidateOptionsBuilder`2.Validate(`0,`1)">
            <summary>
            复杂验证
            </summary>
            <param name="options">选项实例</param>
            <param name="dep">依赖服务</param>
        </member>
        <member name="T:Furion.Options.IValidateOptionsBuilder`3">
            <summary>
            选项验证依赖接口
            </summary>
            <typeparam name="TOptions">选项类型</typeparam>
            <typeparam name="TDep1">依赖服务</typeparam>
            <typeparam name="TDep2">依赖服务</typeparam>
        </member>
        <member name="M:Furion.Options.IValidateOptionsBuilder`3.Validate(`0,`1,`2)">
            <summary>
            复杂验证
            </summary>
            <param name="options">选项实例</param>
            <param name="dep1">依赖服务</param>
            <param name="dep2">依赖服务</param>
        </member>
        <member name="T:Furion.Options.IValidateOptionsBuilder`4">
            <summary>
            选项验证依赖接口
            </summary>
            <typeparam name="TOptions">选项类型</typeparam>
            <typeparam name="TDep1">依赖服务</typeparam>
            <typeparam name="TDep2">依赖服务</typeparam>
            <typeparam name="TDep3">依赖服务</typeparam>
        </member>
        <member name="M:Furion.Options.IValidateOptionsBuilder`4.Validate(`0,`1,`2,`3)">
            <summary>
            复杂验证
            </summary>
            <param name="options">选项实例</param>
            <param name="dep1">依赖服务</param>
            <param name="dep2">依赖服务</param>
            <param name="dep3">依赖服务</param>
        </member>
        <member name="T:Furion.Options.IValidateOptionsBuilder`5">
            <summary>
            选项验证依赖接口
            </summary>
            <typeparam name="TOptions">选项类型</typeparam>
            <typeparam name="TDep1">依赖服务</typeparam>
            <typeparam name="TDep2">依赖服务</typeparam>
            <typeparam name="TDep3">依赖服务</typeparam>
            <typeparam name="TDep4">依赖服务</typeparam>
        </member>
        <member name="M:Furion.Options.IValidateOptionsBuilder`5.Validate(`0,`1,`2,`3,`4)">
            <summary>
            复杂验证
            </summary>
            <param name="options">选项实例</param>
            <param name="dep1">依赖服务</param>
            <param name="dep2">依赖服务</param>
            <param name="dep3">依赖服务</param>
            <param name="dep4">依赖服务</param>
        </member>
        <member name="T:Furion.Options.IValidateOptionsBuilder`6">
            <summary>
            选项验证依赖接口
            </summary>
            <typeparam name="TOptions">选项类型</typeparam>
            <typeparam name="TDep1">依赖服务</typeparam>
            <typeparam name="TDep2">依赖服务</typeparam>
            <typeparam name="TDep3">依赖服务</typeparam>
            <typeparam name="TDep4">依赖服务</typeparam>
            <typeparam name="TDep5">依赖服务</typeparam>
        </member>
        <member name="M:Furion.Options.IValidateOptionsBuilder`6.Validate(`0,`1,`2,`3,`4,`5)">
            <summary>
            复杂验证
            </summary>
            <param name="options">选项实例</param>
            <param name="dep1">依赖服务</param>
            <param name="dep2">依赖服务</param>
            <param name="dep3">依赖服务</param>
            <param name="dep4">依赖服务</param>
            <param name="dep5">依赖服务</param>
        </member>
        <member name="T:Furion.Reflection.ClassProxyGenerator`1">
            <summary>
            Class 代理类生成器
            </summary>
            <typeparam name="TClass">代理类型</typeparam>
        </member>
        <member name="F:Furion.Reflection.ClassProxyGenerator`1._assembly">
            <summary>
            代理程序集
            </summary>
        </member>
        <member name="F:Furion.Reflection.ClassProxyGenerator`1._interfaceType">
            <summary>
            代理接口
            </summary>
        </member>
        <member name="M:Furion.Reflection.ClassProxyGenerator`1.#cctor">
            <summary>
            静态构造函数
            </summary>
            <remarks>用来缓存类型生成鸭子类型</remarks>
        </member>
        <member name="M:Furion.Reflection.ClassProxyGenerator`1.Decorate``1(`0,System.Collections.Generic.Dictionary{System.Object,System.Object})">
            <summary>
            创建代理对象
            </summary>
            <typeparam name="TProxy"><see cref="T:Furion.Reflection.DynamicDispatchProxy"/> 派生类</typeparam>
            <param name="target">代理实例</param>
            <param name="properties">额外数据</param>
            <returns><see cref="T:System.Object"/></returns>
        </member>
        <member name="M:Furion.Reflection.ClassProxyGenerator`1.CompileCSharpClassCode(System.String,System.String,System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            编译 C# 类定义代码
            </summary>
            <param name="csharpCode">字符串代码</param>
            <param name="assemblyName">自定义程序集名称</param>
            <param name="additionalAssemblies">附加的程序集</param>
            <returns><see cref="T:System.Reflection.Assembly"/></returns>
        </member>
        <member name="M:Furion.Reflection.ClassProxyGenerator`1.TypeConvertToRawString(System.Type)">
            <summary>
            转换类型为字符串定义方式
            </summary>
            <param name="type">类型</param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="F:Furion.Reflection.ClassProxyGenerator`1.DUCK_CLASS_TYPE_TEMPLATE">
            <summary>
            代理类模板常量
            </summary>
        </member>
        <member name="F:Furion.Reflection.ClassProxyGenerator`1.DUCK_METHOD_TEMPLATE">
            <summary>
            代理方法模板常量
            </summary>
        </member>
        <member name="F:Furion.Reflection.ClassProxyGenerator`1.DUCK_CONSTRUCTOR_TEMPLATE">
            <summary>
            代理构造函数模板常量
            </summary>
        </member>
        <member name="T:Furion.Reflection.DynamicDispatchProxy">
            <summary>
            <see cref="T:System.Reflection.DispatchProxy"/> 重写抽象类
            </summary>
            <remarks>解决 <see cref="T:System.Reflection.DispatchProxy"/> 不支持异步问题</remarks>
        </member>
        <member name="M:Furion.Reflection.DynamicDispatchProxy.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:Furion.Reflection.DynamicDispatchProxy.Target">
            <summary>
            代理实例
            </summary>
        </member>
        <member name="P:Furion.Reflection.DynamicDispatchProxy.Properties">
            <summary>
            额外数据
            </summary>
        </member>
        <member name="M:Furion.Reflection.DynamicDispatchProxy.Decorate(System.Type,System.Type,System.Object,System.Collections.Generic.Dictionary{System.Object,System.Object})">
            <summary>
            创建代理对象
            </summary>
            <param name="interfaceType">接口</param>
            <param name="proxyType"><see cref="T:Furion.Reflection.DynamicDispatchProxy"/> 派生类</param>
            <param name="target">代理实例</param>
            <param name="properties">额外数据</param>
            <returns><see cref="T:System.Object"/></returns>
        </member>
        <member name="M:Furion.Reflection.DynamicDispatchProxy.Decorate``2(System.Object,System.Collections.Generic.Dictionary{System.Object,System.Object})">
            <summary>
            创建代理对象
            </summary>
            <typeparam name="TService">接口</typeparam>
            <typeparam name="TProxy"><see cref="T:Furion.Reflection.DynamicDispatchProxy"/> 派生类</typeparam>
            <param name="target">代理实例</param>
            <param name="properties">额外数据</param>
            <returns>接口对象</returns>
        </member>
        <member name="M:Furion.Reflection.DynamicDispatchProxy.DecorateClass``2(``0,System.Collections.Generic.Dictionary{System.Object,System.Object})">
            <summary>
            创建代理对象
            </summary>
            <typeparam name="TClass"></typeparam>
            <typeparam name="TProxy"><see cref="T:Furion.Reflection.DynamicDispatchProxy"/> 派生类</typeparam>
            <param name="target">代理实例</param>
            <param name="properties">额外数据</param>
            <returns>代理实例</returns>
        </member>
        <member name="M:Furion.Reflection.DynamicDispatchProxy.DecorateClass(System.Type,System.Object,System.Collections.Generic.Dictionary{System.Object,System.Object})">
            <summary>
            创建代理对象
            </summary>
            <param name="proxyType"><see cref="T:Furion.Reflection.DynamicDispatchProxy"/> 派生类</param>
            <param name="target">代理实例</param>
            <param name="properties">额外数据</param>
            <returns>代理实例</returns>
        </member>
        <member name="M:Furion.Reflection.DynamicDispatchProxy.Invoke(Furion.Reflection.Invocation)">
            <summary>
            同步拦截
            </summary>
            <param name="invocation"><see cref="T:Furion.Reflection.Invocation"/></param>
            <returns><see cref="T:System.Object"/></returns>
        </member>
        <member name="M:Furion.Reflection.DynamicDispatchProxy.InvokeAsync(Furion.Reflection.Invocation)">
            <summary>
            异步拦截
            </summary>
            <param name="invocation"><see cref="T:Furion.Reflection.Invocation"/></param>
            <returns><see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:Furion.Reflection.DynamicDispatchProxy.InvokeAsync``1(Furion.Reflection.Invocation)">
            <summary>
            异步带返回值拦截
            </summary>
            <typeparam name="T">泛型值</typeparam>
            <param name="invocation"><see cref="T:Furion.Reflection.Invocation"/></param>
            <returns><see cref="T:System.Threading.Tasks.Task`1"/></returns>
        </member>
        <member name="M:Furion.Reflection.DynamicDispatchProxy.Invoke(System.Reflection.MethodInfo,System.Object[])">
            <summary>
            重写拦截调用方法
            </summary>
            <param name="targetMethod">接口方法</param>
            <param name="args">调用参数</param>
            <returns><see cref="T:System.Object"/></returns>
        </member>
        <member name="F:Furion.Reflection.DynamicDispatchProxy._decorateMethod">
            <summary>
            <see cref="M:Furion.Reflection.DynamicDispatchProxy.Decorate``2(System.Object,System.Collections.Generic.Dictionary{System.Object,System.Object})"/> 泛型方法
            </summary>
        </member>
        <member name="F:Furion.Reflection.DynamicDispatchProxy._decorateClassMethod">
            <summary>
            <see cref="M:Furion.Reflection.DynamicDispatchProxy.DecorateClass``2(``0,System.Collections.Generic.Dictionary{System.Object,System.Object})"/> 泛型方法
            </summary>
        </member>
        <member name="F:Furion.Reflection.DynamicDispatchProxy._invokeAsyncOfTMethod">
            <summary>
            <see cref="M:Furion.Reflection.DynamicDispatchProxy.InvokeAsync``1(Furion.Reflection.Invocation)"/> 泛型方法
            </summary>
        </member>
        <member name="T:Furion.Reflection.Invocation">
            <summary>
            方法调用器
            </summary>
            <remarks>负责动态调用方法</remarks>
        </member>
        <member name="M:Furion.Reflection.Invocation.#ctor(System.Reflection.MethodInfo,System.Object[],System.Object,System.Collections.Generic.Dictionary{System.Object,System.Object})">
            <summary>
            构造函数
            </summary>
            <param name="targetMethod">接口方法</param>
            <param name="args">调用参数</param>
            <param name="target">代理实例</param>
            <param name="properties">额外数据</param>
        </member>
        <member name="P:Furion.Reflection.Invocation.Target">
            <summary>
            代理实例
            </summary>
        </member>
        <member name="P:Furion.Reflection.Invocation.Method">
            <summary>
            调用方法
            </summary>
        </member>
        <member name="P:Furion.Reflection.Invocation.TargetMethod">
            <summary>
            接口方法
            </summary>
        </member>
        <member name="P:Furion.Reflection.Invocation.Args">
            <summary>
            调用参数
            </summary>
        </member>
        <member name="P:Furion.Reflection.Invocation.Properties">
            <summary>
            额外数据
            </summary>
        </member>
        <member name="M:Furion.Reflection.Invocation.Proceed">
            <summary>
            调用同步方法
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.Reflection.Invocation.ProceedAsync">
            <summary>
            调用异步方法
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.Reflection.Invocation.ProceedAsync``1">
            <summary>
            调用异步方法带返回值
            </summary>
            <typeparam name="T">泛型值</typeparam>
            <returns><see cref="T:System.Threading.Tasks.Task`1"/></returns>
        </member>
        <member name="T:Furion.Reflection.Extensions.MethodInfoExtensions">
            <summary>
            Method Info 拓展
            </summary>
        </member>
        <member name="M:Furion.Reflection.Extensions.MethodInfoExtensions.GetActualCustomAttributes(System.Reflection.MethodInfo,System.Object)">
            <summary>
            获取真实方法的特性集合
            </summary>
            <param name="method"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Reflection.Extensions.MethodInfoExtensions.GetActualCustomAttributes(System.Reflection.MethodInfo,System.Object,System.Boolean)">
            <summary>
            获取真实方法的特性集合
            </summary>
            <param name="method"></param>
            <param name="target"></param>
            <param name="inherit"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Reflection.Extensions.MethodInfoExtensions.GetActualCustomAttributes(System.Reflection.MethodInfo,System.Object,System.Type)">
            <summary>
            获取真实方法的特性集合
            </summary>
            <param name="method"></param>
            <param name="target"></param>
            <param name="attributeType"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Reflection.Extensions.MethodInfoExtensions.GetActualCustomAttributes(System.Reflection.MethodInfo,System.Object,System.Type,System.Boolean)">
            <summary>
            获取真实方法的特性集合
            </summary>
            <param name="method"></param>
            <param name="target"></param>
            <param name="attributeType"></param>
            <param name="inherit"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Reflection.Extensions.MethodInfoExtensions.GetActualCustomAttributes``1(System.Reflection.MethodInfo,System.Object)">
            <summary>
            获取真实方法的特性集合
            </summary>
            <param name="method"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Reflection.Extensions.MethodInfoExtensions.GetActualCustomAttributes``1(System.Reflection.MethodInfo,System.Object,System.Boolean)">
            <summary>
            获取真实方法的特性集合
            </summary>
            <param name="method"></param>
            <param name="target"></param>
            <param name="inherit"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Reflection.Extensions.MethodInfoExtensions.GetActualCustomAttribute(System.Reflection.MethodInfo,System.Object,System.Type)">
            <summary>
            获取真实方法的特性
            </summary>
            <param name="method"></param>
            <param name="target"></param>
            <param name="attributeType"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Reflection.Extensions.MethodInfoExtensions.GetActualCustomAttribute(System.Reflection.MethodInfo,System.Object,System.Type,System.Boolean)">
            <summary>
            获取真实方法的特性
            </summary>
            <param name="method"></param>
            <param name="target"></param>
            <param name="attributeType"></param>
            <param name="inherit"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Reflection.Extensions.MethodInfoExtensions.GetActualCustomAttribute``1(System.Reflection.MethodInfo,System.Object)">
            <summary>
            获取真实方法的特性
            </summary>
            <param name="method"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Reflection.Extensions.MethodInfoExtensions.GetActualCustomAttribute``1(System.Reflection.MethodInfo,System.Object,System.Boolean)">
            <summary>
            获取真实方法的特性
            </summary>
            <param name="method"></param>
            <param name="target"></param>
            <param name="inherit"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Reflection.Extensions.MethodInfoExtensions.GetActualMethodInfo(System.Reflection.MethodInfo,System.Object)">
            <summary>
            获取实际方法对象
            </summary>
            <param name="method"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.Reflection.MethodParameterInfo">
            <summary>
            方法参数信息
            </summary>
        </member>
        <member name="P:Furion.Reflection.MethodParameterInfo.Parameter">
            <summary>
            参数
            </summary>
        </member>
        <member name="P:Furion.Reflection.MethodParameterInfo.Name">
            <summary>
            参数名
            </summary>
        </member>
        <member name="P:Furion.Reflection.MethodParameterInfo.Value">
            <summary>
            参数值
            </summary>
        </member>
        <member name="T:Furion.Reflection.AspectDispatchProxy">
            <summary>
            异步代理分发类
            </summary>
        </member>
        <member name="M:Furion.Reflection.AspectDispatchProxy.Create``2">
            <summary>
            创建代理
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProxy"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Furion.Reflection.AspectDispatchProxy.Invoke(System.Reflection.MethodInfo,System.Object[])">
            <summary>
            执行同步代理
            </summary>
            <param name="method"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Reflection.AspectDispatchProxy.InvokeAsync(System.Reflection.MethodInfo,System.Object[])">
            <summary>
            执行异步代理
            </summary>
            <param name="method"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Reflection.AspectDispatchProxy.InvokeAsyncT``1(System.Reflection.MethodInfo,System.Object[])">
            <summary>
            执行异步返回 Task{T} 代理
            </summary>
            <typeparam name="T"></typeparam>
            <param name="method"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.Reflection.AspectDispatchProxyGenerator">
            <summary>
            异步分发代理生成器
            </summary>
        </member>
        <member name="T:Furion.Reflection.DispatchProxyHandler">
            <summary>
            代理分发处理
            </summary>
        </member>
        <member name="M:Furion.Reflection.DispatchProxyHandler.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.Reflection.DispatchProxyHandler.InvokeHandle(System.Object[])">
            <summary>
            同步处理
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Reflection.DispatchProxyHandler.InvokeAsyncHandle(System.Object[])">
            <summary>
            异步处理
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Reflection.DispatchProxyHandler.InvokeAsyncHandleT``1(System.Object[])">
            <summary>
            异步带返回值处理
            </summary>
            <typeparam name="T"></typeparam>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.Reflection.IDispatchProxy">
            <summary>
            代理拦截依赖接口
            </summary>
        </member>
        <member name="P:Furion.Reflection.IDispatchProxy.Target">
            <summary>
            实例
            </summary>
        </member>
        <member name="P:Furion.Reflection.IDispatchProxy.Services">
            <summary>
            服务提供器
            </summary>
        </member>
        <member name="T:Furion.Reflection.IGlobalDispatchProxy">
            <summary>
            全局代理拦截接口
            </summary>
        </member>
        <member name="T:Furion.Reflection.Reflect">
            <summary>
            内部反射静态类
            </summary>
        </member>
        <member name="M:Furion.Reflection.Reflect.GetEntryAssembly">
            <summary>
            获取入口程序集
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.Reflection.Reflect.GetAssembly(System.String)">
            <summary>
            根据程序集名称获取运行时程序集
            </summary>
            <param name="assemblyName"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Reflection.Reflect.LoadAssembly(System.String)">
            <summary>
            根据路径加载程序集
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Reflection.Reflect.LoadAssembly(System.IO.MemoryStream)">
            <summary>
            通过流加载程序集
            </summary>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Reflection.Reflect.GetType(System.String,System.String)">
            <summary>
            根据程序集名称、类型完整限定名获取运行时类型
            </summary>
            <param name="assemblyName"></param>
            <param name="typeFullName"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Reflection.Reflect.GetType(System.Reflection.Assembly,System.String)">
            <summary>
            根据程序集和类型完全限定名获取运行时类型
            </summary>
            <param name="assembly"></param>
            <param name="typeFullName"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Reflection.Reflect.GetType(System.IO.MemoryStream,System.String)">
            <summary>
            根据程序集和类型完全限定名获取运行时类型
            </summary>
            <param name="assembly"></param>
            <param name="typeFullName"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Reflection.Reflect.GetAssemblyName(System.Reflection.Assembly)">
            <summary>
            获取程序集名称
            </summary>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Reflection.Reflect.GetAssemblyName(System.Type)">
            <summary>
            获取程序集名称
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Reflection.Reflect.GetAssemblyName(System.Reflection.TypeInfo)">
            <summary>
            获取程序集名称
            </summary>
            <param name="typeInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Reflection.Reflect.GetStringType(System.String)">
            <summary>
            加载程序集类型，支持格式：程序集;完全限定的类型名称
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.Reflection.ObjectPropertyGetter`1">
            <summary>
                创建对象类型实例属性值访问器
            </summary>
            <typeparam name="T">对象类型</typeparam>
        </member>
        <member name="F:Furion.Reflection.ObjectPropertyGetter`1._defaultBindingFlags">
            <summary>
                反射搜索成员方式
            </summary>
        </member>
        <member name="F:Furion.Reflection.ObjectPropertyGetter`1._propertyGetters">
            <summary>
                对象类型实例属性值访问器集合
            </summary>
        </member>
        <member name="M:Furion.Reflection.ObjectPropertyGetter`1.#ctor(System.Nullable{System.Reflection.BindingFlags})">
            <summary>
                <inheritdoc cref="T:Furion.Reflection.ObjectPropertyGetter`1" />
            </summary>
            <param name="bindingFlags">反射搜索成员方式</param>
        </member>
        <member name="M:Furion.Reflection.ObjectPropertyGetter`1.Initialize(System.Nullable{System.Reflection.BindingFlags})">
            <summary>
                初始化对象类型实例属性值访问器
            </summary>
            <param name="bindingFlags">反射搜索成员方式</param>
        </member>
        <member name="M:Furion.Reflection.ObjectPropertyGetter`1.TryGetPropertyGetter(System.String,System.Func{System.Object,System.Object}@)">
            <summary>
                尝试获取属性值访问器
            </summary>
            <param name="propertyName">属性名称</param>
            <param name="propertyGetter">属性值访问器</param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:Furion.Reflection.ObjectPropertyGetter`1.GetPropertyGetter(System.String)">
            <summary>
                获取属性值访问器
            </summary>
            <param name="propertyName">属性名称</param>
            <returns>
                <see cref="T:System.Func`2" />
            </returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Furion.Reflection.ObjectPropertyGetter`1.GetPropertyGetters">
            <summary>
                获取属性值访问器集合
            </summary>
            <returns>
                <see cref="T:System.Collections.Generic.IDictionary`2" />
            </returns>
        </member>
        <member name="M:Furion.Reflection.ObjectPropertyGetter`1.GetPropertyValue(System.Object,System.String)">
            <summary>
                获取属性值
            </summary>
            <param name="instance"><typeparamref name="T" /> 类型实例</param>
            <param name="propertyName">属性名称</param>
            <returns>
                <see cref="T:System.Object" />
            </returns>
        </member>
        <member name="M:Furion.Reflection.ObjectPropertyGetter`1.GetPropertyValue``1(System.Object,System.String)">
            <summary>
                获取属性值
            </summary>
            <param name="instance"><typeparamref name="T" /> 类型实例</param>
            <param name="propertyName">属性名称</param>
            <typeparam name="TProperty">属性值目标类型</typeparam>
            <returns>
                <typeparamref name="TProperty" />
            </returns>
        </member>
        <member name="T:Furion.Reflection.ObjectPropertySetter`1">
            <summary>
                创建对象类型实例属性值设置器
            </summary>
            <typeparam name="T">对象类型</typeparam>
        </member>
        <member name="F:Furion.Reflection.ObjectPropertySetter`1._defaultBindingFlags">
            <summary>
                反射搜索成员方式
            </summary>
        </member>
        <member name="F:Furion.Reflection.ObjectPropertySetter`1._propertySetters">
            <summary>
                对象类型实例属性值设置器集合
            </summary>
        </member>
        <member name="M:Furion.Reflection.ObjectPropertySetter`1.#ctor(System.Nullable{System.Reflection.BindingFlags})">
            <summary>
                <inheritdoc cref="T:Furion.Reflection.ObjectPropertySetter`1" />
            </summary>
            <param name="bindingFlags">反射搜索成员方式</param>
        </member>
        <member name="M:Furion.Reflection.ObjectPropertySetter`1.Initialize(System.Nullable{System.Reflection.BindingFlags})">
            <summary>
                初始化对象类型实例属性值设置器
            </summary>
            <param name="bindingFlags">反射搜索成员方式</param>
        </member>
        <member name="M:Furion.Reflection.ObjectPropertySetter`1.TryGetPropertySetter(System.String,System.Action{System.Object,System.Object}@)">
            <summary>
                尝试获取属性值设置器
            </summary>
            <param name="propertyName">属性名称</param>
            <param name="propertySetter">属性值设置器</param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:Furion.Reflection.ObjectPropertySetter`1.GetPropertySetter(System.String)">
            <summary>
                获取属性值设置器
            </summary>
            <param name="propertyName">属性名称</param>
            <returns>
                <see cref="T:System.Action`2" />
            </returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Furion.Reflection.ObjectPropertySetter`1.GetPropertySetters">
            <summary>
                获取属性值设置器集合
            </summary>
            <returns>
                <see cref="T:System.Collections.Generic.IDictionary`2" />
            </returns>
        </member>
        <member name="M:Furion.Reflection.ObjectPropertySetter`1.SetPropertyValue(System.Object,System.String,System.Object)">
            <summary>
                获取属性值
            </summary>
            <param name="instance"><typeparamref name="T" /> 类型实例</param>
            <param name="propertyName">属性名称</param>
            <param name="propertyValue">属性值</param>
        </member>
        <member name="T:Furion.Schedule.CronAttribute">
            <summary>
            Cron 表达式作业触发器特性
            </summary>
        </member>
        <member name="M:Furion.Schedule.CronAttribute.#ctor(System.String,Furion.TimeCrontab.CronStringFormat)">
            <summary>
            构造函数
            </summary>
            <param name="schedule">Cron 表达式</param>
            <param name="format">Cron 表达式格式化类型</param>
        </member>
        <member name="M:Furion.Schedule.CronAttribute.#ctor(System.String,System.Object)">
            <summary>
            构造函数
            </summary>
            <param name="schedule">Cron 表达式</param>
            <param name="args">动态参数类型，支持 <see cref="T:System.Int32"/>，<see cref="T:Furion.TimeCrontab.CronStringFormat"/> 和 object[]</param>
        </member>
        <member name="T:Furion.Schedule.JobDetailAttribute">
            <summary>
            配置作业信息特性
            </summary>
            <remarks>仅限 <see cref="T:Furion.Schedule.IJob"/> 实现类使用</remarks>
        </member>
        <member name="M:Furion.Schedule.JobDetailAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="jobId">作业 Id</param>
        </member>
        <member name="M:Furion.Schedule.JobDetailAttribute.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="jobId">作业 Id</param>
            <param name="description">作业描述</param>
        </member>
        <member name="M:Furion.Schedule.JobDetailAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="jobId">作业 Id</param>
            <param name="concurrent">并行/串行</param>
        </member>
        <member name="M:Furion.Schedule.JobDetailAttribute.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="jobId">作业 Id</param>
             <param name="concurrent">并行/串行</param>
            <param name="description">作业描述</param>
        </member>
        <member name="P:Furion.Schedule.JobDetailAttribute.JobId">
            <summary>
            作业 Id
            </summary>
        </member>
        <member name="P:Furion.Schedule.JobDetailAttribute.GroupName">
            <summary>
            作业组名称
            </summary>
        </member>
        <member name="P:Furion.Schedule.JobDetailAttribute.Description">
            <summary>
            描述信息
            </summary>
        </member>
        <member name="P:Furion.Schedule.JobDetailAttribute.Concurrent">
            <summary>
            是否采用并行执行
            </summary>
            <remarks>如果设置为 false，那么使用串行执行</remarks>
        </member>
        <member name="T:Furion.Schedule.DailyAtAttribute">
            <summary>
            每天特定小时开始作业触发器特性
            </summary>
        </member>
        <member name="M:Furion.Schedule.DailyAtAttribute.#ctor(System.Object[])">
            <summary>
            构造函数
            </summary>
            <param name="fields">字段值</param>
        </member>
        <member name="T:Furion.Schedule.HourlyAtAttribute">
            <summary>
            每小时特定分钟开始作业触发器特性
            </summary>
        </member>
        <member name="M:Furion.Schedule.HourlyAtAttribute.#ctor(System.Object[])">
            <summary>
            构造函数
            </summary>
            <param name="fields">字段值</param>
        </member>
        <member name="T:Furion.Schedule.MinutelyAtAttribute">
            <summary>
            每分钟特定秒开始作业触发器特性
            </summary>
        </member>
        <member name="M:Furion.Schedule.MinutelyAtAttribute.#ctor(System.Object[])">
            <summary>
            构造函数
            </summary>
            <param name="fields">字段值</param>
        </member>
        <member name="T:Furion.Schedule.MonthlyAtAttribute">
            <summary>
            每月特定天（午夜）开始作业触发器特性
            </summary>
        </member>
        <member name="M:Furion.Schedule.MonthlyAtAttribute.#ctor(System.Object[])">
            <summary>
            构造函数
            </summary>
            <param name="fields">字段值</param>
        </member>
        <member name="T:Furion.Schedule.SecondlyAtAttribute">
            <summary>
            特定秒开始作业触发器特性
            </summary>
        </member>
        <member name="M:Furion.Schedule.SecondlyAtAttribute.#ctor(System.Object[])">
            <summary>
            构造函数
            </summary>
            <param name="fields">字段值</param>
        </member>
        <member name="T:Furion.Schedule.WeeklyAtAttribute">
            <summary>
            每周特定星期几（午夜）开始作业触发器特性
            </summary>
        </member>
        <member name="M:Furion.Schedule.WeeklyAtAttribute.#ctor(System.Object[])">
            <summary>
            构造函数
            </summary>
            <param name="fields">字段值</param>
        </member>
        <member name="T:Furion.Schedule.YearlyAtAttribute">
            <summary>
            每年特定月1号（午夜）开始作业触发器特性
            </summary>
        </member>
        <member name="M:Furion.Schedule.YearlyAtAttribute.#ctor(System.Object[])">
            <summary>
            构造函数
            </summary>
            <param name="fields">字段值</param>
        </member>
        <member name="T:Furion.Schedule.DailyAttribute">
            <summary>
            每天（午夜）开始作业触发器特性
            </summary>
        </member>
        <member name="M:Furion.Schedule.DailyAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="T:Furion.Schedule.HourlyAttribute">
            <summary>
            每小时开始作业触发器特性
            </summary>
        </member>
        <member name="M:Furion.Schedule.HourlyAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="T:Furion.Schedule.MinutelyAttribute">
            <summary>
            每分钟开始作业触发器特性
            </summary>
        </member>
        <member name="M:Furion.Schedule.MinutelyAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="T:Furion.Schedule.MonthlyAttribute">
            <summary>
            每月1号（午夜）开始作业触发器特性
            </summary>
        </member>
        <member name="M:Furion.Schedule.MonthlyAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="T:Furion.Schedule.SecondlyAttribute">
            <summary>
            每秒开始作业触发器特性
            </summary>
        </member>
        <member name="M:Furion.Schedule.SecondlyAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="T:Furion.Schedule.WeeklyAttribute">
            <summary>
            每周日（午夜）开始作业触发器特性
            </summary>
        </member>
        <member name="M:Furion.Schedule.WeeklyAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="T:Furion.Schedule.WorkdayAttribute">
            <summary>
            每周一至周五（午夜）开始作业触发器特性
            </summary>
        </member>
        <member name="M:Furion.Schedule.WorkdayAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="T:Furion.Schedule.YearlyAttribute">
            <summary>
            每年1月1号（午夜）开始作业触发器特性
            </summary>
        </member>
        <member name="M:Furion.Schedule.YearlyAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="T:Furion.Schedule.PeriodAttribute">
            <summary>
            毫秒周期（间隔）作业触发器特性
            </summary>
        </member>
        <member name="M:Furion.Schedule.PeriodAttribute.#ctor(System.Int64)">
            <summary>
            构造函数
            </summary>
            <param name="interval">间隔（毫秒）</param>
        </member>
        <member name="T:Furion.Schedule.PeriodHoursAttribute">
            <summary>
            小时周期（间隔）作业触发器特性
            </summary>
        </member>
        <member name="M:Furion.Schedule.PeriodHoursAttribute.#ctor(System.Int64)">
            <summary>
            构造函数
            </summary>
            <param name="interval">间隔（小时）</param>
        </member>
        <member name="T:Furion.Schedule.PeriodMinutesAttribute">
            <summary>
            分钟周期（间隔）作业触发器特性
            </summary>
        </member>
        <member name="M:Furion.Schedule.PeriodMinutesAttribute.#ctor(System.Int64)">
            <summary>
            构造函数
            </summary>
            <param name="interval">间隔（分钟）</param>
        </member>
        <member name="T:Furion.Schedule.PeriodSecondsAttribute">
            <summary>
            秒周期（间隔）作业触发器特性
            </summary>
        </member>
        <member name="M:Furion.Schedule.PeriodSecondsAttribute.#ctor(System.Int64)">
            <summary>
            构造函数
            </summary>
            <param name="interval">间隔（秒）</param>
        </member>
        <member name="T:Furion.Schedule.TriggerAttribute">
            <summary>
            作业触发器特性基类
            </summary>
        </member>
        <member name="F:Furion.Schedule.TriggerAttribute._startTime">
            <summary>
            私有开始时间
            </summary>
        </member>
        <member name="F:Furion.Schedule.TriggerAttribute._endTime">
            <summary>
            私有结束时间
            </summary>
        </member>
        <member name="M:Furion.Schedule.TriggerAttribute.#ctor(System.Type,System.Object[])">
            <summary>
            构造函数
            </summary>
            <param name="triggerType">作业触发器类型</param>
            <param name="args">作业触发器参数</param>
        </member>
        <member name="P:Furion.Schedule.TriggerAttribute.TriggerId">
            <summary>
            作业触发器 Id
            </summary>
        </member>
        <member name="P:Furion.Schedule.TriggerAttribute.Description">
            <summary>
            描述信息
            </summary>
        </member>
        <member name="P:Furion.Schedule.TriggerAttribute.StartTime">
            <summary>
            起始时间
            </summary>
        </member>
        <member name="P:Furion.Schedule.TriggerAttribute.EndTime">
            <summary>
            结束时间
            </summary>
        </member>
        <member name="P:Furion.Schedule.TriggerAttribute.MaxNumberOfRuns">
            <summary>
            最大触发次数
            </summary>
            <remarks>
            <para>0：不限制</para>
            <para>n：N 次</para>
            </remarks>
        </member>
        <member name="P:Furion.Schedule.TriggerAttribute.MaxNumberOfErrors">
            <summary>
            最大出错次数
            </summary>
            <remarks>
            <para>0：不限制</para>
            <para>n：N 次</para>
            </remarks>
        </member>
        <member name="P:Furion.Schedule.TriggerAttribute.NumRetries">
            <summary>
            重试次数
            </summary>
        </member>
        <member name="P:Furion.Schedule.TriggerAttribute.RetryTimeout">
            <summary>
            重试间隔时间
            </summary>
            <remarks>默认1000毫秒</remarks>
        </member>
        <member name="P:Furion.Schedule.TriggerAttribute.StartNow">
            <summary>
            是否立即启动
            </summary>
        </member>
        <member name="P:Furion.Schedule.TriggerAttribute.RunOnStart">
            <summary>
            是否启动时执行一次
            </summary>
        </member>
        <member name="P:Furion.Schedule.TriggerAttribute.ResetOnlyOnce">
            <summary>
            是否在启动时重置最大触发次数等于一次的作业
            </summary>
            <remarks>解决因持久化数据已完成一次触发但启动时不再执行的问题</remarks>
        </member>
        <member name="P:Furion.Schedule.TriggerAttribute.RuntimeStartTime">
            <summary>
            作业触发器运行时起始时间
            </summary>
        </member>
        <member name="P:Furion.Schedule.TriggerAttribute.RuntimeEndTime">
            <summary>
            作业触发器运行时结束时间
            </summary>
        </member>
        <member name="P:Furion.Schedule.TriggerAttribute.RuntimeTriggerType">
            <summary>
            作业触发器运行时类型
            </summary>
        </member>
        <member name="P:Furion.Schedule.TriggerAttribute.RuntimeTriggerArgs">
            <summary>
            作业触发器运行时参数
            </summary>
        </member>
        <member name="T:Furion.Schedule.JobBuilder">
            <summary>
            作业信息构建器
            </summary>
        </member>
        <member name="M:Furion.Schedule.JobBuilder.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.Schedule.JobBuilder.Create(System.String)">
            <summary>
            创建作业信息构建器
            </summary>
            <param name="jobId">作业 Id</param>
            <returns><see cref="T:Furion.Schedule.JobBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.JobBuilder.Create``1">
            <summary>
            创建作业信息构建器
            </summary>
            <typeparam name="TJob"><see cref="T:Furion.Schedule.IJob"/> 实现类型</typeparam>
            <returns><see cref="T:Furion.Schedule.JobBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.JobBuilder.Create(System.String,System.String)">
            <summary>
            创建作业信息构建器
            </summary>
            <param name="assemblyName">作业类型所在程序集 Name</param>
            <param name="jobTypeFullName">作业类型 FullName</param>
            <returns><see cref="T:Furion.Schedule.JobBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.JobBuilder.Create(System.Type)">
            <summary>
            创建作业信息构建器
            </summary>
            <param name="jobType">作业类型</param>
            <returns><see cref="T:Furion.Schedule.JobBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.JobBuilder.Create(System.Func{Furion.Schedule.JobExecutingContext,System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>
            创建作业信息构建器
            </summary>
            <param name="dynamicExecuteAsync">运行时动态作业执行逻辑</param>
            <returns><see cref="T:Furion.Schedule.JobBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.JobBuilder.From(Furion.Schedule.JobDetail)">
            <summary>
            将 <see cref="T:Furion.Schedule.JobDetail"/> 转换成 <see cref="T:Furion.Schedule.JobBuilder"/>
            </summary>
            <param name="jobDetail">作业信息</param>
            <returns><see cref="T:Furion.Schedule.JobBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.JobBuilder.From(System.String)">
            <summary>
            将 JSON 字符串转换成 <see cref="T:Furion.Schedule.JobBuilder"/>
            </summary>
            <param name="json">JSON 字符串</param>
            <returns><see cref="T:Furion.Schedule.JobBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.JobBuilder.Clone(Furion.Schedule.JobBuilder)">
            <summary>
            克隆作业信息构建器
            </summary>
            <param name="fromJobBuilder">被克隆的作业信息构建器</param>
            <returns><see cref="T:Furion.Schedule.JobBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.JobBuilder.LoadFrom(System.Object,System.Boolean,System.String[])">
            <summary>
            从目标值填充到作业信息构建器
            </summary>
            <param name="value">目标值</param>
            <param name="ignoreNullValue">忽略空值</param>
            <param name="ignorePropertyNames">忽略属性名</param>
            <returns><see cref="T:Furion.Schedule.JobBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.JobBuilder.SetJobId(System.String)">
            <summary>
            设置作业 Id
            </summary>
            <param name="jobId">作业 Id</param>
            <returns><see cref="T:Furion.Schedule.JobBuilder"/></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Furion.Schedule.JobBuilder.SetGroupName(System.String)">
            <summary>
            设置作业组名称
            </summary>
            <param name="groupName">作业组名称</param>
            <returns><see cref="T:Furion.Schedule.JobBuilder"/></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Furion.Schedule.JobBuilder.SetJobType(System.String,System.String)">
            <summary>
            设置作业类型
            </summary>
            <param name="assemblyName">作业类型所在程序集 Name</param>
            <param name="jobTypeFullName">作业类型 FullName</param>
            <returns><see cref="T:Furion.Schedule.JobBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.JobBuilder.SetJobType``1">
            <summary>
            设置作业类型
            </summary>
            <typeparam name="TJob"><see cref="T:Furion.Schedule.IJob"/> 实现类类型</typeparam>
            <returns><see cref="T:Furion.Schedule.JobBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.JobBuilder.SetJobType(System.Type)">
            <summary>
            设置作业类型
            </summary>
            <param name="jobType">作业类型</param>
            <returns><see cref="T:Furion.Schedule.JobBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.JobBuilder.SetDescription(System.String)">
            <summary>
            设置描述信息
            </summary>
            <param name="description">描述信息</param>
            <returns><see cref="T:Furion.Schedule.JobBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.JobBuilder.SetConcurrent(System.Boolean)">
            <summary>
            设置是否采用并发执行
            </summary>
            <param name="concurrent">是否并发执行</param>
            <returns><see cref="T:Furion.Schedule.JobBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.JobBuilder.SetIncludeAnnotations(System.Boolean)">
            <summary>
            设置是否扫描 IJob 实现类 [Trigger] 特性触发器
            </summary>
            <param name="includeAnnotations">是否扫描 IJob 实现类 [Trigger] 特性触发器</param>
            <returns><see cref="T:Furion.Schedule.JobBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.JobBuilder.SetDynamicExecuteAsync(System.Func{Furion.Schedule.JobExecutingContext,System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>
            设置运行时动态作业执行逻辑
            </summary>
            <param name="dynamicExecuteAsync">运行时动态作业执行逻辑</param>
            <returns><see cref="T:Furion.Schedule.JobBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.JobBuilder.SetProperties(System.String)">
            <summary>
            设置作业信息额外数据
            </summary>
            <param name="properties">作业信息额外数据</param>
            <remarks>必须是 Dictionary{string, object} 类型序列化的结果</remarks>
            <returns><see cref="T:Furion.Schedule.JobBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.JobBuilder.SetProperties(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            设置作业信息额外数据
            </summary>
            <param name="properties">作业信息额外数据</param>
            <remarks>必须是 Dictionary{string, object} 类型序列化的结果</remarks>
            <returns><see cref="T:Furion.Schedule.JobBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.JobBuilder.AddProperty(System.String,System.Object)">
            <summary>
            添加作业信息额外数据
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
            <returns><see cref="T:Furion.Schedule.JobBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.JobBuilder.AddOrUpdateProperty``1(System.String,``0,System.Func{``0,System.Object})">
            <summary>
            添加或更新作业信息额外数据
            </summary>
            <typeparam name="T">值类型</typeparam>
            <param name="key">键</param>
            <param name="newValue">新值</param>
            <param name="updateAction">更新委托，如果传递了该参数，那么键存在使则使用该参数的返回值</param>
            <returns><see cref="T:Furion.Schedule.JobDetail"/></returns>
        </member>
        <member name="M:Furion.Schedule.JobBuilder.RemoveProperty(System.String)">
            <summary>
            删除作业信息额外数据
            </summary>
            <param name="key">键</param>
            <returns><see cref="T:Furion.Schedule.JobBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.JobBuilder.ClearProperties">
            <summary>
            清空作业信息额外数据
            </summary>
            <returns><see cref="T:Furion.Schedule.JobBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.JobBuilder.Build">
            <summary>
            构建 <see cref="T:Furion.Schedule.JobDetail"/> 对象
            </summary>
            <returns><see cref="T:Furion.Schedule.JobDetail"/></returns>
        </member>
        <member name="T:Furion.Schedule.ScheduleOptionsBuilder">
            <summary>
            作业调度器配置选项构建器
            </summary>
        </member>
        <member name="F:Furion.Schedule.ScheduleOptionsBuilder._schedulerBuilders">
            <summary>
            作业计划构建器集合
            </summary>
        </member>
        <member name="F:Furion.Schedule.ScheduleOptionsBuilder._jobMonitor">
            <summary>
            作业处理程序监视器
            </summary>
        </member>
        <member name="F:Furion.Schedule.ScheduleOptionsBuilder._jobExecutor">
            <summary>
            作业处理程序执行器
            </summary>
        </member>
        <member name="F:Furion.Schedule.ScheduleOptionsBuilder._jobPersistence">
            <summary>
            作业调度持久化器
            </summary>
        </member>
        <member name="F:Furion.Schedule.ScheduleOptionsBuilder._jobClusterServer">
            <summary>
            作业集群服务
            </summary>
        </member>
        <member name="F:Furion.Schedule.ScheduleOptionsBuilder._jobFactory">
            <summary>
            作业处理程序工厂
            </summary>
        </member>
        <member name="F:Furion.Schedule.ScheduleOptionsBuilder._groupSet">
            <summary>
            当前作业组名称
            </summary>
        </member>
        <member name="P:Furion.Schedule.ScheduleOptionsBuilder.UnobservedTaskExceptionHandler">
            <summary>
            未察觉任务异常事件处理程序
            </summary>
        </member>
        <member name="P:Furion.Schedule.ScheduleOptionsBuilder.UseUtcTimestamp">
            <summary>
            是否使用 UTC 时间，默认 false
            </summary>
        </member>
        <member name="P:Furion.Schedule.ScheduleOptionsBuilder.LogEnabled">
            <summary>
            是否启用日志记录
            </summary>
        </member>
        <member name="P:Furion.Schedule.ScheduleOptionsBuilder.ClusterId">
            <summary>
            作业集群 Id
            </summary>
        </member>
        <member name="P:Furion.Schedule.ScheduleOptionsBuilder.JobDetail">
            <summary>
            作业信息配置选项
            </summary>
        </member>
        <member name="P:Furion.Schedule.ScheduleOptionsBuilder.Trigger">
            <summary>
            作业触发器配置选项
            </summary>
        </member>
        <member name="P:Furion.Schedule.ScheduleOptionsBuilder.UseUtcTimestampProperty">
            <summary>
            <see cref="P:Furion.Schedule.ScheduleOptionsBuilder.UseUtcTimestamp"/> 公开配置
            </summary>
        </member>
        <member name="P:Furion.Schedule.ScheduleOptionsBuilder.BuildSqlType">
            <summary>
            生成 SQL 的类型
            </summary>
        </member>
        <member name="P:Furion.Schedule.ScheduleOptionsBuilder.InternalBuildSqlType">
            <summary>
            内部生成 SQL 的类型
            </summary>
        </member>
        <member name="P:Furion.Schedule.ScheduleOptionsBuilder.RunOnStartProvider">
            <summary>
            配置 RunOnStart 提供程序
            </summary>
        </member>
        <member name="P:Furion.Schedule.ScheduleOptionsBuilder.InternalRunOnStartProvider">
            <summary>
            内部配置 RunOnStart 提供程序
            </summary>
        </member>
        <member name="M:Furion.Schedule.ScheduleOptionsBuilder.GroupSet(System.String,System.Action)">
            <summary>
            添加作业组作业
            </summary>
            <param name="groupSet">作业组名称</param>
            <param name="setAction"><see cref="T:System.Action"/></param>
            <returns><see cref="T:Furion.Schedule.ScheduleOptionsBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.ScheduleOptionsBuilder.AddJob(Furion.Schedule.SchedulerBuilder[])">
            <summary>
            添加作业
            </summary>
            <param name="schedulerBuilders">作业调度程序构建器集合</param>
            <returns><see cref="T:Furion.Schedule.ScheduleOptionsBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.ScheduleOptionsBuilder.AddJob(Furion.Schedule.JobBuilder,Furion.Schedule.TriggerBuilder[])">
            <summary>
            添加作业
            </summary>
            <param name="jobBuilder">作业信息构建器</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
            <returns><see cref="T:Furion.Schedule.ScheduleOptionsBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.ScheduleOptionsBuilder.AddJob``1(Furion.Schedule.TriggerBuilder[])">
            <summary>
            添加作业
            </summary>
            <typeparam name="TJob"><see cref="T:Furion.Schedule.IJob"/> 实现类型</typeparam>
            <param name="triggerBuilders">作业触发器构建器集合</param>
            <returns><see cref="T:Furion.Schedule.ScheduleOptionsBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.ScheduleOptionsBuilder.AddJob(System.Type,Furion.Schedule.TriggerBuilder[])">
            <summary>
            添加作业
            </summary>
            <param name="jobType"><see cref="T:Furion.Schedule.IJob"/> 实现类型</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
            <returns><see cref="T:Furion.Schedule.ScheduleOptionsBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.ScheduleOptionsBuilder.AddJob``1(System.String,Furion.Schedule.TriggerBuilder[])">
            <summary>
            添加作业
            </summary>
            <typeparam name="TJob"><see cref="T:Furion.Schedule.IJob"/> 实现类型</typeparam>
            <param name="jobId">作业 Id</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
            <returns><see cref="T:Furion.Schedule.ScheduleOptionsBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.ScheduleOptionsBuilder.AddJob(System.Type,System.String,Furion.Schedule.TriggerBuilder[])">
            <summary>
            添加作业
            </summary>
            <param name="jobType"><see cref="T:Furion.Schedule.IJob"/> 实现类型</param>
            <param name="jobId">作业 Id</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
            <returns><see cref="T:Furion.Schedule.ScheduleOptionsBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.ScheduleOptionsBuilder.AddJob``1(System.String,System.Boolean,Furion.Schedule.TriggerBuilder[])">
            <summary>
            添加作业
            </summary>
            <typeparam name="TJob"><see cref="T:Furion.Schedule.IJob"/> 实现类型</typeparam>
            <param name="jobId">作业 Id</param>
            <param name="concurrent">是否采用并发执行</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
            <returns><see cref="T:Furion.Schedule.ScheduleOptionsBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.ScheduleOptionsBuilder.AddJob(System.Type,System.String,System.Boolean,Furion.Schedule.TriggerBuilder[])">
            <summary>
            添加作业
            </summary>
            <param name="jobType"><see cref="T:Furion.Schedule.IJob"/> 实现类型</param>
            <param name="jobId">作业 Id</param>
            <param name="concurrent">是否采用并发执行</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
            <returns><see cref="T:Furion.Schedule.ScheduleOptionsBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.ScheduleOptionsBuilder.AddJob``1(System.Boolean,Furion.Schedule.TriggerBuilder[])">
            <summary>
            添加作业
            </summary>
            <typeparam name="TJob"><see cref="T:Furion.Schedule.IJob"/> 实现类型</typeparam>
            <param name="concurrent">是否采用并发执行</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
            <returns><see cref="T:Furion.Schedule.ScheduleOptionsBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.ScheduleOptionsBuilder.AddJob(System.Type,System.Boolean,Furion.Schedule.TriggerBuilder[])">
            <summary>
            添加作业
            </summary>
            <param name="jobType"><see cref="T:Furion.Schedule.IJob"/> 实现类型</param>
            <param name="concurrent">是否采用并发执行</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
            <returns><see cref="T:Furion.Schedule.ScheduleOptionsBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.ScheduleOptionsBuilder.AddJob(System.Func{Furion.Schedule.JobExecutingContext,System.Threading.CancellationToken,System.Threading.Tasks.Task},Furion.Schedule.TriggerBuilder[])">
            <summary>
            添加作业
            </summary>
            <param name="dynamicExecuteAsync">运行时动态作业执行逻辑</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
            <returns><see cref="T:Furion.Schedule.ScheduleOptionsBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.ScheduleOptionsBuilder.AddJob(System.Func{Furion.Schedule.JobExecutingContext,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.String,Furion.Schedule.TriggerBuilder[])">
            <summary>
            添加作业
            </summary>
            <param name="dynamicExecuteAsync">运行时动态作业执行逻辑</param>
            <param name="jobId">作业 Id</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
            <returns><see cref="T:Furion.Schedule.ScheduleOptionsBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.ScheduleOptionsBuilder.AddJob(System.Func{Furion.Schedule.JobExecutingContext,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.String,System.Boolean,Furion.Schedule.TriggerBuilder[])">
            <summary>
            添加作业
            </summary>
            <param name="dynamicExecuteAsync">运行时动态作业执行逻辑</param>
            <param name="jobId">作业 Id</param>
            <param name="concurrent">是否采用并发执行</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
            <returns><see cref="T:Furion.Schedule.ScheduleOptionsBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.ScheduleOptionsBuilder.AddJob(System.Func{Furion.Schedule.JobExecutingContext,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Boolean,Furion.Schedule.TriggerBuilder[])">
            <summary>
            添加作业
            </summary>
            <param name="dynamicExecuteAsync">运行时动态作业执行逻辑</param>
            <param name="concurrent">是否采用并发执行</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
            <returns><see cref="T:Furion.Schedule.ScheduleOptionsBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.ScheduleOptionsBuilder.AddHttpJob(System.Action{Furion.Schedule.HttpJobMessage},Furion.Schedule.TriggerBuilder[])">
            <summary>
            添加 HTTP 作业
            </summary>
            <param name="buildMessage">构建 HTTP 作业消息委托</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
            <returns><see cref="T:Furion.Schedule.ScheduleOptionsBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.ScheduleOptionsBuilder.AddHttpJob``1(System.Action{Furion.Schedule.HttpJobMessage},Furion.Schedule.TriggerBuilder[])">
            <summary>
            添加 HTTP 作业
            </summary>
            <typeparam name="TJob"><see cref="T:Furion.Schedule.IJob"/> 实现类型</typeparam>
            <param name="buildMessage">构建 HTTP 作业消息委托</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
            <returns><see cref="T:Furion.Schedule.ScheduleOptionsBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.ScheduleOptionsBuilder.AddHttpJob(System.Action{Furion.Schedule.HttpJobMessage},System.String,Furion.Schedule.TriggerBuilder[])">
            <summary>
            添加 HTTP 作业
            </summary>
            <param name="buildMessage">构建 HTTP 作业消息委托</param>
            <param name="jobId">作业 Id</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
            <returns><see cref="T:Furion.Schedule.ScheduleOptionsBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.ScheduleOptionsBuilder.AddHttpJob``1(System.Action{Furion.Schedule.HttpJobMessage},System.String,Furion.Schedule.TriggerBuilder[])">
            <summary>
            添加 HTTP 作业
            </summary>
            <typeparam name="TJob"><see cref="T:Furion.Schedule.IJob"/> 实现类型</typeparam>
            <param name="buildMessage">构建 HTTP 作业消息委托</param>
            <param name="jobId">构建 HTTP 作业消息委托</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
            <returns><see cref="T:Furion.Schedule.ScheduleOptionsBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.ScheduleOptionsBuilder.AddHttpJob(System.Action{Furion.Schedule.HttpJobMessage},System.String,System.Boolean,Furion.Schedule.TriggerBuilder[])">
            <summary>
            添加 HTTP 作业
            </summary>
            <param name="buildMessage">构建 HTTP 作业消息委托</param>
            <param name="jobId">作业 Id</param>
            <param name="concurrent">是否采用并发执行</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
            <returns><see cref="T:Furion.Schedule.ScheduleOptionsBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.ScheduleOptionsBuilder.AddHttpJob``1(System.Action{Furion.Schedule.HttpJobMessage},System.String,System.Boolean,Furion.Schedule.TriggerBuilder[])">
            <summary>
            添加 HTTP 作业
            </summary>
            <typeparam name="TJob"><see cref="T:Furion.Schedule.IJob"/> 实现类型</typeparam>
            <param name="buildMessage">构建 HTTP 作业消息委托</param>
            <param name="jobId">构建 HTTP 作业消息委托</param>
            <param name="concurrent">是否采用并发执行</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
            <returns><see cref="T:Furion.Schedule.ScheduleOptionsBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.ScheduleOptionsBuilder.AddHttpJob(System.Action{Furion.Schedule.HttpJobMessage},System.Boolean,Furion.Schedule.TriggerBuilder[])">
            <summary>
            添加 HTTP 作业
            </summary>
            <param name="buildMessage">构建 HTTP 作业消息委托</param>
            <param name="concurrent">是否采用并发执行</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
            <returns><see cref="T:Furion.Schedule.ScheduleOptionsBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.ScheduleOptionsBuilder.AddHttpJob``1(System.Action{Furion.Schedule.HttpJobMessage},System.Boolean,Furion.Schedule.TriggerBuilder[])">
            <summary>
            添加 HTTP 作业
            </summary>
            <typeparam name="TJob"><see cref="T:Furion.Schedule.IJob"/> 实现类型</typeparam>
            <param name="buildMessage">构建 HTTP 作业消息委托</param>
            <param name="concurrent">是否采用并发执行</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
            <returns><see cref="T:Furion.Schedule.ScheduleOptionsBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.ScheduleOptionsBuilder.AddHttpJob(System.Action{Furion.Schedule.HttpJobMessage},Furion.Schedule.SchedulerBuilder)">
            <summary>
            添加 HTTP 作业
            </summary>
            <param name="buildMessage">构建 HTTP 作业消息委托</param>
            <param name="schedulerBuilder">作业调度程序构建器</param>
            <returns><see cref="T:Furion.Schedule.ScheduleOptionsBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.ScheduleOptionsBuilder.AddMonitor``1">
            <summary>
            注册作业处理程序监视器
            </summary>
            <typeparam name="TJobMonitor">实现自 <see cref="T:Furion.Schedule.IJobMonitor"/></typeparam>
            <returns><see cref="T:Furion.Schedule.ScheduleOptionsBuilder"/> 实例</returns>
        </member>
        <member name="M:Furion.Schedule.ScheduleOptionsBuilder.AddExecutor``1">
            <summary>
            注册作业处理程序执行器
            </summary>
            <typeparam name="TJobExecutor">实现自 <see cref="T:Furion.Schedule.IJobExecutor"/></typeparam>
            <returns><see cref="T:Furion.Schedule.ScheduleOptionsBuilder"/> 实例</returns>
        </member>
        <member name="M:Furion.Schedule.ScheduleOptionsBuilder.AddPersistence``1">
            <summary>
            注册作业调度持久化器
            </summary>
            <typeparam name="TJobPersistence">实现自 <see cref="T:Furion.Schedule.IJobPersistence"/></typeparam>
            <returns><see cref="T:Furion.Schedule.ScheduleOptionsBuilder"/> 实例</returns>
        </member>
        <member name="M:Furion.Schedule.ScheduleOptionsBuilder.AddClusterServer``1">
            <summary>
            注册作业集群服务
            </summary>
            <typeparam name="TJobClusterServer">实现自 <see cref="T:Furion.Schedule.IJobClusterServer"/></typeparam>
            <returns><see cref="T:Furion.Schedule.ScheduleOptionsBuilder"/> 实例</returns>
        </member>
        <member name="M:Furion.Schedule.ScheduleOptionsBuilder.AddJobFactory``1">
            <summary>
            注册作业处理程序工厂
            </summary>
            <typeparam name="TJobFactory">实现自 <see cref="T:Furion.Schedule.IJobFactory"/></typeparam>
            <returns><see cref="T:Furion.Schedule.ScheduleOptionsBuilder"/> 实例</returns>
        </member>
        <member name="M:Furion.Schedule.ScheduleOptionsBuilder.Build(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            构建作业调度器配置选项
            </summary>
            <param name="services"><see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/></param>
            <remarks><see cref="T:System.Collections.Generic.IEnumerable`1"/></remarks>
        </member>
        <member name="T:Furion.Schedule.SchedulerBuilder">
            <summary>
            作业计划构建器
            </summary>
        </member>
        <member name="M:Furion.Schedule.SchedulerBuilder.#ctor(Furion.Schedule.JobBuilder)">
            <summary>
            构造函数
            </summary>
            <param name="jobBuilder">作业信息构建器</param>
        </member>
        <member name="M:Furion.Schedule.SchedulerBuilder.#ctor(Furion.Schedule.JobBuilder,System.Collections.Generic.List{Furion.Schedule.TriggerBuilder})">
            <summary>
            构造函数
            </summary>
            <param name="jobBuilder">作业信息构建器</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
        </member>
        <member name="P:Furion.Schedule.SchedulerBuilder.Behavior">
            <summary>
            标记作业持久化行为
            </summary>
        </member>
        <member name="P:Furion.Schedule.SchedulerBuilder.JobBuilder">
            <summary>
            作业信息构建器
            </summary>
        </member>
        <member name="P:Furion.Schedule.SchedulerBuilder.TriggerBuilders">
            <summary>
            作业触发器构建器集合
            </summary>
        </member>
        <member name="P:Furion.Schedule.SchedulerBuilder.TriggerCount">
            <summary>
            作业触发器数量
            </summary>
        </member>
        <member name="M:Furion.Schedule.SchedulerBuilder.Create(System.String)">
            <summary>
            创建作业计划构建器
            </summary>
            <param name="jobId">作业 Id</param>
            <returns><see cref="T:Furion.Schedule.SchedulerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.SchedulerBuilder.Create``1(Furion.Schedule.TriggerBuilder[])">
            <summary>
            创建作业计划构建器
            </summary>
            <typeparam name="TJob"><see cref="T:Furion.Schedule.IJob"/> 实现类型</typeparam>
            <param name="triggerBuilders">作业触发器构建器集合</param>
            <returns><see cref="T:Furion.Schedule.SchedulerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.SchedulerBuilder.Create``1(System.String,Furion.Schedule.TriggerBuilder[])">
            <summary>
            创建作业计划构建器
            </summary>
            <typeparam name="TJob"><see cref="T:Furion.Schedule.IJob"/> 实现类型</typeparam>
            <param name="jobId">作业 Id</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
            <returns><see cref="T:Furion.Schedule.SchedulerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.SchedulerBuilder.Create``1(System.Boolean,Furion.Schedule.TriggerBuilder[])">
            <summary>
            创建作业计划构建器
            </summary>
            <typeparam name="TJob"><see cref="T:Furion.Schedule.IJob"/> 实现类型</typeparam>
            <param name="concurrent">是否采用并发执行</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
            <returns><see cref="T:Furion.Schedule.SchedulerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.SchedulerBuilder.Create``1(System.String,System.Boolean,Furion.Schedule.TriggerBuilder[])">
            <summary>
            创建作业计划构建器
            </summary>
            <typeparam name="TJob"><see cref="T:Furion.Schedule.IJob"/> 实现类型</typeparam>
            <param name="jobId">作业 Id</param>
            <param name="concurrent">是否采用并发执行</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
            <returns><see cref="T:Furion.Schedule.SchedulerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.SchedulerBuilder.Create(System.Type,Furion.Schedule.TriggerBuilder[])">
            <summary>
            创建作业计划构建器
            </summary>
            <param name="jobType"><see cref="T:Furion.Schedule.IJob"/> 实现类型</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
            <returns><see cref="T:Furion.Schedule.SchedulerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.SchedulerBuilder.Create(System.Type,System.String,Furion.Schedule.TriggerBuilder[])">
            <summary>
            创建作业计划构建器
            </summary>
            <param name="jobType"><see cref="T:Furion.Schedule.IJob"/> 实现类型</param>
            <param name="jobId">作业 Id</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
            <returns><see cref="T:Furion.Schedule.SchedulerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.SchedulerBuilder.Create(System.Type,System.Boolean,Furion.Schedule.TriggerBuilder[])">
            <summary>
            创建作业计划构建器
            </summary>
            <param name="jobType"><see cref="T:Furion.Schedule.IJob"/> 实现类型</param>
            <param name="concurrent">是否采用并发执行</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
            <returns><see cref="T:Furion.Schedule.SchedulerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.SchedulerBuilder.Create(System.Type,System.String,System.Boolean,Furion.Schedule.TriggerBuilder[])">
            <summary>
            创建作业计划构建器
            </summary>
            <param name="jobType"><see cref="T:Furion.Schedule.IJob"/> 实现类型</param>
            <param name="jobId">作业 Id</param>
            <param name="concurrent">是否采用并发执行</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
            <returns><see cref="T:Furion.Schedule.SchedulerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.SchedulerBuilder.Create(System.Func{Furion.Schedule.JobExecutingContext,System.Threading.CancellationToken,System.Threading.Tasks.Task},Furion.Schedule.TriggerBuilder[])">
            <summary>
            创建作业计划构建器
            </summary>
            <param name="dynamicExecuteAsync">运行时动态作业执行逻辑</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
            <returns><see cref="T:Furion.Schedule.SchedulerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.SchedulerBuilder.Create(System.Func{Furion.Schedule.JobExecutingContext,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.String,Furion.Schedule.TriggerBuilder[])">
            <summary>
            创建作业计划构建器
            </summary>
            <param name="dynamicExecuteAsync">运行时动态作业执行逻辑</param>
            <param name="jobId">作业 Id</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
            <returns><see cref="T:Furion.Schedule.SchedulerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.SchedulerBuilder.Create(System.Func{Furion.Schedule.JobExecutingContext,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.String,System.Boolean,Furion.Schedule.TriggerBuilder[])">
            <summary>
            创建作业计划构建器
            </summary>
            <param name="dynamicExecuteAsync">运行时动态作业执行逻辑</param>
            <param name="jobId">作业 Id</param>
            <param name="concurrent">是否采用并发执行</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
            <returns><see cref="T:Furion.Schedule.SchedulerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.SchedulerBuilder.Create(System.Func{Furion.Schedule.JobExecutingContext,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Boolean,Furion.Schedule.TriggerBuilder[])">
            <summary>
            创建作业计划构建器
            </summary>
            <param name="dynamicExecuteAsync">运行时动态作业执行逻辑</param>
            <param name="concurrent">是否采用并发执行</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
            <returns><see cref="T:Furion.Schedule.SchedulerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.SchedulerBuilder.Create(Furion.Schedule.JobBuilder,Furion.Schedule.TriggerBuilder[])">
            <summary>
            创建作业计划构建器
            </summary>
            <param name="jobBuilder">作业信息构建器</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
            <returns><see cref="T:Furion.Schedule.SchedulerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.SchedulerBuilder.From(Furion.Schedule.Scheduler)">
            <summary>
            将 <see cref="T:Furion.Schedule.Scheduler"/> 转换成 <see cref="T:Furion.Schedule.SchedulerBuilder"/>
            </summary>
            <param name="scheduler">作业计划</param>
            <returns><see cref="T:Furion.Schedule.SchedulerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.SchedulerBuilder.From(Furion.Schedule.IScheduler)">
            <summary>
            将 <see cref="T:Furion.Schedule.IScheduler"/> 转换成 <see cref="T:Furion.Schedule.SchedulerBuilder"/>
            </summary>
            <param name="scheduler">作业计划</param>
            <returns><see cref="T:Furion.Schedule.SchedulerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.SchedulerBuilder.From(System.String)">
            <summary>
            将 JSON 字符串转换成 <see cref="T:Furion.Schedule.SchedulerBuilder"/>
            </summary>
            <param name="json">JSON 字符串</param>
            <returns><see cref="T:Furion.Schedule.SchedulerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.SchedulerBuilder.Clone(Furion.Schedule.SchedulerBuilder)">
            <summary>
            克隆作业计划构建器
            </summary>
            <param name="fromSchedulerBuilder">被克隆的作业计划构建器</param>
            <returns><see cref="T:Furion.Schedule.ScheduleOptionsBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.SchedulerBuilder.GetJobBuilder">
            <summary>
            获取作业信息构建器
            </summary>
            <returns><see cref="P:Furion.Schedule.SchedulerBuilder.JobBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.SchedulerBuilder.GetTriggerBuilders">
            <summary>
            获取作业触发器构建器集合
            </summary>
            <returns><see cref="T:System.Collections.Generic.List`1"/></returns>
        </member>
        <member name="M:Furion.Schedule.SchedulerBuilder.GetTriggerBuilder(System.String)">
            <summary>
            获取作业触发器构建器
            </summary>
            <returns><see cref="T:Furion.Schedule.TriggerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.SchedulerBuilder.UpdateJobBuilder(Furion.Schedule.JobBuilder,System.Boolean)">
            <summary>
            更新作业触发器构建器
            </summary>
            <param name="jobBuilder">作业触发器构建器</param>
            <param name="replace">是否完全替换为新的</param>
            <returns><see cref="T:Furion.Schedule.SchedulerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.SchedulerBuilder.AddTriggerBuilder(Furion.Schedule.TriggerBuilder[])">
            <summary>
            添加作业触发器构建器
            </summary>
            <param name="triggerBuilders">作业触发器构建器</param>
            <returns><see cref="T:Furion.Schedule.SchedulerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.SchedulerBuilder.UpdateTriggerBuilder(Furion.Schedule.TriggerBuilder,System.Boolean)">
            <summary>
            更新作业触发器构建器
            </summary>
            <param name="triggerBuilder">作业触发器构建器</param>
            <param name="replace">是否完全替换为新的</param>
            <returns><see cref="T:Furion.Schedule.SchedulerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.SchedulerBuilder.UpdateTriggerBuilder(Furion.Schedule.TriggerBuilder[])">
            <summary>
            更新作业触发器构建器
            </summary>
            <param name="triggerBuilders">作业触发器构建器</param>
            <returns><see cref="T:Furion.Schedule.SchedulerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.SchedulerBuilder.RemoveTriggerBuilder(System.String[])">
            <summary>
            删除作业触发器构建器
            </summary>
            <param name="triggerIds">作业触发器 Id</param>
            <returns><see cref="T:Furion.Schedule.SchedulerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.SchedulerBuilder.ClearTriggerBuilders">
            <summary>
            清空作业触发器构建器
            </summary>
            <returns><see cref="T:Furion.Schedule.SchedulerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.SchedulerBuilder.ConvertToJSON(Furion.Schedule.NamingConventions)">
            <summary>
            转换成 JSON 字符串
            </summary>
            <param name="naming">命名法</param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:Furion.Schedule.SchedulerBuilder.GetEnumerable">
            <summary>
            将作业计划构建器转换成可枚举集合
            </summary>
            <returns><see cref="T:System.Collections.Generic.Dictionary`2"/></returns>
        </member>
        <member name="M:Furion.Schedule.SchedulerBuilder.Appended">
            <summary>
            标记作业计划为新增行为
            </summary>
            <returns><see cref="T:Furion.Schedule.SchedulerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.SchedulerBuilder.Updated">
            <summary>
            标记作业计划为更新行为
            </summary>
            <returns><see cref="T:Furion.Schedule.SchedulerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.SchedulerBuilder.Removed">
            <summary>
            标记作业计划为删除行为
            </summary>
            <returns><see cref="T:Furion.Schedule.SchedulerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.SchedulerBuilder.Build(System.Int32)">
            <summary>
            构建 <see cref="T:Furion.Schedule.Scheduler"/> 对象
            </summary>
            <param name="count">作业调度器中当前作业计划总量</param>
            <returns><see cref="T:Furion.Schedule.Scheduler"/></returns>
        </member>
        <member name="T:Furion.Schedule.TriggerBuilder">
            <summary>
            作业触发器构建器
            </summary>
            <summary>
            作业触发器
            </summary>
        </member>
        <member name="M:Furion.Schedule.TriggerBuilder.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.Schedule.TriggerBuilder.Period(System.Int64)">
            <summary>
            创建毫秒周期（间隔）作业触发器构建器
            </summary>
            <param name="interval">间隔（毫秒）</param>
            <returns><see cref="T:Furion.Schedule.TriggerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.TriggerBuilder.Cron(System.String,Furion.TimeCrontab.CronStringFormat)">
            <summary>
            创建 Cron 表达式作业触发器构建器
            </summary>
            <param name="schedule">Cron 表达式</param>
            <param name="format">Cron 表达式格式化类型，默认 <see cref="F:Furion.TimeCrontab.CronStringFormat.Default"/></param>
            <returns><see cref="T:Furion.Schedule.TriggerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.TriggerBuilder.Cron(System.String,System.Object)">
            <summary>
            创建 Cron 表达式作业触发器构建器
            </summary>
            <param name="schedule">Cron 表达式</param>
            <param name="args">动态参数类型，支持 <see cref="T:System.Int32"/>，<see cref="T:Furion.TimeCrontab.CronStringFormat"/> 和 object[]</param>
            <returns><see cref="T:Furion.Schedule.TriggerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.TriggerBuilder.Create(System.String)">
            <summary>
            创建作业触发器构建器
            </summary>
            <param name="triggerId">作业触发器 Id</param>
            <returns><see cref="T:Furion.Schedule.JobBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.TriggerBuilder.Create``1">
            <summary>
            创建作业触发器构建器
            </summary>
            <typeparam name="TTrigger"><see cref="T:Furion.Schedule.Trigger"/> 派生类</typeparam>
            <returns><see cref="T:Furion.Schedule.TriggerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.TriggerBuilder.Create``1(System.Object[])">
            <summary>
            创建作业触发器构建器
            </summary>
            <typeparam name="TTrigger"><see cref="T:Furion.Schedule.Trigger"/> 派生类</typeparam>
            <param name="args">作业触发器参数</param>
            <returns><see cref="T:Furion.Schedule.TriggerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.TriggerBuilder.Create(System.String,System.String)">
            <summary>
            创建新的作业触发器构建器
            </summary>
            <param name="assemblyName">作业触发器类型所在程序集 Name</param>
            <param name="triggerTypeFullName">作业触发器类型 FullName</param>
            <returns><see cref="T:Furion.Schedule.TriggerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.TriggerBuilder.Create(System.String,System.String,System.Object[])">
            <summary>
            创建新的作业触发器构建器
            </summary>
            <param name="assemblyName">作业触发器类型所在程序集 Name</param>
            <param name="triggerTypeFullName">作业触发器类型 FullName</param>
            <param name="args">作业触发器参数</param>
            <returns><see cref="T:Furion.Schedule.TriggerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.TriggerBuilder.Create(System.Type)">
            <summary>
            创建新的作业触发器构建器
            </summary>
            <param name="triggerType"><see cref="T:Furion.Schedule.Trigger"/> 派生类</param>
            <returns><see cref="T:Furion.Schedule.TriggerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.TriggerBuilder.Create(System.Type,System.Object[])">
            <summary>
            创建新的作业触发器构建器
            </summary>
            <param name="triggerType"><see cref="T:Furion.Schedule.Trigger"/> 派生类</param>
            <param name="args">作业触发器参数</param>
            <returns><see cref="T:Furion.Schedule.TriggerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.TriggerBuilder.From(Furion.Schedule.Trigger)">
            <summary>
            将 <see cref="T:Furion.Schedule.Trigger"/> 转换成 <see cref="T:Furion.Schedule.TriggerBuilder"/>
            </summary>
            <param name="trigger">作业触发器</param>
            <returns><see cref="T:Furion.Schedule.TriggerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.TriggerBuilder.From(System.String)">
            <summary>
            将 JSON 字符串转换成 <see cref="T:Furion.Schedule.TriggerBuilder"/>
            </summary>
            <param name="json">JSON 字符串</param>
            <returns><see cref="T:Furion.Schedule.TriggerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.TriggerBuilder.Clone(Furion.Schedule.TriggerBuilder)">
            <summary>
            克隆作业触发器构建器
            </summary>
            <param name="fromTriggerBuilder">被克隆的作业触发器构建器</param>
            <returns><see cref="T:Furion.Schedule.TriggerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.TriggerBuilder.LoadFrom(System.Object,System.Boolean,System.String[])">
            <summary>
            从目标值填充数据到作业触发器构建器
            </summary>
            <param name="value">目标值</param>
            <param name="ignoreNullValue">忽略空值</param>
            <param name="ignorePropertyNames">忽略属性名</param>
            <returns><see cref="T:Furion.Schedule.TriggerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.TriggerBuilder.SetTriggerId(System.String)">
            <summary>
            设置作业触发器 Id
            </summary>
            <param name="triggerId">作业触发器 Id</param>
            <returns><see cref="T:Furion.Schedule.TriggerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.TriggerBuilder.SetTriggerType(System.String,System.String)">
            <summary>
            设置作业触发器类型
            </summary>
            <param name="assemblyName">作业触发器所在程序集 Name</param>
            <param name="triggerTypeFullName">作业触发器 FullName</param>
            <returns><see cref="T:Furion.Schedule.TriggerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.TriggerBuilder.SetTriggerType``1">
            <summary>
            设置作业触发器类型
            </summary>
            <typeparam name="TTrigger"><see cref="T:Furion.Schedule.Trigger"/> 派生类类型</typeparam>
            <returns><see cref="T:Furion.Schedule.TriggerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.TriggerBuilder.SetTriggerType(System.Type)">
            <summary>
            设置作业触发器类型
            </summary>
            <param name="triggerType">作业触发器类型</param>
            <returns><see cref="T:Furion.Schedule.TriggerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.TriggerBuilder.SetArgs(System.String)">
            <summary>
            设置作业触发器参数
            </summary>
            <param name="args">作业触发器参数</param>
            <returns><see cref="T:Furion.Schedule.TriggerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.TriggerBuilder.SetArgs(System.Object[])">
            <summary>
            设置作业触发器参数
            </summary>
            <param name="args">作业触发器参数</param>
            <returns><see cref="T:Furion.Schedule.TriggerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.TriggerBuilder.SetDescription(System.String)">
            <summary>
            设置描述信息
            </summary>
            <param name="description">描述信息</param>
            <returns><see cref="T:Furion.Schedule.TriggerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.TriggerBuilder.SetStatus(Furion.Schedule.TriggerStatus)">
            <summary>
            设置作业触发器状态
            </summary>
            <param name="status">作业触发器状态</param>
            <returns><see cref="T:Furion.Schedule.TriggerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.TriggerBuilder.SetStartTime(System.Nullable{System.DateTime})">
            <summary>
            设置起始时间
            </summary>
            <param name="startTime">起始时间</param>
            <remarks>如果启用 UTC 时间，那么这里也要使用 UTC 时间</remarks>
            <returns><see cref="T:Furion.Schedule.TriggerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.TriggerBuilder.SetEndTime(System.Nullable{System.DateTime})">
            <summary>
            设置结束时间
            </summary>
            <param name="endTime">结束时间</param>
            <remarks>如果启用 UTC 时间，那么这里也要使用 UTC 时间</remarks>
            <returns><see cref="T:Furion.Schedule.TriggerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.TriggerBuilder.SetLastRunTime(System.Nullable{System.DateTime})">
            <summary>
            设置最近运行时间
            </summary>
            <param name="lastRunTime">最近运行时间</param>
            <remarks>如果启用 UTC 时间，那么这里也要使用 UTC 时间</remarks>
            <returns><see cref="T:Furion.Schedule.TriggerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.TriggerBuilder.SetNextRunTime(System.Nullable{System.DateTime})">
            <summary>
            设置下一次运行时间
            </summary>
            <param name="nextRunTime">下一次运行时间</param>
            <remarks>如果启用 UTC 时间，那么这里也要使用 UTC 时间</remarks>
            <returns><see cref="T:Furion.Schedule.TriggerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.TriggerBuilder.SetNumberOfRuns(System.Int64)">
            <summary>
            设置触发次数
            </summary>
            <param name="numberOfRuns">触发次数</param>
            <returns><see cref="T:Furion.Schedule.TriggerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.TriggerBuilder.SetMaxNumberOfRuns(System.Int64)">
            <summary>
            设置最大触发次数
            </summary>
            <param name="maxNumberOfRuns">最大触发次数</param>
            <remarks>
            <para>0：不限制</para>
            <para>>n：N 次</para>
            </remarks>
            <returns><see cref="T:Furion.Schedule.TriggerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.TriggerBuilder.SetNumberOfErrors(System.Int64)">
            <summary>
            设置出错次数
            </summary>
            <param name="numberOfErrors">出错次数</param>
            <returns><see cref="T:Furion.Schedule.TriggerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.TriggerBuilder.SetMaxNumberOfErrors(System.Int64)">
            <summary>
            设置最大出错次数
            </summary>
            <param name="maxNumberOfErrors">最大出错次数</param>
            <remarks>
            <para>0：不限制</para>
            <para>n：N 次</para>
            </remarks>
            <returns><see cref="T:Furion.Schedule.TriggerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.TriggerBuilder.SetNumRetries(System.Int32)">
            <summary>
            设置重试次数
            </summary>
            <param name="numRetries">重试次数</param>
            <returns><see cref="T:Furion.Schedule.TriggerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.TriggerBuilder.SetRetryTimeout(System.Int32)">
            <summary>
            设置重试间隔时间
            </summary>
            <param name="retryTimeout">重试间隔时间</param>
            <returns><see cref="T:Furion.Schedule.TriggerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.TriggerBuilder.SetStartNow(System.Boolean)">
            <summary>
            设置是否立即启动
            </summary>
            <param name="startNow">是否立即启动</param>
            <returns><see cref="T:Furion.Schedule.TriggerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.TriggerBuilder.SetRunOnStart(System.Boolean)">
            <summary>
            设置是否启动时执行一次
            </summary>
            <param name="runOnStart">是否启动时执行一次</param>
            <returns><see cref="T:Furion.Schedule.TriggerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.TriggerBuilder.SetResetOnlyOnce(System.Boolean)">
            <summary>
            设置是否在启动时重置最大触发次数等于一次的作业
            </summary>
            <param name="resetOnlyOnce">是否在启动时重置最大触发次数等于一次的作业</param>
            <returns><see cref="T:Furion.Schedule.TriggerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.TriggerBuilder.SetResult(System.String)">
            <summary>
            设置本次执行结果
            </summary>
            <param name="result">设置本次执行结果</param>
            <returns><see cref="T:Furion.Schedule.TriggerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.TriggerBuilder.SetElapsedTime(System.Int64)">
            <summary>
            设置本次执行耗时
            </summary>
            <param name="elapsedTime">本次执行耗时</param>
            <returns><see cref="T:Furion.Schedule.TriggerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.TriggerBuilder.Appended">
            <summary>
            标记作业触发器计划为新增行为
            </summary>
            <returns><see cref="T:Furion.Schedule.TriggerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.TriggerBuilder.Updated">
            <summary>
            标记作业触发器计划为更新行为
            </summary>
            <returns><see cref="T:Furion.Schedule.TriggerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.TriggerBuilder.Removed">
            <summary>
            标记作业触发器为删除行为
            </summary>
            <returns><see cref="T:Furion.Schedule.TriggerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.TriggerBuilder.GetNextOccurrence(System.DateTime)">
            <summary>
            隐藏作业触发器公开方法
            </summary>
            <param name="startAt">起始时间</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Furion.Schedule.TriggerBuilder.ShouldRun(Furion.Schedule.JobDetail,System.DateTime)">
            <summary>
            隐藏作业触发器公开方法
            </summary>
            <param name="jobDetail">作业信息</param>
            <param name="startAt">起始时间</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Furion.Schedule.TriggerBuilder.Build(System.String)">
            <summary>
            构建 <see cref="T:Furion.Schedule.Trigger"/> 对象
            </summary>
            <param name="jobId">作业 Id</param>
            <returns><see cref="T:Furion.Schedule.Trigger"/></returns>
        </member>
        <member name="M:Furion.Schedule.TriggerBuilder.AlterTo``1">
            <summary>
            设置作业触发器
            </summary>
            <typeparam name="TTrigger"><see cref="T:Furion.Schedule.Trigger"/> 派生类</typeparam>
            <returns><see cref="T:Furion.Schedule.TriggerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.TriggerBuilder.AlterTo``1(System.Object[])">
            <summary>
            设置作业触发器
            </summary>
            <typeparam name="TTrigger"><see cref="T:Furion.Schedule.Trigger"/> 派生类</typeparam>
            <param name="args">作业触发器参数</param>
            <returns><see cref="T:Furion.Schedule.TriggerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.TriggerBuilder.AlterTo(System.String,System.String)">
            <summary>
            设置作业触发器
            </summary>
            <param name="assemblyName">作业触发器类型所在程序集 Name</param>
            <param name="triggerTypeFullName">作业触发器类型 FullName</param>
            <returns><see cref="T:Furion.Schedule.TriggerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.TriggerBuilder.AlterTo(System.String,System.String,System.Object[])">
            <summary>
            设置作业触发器
            </summary>
            <param name="assemblyName">作业触发器类型所在程序集 Name</param>
            <param name="triggerTypeFullName">作业触发器类型 FullName</param>
            <param name="args">作业触发器参数</param>
            <returns><see cref="T:Furion.Schedule.TriggerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.TriggerBuilder.AlterTo(System.Type)">
            <summary>
            设置作业触发器
            </summary>
            <param name="triggerType"><see cref="T:Furion.Schedule.Trigger"/> 派生类</param>
            <returns><see cref="T:Furion.Schedule.TriggerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.TriggerBuilder.AlterTo(System.Type,System.Object[])">
            <summary>
            设置作业触发器
            </summary>
            <param name="triggerType"><see cref="T:Furion.Schedule.Trigger"/> 派生类</param>
            <param name="args">作业触发器参数</param>
            <returns><see cref="T:Furion.Schedule.TriggerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.TriggerBuilder.AlterToPeriod(System.Int64)">
            <summary>
            设置毫秒周期（间隔）作业触发器
            </summary>
            <param name="interval">间隔（毫秒）</param>
            <returns><see cref="T:Furion.Schedule.TriggerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.TriggerBuilder.AlterToPeriodSeconds(System.Int64)">
            <summary>
            设置秒周期（间隔）作业触发器
            </summary>
            <param name="interval">间隔（秒）</param>
            <returns><see cref="T:Furion.Schedule.TriggerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.TriggerBuilder.AlterToPeriodMinutes(System.Int64)">
            <summary>
            设置分钟周期（间隔）作业触发器
            </summary>
            <param name="interval">间隔（分钟）</param>
            <returns><see cref="T:Furion.Schedule.TriggerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.TriggerBuilder.AlterToPeriodHours(System.Int64)">
            <summary>
            设置小时周期（间隔）作业触发器
            </summary>
            <param name="interval">间隔（小时）</param>
            <returns><see cref="T:Furion.Schedule.TriggerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.TriggerBuilder.AlterToCron(System.String,Furion.TimeCrontab.CronStringFormat)">
            <summary>
            设置 Cron 表达式作业触发器
            </summary>
            <param name="schedule">Cron 表达式</param>
            <param name="format">Cron 表达式格式化类型，默认 <see cref="F:Furion.TimeCrontab.CronStringFormat.Default"/></param>
            <returns><see cref="T:Furion.Schedule.TriggerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.TriggerBuilder.AlterToCron(System.String,System.Object)">
            <summary>
            设置 Cron 表达式作业触发器
            </summary>
            <param name="schedule">Cron 表达式</param>
            <param name="args">动态参数类型，支持 <see cref="T:System.Int32"/> 和 object[]</param>
            <returns><see cref="T:Furion.Schedule.TriggerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.TriggerBuilder.AlterToSecondly">
            <summary>
            设置每秒开始作业触发器
            </summary>
            <returns><see cref="T:Furion.Schedule.TriggerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.TriggerBuilder.AlterToSecondlyAt(System.Object[])">
            <summary>
            设置指定特定秒开始作业触发器
            </summary>
            <param name="fields">字段值</param>
            <returns><see cref="T:Furion.Schedule.TriggerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.TriggerBuilder.AlterToMinutely">
            <summary>
            设置每分钟开始作业触发器
            </summary>
            <returns><see cref="T:Furion.Schedule.TriggerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.TriggerBuilder.AlterToMinutelyAt(System.Object[])">
            <summary>
            设置每分钟特定秒开始作业触发器
            </summary>
            <param name="fields">字段值</param>
            <returns><see cref="T:Furion.Schedule.TriggerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.TriggerBuilder.AlterToHourly">
            <summary>
            设置每小时开始作业触发器
            </summary>
            <returns><see cref="T:Furion.Schedule.TriggerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.TriggerBuilder.AlterToHourlyAt(System.Object[])">
            <summary>
            设置每小时特定分钟开始作业触发器
            </summary>
            <param name="fields">字段值</param>
            <returns><see cref="T:Furion.Schedule.TriggerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.TriggerBuilder.AlterToDaily">
            <summary>
            设置每天（午夜）开始作业触发器
            </summary>
            <returns><see cref="T:Furion.Schedule.TriggerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.TriggerBuilder.AlterToDailyAt(System.Object[])">
            <summary>
            设置每天特定小时开始作业触发器
            </summary>
            <param name="fields">字段值</param>
            <returns><see cref="T:Furion.Schedule.TriggerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.TriggerBuilder.AlterToMonthly">
            <summary>
            设置每月1号（午夜）开始作业触发器
            </summary>
            <returns><see cref="T:Furion.Schedule.TriggerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.TriggerBuilder.AlterToMonthlyAt(System.Object[])">
            <summary>
            设置每月特定天（午夜）开始作业触发器
            </summary>
            <param name="fields">字段值</param>
            <returns><see cref="T:Furion.Schedule.TriggerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.TriggerBuilder.AlterToWeekly">
            <summary>
            设置每周日（午夜）开始作业触发器
            </summary>
            <returns><see cref="T:Furion.Schedule.TriggerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.TriggerBuilder.AlterToWeeklyAt(System.Object[])">
            <summary>
            设置每周特定星期几（午夜）开始作业触发器
            </summary>
            <param name="fields">字段值</param>
            <returns><see cref="T:Furion.Schedule.TriggerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.TriggerBuilder.AlterToYearly">
            <summary>
            设置每年1月1号（午夜）开始作业触发器
            </summary>
            <returns><see cref="T:Furion.Schedule.TriggerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.TriggerBuilder.AlterToYearlyAt(System.Object[])">
            <summary>
            设置每年特定月1号（午夜）开始作业触发器
            </summary>
            <param name="fields">字段值</param>
            <returns><see cref="T:Furion.Schedule.TriggerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.TriggerBuilder.AlterToWorkday">
            <summary>
            设置每周一至周五（午夜）开始作业触发器
            </summary>
            <returns><see cref="T:Furion.Schedule.TriggerBuilder"/></returns>
        </member>
        <member name="T:Furion.Schedule.IJobCancellationToken">
            <summary>
            取消作业执行 Token 器
            </summary>
        </member>
        <member name="M:Furion.Schedule.IJobCancellationToken.GetOrCreate(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            获取或创建取消作业执行 Token
            </summary>
            <param name="jobId">作业 Id</param>
            <param name="runId">作业触发器触发的唯一标识</param>
            <param name="stoppingToken">后台主机服务停止时取消任务 Token</param>
            <returns><see cref="T:System.Threading.CancellationToken"/></returns>
        </member>
        <member name="M:Furion.Schedule.IJobCancellationToken.Cancel(System.String,System.String,System.Boolean)">
            <summary>
            取消（完成）正在执行的执行
            </summary>
            <param name="jobId">作业 Id</param>
            <param name="triggerId">作业触发器 Id</param>
            <param name="outputLog">是否显示日志</param>
        </member>
        <member name="T:Furion.Schedule.JobCancellationToken">
            <summary>
            取消作业执行 Token 器
            </summary>
        </member>
        <member name="F:Furion.Schedule.JobCancellationToken._cancellationTokenSources">
            <summary>
            取消作业执行 Token 集合
            </summary>
        </member>
        <member name="F:Furion.Schedule.JobCancellationToken._logger">
            <summary>
            作业调度器日志服务
            </summary>
        </member>
        <member name="M:Furion.Schedule.JobCancellationToken.#ctor(Furion.Schedule.IScheduleLogger)">
            <summary>
            构造函数
            </summary>
            <param name="logger">作业调度器日志服务</param>
        </member>
        <member name="M:Furion.Schedule.JobCancellationToken.GetOrCreate(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            获取或创建取消作业执行 Token
            </summary>
            <param name="jobId">作业 Id</param>
            <param name="runId">作业触发器触发的唯一标识</param>
            <param name="stoppingToken">后台主机服务停止时取消任务 Token</param>
            <returns><see cref="T:System.Threading.CancellationToken"/></returns>
        </member>
        <member name="M:Furion.Schedule.JobCancellationToken.Cancel(System.String,System.String,System.Boolean)">
            <summary>
            取消（完成）正在执行的执行
            </summary>
            <param name="jobId">作业 Id</param>
            <param name="triggerId">作业触发器 Id</param>
            <param name="outputLog">是否显示日志</param>
        </member>
        <member name="M:Furion.Schedule.JobCancellationToken.GetTokenKey(System.String,System.String)">
            <summary>
            获取取消作业执行 Token 键
            </summary>
            <param name="jobId">作业 Id</param>
            <param name="runId">作业触发器触发的唯一标识</param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="T:Furion.Schedule.ClusterStatus">
            <summary>
            作业集群状态
            </summary>
        </member>
        <member name="F:Furion.Schedule.ClusterStatus.Crashed">
            <summary>
            宕机
            </summary>
        </member>
        <member name="F:Furion.Schedule.ClusterStatus.Working">
            <summary>
            工作中
            </summary>
        </member>
        <member name="F:Furion.Schedule.ClusterStatus.Waiting">
            <summary>
            等待被唤醒
            </summary>
        </member>
        <member name="T:Furion.Schedule.NamingConventions">
            <summary>
            命名转换器
            </summary>
            <remarks>用于生成持久化 SQL 语句</remarks>
        </member>
        <member name="F:Furion.Schedule.NamingConventions.CamelCase">
            <summary>
            驼峰命名法
            </summary>
            <remarks>第一个单词首字母小写</remarks>
        </member>
        <member name="F:Furion.Schedule.NamingConventions.Pascal">
            <summary>
            帕斯卡命名法
            </summary>
            <remarks>每一个单词首字母大写</remarks>
        </member>
        <member name="F:Furion.Schedule.NamingConventions.UnderScoreCase">
            <summary>
            下划线命名法
            </summary>
            <remarks>每次单词使用下划线连接且首字母都是小写</remarks>
        </member>
        <member name="T:Furion.Schedule.PersistenceBehavior">
            <summary>
            作业持久化行为
            </summary>
        </member>
        <member name="F:Furion.Schedule.PersistenceBehavior.Appended">
            <summary>
            添加
            </summary>
        </member>
        <member name="F:Furion.Schedule.PersistenceBehavior.Updated">
            <summary>
            更新
            </summary>
        </member>
        <member name="F:Furion.Schedule.PersistenceBehavior.Removed">
            <summary>
            删除
            </summary>
        </member>
        <member name="T:Furion.Schedule.ScheduleResult">
            <summary>
            作业调度器操作结果
            </summary>
        </member>
        <member name="F:Furion.Schedule.ScheduleResult.NotFound">
            <summary>
            不存在
            </summary>
        </member>
        <member name="F:Furion.Schedule.ScheduleResult.NotIdentify">
            <summary>
            未指定作业 Id
            </summary>
        </member>
        <member name="F:Furion.Schedule.ScheduleResult.Exists">
            <summary>
            已存在
            </summary>
        </member>
        <member name="F:Furion.Schedule.ScheduleResult.Succeed">
            <summary>
            成功
            </summary>
        </member>
        <member name="F:Furion.Schedule.ScheduleResult.Failed">
            <summary>
            失败
            </summary>
        </member>
        <member name="T:Furion.Schedule.SqlTypes">
            <summary>
            SQL 类型
            </summary>
            <remarks>用于控制生成 SQL 格式</remarks>
        </member>
        <member name="F:Furion.Schedule.SqlTypes.Standard">
            <summary>
            标准 SQL
            </summary>
        </member>
        <member name="F:Furion.Schedule.SqlTypes.SqlServer">
            <summary>
            SqlServer
            </summary>
        </member>
        <member name="F:Furion.Schedule.SqlTypes.Sqlite">
            <summary>
            Sqlite
            </summary>
        </member>
        <member name="F:Furion.Schedule.SqlTypes.MySql">
            <summary>
            MySql
            </summary>
        </member>
        <member name="F:Furion.Schedule.SqlTypes.PostgresSQL">
            <summary>
            PostgresSQL
            </summary>
        </member>
        <member name="F:Furion.Schedule.SqlTypes.Oracle">
            <summary>
            Oracle
            </summary>
        </member>
        <member name="F:Furion.Schedule.SqlTypes.Firebird">
            <summary>
            Firebird
            </summary>
        </member>
        <member name="T:Furion.Schedule.TriggerStatus">
            <summary>
            作业触发器状态
            </summary>
        </member>
        <member name="F:Furion.Schedule.TriggerStatus.Backlog">
            <summary>
            积压
            </summary>
            <remarks>起始时间大于当前时间</remarks>
        </member>
        <member name="F:Furion.Schedule.TriggerStatus.Ready">
            <summary>
            就绪
            </summary>
        </member>
        <member name="F:Furion.Schedule.TriggerStatus.Running">
            <summary>
            正在运行
            </summary>
        </member>
        <member name="F:Furion.Schedule.TriggerStatus.Pause">
            <summary>
            暂停
            </summary>
        </member>
        <member name="F:Furion.Schedule.TriggerStatus.Blocked">
            <summary>
            阻塞
            </summary>
            <remarks>本该执行但是没有执行</remarks>
        </member>
        <member name="F:Furion.Schedule.TriggerStatus.ErrorToReady">
            <summary>
            由失败进入就绪
            </summary>
            <remarks>运行错误当并未超出最大错误数，进入下一轮就绪</remarks>
        </member>
        <member name="F:Furion.Schedule.TriggerStatus.Archived">
            <summary>
            归档
            </summary>
            <remarks>结束时间小于当前时间</remarks>
        </member>
        <member name="F:Furion.Schedule.TriggerStatus.Panic">
            <summary>
            崩溃
            </summary>
            <remarks>错误次数超出了最大错误数</remarks>
        </member>
        <member name="F:Furion.Schedule.TriggerStatus.Overrun">
            <summary>
            超限
            </summary>
            <remarks>运行次数超出了最大限制</remarks>
        </member>
        <member name="F:Furion.Schedule.TriggerStatus.Unoccupied">
            <summary>
            无触发时间
            </summary>
            <remarks>下一次执行时间为 null </remarks>
        </member>
        <member name="F:Furion.Schedule.TriggerStatus.NotStart">
            <summary>
            未启动
            </summary>
        </member>
        <member name="F:Furion.Schedule.TriggerStatus.Unknown">
            <summary>
            未知作业触发器
            </summary>
            <remarks>作业触发器运行时类型为 null</remarks>
        </member>
        <member name="F:Furion.Schedule.TriggerStatus.Unhandled">
            <summary>
            未知作业处理程序
            </summary>
            <remarks>作业处理程序类型运行时类型为 null</remarks>
        </member>
        <member name="T:Furion.Schedule.JobClusterContext">
            <summary>
            作业集群服务上下文
            </summary>
        </member>
        <member name="M:Furion.Schedule.JobClusterContext.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="clusterId">作业集群 Id</param>
        </member>
        <member name="P:Furion.Schedule.JobClusterContext.ClusterId">
            <summary>
            作业集群 Id
            </summary>
        </member>
        <member name="T:Furion.Schedule.JobExecutedContext">
            <summary>
            作业执行后上下文
            </summary>
        </member>
        <member name="M:Furion.Schedule.JobExecutedContext.#ctor(Furion.Schedule.JobDetail,Furion.Schedule.Trigger,System.DateTime,System.String,System.IServiceProvider)">
            <summary>
            构造函数
            </summary>
            <param name="jobDetail">作业信息</param>
            <param name="trigger">作业触发器</param>
            <param name="occurrenceTime">作业计划触发时间</param>
            <param name="runId">作业触发器触发的唯一标识</param>
            <param name="serviceProvider">服务提供器</param>
        </member>
        <member name="P:Furion.Schedule.JobExecutedContext.ExecutedTime">
            <summary>
            执行后时间
            </summary>
        </member>
        <member name="P:Furion.Schedule.JobExecutedContext.Exception">
            <summary>
            异常信息
            </summary>
        </member>
        <member name="T:Furion.Schedule.JobExecutingContext">
            <summary>
            作业执行前上下文
            </summary>
        </member>
        <member name="M:Furion.Schedule.JobExecutingContext.#ctor(Furion.Schedule.JobDetail,Furion.Schedule.Trigger,System.DateTime,System.String,System.IServiceProvider)">
            <summary>
            构造函数
            </summary>
            <param name="jobDetail">作业信息</param>
            <param name="trigger">作业触发器</param>
            <param name="occurrenceTime">作业计划触发时间</param>
            <param name="runId">作业触发器触发的唯一标识</param>
            <param name="serviceProvider">服务提供器</param>
        </member>
        <member name="P:Furion.Schedule.JobExecutingContext.ExecutingTime">
            <summary>
            执行前时间
            </summary>
        </member>
        <member name="T:Furion.Schedule.JobExecutionContext">
            <summary>
            作业执行上下文基类
            </summary>
        </member>
        <member name="M:Furion.Schedule.JobExecutionContext.#ctor(Furion.Schedule.JobDetail,Furion.Schedule.Trigger,System.DateTime,System.String,System.IServiceProvider)">
            <summary>
            构造函数
            </summary>
            <param name="jobDetail">作业信息</param>
            <param name="trigger">作业触发器</param>
            <param name="occurrenceTime">作业计划触发时间</param>
            <param name="runId">作业触发器触发的唯一标识</param>
            <param name="serviceProvider">服务提供器</param>
        </member>
        <member name="P:Furion.Schedule.JobExecutionContext.ServiceProvider">
            <summary>
            服务提供器
            </summary>
        </member>
        <member name="P:Furion.Schedule.JobExecutionContext.JobId">
            <summary>
            作业 Id
            </summary>
        </member>
        <member name="P:Furion.Schedule.JobExecutionContext.TriggerId">
            <summary>
            作业触发器 Id
            </summary>
        </member>
        <member name="P:Furion.Schedule.JobExecutionContext.JobDetail">
            <summary>
            作业信息
            </summary>
        </member>
        <member name="P:Furion.Schedule.JobExecutionContext.Trigger">
            <summary>
            作业触发器
            </summary>
        </member>
        <member name="P:Furion.Schedule.JobExecutionContext.OccurrenceTime">
            <summary>
            作业计划触发时间
            </summary>
        </member>
        <member name="P:Furion.Schedule.JobExecutionContext.RunId">
            <summary>
            作业触发器触发的唯一标识
            </summary>
        </member>
        <member name="P:Furion.Schedule.JobExecutionContext.Result">
            <summary>
            本次执行结果
            </summary>
        </member>
        <member name="P:Furion.Schedule.JobExecutionContext.Mode">
            <summary>
            触发模式
            </summary>
            <remarks>默认为定时触发</remarks>
        </member>
        <member name="M:Furion.Schedule.JobExecutionContext.ConvertToJSON(Furion.Schedule.NamingConventions)">
            <summary>
            转换成 JSON 字符串
            </summary>
            <param name="naming">命名法</param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:Furion.Schedule.JobExecutionContext.ToString">
            <summary>
            作业执行上下文转字符串输出输出
            </summary>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="T:Furion.Schedule.JobFactoryContext">
            <summary>
            作业处理程序工厂上下文
            </summary>
        </member>
        <member name="M:Furion.Schedule.JobFactoryContext.#ctor(System.String,System.Type)">
            <summary>
            构造函数
            </summary>
            <param name="jobId">作业 Id</param>
            <param name="jobType">作业类型</param>
        </member>
        <member name="P:Furion.Schedule.JobFactoryContext.JobType">
            <summary>
            作业类型
            </summary>
        </member>
        <member name="P:Furion.Schedule.JobFactoryContext.JobId">
            <summary>
            作业 Id
            </summary>
        </member>
        <member name="P:Furion.Schedule.JobFactoryContext.Mode">
            <summary>
            触发模式
            </summary>
            <remarks>默认为定时触发</remarks>
        </member>
        <member name="T:Furion.Schedule.PersistenceContext">
            <summary>
            作业信息持久化上下文
            </summary>
        </member>
        <member name="M:Furion.Schedule.PersistenceContext.#ctor(Furion.Schedule.JobDetail,Furion.Schedule.PersistenceBehavior)">
            <summary>
            构造函数
            </summary>
            <param name="jobDetail">作业信息</param>
            <param name="behavior">作业持久化行为</param>
        </member>
        <member name="P:Furion.Schedule.PersistenceContext.JobId">
            <summary>
            作业 Id
            </summary>
        </member>
        <member name="P:Furion.Schedule.PersistenceContext.JobDetail">
            <summary>
            作业信息
            </summary>
        </member>
        <member name="P:Furion.Schedule.PersistenceContext.Behavior">
            <summary>
            作业持久化行为
            </summary>
        </member>
        <member name="M:Furion.Schedule.PersistenceContext.ConvertToSQL(System.String,Furion.Schedule.NamingConventions)">
            <summary>
            转换成 Sql 语句
            </summary>
            <param name="tableName">数据库表名</param>
            <param name="naming">命名法</param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:Furion.Schedule.PersistenceContext.ConvertToJSON(Furion.Schedule.NamingConventions)">
            <summary>
            转换成 JSON 语句
            </summary>
            <param name="naming">命名法</param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:Furion.Schedule.PersistenceContext.ConvertToMonitor(Furion.Schedule.NamingConventions)">
            <summary>
            转换成 Monitor 字符串
            </summary>
            <param name="naming">命名法</param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:Furion.Schedule.PersistenceContext.GetNaming(System.String,Furion.Schedule.NamingConventions)">
            <summary>
            根据不同的命名法返回属性名
            </summary>
            <param name="propertyName">属性名</param>
            <param name="naming">命名法</param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:Furion.Schedule.PersistenceContext.ToString">
            <summary>
            作业信息持久化上下文转字符串输出
            </summary>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="T:Furion.Schedule.PersistenceExecutionRecordContext">
            <summary>
            作业执行记录持久上下文
            </summary>
        </member>
        <member name="M:Furion.Schedule.PersistenceExecutionRecordContext.#ctor(Furion.Schedule.JobDetail,Furion.Schedule.Trigger,System.Int32,Furion.Schedule.TriggerTimeline)">
            <summary>
            构造函数
            </summary>
            <param name="jobDetail">作业信息</param>
            <param name="trigger">作业触发器</param>
            <param name="mode">触发模式</param>
            <param name="timeline">作业触发器运行记录</param>
        </member>
        <member name="P:Furion.Schedule.PersistenceExecutionRecordContext.JobId">
            <summary>
            作业 Id
            </summary>
        </member>
        <member name="P:Furion.Schedule.PersistenceExecutionRecordContext.JobDetail">
            <summary>
            作业信息
            </summary>
        </member>
        <member name="P:Furion.Schedule.PersistenceExecutionRecordContext.TriggerId">
            <summary>
            作业触发器 Id
            </summary>
        </member>
        <member name="P:Furion.Schedule.PersistenceExecutionRecordContext.Trigger">
            <summary>
            作业触发器
            </summary>
        </member>
        <member name="P:Furion.Schedule.PersistenceExecutionRecordContext.Mode">
            <summary>
            触发模式
            </summary>
            <remarks>默认为定时触发</remarks>
        </member>
        <member name="P:Furion.Schedule.PersistenceExecutionRecordContext.Timeline">
            <summary>
            作业触发器运行记录
            </summary>
        </member>
        <member name="M:Furion.Schedule.PersistenceExecutionRecordContext.ToString">
            <summary>
            作业执行记录持久上下文转字符串输出
            </summary>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="T:Furion.Schedule.PersistenceTriggerContext">
            <summary>
            作业触发器持久化上下文
            </summary>
        </member>
        <member name="M:Furion.Schedule.PersistenceTriggerContext.#ctor(Furion.Schedule.JobDetail,Furion.Schedule.Trigger,Furion.Schedule.PersistenceBehavior)">
            <summary>
            构造函数
            </summary>
            <param name="jobDetail">作业信息</param>
            <param name="trigger">作业触发器</param>
            <param name="behavior">作业持久化行为</param>
        </member>
        <member name="P:Furion.Schedule.PersistenceTriggerContext.TriggerId">
            <summary>
            作业触发器 Id
            </summary>
        </member>
        <member name="P:Furion.Schedule.PersistenceTriggerContext.Trigger">
            <summary>
            作业触发器
            </summary>
        </member>
        <member name="P:Furion.Schedule.PersistenceTriggerContext.Mode">
            <summary>
            触发模式
            </summary>
            <remarks>默认为定时触发</remarks>
        </member>
        <member name="M:Furion.Schedule.PersistenceTriggerContext.ConvertToSQL(System.String,Furion.Schedule.NamingConventions)">
            <summary>
            转换成 Sql 语句
            </summary>
            <param name="tableName">数据库表名</param>
            <param name="naming">命名法</param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:Furion.Schedule.PersistenceTriggerContext.ConvertToJSON(Furion.Schedule.NamingConventions)">
            <summary>
            转换成 JSON 语句
            </summary>
            <param name="naming">命名法</param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:Furion.Schedule.PersistenceTriggerContext.ConvertAllToJSON(Furion.Schedule.NamingConventions)">
            <summary>
            转换作业计划成 JSON 语句
            </summary>
            <param name="naming">命名法</param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:Furion.Schedule.PersistenceTriggerContext.ConvertToMonitor(Furion.Schedule.NamingConventions)">
            <summary>
            转换成 Monitor 字符串
            </summary>
            <param name="naming">命名法</param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:Furion.Schedule.PersistenceTriggerContext.ToString">
            <summary>
            作业触发器持久化上下文转字符串输出
            </summary>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="T:Furion.Schedule.DateTimeJsonConverter">
            <summary>
            DateTime 类型序列化/反序列化处理
            </summary>
        </member>
        <member name="M:Furion.Schedule.DateTimeJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            反序列化
            </summary>
            <param name="reader"><see cref="T:System.Text.Json.Utf8JsonReader"/></param>
            <param name="typeToConvert">需要转换的类型</param>
            <param name="options">序列化配置选项</param>
            <returns><see cref="T:System.DateTime"/></returns>
        </member>
        <member name="M:Furion.Schedule.DateTimeJsonConverter.Write(System.Text.Json.Utf8JsonWriter,System.DateTime,System.Text.Json.JsonSerializerOptions)">
            <summary>
            序列化
            </summary>
            <param name="writer"><see cref="T:System.Text.Json.Utf8JsonWriter"/></param>
            <param name="value"><see cref="T:System.DateTime"/></param>
            <param name="options">序列化配置选项</param>
        </member>
        <member name="T:Furion.Schedule.ScheduleUIMiddleware">
            <summary>
            Schedule 模块 UI 中间件
            </summary>
        </member>
        <member name="F:Furion.Schedule.ScheduleUIMiddleware._next">
            <summary>
            请求委托
            </summary>
        </member>
        <member name="F:Furion.Schedule.ScheduleUIMiddleware._schedulerFactory">
            <summary>
            作业计划工厂
            </summary>
        </member>
        <member name="M:Furion.Schedule.ScheduleUIMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,Furion.Schedule.ISchedulerFactory,Furion.Schedule.ScheduleUIOptions)">
            <summary>
            构造函数
            </summary>
            <param name="next">请求委托</param>
            <param name="schedulerFactory">作业计划工厂</param>
            <param name="options">UI 配置选项</param>
        </member>
        <member name="P:Furion.Schedule.ScheduleUIMiddleware.Options">
            <summary>
            UI 配置选项
            </summary>
        </member>
        <member name="P:Furion.Schedule.ScheduleUIMiddleware.ApiRequestPath">
            <summary>
            API 入口地址
            </summary>
        </member>
        <member name="M:Furion.Schedule.ScheduleUIMiddleware.InvokeAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            中间件执行方法
            </summary>
            <param name="context"><see cref="T:Microsoft.AspNetCore.Http.HttpContext"/></param>
            <returns><see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:Furion.Schedule.ScheduleUIMiddleware.SerializeToJson(System.Object)">
            <summary>
            将对象输出为 JSON 字符串
            </summary>
            <param name="obj">对象</param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="T:Furion.Schedule.ScheduleUIOptions">
            <summary>
            Schedule UI 配置选项
            </summary>
        </member>
        <member name="P:Furion.Schedule.ScheduleUIOptions.RequestPath">
            <summary>
            UI 入口地址
            </summary>
            <remarks>需以 / 开头，结尾不包含 / </remarks>
        </member>
        <member name="P:Furion.Schedule.ScheduleUIOptions.EnableDirectoryBrowsing">
            <summary>
            启用目录浏览
            </summary>
        </member>
        <member name="P:Furion.Schedule.ScheduleUIOptions.DisableOnProduction">
            <summary>
            生产环境关闭
            </summary>
            <remarks>默认 false</remarks>
        </member>
        <member name="P:Furion.Schedule.ScheduleUIOptions.VirtualPath">
            <summary>
            二级虚拟目录
            </summary>
            <remarks>需以 / 开头，结尾不包含 / </remarks>
        </member>
        <member name="P:Furion.Schedule.ScheduleUIOptions.DisplayEmptyTriggerJobs">
            <summary>
            是否显示空触发器的作业信息
            </summary>
        </member>
        <member name="P:Furion.Schedule.ScheduleUIOptions.DisplayHead">
            <summary>
            是否显示页头
            </summary>
        </member>
        <member name="P:Furion.Schedule.ScheduleUIOptions.DefaultExpandAllJobs">
            <summary>
            是否默认展开所有作业
            </summary>
        </member>
        <member name="T:Furion.Schedule.IJob">
            <summary>
            作业处理程序
            </summary>
        </member>
        <member name="M:Furion.Schedule.IJob.ExecuteAsync(Furion.Schedule.JobExecutingContext,System.Threading.CancellationToken)">
            <summary>
            具体处理逻辑
            </summary>
            <param name="context">作业执行前上下文</param>
            <param name="stoppingToken">取消任务 Token</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:Furion.Schedule.IJob.FallbackAsync(Furion.Schedule.JobExecutedContext,System.Threading.CancellationToken)">
            <summary>
            作业处理程序执行异常回退逻辑
            </summary>
            <param name="context">作业执行前上下文</param>
            <param name="stoppingToken">取消任务 Token</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="T:Furion.Schedule.IJobFactory">
            <summary>
            作业处理程序 <see cref="T:Furion.Schedule.IJob"/> 创建工厂
            </summary>
            <remarks>主要用于控制如何实例化 <see cref="T:Furion.Schedule.IJob"/></remarks>
        </member>
        <member name="M:Furion.Schedule.IJobFactory.CreateJob(System.IServiceProvider,Furion.Schedule.JobFactoryContext)">
            <summary>
            创建作业处理程序实例
            </summary>
            <param name="serviceProvider">服务提供器</param>
            <param name="context"><see cref="T:Furion.Schedule.JobFactoryContext"/> 上下文</param>
            <returns><see cref="T:Furion.Schedule.IJob"/></returns>
        </member>
        <member name="T:Furion.Schedule.JobDetail">
            <summary>
            作业信息
            </summary>
            <summary>
            作业信息
            </summary>
        </member>
        <member name="P:Furion.Schedule.JobDetail.JobId">
            <summary>
            作业 Id
            </summary>
        </member>
        <member name="P:Furion.Schedule.JobDetail.GroupName">
            <summary>
            作业组名称
            </summary>
        </member>
        <member name="P:Furion.Schedule.JobDetail.JobType">
            <summary>
            作业处理程序类型
            </summary>
            <remarks>存储的是类型的 FullName</remarks>
        </member>
        <member name="P:Furion.Schedule.JobDetail.AssemblyName">
            <summary>
            作业处理程序类型所在程序集
            </summary>
            <remarks>存储的是程序集 Name</remarks>
        </member>
        <member name="P:Furion.Schedule.JobDetail.Description">
            <summary>
            描述信息
            </summary>
        </member>
        <member name="P:Furion.Schedule.JobDetail.Concurrent">
            <summary>
            是否采用并行执行
            </summary>
            <remarks>如果设置为 false，那么使用串行执行</remarks>
        </member>
        <member name="P:Furion.Schedule.JobDetail.IncludeAnnotations">
            <summary>
            是否扫描 IJob 实现类 [Trigger] 特性触发器
            </summary>
        </member>
        <member name="P:Furion.Schedule.JobDetail.Properties">
            <summary>
            作业信息额外数据
            </summary>
        </member>
        <member name="P:Furion.Schedule.JobDetail.UpdatedTime">
            <summary>
            作业更新时间
            </summary>
        </member>
        <member name="P:Furion.Schedule.JobDetail.Blocked">
            <summary>
            标记其他作业正在执行
            </summary>
            <remarks>当 <see cref="P:Furion.Schedule.JobDetail.Concurrent"/> 为 false 时有效，也就是串行执行</remarks>
        </member>
        <member name="P:Furion.Schedule.JobDetail.RuntimeJobType">
            <summary>
            作业处理程序运行时类型
            </summary>
        </member>
        <member name="P:Furion.Schedule.JobDetail.RuntimeProperties">
            <summary>
            作业信息额外数据运行时实例
            </summary>
        </member>
        <member name="P:Furion.Schedule.JobDetail.DynamicExecuteAsync">
            <summary>
            运行时动态作业执行逻辑
            </summary>
        </member>
        <member name="M:Furion.Schedule.JobDetail.GetProperties">
            <summary>
            获取作业所有额外数据
            </summary>
            <returns><see cref="T:System.Collections.Generic.Dictionary`2"/></returns>
        </member>
        <member name="M:Furion.Schedule.JobDetail.ContainsProperty(System.String)">
            <summary>
            检查作业信息额外数据键是否存在
            </summary>
            <param name="key">键</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Furion.Schedule.JobDetail.GetProperty(System.String)">
            <summary>
            获取作业信息额外数据
            </summary>
            <param name="key">键</param>
            <returns><see cref="T:System.Object"/></returns>
        </member>
        <member name="M:Furion.Schedule.JobDetail.GetProperty``1(System.String)">
            <summary>
            获取作业信息额外数据
            </summary>
            <typeparam name="T">结果泛型类型</typeparam>
            <param name="key">键</param>
            <returns>T 类型</returns>
        </member>
        <member name="M:Furion.Schedule.JobDetail.AddProperty(System.String,System.Object)">
            <summary>
            添加作业信息额外数据
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
            <returns><see cref="T:Furion.Schedule.JobDetail"/></returns>
        </member>
        <member name="M:Furion.Schedule.JobDetail.AddOrUpdateProperty``1(System.String,``0,System.Func{``0,System.Object})">
            <summary>
            添加或更新作业信息额外数据
            </summary>
            <typeparam name="T">值类型</typeparam>
            <param name="key">键</param>
            <param name="newValue">新值</param>
            <param name="updateAction">更新委托，如果传递了该参数，那么键存在使则使用该参数的返回值</param>
            <returns><see cref="T:Furion.Schedule.JobDetail"/></returns>
        </member>
        <member name="M:Furion.Schedule.JobDetail.RemoveProperty(System.String)">
            <summary>
            删除作业信息额外数据
            </summary>
            <param name="key">键</param>
            <returns><see cref="T:Furion.Schedule.JobDetail"/></returns>
        </member>
        <member name="M:Furion.Schedule.JobDetail.ClearProperties">
            <summary>
            清空作业信息额外数据
            </summary>
            <returns><see cref="T:Furion.Schedule.JobDetail"/></returns>
        </member>
        <member name="M:Furion.Schedule.JobDetail.GetBuilder">
            <summary>
            获取作业信息构建器
            </summary>
            <returns><see cref="T:Furion.Schedule.JobBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.JobDetail.ToString">
            <summary>
            作业信息转字符串输出
            </summary>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="F:Furion.Schedule.JobDetail._namingColumnNames">
            <summary>
            带命名规则的数据库列名
            </summary>
        </member>
        <member name="M:Furion.Schedule.JobDetail.ColumnNames(Furion.Schedule.NamingConventions)">
            <summary>
            获取数据库列名
            </summary>
            <remarks>避免多次反射</remarks>
            <returns>string[]</returns>
        </member>
        <member name="M:Furion.Schedule.JobDetail.ConvertToSQL(System.String,Furion.Schedule.PersistenceBehavior,Furion.Schedule.NamingConventions)">
            <summary>
            转换成 Sql 语句
            </summary>
            <param name="tableName">数据库表名</param>
            <param name="behavior">持久化行为</param>
            <param name="naming">命名法</param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:Furion.Schedule.JobDetail.ConvertToInsertSQL(System.String,Furion.Schedule.NamingConventions)">
            <summary>
            转换成 Sql 新增语句
            </summary>
            <param name="tableName">数据库表名</param>
            <param name="naming">命名法</param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:Furion.Schedule.JobDetail.ConvertToUpdateSQL(System.String,Furion.Schedule.NamingConventions)">
            <summary>
            转换成 Sql 更新语句
            </summary>
            <param name="tableName">数据库表名</param>
            <param name="naming">命名法</param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:Furion.Schedule.JobDetail.ConvertToDeleteSQL(System.String,Furion.Schedule.NamingConventions)">
            <summary>
            转换成 Sql 删除语句
            </summary>
            <param name="tableName">数据库表名</param>
            <param name="naming">命名法</param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:Furion.Schedule.JobDetail.ConvertToJSON(Furion.Schedule.NamingConventions)">
            <summary>
            转换成 JSON 字符串
            </summary>
            <param name="naming">命名法</param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:Furion.Schedule.JobDetail.ConvertToMonitor(Furion.Schedule.NamingConventions)">
            <summary>
            转换成 Monitor 字符串
            </summary>
            <param name="naming">命名法</param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="T:Furion.Schedule.JobDetailOptions">
            <summary>
            作业信息配置选项
            </summary>
        </member>
        <member name="M:Furion.Schedule.JobDetailOptions.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:Furion.Schedule.JobDetailOptions.ConvertToSQL">
            <summary>
            重写 <see cref="P:Furion.Schedule.JobDetailOptions.ConvertToSQL"/>
            </summary>
        </member>
        <member name="P:Furion.Schedule.JobDetailOptions.LogEnabled">
            <summary>
            启用作业执行详细日志
            </summary>
        </member>
        <member name="P:Furion.Schedule.JobDetailOptions.InternalLogEnabled">
            <summary>
            <see cref="P:Furion.Schedule.JobDetailOptions.LogEnabled"/> 静态配置
            </summary>
        </member>
        <member name="P:Furion.Schedule.JobDetailOptions.ConvertToSQLConfigure">
            <summary>
            <see cref="P:Furion.Schedule.JobDetailOptions.ConvertToSQL"/> 静态配置
            </summary>
        </member>
        <member name="T:Furion.Schedule.JobExecutionRecordEventArgs">
            <summary>
            作业执行记录事件参数
            </summary>
        </member>
        <member name="M:Furion.Schedule.JobExecutionRecordEventArgs.#ctor(Furion.Schedule.PersistenceExecutionRecordContext)">
            <summary>
            构造函数
            </summary>
            <param name="context">作业执行记录持久上下文</param>
        </member>
        <member name="P:Furion.Schedule.JobExecutionRecordEventArgs.Context">
            <summary>
            作业执行记录持久上下文
            </summary>
        </member>
        <member name="T:Furion.Schedule.SchedulerEventArgs">
            <summary>
            作业计划事件参数
            </summary>
        </member>
        <member name="M:Furion.Schedule.SchedulerEventArgs.#ctor(Furion.Schedule.JobDetail)">
            <summary>
            构造函数
            </summary>
            <param name="jobDetail">作业信息</param>
        </member>
        <member name="P:Furion.Schedule.SchedulerEventArgs.JobDetail">
            <summary>
            作业信息
            </summary>
        </member>
        <member name="T:Furion.Schedule.IJobExecutor">
            <summary>
            作业处理程序执行器
            </summary>
        </member>
        <member name="M:Furion.Schedule.IJobExecutor.ExecuteAsync(Furion.Schedule.JobExecutingContext,Furion.Schedule.IJob,System.Threading.CancellationToken)">
            <summary>
            执行作业处理程序
            </summary>
            <remarks>在这里可以实现超时控制，失败重试控制等等</remarks>
            <param name="context">作业处理程序执行前上下文</param>
            <param name="jobHandler">作业处理程序</param>
            <param name="stoppingToken">取消任务 Token</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/> 实例</returns>
        </member>
        <member name="T:Furion.Schedule.ScheduleExtensions">
            <summary>
            Schedule 模块拓展类
            </summary>
        </member>
        <member name="M:Furion.Schedule.ScheduleExtensions.GetLogger(System.IServiceProvider)">
            <summary>
            获取动态作业日志对象
            </summary>
            <param name="serviceProvider"><see cref="T:System.IServiceProvider"/></param>
            <returns><see cref="T:Microsoft.Extensions.Logging.ILogger"/></returns>
        </member>
        <member name="M:Furion.Schedule.ScheduleExtensions.GetScheduleHostedService(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            获取调度主机服务对象
            </summary>
            <param name="services"><see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/></param>
            <returns><see cref="T:Furion.Schedule.ScheduleHostedService"/></returns>
        </member>
        <member name="M:Furion.Schedule.ScheduleExtensions.GetScheduleHostedService(System.IServiceProvider)">
            <summary>
            获取调度主机服务对象
            </summary>
            <param name="serviceProvider"><see cref="T:System.IServiceProvider"/></param>
            <returns><see cref="T:Furion.Schedule.ScheduleHostedService"/></returns>
        </member>
        <member name="M:Furion.Schedule.ScheduleExtensions.IsJobType(System.Type)">
            <summary>
            判断类型是否是 IJob 实现类型
            </summary>
            <param name="jobType">类型</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Furion.Schedule.ScheduleExtensions.ScanToBuilders(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            扫描类型集合并创建作业计划构建器集合
            </summary>
            <param name="jobTypes">作业类型集合</param>
            <returns><see cref="T:Furion.Schedule.SchedulerBuilder"/></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Furion.Schedule.ScheduleExtensions.ScanToBuilder(System.Type)">
            <summary>
            扫描类型并创建作业计划构建器
            </summary>
            <param name="jobType">作业类型</param>
            <returns><see cref="T:Furion.Schedule.SchedulerBuilder"/></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Furion.Schedule.ScheduleExtensions.ScanTriggers(System.Type)">
            <summary>
            扫描作业类型触发器特性
            </summary>
            <param name="jobType">作业类型</param>
            <returns><see cref="T:Furion.Schedule.TriggerBuilder"/>[]</returns>
        </member>
        <member name="M:Furion.Schedule.ScheduleExtensions.MapTo``1(System.Object,System.Object,System.Boolean,System.String[])">
            <summary>
            对象映射
            </summary>
            <typeparam name="TTarget">目标类型</typeparam>
            <param name="source">源对象</param>
            <param name="target">目标类型对象</param>
            <param name="ignoreNullValue">忽略空值</param>
            <param name="ignorePropertyNames">忽略属性名</param>
            <returns>目标类型对象</returns>
        </member>
        <member name="M:Furion.Schedule.ScheduleExtensions.ToFormatString(System.DateTime)">
            <summary>
            将时间格式化输出字符串
            </summary>
            <param name="dateTime"><see cref="T:System.DateTime"/></param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:Furion.Schedule.ScheduleExtensions.ToFormatString(System.Nullable{System.DateTime})">
            <summary>
            将时间格式化输出字符串
            </summary>
            <param name="dateTime"><see cref="T:System.DateTime"/></param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:Furion.Schedule.ScheduleExtensions.GetMaxLengthString(System.String,System.Int32)">
            <summary>
            字符串长度裁剪（不准确）
            </summary>
            <param name="str"><see cref="T:System.String"/></param>
            <param name="maxLength">长度，默认值 6</param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="T:Furion.Schedule.ISchedulerFactory">
            <summary>
            作业计划工厂服务
            </summary>
            <summary>
            作业计划工厂服务（内部服务）
            </summary>
        </member>
        <member name="M:Furion.Schedule.ISchedulerFactory.GetJobs(System.String,System.Boolean)">
            <summary>
            查找所有作业
            </summary>
            <param name="group">作业组名称</param>
            <param name="active">是否是有效的作业</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:Furion.Schedule.ISchedulerFactory.GetJobsOfModels(System.String,System.Boolean)">
            <summary>
            查找所有作业并转换成 <see cref="T:Furion.Schedule.SchedulerModel"/>
            </summary>
            <param name="group">作业组名称</param>
            <param name="active">是否是有效的作业</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:Furion.Schedule.ISchedulerFactory.GetNextRunJobs(System.DateTime,System.String)">
            <summary>
            查找下一批触发的作业
            </summary>
            <param name="startAt">起始时间</param>
            <param name="group">作业组名称</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:Furion.Schedule.ISchedulerFactory.GetNextRunJobsOfModels(System.DateTime,System.String)">
            <summary>
            查找下一批触发的作业并转换成 <see cref="T:Furion.Schedule.SchedulerModel"/>
            </summary>
            <param name="startAt">起始时间</param>
            <param name="group">作业组名称</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:Furion.Schedule.ISchedulerFactory.TryGetJob(System.String,Furion.Schedule.IScheduler@)">
            <summary>
            获取作业
            </summary>
            <param name="jobId">作业 Id</param>
            <param name="scheduler">作业计划</param>
            <returns><see cref="T:Furion.Schedule.ScheduleResult"/></returns>
        </member>
        <member name="M:Furion.Schedule.ISchedulerFactory.GetJob(System.String)">
            <summary>
            获取作业
            </summary>
            <param name="jobId">作业 Id</param>
            <returns><see cref="T:Furion.Schedule.IScheduler"/></returns>
        </member>
        <member name="M:Furion.Schedule.ISchedulerFactory.TrySaveJob(Furion.Schedule.SchedulerBuilder,Furion.Schedule.IScheduler@,System.Boolean)">
            <summary>
            保存作业
            </summary>
            <param name="schedulerBuilder">作业计划构建器</param>
            <param name="scheduler">作业计划</param>
            <param name="immediately">是否立即通知作业调度器重新载入</param>
            <returns><see cref="T:Furion.Schedule.ScheduleResult"/></returns>
        </member>
        <member name="M:Furion.Schedule.ISchedulerFactory.SaveJob(Furion.Schedule.SchedulerBuilder[])">
            <summary>
            保存作业
            </summary>
            <param name="schedulerBuilders">作业计划构建器集合</param>
        </member>
        <member name="M:Furion.Schedule.ISchedulerFactory.GroupSet(System.String,System.Action)">
            <summary>
            添加作业组作业
            </summary>
            <param name="groupSet">作业组名称</param>
            <param name="setAction"><see cref="T:System.Action"/></param>
        </member>
        <member name="M:Furion.Schedule.ISchedulerFactory.TryAddJob(Furion.Schedule.SchedulerBuilder,Furion.Schedule.IScheduler@,System.Boolean)">
            <summary>
            添加作业
            </summary>
            <param name="schedulerBuilder">作业计划构建器</param>
            <param name="scheduler">作业计划</param>
            <param name="immediately">是否立即通知作业调度器重新载入</param>
            <returns><see cref="T:Furion.Schedule.ScheduleResult"/></returns>
        </member>
        <member name="M:Furion.Schedule.ISchedulerFactory.AddJob(Furion.Schedule.SchedulerBuilder[])">
            <summary>
            添加作业
            </summary>
            <param name="schedulerBuilders">作业计划构建器集合</param>
        </member>
        <member name="M:Furion.Schedule.ISchedulerFactory.TryAddJob(Furion.Schedule.JobBuilder,Furion.Schedule.TriggerBuilder[],Furion.Schedule.IScheduler@,System.Boolean)">
            <summary>
            添加作业
            </summary>
            <param name="jobBuilder">作业信息构建器</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
            <param name="scheduler">作业计划</param>
            <param name="immediately">是否立即通知作业调度器重新载入</param>
            <returns><see cref="T:Furion.Schedule.ScheduleResult"/></returns>
        </member>
        <member name="M:Furion.Schedule.ISchedulerFactory.AddJob(Furion.Schedule.JobBuilder,Furion.Schedule.TriggerBuilder[])">
            <summary>
            添加作业
            </summary>
            <param name="jobBuilder">作业信息构建器</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
        </member>
        <member name="M:Furion.Schedule.ISchedulerFactory.TryAddJob``1(Furion.Schedule.TriggerBuilder[],Furion.Schedule.IScheduler@,System.Boolean)">
            <summary>
            添加作业
            </summary>
            <typeparam name="TJob"><see cref="T:Furion.Schedule.IJob"/> 实现类型</typeparam>
            <param name="triggerBuilders">作业触发器构建器集合</param>
            <param name="scheduler">作业计划</param>
            <param name="immediately">是否立即通知作业调度器重新载入</param>
            <remarks><see cref="T:Furion.Schedule.ScheduleResult"/></remarks>
        </member>
        <member name="M:Furion.Schedule.ISchedulerFactory.TryAddJob(System.Type,Furion.Schedule.TriggerBuilder[],Furion.Schedule.IScheduler@,System.Boolean)">
            <summary>
            添加作业
            </summary>
            <param name="jobType"><see cref="T:Furion.Schedule.IJob"/> 实现类型</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
            <param name="scheduler">作业计划</param>
            <param name="immediately">是否立即通知作业调度器重新载入</param>
            <remarks><see cref="T:Furion.Schedule.ScheduleResult"/></remarks>
        </member>
        <member name="M:Furion.Schedule.ISchedulerFactory.TryAddJob(System.Func{Furion.Schedule.JobExecutingContext,System.Threading.CancellationToken,System.Threading.Tasks.Task},Furion.Schedule.TriggerBuilder[],Furion.Schedule.IScheduler@,System.Boolean)">
            <summary>
            添加作业
            </summary>
            <param name="dynamicExecuteAsync">运行时动态作业执行逻辑</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
            <param name="scheduler">作业计划</param>
            <param name="immediately">是否立即通知作业调度器重新载入</param>
            <remarks><see cref="T:Furion.Schedule.ScheduleResult"/></remarks>
        </member>
        <member name="M:Furion.Schedule.ISchedulerFactory.AddJob``1(Furion.Schedule.TriggerBuilder[])">
            <summary>
            添加作业
            </summary>
            <typeparam name="TJob"><see cref="T:Furion.Schedule.IJob"/> 实现类型</typeparam>
            <param name="triggerBuilders">作业触发器构建器集合</param>
        </member>
        <member name="M:Furion.Schedule.ISchedulerFactory.AddJob(System.Type,Furion.Schedule.TriggerBuilder[])">
            <summary>
            添加作业
            </summary>
            <param name="jobType"><see cref="T:Furion.Schedule.IJob"/> 实现类型</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
        </member>
        <member name="M:Furion.Schedule.ISchedulerFactory.AddJob(System.Func{Furion.Schedule.JobExecutingContext,System.Threading.CancellationToken,System.Threading.Tasks.Task},Furion.Schedule.TriggerBuilder[])">
            <summary>
            添加作业
            </summary>
            <param name="dynamicExecuteAsync">运行时动态作业执行逻辑</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
        </member>
        <member name="M:Furion.Schedule.ISchedulerFactory.TryAddJob``1(System.String,Furion.Schedule.TriggerBuilder[],Furion.Schedule.IScheduler@,System.Boolean)">
            <summary>
            添加作业
            </summary>
            <typeparam name="TJob"><see cref="T:Furion.Schedule.IJob"/> 实现类型</typeparam>
            <param name="jobId">作业 Id</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
            <param name="scheduler">作业计划</param>
            <param name="immediately">是否立即通知作业调度器重新载入</param>
            <returns><see cref="T:Furion.Schedule.ScheduleResult"/></returns>
        </member>
        <member name="M:Furion.Schedule.ISchedulerFactory.TryAddJob(System.Type,System.String,Furion.Schedule.TriggerBuilder[],Furion.Schedule.IScheduler@,System.Boolean)">
            <summary>
            添加作业
            </summary>
            <param name="jobType"><see cref="T:Furion.Schedule.IJob"/> 实现类型</param>
            <param name="jobId">作业 Id</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
            <param name="scheduler">作业计划</param>
            <param name="immediately">是否立即通知作业调度器重新载入</param>
            <returns><see cref="T:Furion.Schedule.ScheduleResult"/></returns>
        </member>
        <member name="M:Furion.Schedule.ISchedulerFactory.TryAddJob(System.Func{Furion.Schedule.JobExecutingContext,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.String,Furion.Schedule.TriggerBuilder[],Furion.Schedule.IScheduler@,System.Boolean)">
            <summary>
            添加作业
            </summary>
            <param name="dynamicExecuteAsync">运行时动态作业执行逻辑</param>
            <param name="jobId">作业 Id</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
            <param name="scheduler">作业计划</param>
            <param name="immediately">是否立即通知作业调度器重新载入</param>
            <returns><see cref="T:Furion.Schedule.ScheduleResult"/></returns>
        </member>
        <member name="M:Furion.Schedule.ISchedulerFactory.AddJob``1(System.String,Furion.Schedule.TriggerBuilder[])">
            <summary>
            添加作业
            </summary>
            <typeparam name="TJob"><see cref="T:Furion.Schedule.IJob"/> 实现类型</typeparam>
            <param name="jobId">作业 Id</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
        </member>
        <member name="M:Furion.Schedule.ISchedulerFactory.AddJob(System.Type,System.String,Furion.Schedule.TriggerBuilder[])">
            <summary>
            添加作业
            </summary>
            <param name="jobType"><see cref="T:Furion.Schedule.IJob"/> 实现类型</param>
            <param name="jobId">作业 Id</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
        </member>
        <member name="M:Furion.Schedule.ISchedulerFactory.AddJob(System.Func{Furion.Schedule.JobExecutingContext,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.String,Furion.Schedule.TriggerBuilder[])">
            <summary>
            添加作业
            </summary>
            <param name="dynamicExecuteAsync">运行时动态作业执行逻辑</param>
            <param name="jobId">作业 Id</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
        </member>
        <member name="M:Furion.Schedule.ISchedulerFactory.TryAddJob``1(System.String,System.Boolean,Furion.Schedule.TriggerBuilder[],Furion.Schedule.IScheduler@,System.Boolean)">
            <summary>
            添加作业
            </summary>
            <typeparam name="TJob"><see cref="T:Furion.Schedule.IJob"/> 实现类型</typeparam>
            <param name="jobId">作业 Id</param>
            <param name="concurrent">是否采用并发执行</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
            <param name="scheduler">作业计划</param>
            <param name="immediately">是否立即通知作业调度器重新载入</param>
            <returns><see cref="T:Furion.Schedule.ScheduleResult"/></returns>
        </member>
        <member name="M:Furion.Schedule.ISchedulerFactory.TryAddJob(System.Type,System.String,System.Boolean,Furion.Schedule.TriggerBuilder[],Furion.Schedule.IScheduler@,System.Boolean)">
            <summary>
            添加作业
            </summary>
            <param name="jobType"><see cref="T:Furion.Schedule.IJob"/> 实现类型</param>
            <param name="jobId">作业 Id</param>
            <param name="concurrent">是否采用并发执行</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
            <param name="scheduler">作业计划</param>
            <param name="immediately">是否立即通知作业调度器重新载入</param>
            <returns><see cref="T:Furion.Schedule.ScheduleResult"/></returns>
        </member>
        <member name="M:Furion.Schedule.ISchedulerFactory.TryAddJob(System.Func{Furion.Schedule.JobExecutingContext,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.String,System.Boolean,Furion.Schedule.TriggerBuilder[],Furion.Schedule.IScheduler@,System.Boolean)">
            <summary>
            添加作业
            </summary>
            <param name="dynamicExecuteAsync">运行时动态作业执行逻辑</param>
            <param name="jobId">作业 Id</param>
            <param name="concurrent">是否采用并发执行</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
            <param name="scheduler">作业计划</param>
            <param name="immediately">是否立即通知作业调度器重新载入</param>
            <returns><see cref="T:Furion.Schedule.ScheduleResult"/></returns>
        </member>
        <member name="M:Furion.Schedule.ISchedulerFactory.AddJob``1(System.String,System.Boolean,Furion.Schedule.TriggerBuilder[])">
            <summary>
            添加作业
            </summary>
            <typeparam name="TJob"><see cref="T:Furion.Schedule.IJob"/> 实现类型</typeparam>
            <param name="jobId">作业 Id</param>
            <param name="concurrent">是否采用并发执行</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
        </member>
        <member name="M:Furion.Schedule.ISchedulerFactory.AddJob(System.Type,System.String,System.Boolean,Furion.Schedule.TriggerBuilder[])">
            <summary>
            添加作业
            </summary>
            <param name="jobType"><see cref="T:Furion.Schedule.IJob"/> 实现类型</param>
            <param name="jobId">作业 Id</param>
            <param name="concurrent">是否采用并发执行</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
        </member>
        <member name="M:Furion.Schedule.ISchedulerFactory.AddJob(System.Func{Furion.Schedule.JobExecutingContext,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.String,System.Boolean,Furion.Schedule.TriggerBuilder[])">
            <summary>
            添加作业
            </summary>
            <param name="dynamicExecuteAsync">运行时动态作业执行逻辑</param>
            <param name="jobId">作业 Id</param>
            <param name="concurrent">是否采用并发执行</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
        </member>
        <member name="M:Furion.Schedule.ISchedulerFactory.TryAddJob``1(System.Boolean,Furion.Schedule.TriggerBuilder[],Furion.Schedule.IScheduler@,System.Boolean)">
            <summary>
            添加作业
            </summary>
            <typeparam name="TJob"><see cref="T:Furion.Schedule.IJob"/> 实现类型</typeparam>
            <param name="concurrent">是否采用并发执行</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
            <param name="scheduler">作业计划</param>
            <param name="immediately">是否立即通知作业调度器重新载入</param>
            <returns><see cref="T:Furion.Schedule.ScheduleResult"/></returns>
        </member>
        <member name="M:Furion.Schedule.ISchedulerFactory.TryAddJob(System.Type,System.Boolean,Furion.Schedule.TriggerBuilder[],Furion.Schedule.IScheduler@,System.Boolean)">
            <summary>
            添加作业
            </summary>
            <param name="jobType"><see cref="T:Furion.Schedule.IJob"/> 实现类型</param>
            <param name="concurrent">是否采用并发执行</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
            <param name="scheduler">作业计划</param>
            <param name="immediately">是否立即通知作业调度器重新载入</param>
            <returns><see cref="T:Furion.Schedule.ScheduleResult"/></returns>
        </member>
        <member name="M:Furion.Schedule.ISchedulerFactory.TryAddJob(System.Func{Furion.Schedule.JobExecutingContext,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Boolean,Furion.Schedule.TriggerBuilder[],Furion.Schedule.IScheduler@,System.Boolean)">
            <summary>
            添加作业
            </summary>
            <param name="dynamicExecuteAsync">运行时动态作业执行逻辑</param>
            <param name="concurrent">是否采用并发执行</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
            <param name="scheduler">作业计划</param>
            <param name="immediately">是否立即通知作业调度器重新载入</param>
            <returns><see cref="T:Furion.Schedule.ScheduleResult"/></returns>
        </member>
        <member name="M:Furion.Schedule.ISchedulerFactory.AddJob``1(System.Boolean,Furion.Schedule.TriggerBuilder[])">
            <summary>
            添加作业
            </summary>
            <typeparam name="TJob"><see cref="T:Furion.Schedule.IJob"/> 实现类型</typeparam>
            <param name="concurrent">是否采用并发执行</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
        </member>
        <member name="M:Furion.Schedule.ISchedulerFactory.AddJob(System.Type,System.Boolean,Furion.Schedule.TriggerBuilder[])">
            <summary>
            添加作业
            </summary>
            <param name="jobType"><see cref="T:Furion.Schedule.IJob"/> 实现类型</param>
            <param name="concurrent">是否采用并发执行</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
        </member>
        <member name="M:Furion.Schedule.ISchedulerFactory.AddJob(System.Func{Furion.Schedule.JobExecutingContext,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Boolean,Furion.Schedule.TriggerBuilder[])">
            <summary>
            添加作业
            </summary>
            <param name="dynamicExecuteAsync">运行时动态作业执行逻辑</param>
            <param name="concurrent">是否采用并发执行</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
        </member>
        <member name="M:Furion.Schedule.ISchedulerFactory.AddHttpJob(System.Action{Furion.Schedule.HttpJobMessage},Furion.Schedule.TriggerBuilder[])">
            <summary>
            添加 HTTP 作业
            </summary>
            <param name="buildMessage">构建 HTTP 作业消息委托</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
            <returns><see cref="T:Furion.Schedule.ScheduleOptionsBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.ISchedulerFactory.TryAddHttpJob(System.Action{Furion.Schedule.HttpJobMessage},Furion.Schedule.TriggerBuilder[],Furion.Schedule.IScheduler@,System.Boolean)">
            <summary>
            添加 HTTP 作业
            </summary>
            <param name="buildMessage">构建 HTTP 作业消息委托</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
            <param name="scheduler">作业计划</param>
            <param name="immediately">是否立即通知作业调度器重新载入</param>
            <returns><see cref="T:Furion.Schedule.ScheduleResult"/></returns>
        </member>
        <member name="M:Furion.Schedule.ISchedulerFactory.AddHttpJob``1(System.Action{Furion.Schedule.HttpJobMessage},Furion.Schedule.TriggerBuilder[])">
            <summary>
            添加 HTTP 作业
            </summary>
            <typeparam name="TJob"><see cref="T:Furion.Schedule.IJob"/> 实现类型</typeparam>
            <param name="buildMessage">构建 HTTP 作业消息委托</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
            <returns><see cref="T:Furion.Schedule.ScheduleOptionsBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.ISchedulerFactory.TryAddHttpJob``1(System.Action{Furion.Schedule.HttpJobMessage},Furion.Schedule.TriggerBuilder[],Furion.Schedule.IScheduler@,System.Boolean)">
            <summary>
            添加 HTTP 作业
            </summary>
            <typeparam name="TJob"><see cref="T:Furion.Schedule.IJob"/> 实现类型</typeparam>
            <param name="buildMessage">构建 HTTP 作业消息委托</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
            <param name="scheduler">作业计划</param>
            <param name="immediately">是否立即通知作业调度器重新载入</param>
            <returns><see cref="T:Furion.Schedule.ScheduleResult"/></returns>
        </member>
        <member name="M:Furion.Schedule.ISchedulerFactory.AddHttpJob(System.Action{Furion.Schedule.HttpJobMessage},System.String,Furion.Schedule.TriggerBuilder[])">
            <summary>
            添加 HTTP 作业
            </summary>
            <param name="buildMessage">构建 HTTP 作业消息委托</param>
            <param name="jobId">作业 ID</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
            <returns><see cref="T:Furion.Schedule.ScheduleOptionsBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.ISchedulerFactory.TryAddHttpJob(System.Action{Furion.Schedule.HttpJobMessage},System.String,Furion.Schedule.TriggerBuilder[],Furion.Schedule.IScheduler@,System.Boolean)">
            <summary>
            添加 HTTP 作业
            </summary>
            <param name="buildMessage">构建 HTTP 作业消息委托</param>
            <param name="jobId">作业 ID</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
            <param name="scheduler">作业计划</param>
            <param name="immediately">是否立即通知作业调度器重新载入</param>
            <returns><see cref="T:Furion.Schedule.ScheduleResult"/></returns>
        </member>
        <member name="M:Furion.Schedule.ISchedulerFactory.AddHttpJob``1(System.Action{Furion.Schedule.HttpJobMessage},System.String,Furion.Schedule.TriggerBuilder[])">
            <summary>
            添加 HTTP 作业
            </summary>
            <typeparam name="TJob"><see cref="T:Furion.Schedule.IJob"/> 实现类型</typeparam>
            <param name="buildMessage">构建 HTTP 作业消息委托</param>
            <param name="jobId">作业 ID</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
            <returns><see cref="T:Furion.Schedule.ScheduleOptionsBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.ISchedulerFactory.TryAddHttpJob``1(System.Action{Furion.Schedule.HttpJobMessage},System.String,Furion.Schedule.TriggerBuilder[],Furion.Schedule.IScheduler@,System.Boolean)">
            <summary>
            添加 HTTP 作业
            </summary>
            <typeparam name="TJob"><see cref="T:Furion.Schedule.IJob"/> 实现类型</typeparam>
            <param name="buildMessage">构建 HTTP 作业消息委托</param>
            <param name="jobId">作业 ID</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
            <param name="scheduler">作业计划</param>
            <param name="immediately">是否立即通知作业调度器重新载入</param>
            <returns><see cref="T:Furion.Schedule.ScheduleResult"/></returns>
        </member>
        <member name="M:Furion.Schedule.ISchedulerFactory.AddHttpJob(System.Action{Furion.Schedule.HttpJobMessage},System.String,System.Boolean,Furion.Schedule.TriggerBuilder[])">
            <summary>
            添加 HTTP 作业
            </summary>
            <param name="buildMessage">构建 HTTP 作业消息委托</param>
            <param name="jobId">作业 ID</param>
            <param name="concurrent">是否采用并发执行</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
            <returns><see cref="T:Furion.Schedule.ScheduleOptionsBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.ISchedulerFactory.TryAddHttpJob(System.Action{Furion.Schedule.HttpJobMessage},System.String,System.Boolean,Furion.Schedule.TriggerBuilder[],Furion.Schedule.IScheduler@,System.Boolean)">
            <summary>
            添加 HTTP 作业
            </summary>
            <param name="buildMessage">构建 HTTP 作业消息委托</param>
            <param name="jobId">作业 ID</param>
            <param name="concurrent">是否采用并发执行</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
            <param name="scheduler">作业计划</param>
            <param name="immediately">是否立即通知作业调度器重新载入</param>
            <returns><see cref="T:Furion.Schedule.ScheduleResult"/></returns>
        </member>
        <member name="M:Furion.Schedule.ISchedulerFactory.AddHttpJob``1(System.Action{Furion.Schedule.HttpJobMessage},System.String,System.Boolean,Furion.Schedule.TriggerBuilder[])">
            <summary>
            添加 HTTP 作业
            </summary>
            <typeparam name="TJob"><see cref="T:Furion.Schedule.IJob"/> 实现类型</typeparam>
            <param name="buildMessage">构建 HTTP 作业消息委托</param>
            <param name="jobId">作业 ID</param>
            <param name="concurrent">是否采用并发执行</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
            <returns><see cref="T:Furion.Schedule.ScheduleOptionsBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.ISchedulerFactory.TryAddHttpJob``1(System.Action{Furion.Schedule.HttpJobMessage},System.String,System.Boolean,Furion.Schedule.TriggerBuilder[],Furion.Schedule.IScheduler@,System.Boolean)">
            <summary>
            添加 HTTP 作业
            </summary>
            <typeparam name="TJob"><see cref="T:Furion.Schedule.IJob"/> 实现类型</typeparam>
            <param name="buildMessage">构建 HTTP 作业消息委托</param>
            <param name="jobId">作业 ID</param>
            <param name="concurrent">是否采用并发执行</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
            <param name="scheduler">作业计划</param>
            <param name="immediately">是否立即通知作业调度器重新载入</param>
            <returns><see cref="T:Furion.Schedule.ScheduleResult"/></returns>
        </member>
        <member name="M:Furion.Schedule.ISchedulerFactory.AddHttpJob(System.Action{Furion.Schedule.HttpJobMessage},System.Boolean,Furion.Schedule.TriggerBuilder[])">
            <summary>
            添加 HTTP 作业
            </summary>
            <param name="buildMessage">构建 HTTP 作业消息委托</param>
            <param name="concurrent">是否采用并发执行</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
            <returns><see cref="T:Furion.Schedule.ScheduleOptionsBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.ISchedulerFactory.TryAddHttpJob(System.Action{Furion.Schedule.HttpJobMessage},System.Boolean,Furion.Schedule.TriggerBuilder[],Furion.Schedule.IScheduler@,System.Boolean)">
            <summary>
            添加 HTTP 作业
            </summary>
            <param name="buildMessage">构建 HTTP 作业消息委托</param>
            <param name="concurrent">是否采用并发执行</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
            <param name="scheduler">作业计划</param>
            <param name="immediately">是否立即通知作业调度器重新载入</param>
            <returns><see cref="T:Furion.Schedule.ScheduleResult"/></returns>
        </member>
        <member name="M:Furion.Schedule.ISchedulerFactory.AddHttpJob``1(System.Action{Furion.Schedule.HttpJobMessage},System.Boolean,Furion.Schedule.TriggerBuilder[])">
            <summary>
            添加 HTTP 作业
            </summary>
            <typeparam name="TJob"><see cref="T:Furion.Schedule.IJob"/> 实现类型</typeparam>
            <param name="buildMessage">构建 HTTP 作业消息委托</param>
            <param name="concurrent">是否采用并发执行</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
            <returns><see cref="T:Furion.Schedule.ScheduleOptionsBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.ISchedulerFactory.TryAddHttpJob``1(System.Action{Furion.Schedule.HttpJobMessage},System.Boolean,Furion.Schedule.TriggerBuilder[],Furion.Schedule.IScheduler@,System.Boolean)">
            <summary>
            添加 HTTP 作业
            </summary>
            <typeparam name="TJob"><see cref="T:Furion.Schedule.IJob"/> 实现类型</typeparam>
            <param name="buildMessage">构建 HTTP 作业消息委托</param>
            <param name="concurrent">是否采用并发执行</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
            <param name="scheduler">作业计划</param>
            <param name="immediately">是否立即通知作业调度器重新载入</param>
            <returns><see cref="T:Furion.Schedule.ScheduleResult"/></returns>
        </member>
        <member name="M:Furion.Schedule.ISchedulerFactory.TryUpdateJob(Furion.Schedule.SchedulerBuilder,Furion.Schedule.IScheduler@,System.Boolean)">
            <summary>
            更新作业
            </summary>
            <param name="schedulerBuilder">作业计划构建器</param>
            <param name="scheduler">新的作业计划</param>
            <param name="immediately">是否立即通知作业调度器重新载入</param>
            <returns><see cref="T:Furion.Schedule.ScheduleResult"/></returns>
        </member>
        <member name="M:Furion.Schedule.ISchedulerFactory.UpdateJob(Furion.Schedule.SchedulerBuilder[])">
            <summary>
            更新作业
            </summary>
            <param name="schedulerBuilders">作业计划构建器集合</param>
        </member>
        <member name="M:Furion.Schedule.ISchedulerFactory.TryRemoveJob(System.String,Furion.Schedule.IScheduler@,System.Boolean)">
            <summary>
            删除作业
            </summary>
            <param name="jobId">作业 Id</param>
            <param name="scheduler">作业计划</param>
            <param name="immediately">是否立即通知作业调度器重新载入</param>
            <returns><see cref="T:Furion.Schedule.ScheduleResult"/></returns>
        </member>
        <member name="M:Furion.Schedule.ISchedulerFactory.RemoveJob(System.String[])">
            <summary>
            删除作业
            </summary>
            <param name="jobIds">作业 Id 集合</param>
        </member>
        <member name="M:Furion.Schedule.ISchedulerFactory.TryRemoveJob(Furion.Schedule.IScheduler,System.Boolean)">
            <summary>
            删除作业
            </summary>
            <param name="scheduler">作业计划</param>
            <param name="immediately">是否立即通知作业调度器重新载入</param>
            <returns><see cref="T:Furion.Schedule.ScheduleResult"/></returns>
        </member>
        <member name="M:Furion.Schedule.ISchedulerFactory.RemoveJob(Furion.Schedule.IScheduler[])">
            <summary>
            删除作业
            </summary>
            <param name="schedulers">作业计划集合</param>
        </member>
        <member name="M:Furion.Schedule.ISchedulerFactory.ContainsJob(System.String,System.String)">
            <summary>
            检查作业是否存在
            </summary>
            <param name="jobId">作业 Id</param>
            <param name="group">作业组名称</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Furion.Schedule.ISchedulerFactory.StartAll(System.String)">
            <summary>
            启动所有作业
            </summary>
            <param name="group">作业组名称</param>
        </member>
        <member name="M:Furion.Schedule.ISchedulerFactory.PauseAll(System.String)">
            <summary>
            暂停所有作业
            </summary>
            <param name="group">作业组名称</param>
        </member>
        <member name="M:Furion.Schedule.ISchedulerFactory.RemoveAll(System.String)">
            <summary>
            删除所有作业
            </summary>
            <param name="group">作业组名称</param>
        </member>
        <member name="M:Furion.Schedule.ISchedulerFactory.PersistAll(System.String)">
            <summary>
            强制触发所有作业持久化记录
            </summary>
            <param name="group">作业组名称</param>
        </member>
        <member name="M:Furion.Schedule.ISchedulerFactory.CollateAll(System.String)">
            <summary>
            校对所有作业
            </summary>
            <param name="group">作业组名称</param>
        </member>
        <member name="M:Furion.Schedule.ISchedulerFactory.TryRunJob(System.String,Furion.Schedule.IScheduler@,System.String)">
            <summary>
            立即执行作业
            </summary>
            <param name="jobId">作业 Id</param>
            <param name="scheduler">作业计划</param>
            <param name="triggerId">作业触发器 Id</param>
            <returns><see cref="T:Furion.Schedule.ScheduleResult"/></returns>
        </member>
        <member name="M:Furion.Schedule.ISchedulerFactory.RunJob(System.String[])">
            <summary>
            立即执行作业
            </summary>
            <param name="jobIds">作业 Id 集合</param>
        </member>
        <member name="M:Furion.Schedule.ISchedulerFactory.TryRunJob(Furion.Schedule.IScheduler,System.String)">
            <summary>
            立即执行作业
            </summary>
            <param name="scheduler">作业计划</param>
            <param name="triggerId">作业触发器 Id</param>
            <returns><see cref="T:Furion.Schedule.ScheduleResult"/></returns>
        </member>
        <member name="M:Furion.Schedule.ISchedulerFactory.RunJob(Furion.Schedule.IScheduler[])">
            <summary>
            立即执行作业
            </summary>
            <param name="schedulers">作业计划集合</param>
        </member>
        <member name="M:Furion.Schedule.ISchedulerFactory.TryCancelJob(System.String,Furion.Schedule.IScheduler@,System.String)">
            <summary>
            取消正在执行的作业
            </summary>
            <param name="jobId">作业 Id</param>
            <param name="scheduler">作业计划</param>
            <param name="triggerId">作业触发器 Id</param>
            <returns><see cref="T:Furion.Schedule.ScheduleResult"/></returns>
        </member>
        <member name="M:Furion.Schedule.ISchedulerFactory.CancelJob(System.String[])">
            <summary>
            取消正在执行的作业
            </summary>
            <param name="jobIds">作业 Id 集合</param>
        </member>
        <member name="M:Furion.Schedule.ISchedulerFactory.TryCancelJob(Furion.Schedule.IScheduler,System.String)">
            <summary>
            取消正在执行的作业
            </summary>
            <param name="scheduler">作业计划</param>
            <param name="triggerId">作业触发器 Id</param>
            <returns><see cref="T:Furion.Schedule.ScheduleResult"/></returns>
        </member>
        <member name="M:Furion.Schedule.ISchedulerFactory.CancelJob(Furion.Schedule.IScheduler[])">
            <summary>
            取消正在执行的作业
            </summary>
            <param name="schedulers">作业计划集合</param>
        </member>
        <member name="M:Furion.Schedule.ISchedulerFactory.TryStartJob(System.String,Furion.Schedule.IScheduler@)">
            <summary>
            启动作业
            </summary>
            <param name="jobId">作业 Id</param>
            <param name="scheduler">作业计划</param>
            <returns><see cref="T:Furion.Schedule.ScheduleResult"/></returns>
        </member>
        <member name="M:Furion.Schedule.ISchedulerFactory.StartJob(System.String[])">
            <summary>
            启动作业
            </summary>
            <param name="jobIds">作业 Id 集合</param>
        </member>
        <member name="M:Furion.Schedule.ISchedulerFactory.TryStartJob(Furion.Schedule.IScheduler)">
            <summary>
            启动作业
            </summary>
            <param name="scheduler">作业计划</param>
            <returns><see cref="T:Furion.Schedule.ScheduleResult"/></returns>
        </member>
        <member name="M:Furion.Schedule.ISchedulerFactory.StartJob(Furion.Schedule.IScheduler[])">
            <summary>
            启动作业
            </summary>
            <param name="schedulers">作业计划集合</param>
        </member>
        <member name="M:Furion.Schedule.ISchedulerFactory.TryPauseJob(System.String,Furion.Schedule.IScheduler@)">
            <summary>
            暂停作业
            </summary>
            <param name="jobId">作业 Id</param>
            <param name="scheduler">作业计划</param>
            <returns><see cref="T:Furion.Schedule.ScheduleResult"/></returns>
        </member>
        <member name="M:Furion.Schedule.ISchedulerFactory.PauseJob(System.String[])">
            <summary>
            暂停作业
            </summary>
            <param name="jobIds">作业 Id 集合</param>
        </member>
        <member name="M:Furion.Schedule.ISchedulerFactory.TryPauseJob(Furion.Schedule.IScheduler)">
            <summary>
            暂停作业
            </summary>
            <param name="scheduler">作业计划</param>
            <returns><see cref="T:Furion.Schedule.ScheduleResult"/></returns>
        </member>
        <member name="M:Furion.Schedule.ISchedulerFactory.PauseJob(Furion.Schedule.IScheduler[])">
            <summary>
            暂停作业
            </summary>
            <param name="schedulers">作业计划集合</param>
        </member>
        <member name="E:Furion.Schedule.ISchedulerFactory.OnChanged">
            <summary>
            作业计划变更通知
            </summary>
        </member>
        <member name="M:Furion.Schedule.ISchedulerFactory.PreloadAsync(System.Threading.CancellationToken)">
            <summary>
            作业调度器初始化
            </summary>
            <param name="stoppingToken">取消任务 Token</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:Furion.Schedule.ISchedulerFactory.GetCurrentRunJobs(System.DateTime,System.String)">
            <summary>
            查找即将触发的作业
            </summary>
            <param name="startAt">起始时间</param>
            <param name="group">作业组名称</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:Furion.Schedule.ISchedulerFactory.GetCurrentRunJobsOfModels(System.DateTime,System.String)">
            <summary>
            查找即将触发的作业并转换成 <see cref="T:Furion.Schedule.SchedulerModel"/>
            </summary>
            <param name="startAt">起始时间</param>
            <param name="group">作业组名称</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:Furion.Schedule.ISchedulerFactory.SleepAsync(System.DateTime)">
            <summary>
            使作业调度器进入休眠状态
            </summary>
            <param name="startAt">起始时间</param>
        </member>
        <member name="M:Furion.Schedule.ISchedulerFactory.CancelSleep">
            <summary>
            取消作业调度器休眠状态（强制唤醒）
            </summary>
        </member>
        <member name="M:Furion.Schedule.ISchedulerFactory.Shorthand(Furion.Schedule.JobDetail,Furion.Schedule.PersistenceBehavior)">
            <summary>
            将作业信息运行数据写入持久化
            </summary>
            <param name="jobDetail">作业信息</param>
            <param name="behavior">作业持久化行为</param>
        </member>
        <member name="M:Furion.Schedule.ISchedulerFactory.Shorthand(Furion.Schedule.JobDetail,Furion.Schedule.Trigger,Furion.Schedule.PersistenceBehavior)">
            <summary>
            将作业触发器运行数据写入持久化
            </summary>
            <param name="jobDetail">作业信息</param>
            <param name="trigger">作业触发器</param>
            <param name="behavior">作业持久化行为</param>
        </member>
        <member name="M:Furion.Schedule.ISchedulerFactory.CreateJob(System.IServiceProvider,Furion.Schedule.JobFactoryContext)">
            <summary>
            创建作业处理程序实例
            </summary>
            <param name="serviceProvider">服务提供器</param>
            <param name="context"><see cref="T:Furion.Schedule.JobFactoryContext"/> 上下文</param>
            <returns><see cref="T:Furion.Schedule.IJob"/></returns>
        </member>
        <member name="M:Furion.Schedule.ISchedulerFactory.GCCollect">
            <summary>
            GC 垃圾回收器回收处理
            </summary>
            <remarks>避免频繁 GC 回收</remarks>
        </member>
        <member name="T:Furion.Schedule.SchedulerFactory">
            <summary>
            作业计划工厂默认实现类
            </summary>
            <summary>
            作业计划工厂默认实现类（内部服务）
            </summary>
        </member>
        <member name="F:Furion.Schedule.SchedulerFactory._groupSet">
            <summary>
            当前作业组名称
            </summary>
        </member>
        <member name="M:Furion.Schedule.SchedulerFactory.GetJobs(System.String,System.Boolean)">
            <summary>
            查找所有作业
            </summary>
            <param name="group">作业组名称</param>
            <param name="active">是否是有效的作业</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:Furion.Schedule.SchedulerFactory.GetJobsOfModels(System.String,System.Boolean)">
            <summary>
            查找所有作业并转换成 <see cref="T:Furion.Schedule.SchedulerModel"/>
            </summary>
            <param name="group">作业组名称</param>
            <param name="active">是否是有效的作业</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:Furion.Schedule.SchedulerFactory.GetNextRunJobs(System.DateTime,System.String)">
            <summary>
            查找下一批触发的作业
            </summary>
            <param name="startAt">起始时间</param>
            <param name="group">作业组名称</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:Furion.Schedule.SchedulerFactory.GetNextRunJobsOfModels(System.DateTime,System.String)">
            <summary>
            查找下一批触发的作业并转换成 <see cref="T:Furion.Schedule.SchedulerModel"/>
            </summary>
            <param name="startAt">起始时间</param>
            <param name="group">作业组名称</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:Furion.Schedule.SchedulerFactory.TryGetJob(System.String,Furion.Schedule.IScheduler@)">
            <summary>
            获取作业
            </summary>
            <param name="jobId">作业 Id</param>
            <param name="scheduler">作业计划</param>
            <returns><see cref="T:Furion.Schedule.ScheduleResult"/></returns>
        </member>
        <member name="M:Furion.Schedule.SchedulerFactory.GetJob(System.String)">
            <summary>
            获取作业
            </summary>
            <param name="jobId">作业 Id</param>
            <returns><see cref="T:Furion.Schedule.IScheduler"/></returns>
        </member>
        <member name="M:Furion.Schedule.SchedulerFactory.TrySaveJob(Furion.Schedule.SchedulerBuilder,Furion.Schedule.IScheduler@,System.Boolean)">
            <summary>
            保存作业
            </summary>
            <param name="schedulerBuilder">作业计划构建器</param>
            <param name="scheduler">作业计划</param>
            <param name="immediately">是否立即通知作业调度器重新载入</param>
            <returns><see cref="T:Furion.Schedule.ScheduleResult"/></returns>
        </member>
        <member name="M:Furion.Schedule.SchedulerFactory.SaveJob(Furion.Schedule.SchedulerBuilder[])">
            <summary>
            保存作业
            </summary>
            <param name="schedulerBuilders">作业计划构建器集合</param>
        </member>
        <member name="M:Furion.Schedule.SchedulerFactory.GroupSet(System.String,System.Action)">
            <summary>
            添加作业组作业
            </summary>
            <param name="groupSet">作业组名称</param>
            <param name="setAction"><see cref="T:System.Action"/></param>
        </member>
        <member name="M:Furion.Schedule.SchedulerFactory.TryAddJob(Furion.Schedule.SchedulerBuilder,Furion.Schedule.IScheduler@,System.Boolean)">
            <summary>
            添加作业
            </summary>
            <param name="schedulerBuilder">作业计划构建器</param>
            <param name="scheduler">作业计划</param>
            <param name="immediately">是否立即通知作业调度器重新载入</param>
            <returns><see cref="T:Furion.Schedule.ScheduleResult"/></returns>
        </member>
        <member name="M:Furion.Schedule.SchedulerFactory.AddJob(Furion.Schedule.SchedulerBuilder[])">
            <summary>
            添加作业
            </summary>
            <param name="schedulerBuilders">作业计划构建器集合</param>
        </member>
        <member name="M:Furion.Schedule.SchedulerFactory.TryAddJob(Furion.Schedule.JobBuilder,Furion.Schedule.TriggerBuilder[],Furion.Schedule.IScheduler@,System.Boolean)">
            <summary>
            添加作业
            </summary>
            <param name="jobBuilder">作业信息构建器</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
            <param name="scheduler">作业计划</param>
            <param name="immediately">是否立即通知作业调度器重新载入</param>
            <returns><see cref="T:Furion.Schedule.ScheduleResult"/></returns>
        </member>
        <member name="M:Furion.Schedule.SchedulerFactory.AddJob(Furion.Schedule.JobBuilder,Furion.Schedule.TriggerBuilder[])">
            <summary>
            添加作业
            </summary>
            <param name="jobBuilder">作业信息构建器</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
        </member>
        <member name="M:Furion.Schedule.SchedulerFactory.TryAddJob``1(Furion.Schedule.TriggerBuilder[],Furion.Schedule.IScheduler@,System.Boolean)">
            <summary>
            添加作业
            </summary>
            <typeparam name="TJob"><see cref="T:Furion.Schedule.IJob"/> 实现类型</typeparam>
            <param name="triggerBuilders">作业触发器构建器集合</param>
            <param name="scheduler">作业计划</param>
            <param name="immediately">是否立即通知作业调度器重新载入</param>
            <remarks><see cref="T:Furion.Schedule.ScheduleResult"/></remarks>
        </member>
        <member name="M:Furion.Schedule.SchedulerFactory.TryAddJob(System.Type,Furion.Schedule.TriggerBuilder[],Furion.Schedule.IScheduler@,System.Boolean)">
            <summary>
            添加作业
            </summary>
            <param name="jobType"><see cref="T:Furion.Schedule.IJob"/> 实现类型</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
            <param name="scheduler">作业计划</param>
            <param name="immediately">是否立即通知作业调度器重新载入</param>
            <remarks><see cref="T:Furion.Schedule.ScheduleResult"/></remarks>
        </member>
        <member name="M:Furion.Schedule.SchedulerFactory.TryAddJob(System.Func{Furion.Schedule.JobExecutingContext,System.Threading.CancellationToken,System.Threading.Tasks.Task},Furion.Schedule.TriggerBuilder[],Furion.Schedule.IScheduler@,System.Boolean)">
            <summary>
            添加作业
            </summary>
            <param name="dynamicExecuteAsync">运行时动态作业执行逻辑</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
            <param name="scheduler">作业计划</param>
            <param name="immediately">是否立即通知作业调度器重新载入</param>
            <remarks><see cref="T:Furion.Schedule.ScheduleResult"/></remarks>
        </member>
        <member name="M:Furion.Schedule.SchedulerFactory.AddJob``1(Furion.Schedule.TriggerBuilder[])">
            <summary>
            添加作业
            </summary>
            <typeparam name="TJob"><see cref="T:Furion.Schedule.IJob"/> 实现类型</typeparam>
            <param name="triggerBuilders">作业触发器构建器集合</param>
        </member>
        <member name="M:Furion.Schedule.SchedulerFactory.AddJob(System.Type,Furion.Schedule.TriggerBuilder[])">
            <summary>
            添加作业
            </summary>
            <param name="jobType"><see cref="T:Furion.Schedule.IJob"/> 实现类型</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
        </member>
        <member name="M:Furion.Schedule.SchedulerFactory.AddJob(System.Func{Furion.Schedule.JobExecutingContext,System.Threading.CancellationToken,System.Threading.Tasks.Task},Furion.Schedule.TriggerBuilder[])">
            <summary>
            添加作业
            </summary>
            <param name="dynamicExecuteAsync">运行时动态作业执行逻辑</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
        </member>
        <member name="M:Furion.Schedule.SchedulerFactory.TryAddJob``1(System.String,Furion.Schedule.TriggerBuilder[],Furion.Schedule.IScheduler@,System.Boolean)">
            <summary>
            添加作业
            </summary>
            <typeparam name="TJob"><see cref="T:Furion.Schedule.IJob"/> 实现类型</typeparam>
            <param name="jobId">作业 Id</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
            <param name="scheduler">作业计划</param>
            <param name="immediately">是否立即通知作业调度器重新载入</param>
            <returns><see cref="T:Furion.Schedule.ScheduleResult"/></returns>
        </member>
        <member name="M:Furion.Schedule.SchedulerFactory.TryAddJob(System.Type,System.String,Furion.Schedule.TriggerBuilder[],Furion.Schedule.IScheduler@,System.Boolean)">
            <summary>
            添加作业
            </summary>
            <param name="jobType"><see cref="T:Furion.Schedule.IJob"/> 实现类型</param>
            <param name="jobId">作业 Id</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
            <param name="scheduler">作业计划</param>
            <param name="immediately">是否立即通知作业调度器重新载入</param>
            <returns><see cref="T:Furion.Schedule.ScheduleResult"/></returns>
        </member>
        <member name="M:Furion.Schedule.SchedulerFactory.TryAddJob(System.Func{Furion.Schedule.JobExecutingContext,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.String,Furion.Schedule.TriggerBuilder[],Furion.Schedule.IScheduler@,System.Boolean)">
            <summary>
            添加作业
            </summary>
            <param name="dynamicExecuteAsync">运行时动态作业执行逻辑</param>
            <param name="jobId">作业 Id</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
            <param name="scheduler">作业计划</param>
            <param name="immediately">是否立即通知作业调度器重新载入</param>
            <returns><see cref="T:Furion.Schedule.ScheduleResult"/></returns>
        </member>
        <member name="M:Furion.Schedule.SchedulerFactory.AddJob``1(System.String,Furion.Schedule.TriggerBuilder[])">
            <summary>
            添加作业
            </summary>
            <typeparam name="TJob"><see cref="T:Furion.Schedule.IJob"/> 实现类型</typeparam>
            <param name="jobId">作业 Id</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
        </member>
        <member name="M:Furion.Schedule.SchedulerFactory.AddJob(System.Type,System.String,Furion.Schedule.TriggerBuilder[])">
            <summary>
            添加作业
            </summary>
            <param name="jobType"><see cref="T:Furion.Schedule.IJob"/> 实现类型</param>
            <param name="jobId">作业 Id</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
        </member>
        <member name="M:Furion.Schedule.SchedulerFactory.AddJob(System.Func{Furion.Schedule.JobExecutingContext,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.String,Furion.Schedule.TriggerBuilder[])">
            <summary>
            添加作业
            </summary>
            <param name="dynamicExecuteAsync">运行时动态作业执行逻辑</param>
            <param name="jobId">作业 Id</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
        </member>
        <member name="M:Furion.Schedule.SchedulerFactory.TryAddJob``1(System.String,System.Boolean,Furion.Schedule.TriggerBuilder[],Furion.Schedule.IScheduler@,System.Boolean)">
            <summary>
            添加作业
            </summary>
            <typeparam name="TJob"><see cref="T:Furion.Schedule.IJob"/> 实现类型</typeparam>
            <param name="jobId">作业 Id</param>
            <param name="concurrent">是否采用并发执行</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
            <param name="scheduler">作业计划</param>
            <param name="immediately">是否立即通知作业调度器重新载入</param>
            <returns><see cref="T:Furion.Schedule.ScheduleResult"/></returns>
        </member>
        <member name="M:Furion.Schedule.SchedulerFactory.TryAddJob(System.Type,System.String,System.Boolean,Furion.Schedule.TriggerBuilder[],Furion.Schedule.IScheduler@,System.Boolean)">
            <summary>
            添加作业
            </summary>
            <param name="jobType"><see cref="T:Furion.Schedule.IJob"/> 实现类型</param>
            <param name="jobId">作业 Id</param>
            <param name="concurrent">是否采用并发执行</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
            <param name="scheduler">作业计划</param>
            <param name="immediately">是否立即通知作业调度器重新载入</param>
            <returns><see cref="T:Furion.Schedule.ScheduleResult"/></returns>
        </member>
        <member name="M:Furion.Schedule.SchedulerFactory.TryAddJob(System.Func{Furion.Schedule.JobExecutingContext,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.String,System.Boolean,Furion.Schedule.TriggerBuilder[],Furion.Schedule.IScheduler@,System.Boolean)">
            <summary>
            添加作业
            </summary>
            <param name="dynamicExecuteAsync">运行时动态作业执行逻辑</param>
            <param name="jobId">作业 Id</param>
            <param name="concurrent">是否采用并发执行</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
            <param name="scheduler">作业计划</param>
            <param name="immediately">是否立即通知作业调度器重新载入</param>
            <returns><see cref="T:Furion.Schedule.ScheduleResult"/></returns>
        </member>
        <member name="M:Furion.Schedule.SchedulerFactory.AddJob``1(System.String,System.Boolean,Furion.Schedule.TriggerBuilder[])">
            <summary>
            添加作业
            </summary>
            <typeparam name="TJob"><see cref="T:Furion.Schedule.IJob"/> 实现类型</typeparam>
            <param name="jobId">作业 Id</param>
            <param name="concurrent">是否采用并发执行</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
        </member>
        <member name="M:Furion.Schedule.SchedulerFactory.AddJob(System.Type,System.String,System.Boolean,Furion.Schedule.TriggerBuilder[])">
            <summary>
            添加作业
            </summary>
            <param name="jobType"><see cref="T:Furion.Schedule.IJob"/> 实现类型</param>
            <param name="jobId">作业 Id</param>
            <param name="concurrent">是否采用并发执行</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
        </member>
        <member name="M:Furion.Schedule.SchedulerFactory.AddJob(System.Func{Furion.Schedule.JobExecutingContext,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.String,System.Boolean,Furion.Schedule.TriggerBuilder[])">
            <summary>
            添加作业
            </summary>
            <param name="dynamicExecuteAsync">运行时动态作业执行逻辑</param>
            <param name="jobId">作业 Id</param>
            <param name="concurrent">是否采用并发执行</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
        </member>
        <member name="M:Furion.Schedule.SchedulerFactory.TryAddJob``1(System.Boolean,Furion.Schedule.TriggerBuilder[],Furion.Schedule.IScheduler@,System.Boolean)">
            <summary>
            添加作业
            </summary>
            <typeparam name="TJob"><see cref="T:Furion.Schedule.IJob"/> 实现类型</typeparam>
            <param name="concurrent">是否采用并发执行</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
            <param name="scheduler">作业计划</param>
            <param name="immediately">是否立即通知作业调度器重新载入</param>
            <returns><see cref="T:Furion.Schedule.ScheduleResult"/></returns>
        </member>
        <member name="M:Furion.Schedule.SchedulerFactory.TryAddJob(System.Type,System.Boolean,Furion.Schedule.TriggerBuilder[],Furion.Schedule.IScheduler@,System.Boolean)">
            <summary>
            添加作业
            </summary>
            <param name="jobType"><see cref="T:Furion.Schedule.IJob"/> 实现类型</param>
            <param name="concurrent">是否采用并发执行</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
            <param name="scheduler">作业计划</param>
            <param name="immediately">是否立即通知作业调度器重新载入</param>
            <returns><see cref="T:Furion.Schedule.ScheduleResult"/></returns>
        </member>
        <member name="M:Furion.Schedule.SchedulerFactory.TryAddJob(System.Func{Furion.Schedule.JobExecutingContext,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Boolean,Furion.Schedule.TriggerBuilder[],Furion.Schedule.IScheduler@,System.Boolean)">
            <summary>
            添加作业
            </summary>
            <param name="dynamicExecuteAsync">运行时动态作业执行逻辑</param>
            <param name="concurrent">是否采用并发执行</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
            <param name="scheduler">作业计划</param>
            <param name="immediately">是否立即通知作业调度器重新载入</param>
            <returns><see cref="T:Furion.Schedule.ScheduleResult"/></returns>
        </member>
        <member name="M:Furion.Schedule.SchedulerFactory.AddJob``1(System.Boolean,Furion.Schedule.TriggerBuilder[])">
            <summary>
            添加作业
            </summary>
            <typeparam name="TJob"><see cref="T:Furion.Schedule.IJob"/> 实现类型</typeparam>
            <param name="concurrent">是否采用并发执行</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
        </member>
        <member name="M:Furion.Schedule.SchedulerFactory.AddJob(System.Type,System.Boolean,Furion.Schedule.TriggerBuilder[])">
            <summary>
            添加作业
            </summary>
            <param name="jobType"><see cref="T:Furion.Schedule.IJob"/> 实现类型</param>
            <param name="concurrent">是否采用并发执行</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
        </member>
        <member name="M:Furion.Schedule.SchedulerFactory.AddJob(System.Func{Furion.Schedule.JobExecutingContext,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Boolean,Furion.Schedule.TriggerBuilder[])">
            <summary>
            添加作业
            </summary>
            <param name="dynamicExecuteAsync">运行时动态作业执行逻辑</param>
            <param name="concurrent">是否采用并发执行</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
        </member>
        <member name="M:Furion.Schedule.SchedulerFactory.AddHttpJob(System.Action{Furion.Schedule.HttpJobMessage},Furion.Schedule.TriggerBuilder[])">
            <summary>
            添加 HTTP 作业
            </summary>
            <param name="buildMessage">构建 HTTP 作业消息委托</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
            <returns><see cref="T:Furion.Schedule.ScheduleOptionsBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.SchedulerFactory.TryAddHttpJob(System.Action{Furion.Schedule.HttpJobMessage},Furion.Schedule.TriggerBuilder[],Furion.Schedule.IScheduler@,System.Boolean)">
            <summary>
            添加 HTTP 作业
            </summary>
            <param name="buildMessage">构建 HTTP 作业消息委托</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
            <param name="scheduler">作业计划</param>
            <param name="immediately">是否立即通知作业调度器重新载入</param>
            <returns><see cref="T:Furion.Schedule.ScheduleResult"/></returns>
        </member>
        <member name="M:Furion.Schedule.SchedulerFactory.AddHttpJob``1(System.Action{Furion.Schedule.HttpJobMessage},Furion.Schedule.TriggerBuilder[])">
            <summary>
            添加 HTTP 作业
            </summary>
            <typeparam name="TJob"><see cref="T:Furion.Schedule.IJob"/> 实现类型</typeparam>
            <param name="buildMessage">构建 HTTP 作业消息委托</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
            <returns><see cref="T:Furion.Schedule.ScheduleOptionsBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.SchedulerFactory.TryAddHttpJob``1(System.Action{Furion.Schedule.HttpJobMessage},Furion.Schedule.TriggerBuilder[],Furion.Schedule.IScheduler@,System.Boolean)">
            <summary>
            添加 HTTP 作业
            </summary>
            <typeparam name="TJob"><see cref="T:Furion.Schedule.IJob"/> 实现类型</typeparam>
            <param name="buildMessage">构建 HTTP 作业消息委托</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
            <param name="scheduler">作业计划</param>
            <param name="immediately">是否立即通知作业调度器重新载入</param>
            <returns><see cref="T:Furion.Schedule.ScheduleResult"/></returns>
        </member>
        <member name="M:Furion.Schedule.SchedulerFactory.AddHttpJob(System.Action{Furion.Schedule.HttpJobMessage},System.String,Furion.Schedule.TriggerBuilder[])">
            <summary>
            添加 HTTP 作业
            </summary>
            <param name="buildMessage">构建 HTTP 作业消息委托</param>
            <param name="jobId">作业 ID</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
            <returns><see cref="T:Furion.Schedule.ScheduleOptionsBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.SchedulerFactory.TryAddHttpJob(System.Action{Furion.Schedule.HttpJobMessage},System.String,Furion.Schedule.TriggerBuilder[],Furion.Schedule.IScheduler@,System.Boolean)">
            <summary>
            添加 HTTP 作业
            </summary>
            <param name="buildMessage">构建 HTTP 作业消息委托</param>
            <param name="jobId">作业 ID</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
            <param name="scheduler">作业计划</param>
            <param name="immediately">是否立即通知作业调度器重新载入</param>
            <returns><see cref="T:Furion.Schedule.ScheduleResult"/></returns>
        </member>
        <member name="M:Furion.Schedule.SchedulerFactory.AddHttpJob``1(System.Action{Furion.Schedule.HttpJobMessage},System.String,Furion.Schedule.TriggerBuilder[])">
            <summary>
            添加 HTTP 作业
            </summary>
            <typeparam name="TJob"><see cref="T:Furion.Schedule.IJob"/> 实现类型</typeparam>
            <param name="buildMessage">构建 HTTP 作业消息委托</param>
            <param name="jobId">作业 ID</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
            <returns><see cref="T:Furion.Schedule.ScheduleOptionsBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.SchedulerFactory.TryAddHttpJob``1(System.Action{Furion.Schedule.HttpJobMessage},System.String,Furion.Schedule.TriggerBuilder[],Furion.Schedule.IScheduler@,System.Boolean)">
            <summary>
            添加 HTTP 作业
            </summary>
            <typeparam name="TJob"><see cref="T:Furion.Schedule.IJob"/> 实现类型</typeparam>
            <param name="buildMessage">构建 HTTP 作业消息委托</param>
            <param name="jobId">作业 ID</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
            <param name="scheduler">作业计划</param>
            <param name="immediately">是否立即通知作业调度器重新载入</param>
            <returns><see cref="T:Furion.Schedule.ScheduleResult"/></returns>
        </member>
        <member name="M:Furion.Schedule.SchedulerFactory.AddHttpJob(System.Action{Furion.Schedule.HttpJobMessage},System.String,System.Boolean,Furion.Schedule.TriggerBuilder[])">
            <summary>
            添加 HTTP 作业
            </summary>
            <param name="buildMessage">构建 HTTP 作业消息委托</param>
            <param name="jobId">作业 ID</param>
            <param name="concurrent">是否采用并发执行</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
            <returns><see cref="T:Furion.Schedule.ScheduleOptionsBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.SchedulerFactory.TryAddHttpJob(System.Action{Furion.Schedule.HttpJobMessage},System.String,System.Boolean,Furion.Schedule.TriggerBuilder[],Furion.Schedule.IScheduler@,System.Boolean)">
            <summary>
            添加 HTTP 作业
            </summary>
            <param name="buildMessage">构建 HTTP 作业消息委托</param>
            <param name="jobId">作业 ID</param>
            <param name="concurrent">是否采用并发执行</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
            <param name="scheduler">作业计划</param>
            <param name="immediately">是否立即通知作业调度器重新载入</param>
            <returns><see cref="T:Furion.Schedule.ScheduleResult"/></returns>
        </member>
        <member name="M:Furion.Schedule.SchedulerFactory.AddHttpJob``1(System.Action{Furion.Schedule.HttpJobMessage},System.String,System.Boolean,Furion.Schedule.TriggerBuilder[])">
            <summary>
            添加 HTTP 作业
            </summary>
            <typeparam name="TJob"><see cref="T:Furion.Schedule.IJob"/> 实现类型</typeparam>
            <param name="buildMessage">构建 HTTP 作业消息委托</param>
            <param name="jobId">作业 ID</param>
            <param name="concurrent">是否采用并发执行</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
            <returns><see cref="T:Furion.Schedule.ScheduleOptionsBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.SchedulerFactory.TryAddHttpJob``1(System.Action{Furion.Schedule.HttpJobMessage},System.String,System.Boolean,Furion.Schedule.TriggerBuilder[],Furion.Schedule.IScheduler@,System.Boolean)">
            <summary>
            添加 HTTP 作业
            </summary>
            <typeparam name="TJob"><see cref="T:Furion.Schedule.IJob"/> 实现类型</typeparam>
            <param name="buildMessage">构建 HTTP 作业消息委托</param>
            <param name="jobId">作业 ID</param>
            <param name="concurrent">是否采用并发执行</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
            <param name="scheduler">作业计划</param>
            <param name="immediately">是否立即通知作业调度器重新载入</param>
            <returns><see cref="T:Furion.Schedule.ScheduleResult"/></returns>
        </member>
        <member name="M:Furion.Schedule.SchedulerFactory.AddHttpJob(System.Action{Furion.Schedule.HttpJobMessage},System.Boolean,Furion.Schedule.TriggerBuilder[])">
            <summary>
            添加 HTTP 作业
            </summary>
            <param name="buildMessage">构建 HTTP 作业消息委托</param>
            <param name="concurrent">是否采用并发执行</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
            <returns><see cref="T:Furion.Schedule.ScheduleOptionsBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.SchedulerFactory.TryAddHttpJob(System.Action{Furion.Schedule.HttpJobMessage},System.Boolean,Furion.Schedule.TriggerBuilder[],Furion.Schedule.IScheduler@,System.Boolean)">
            <summary>
            添加 HTTP 作业
            </summary>
            <param name="buildMessage">构建 HTTP 作业消息委托</param>
            <param name="concurrent">是否采用并发执行</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
            <param name="scheduler">作业计划</param>
            <param name="immediately">是否立即通知作业调度器重新载入</param>
            <returns><see cref="T:Furion.Schedule.ScheduleResult"/></returns>
        </member>
        <member name="M:Furion.Schedule.SchedulerFactory.AddHttpJob``1(System.Action{Furion.Schedule.HttpJobMessage},System.Boolean,Furion.Schedule.TriggerBuilder[])">
            <summary>
            添加 HTTP 作业
            </summary>
            <typeparam name="TJob"><see cref="T:Furion.Schedule.IJob"/> 实现类型</typeparam>
            <param name="buildMessage">构建 HTTP 作业消息委托</param>
            <param name="concurrent">是否采用并发执行</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
            <returns><see cref="T:Furion.Schedule.ScheduleOptionsBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.SchedulerFactory.TryAddHttpJob``1(System.Action{Furion.Schedule.HttpJobMessage},System.Boolean,Furion.Schedule.TriggerBuilder[],Furion.Schedule.IScheduler@,System.Boolean)">
            <summary>
            添加 HTTP 作业
            </summary>
            <typeparam name="TJob"><see cref="T:Furion.Schedule.IJob"/> 实现类型</typeparam>
            <param name="buildMessage">构建 HTTP 作业消息委托</param>
            <param name="concurrent">是否采用并发执行</param>
            <param name="triggerBuilders">作业触发器构建器集合</param>
            <param name="scheduler">作业计划</param>
            <param name="immediately">是否立即通知作业调度器重新载入</param>
            <returns><see cref="T:Furion.Schedule.ScheduleResult"/></returns>
        </member>
        <member name="M:Furion.Schedule.SchedulerFactory.TryAddHttpJob(System.Action{Furion.Schedule.HttpJobMessage},Furion.Schedule.SchedulerBuilder,Furion.Schedule.IScheduler@,System.Boolean)">
            <summary>
            添加 HTTP 作业
            </summary>
            <param name="buildMessage">构建 HTTP 作业消息委托</param>
            <param name="schedulerBuilder">作业调度程序构建器</param>
            <param name="scheduler">作业计划</param>
            <param name="immediately">是否立即通知作业调度器重新载入</param>
            <returns><see cref="T:Furion.Schedule.ScheduleResult"/></returns>
        </member>
        <member name="M:Furion.Schedule.SchedulerFactory.TryUpdateJob(Furion.Schedule.SchedulerBuilder,Furion.Schedule.IScheduler@,System.Boolean)">
            <summary>
            更新作业
            </summary>
            <param name="schedulerBuilder">作业计划构建器</param>
            <param name="scheduler">新的作业计划</param>
            <param name="immediately">是否立即通知作业调度器重新载入</param>
            <returns><see cref="T:Furion.Schedule.ScheduleResult"/></returns>
        </member>
        <member name="M:Furion.Schedule.SchedulerFactory.UpdateJob(Furion.Schedule.SchedulerBuilder[])">
            <summary>
            更新作业
            </summary>
            <param name="schedulerBuilders">作业计划构建器集合</param>
        </member>
        <member name="M:Furion.Schedule.SchedulerFactory.TryRemoveJob(System.String,Furion.Schedule.IScheduler@,System.Boolean)">
            <summary>
            删除作业
            </summary>
            <param name="jobId">作业 Id</param>
            <param name="scheduler">作业计划</param>
            <param name="immediately">是否立即通知作业调度器重新载入</param>
            <returns><see cref="T:Furion.Schedule.ScheduleResult"/></returns>
        </member>
        <member name="M:Furion.Schedule.SchedulerFactory.RemoveJob(System.String[])">
            <summary>
            删除作业
            </summary>
            <param name="jobIds">作业 Id 集合</param>
        </member>
        <member name="M:Furion.Schedule.SchedulerFactory.TryRemoveJob(Furion.Schedule.IScheduler,System.Boolean)">
            <summary>
            删除作业
            </summary>
            <param name="scheduler">作业计划</param>
            <param name="immediately">是否立即通知作业调度器重新载入</param>
            <returns><see cref="T:Furion.Schedule.ScheduleResult"/></returns>
        </member>
        <member name="M:Furion.Schedule.SchedulerFactory.RemoveJob(Furion.Schedule.IScheduler[])">
            <summary>
            删除作业
            </summary>
            <param name="schedulers">作业计划集合</param>
        </member>
        <member name="M:Furion.Schedule.SchedulerFactory.ContainsJob(System.String,System.String)">
            <summary>
            检查作业是否存在
            </summary>
            <param name="jobId">作业 Id</param>
            <param name="group">作业组名称</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Furion.Schedule.SchedulerFactory.StartAll(System.String)">
            <summary>
            启动所有作业
            </summary>
            <param name="group">作业组名称</param>
        </member>
        <member name="M:Furion.Schedule.SchedulerFactory.PauseAll(System.String)">
            <summary>
            暂停所有作业
            </summary>
            <param name="group">作业组名称</param>
        </member>
        <member name="M:Furion.Schedule.SchedulerFactory.RemoveAll(System.String)">
            <summary>
            删除所有作业
            </summary>
            <param name="group">作业组名称</param>
        </member>
        <member name="M:Furion.Schedule.SchedulerFactory.PersistAll(System.String)">
            <summary>
            强制触发所有作业持久化记录
            </summary>
            <param name="group">作业组名称</param>
        </member>
        <member name="M:Furion.Schedule.SchedulerFactory.CollateAll(System.String)">
            <summary>
            校对所有作业
            </summary>
            <param name="group">作业组名称</param>
        </member>
        <member name="M:Furion.Schedule.SchedulerFactory.TryRunJob(System.String,Furion.Schedule.IScheduler@,System.String)">
            <summary>
            立即执行作业
            </summary>
            <param name="jobId">作业 Id</param>
            <param name="scheduler">作业计划</param>
            <param name="triggerId">作业触发器 Id</param>
            <returns><see cref="T:Furion.Schedule.ScheduleResult"/></returns>
        </member>
        <member name="M:Furion.Schedule.SchedulerFactory.RunJob(System.String[])">
            <summary>
            立即执行作业
            </summary>
            <param name="jobIds">作业 Id 集合</param>
        </member>
        <member name="M:Furion.Schedule.SchedulerFactory.TryRunJob(Furion.Schedule.IScheduler,System.String)">
            <summary>
            立即执行作业
            </summary>
            <param name="scheduler">作业计划</param>
            <param name="triggerId">作业触发器 Id</param>
            <returns><see cref="T:Furion.Schedule.ScheduleResult"/></returns>
        </member>
        <member name="M:Furion.Schedule.SchedulerFactory.RunJob(Furion.Schedule.IScheduler[])">
            <summary>
            立即执行作业
            </summary>
            <param name="schedulers">作业计划集合</param>
        </member>
        <member name="M:Furion.Schedule.SchedulerFactory.TryCancelJob(System.String,Furion.Schedule.IScheduler@,System.String)">
            <summary>
            取消正在执行的作业
            </summary>
            <param name="jobId">作业 Id</param>
            <param name="scheduler">作业计划</param>
            <param name="triggerId">作业触发器 Id</param>
            <returns><see cref="T:Furion.Schedule.ScheduleResult"/></returns>
        </member>
        <member name="M:Furion.Schedule.SchedulerFactory.CancelJob(System.String[])">
            <summary>
            取消正在执行的作业
            </summary>
            <param name="jobIds">作业 Id 集合</param>
        </member>
        <member name="M:Furion.Schedule.SchedulerFactory.TryCancelJob(Furion.Schedule.IScheduler,System.String)">
            <summary>
            取消正在执行的作业
            </summary>
            <param name="scheduler">作业计划</param>
            <param name="triggerId">作业触发器 Id</param>
            <returns><see cref="T:Furion.Schedule.ScheduleResult"/></returns>
        </member>
        <member name="M:Furion.Schedule.SchedulerFactory.CancelJob(Furion.Schedule.IScheduler[])">
            <summary>
            取消正在执行的作业
            </summary>
            <param name="schedulers">作业计划集合</param>
        </member>
        <member name="M:Furion.Schedule.SchedulerFactory.TryStartJob(System.String,Furion.Schedule.IScheduler@)">
            <summary>
            启动作业
            </summary>
            <param name="jobId">作业 Id</param>
            <param name="scheduler">作业计划</param>
            <returns><see cref="T:Furion.Schedule.ScheduleResult"/></returns>
        </member>
        <member name="M:Furion.Schedule.SchedulerFactory.StartJob(System.String[])">
            <summary>
            启动作业
            </summary>
            <param name="jobIds">作业 Id 集合</param>
        </member>
        <member name="M:Furion.Schedule.SchedulerFactory.TryStartJob(Furion.Schedule.IScheduler)">
            <summary>
            启动作业
            </summary>
            <param name="scheduler">作业计划</param>
            <returns><see cref="T:Furion.Schedule.ScheduleResult"/></returns>
        </member>
        <member name="M:Furion.Schedule.SchedulerFactory.StartJob(Furion.Schedule.IScheduler[])">
            <summary>
            启动作业
            </summary>
            <param name="schedulers">作业计划集合</param>
        </member>
        <member name="M:Furion.Schedule.SchedulerFactory.TryPauseJob(System.String,Furion.Schedule.IScheduler@)">
            <summary>
            暂停作业
            </summary>
            <param name="jobId">作业 Id</param>
            <param name="scheduler">作业计划</param>
            <returns><see cref="T:Furion.Schedule.ScheduleResult"/></returns>
        </member>
        <member name="M:Furion.Schedule.SchedulerFactory.PauseJob(System.String[])">
            <summary>
            暂停作业
            </summary>
            <param name="jobIds">作业 Id 集合</param>
        </member>
        <member name="M:Furion.Schedule.SchedulerFactory.TryPauseJob(Furion.Schedule.IScheduler)">
            <summary>
            暂停作业
            </summary>
            <param name="scheduler">作业计划</param>
            <returns><see cref="T:Furion.Schedule.ScheduleResult"/></returns>
        </member>
        <member name="M:Furion.Schedule.SchedulerFactory.PauseJob(Furion.Schedule.IScheduler[])">
            <summary>
            暂停作业
            </summary>
            <param name="schedulers">作业计划集合</param>
        </member>
        <member name="M:Furion.Schedule.SchedulerFactory.EnsureLegalOfTrigger(Furion.Schedule.Trigger,System.DateTime)">
            <summary>
            确保作业触发器合法性
            </summary>
            <param name="trigger">作业触发器</param>
            <param name="nowTime">当前时间</param>
        </member>
        <member name="E:Furion.Schedule.SchedulerFactory.OnChanged">
            <summary>
            作业计划变更通知
            </summary>
        </member>
        <member name="E:Furion.Schedule.SchedulerFactory.OnExecutionRecord">
            <summary>
            作业触发记录通知
            </summary>
        </member>
        <member name="F:Furion.Schedule.SchedulerFactory._serviceProvider">
            <summary>
            服务提供器
            </summary>
        </member>
        <member name="F:Furion.Schedule.SchedulerFactory._logger">
            <summary>
            作业调度器日志服务
            </summary>
        </member>
        <member name="F:Furion.Schedule.SchedulerFactory._jobCancellationToken">
            <summary>
            取消作业执行 Token 器
            </summary>
        </member>
        <member name="F:Furion.Schedule.SchedulerFactory._processQueueTask">
            <summary>
            长时间运行的后台任务
            </summary>
            <remarks>实现作业运行消息持久化</remarks>
        </member>
        <member name="F:Furion.Schedule.SchedulerFactory._sleepCancellationTokenSource">
            <summary>
            作业调度器取消休眠 Token
            </summary>
            <remarks>用于取消休眠状态（唤醒）</remarks>
        </member>
        <member name="F:Furion.Schedule.SchedulerFactory.GC_COLLECT_INTERVAL_MILLISECONDS">
            <summary>
            GC 垃圾回收间隔
            </summary>
            <remarks>单位毫秒</remarks>
        </member>
        <member name="F:Furion.Schedule.SchedulerFactory._schedulers">
            <summary>
            作业计划集合
            </summary>
        </member>
        <member name="F:Furion.Schedule.SchedulerFactory._schedulerBuilders">
            <summary>
            作业计划构建器集合
            </summary>
        </member>
        <member name="F:Furion.Schedule.SchedulerFactory._persistenceMessageQueue">
            <summary>
            作业持久化记录消息队列（线程安全）
            </summary>
        </member>
        <member name="F:Furion.Schedule.SchedulerFactory._manualRunJobIds">
            <summary>
            不受控的作业 Id 集合
            </summary>
            <remarks>用于实现 立即执行 的作业</remarks>
        </member>
        <member name="M:Furion.Schedule.SchedulerFactory.#ctor(System.IServiceProvider,Furion.Schedule.IScheduleLogger,Furion.Schedule.IJobCancellationToken,System.Collections.Generic.IList{Furion.Schedule.SchedulerBuilder})">
            <summary>
            构造函数
            </summary>
            <param name="serviceProvider">服务提供器</param>
            <param name="logger">作业调度器日志服务</param>
            <param name="jobCancellationToken">取消作业执行 Token 器</param>
            <param name="schedulerBuilders">初始作业计划构建集合</param>
        </member>
        <member name="P:Furion.Schedule.SchedulerFactory.Persistence">
            <summary>
            作业调度持久化服务
            </summary>
        </member>
        <member name="P:Furion.Schedule.SchedulerFactory.PreloadCompleted">
            <summary>
            标识 Preload 是否初始化完成
            </summary>
        </member>
        <member name="P:Furion.Schedule.SchedulerFactory.LastGCCollectTime">
            <summary>
            GC 最近一次回收时间
            </summary>
        </member>
        <member name="M:Furion.Schedule.SchedulerFactory.PreloadAsync(System.Threading.CancellationToken)">
            <summary>
            作业调度器初始化
            </summary>
            <param name="stoppingToken">取消任务 Token</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:Furion.Schedule.SchedulerFactory.GetCurrentRunJobs(System.DateTime,System.String)">
            <summary>
            查找即将触发的作业
            </summary>
            <param name="startAt">起始时间</param>
            <param name="group">作业组名称</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:Furion.Schedule.SchedulerFactory.GetCurrentRunJobsOfModels(System.DateTime,System.String)">
            <summary>
            查找即将触发的作业并转换成 <see cref="T:Furion.Schedule.SchedulerModel"/>
            </summary>
            <param name="startAt">起始时间</param>
            <param name="group">作业组名称</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:Furion.Schedule.SchedulerFactory.SleepAsync(System.DateTime)">
            <summary>
            使作业调度器进入休眠状态
            </summary>
            <param name="startAt">起始时间</param>
        </member>
        <member name="M:Furion.Schedule.SchedulerFactory.CancelSleep">
            <summary>
            取消作业调度器休眠状态（强制唤醒）
            </summary>
        </member>
        <member name="M:Furion.Schedule.SchedulerFactory.Shorthand(Furion.Schedule.JobDetail,Furion.Schedule.PersistenceBehavior)">
            <summary>
            将作业信息运行数据写入持久化
            </summary>
            <param name="jobDetail">作业信息</param>
            <param name="behavior">作业持久化行为</param>
        </member>
        <member name="M:Furion.Schedule.SchedulerFactory.Shorthand(Furion.Schedule.JobDetail,Furion.Schedule.Trigger,Furion.Schedule.PersistenceBehavior)">
            <summary>
            将作业触发器运行数据写入持久化
            </summary>
            <param name="jobDetail">作业信息</param>
            <param name="trigger">作业触发器</param>
            <param name="behavior">作业持久化行为</param>
        </member>
        <member name="M:Furion.Schedule.SchedulerFactory.CreateJob(System.IServiceProvider,Furion.Schedule.JobFactoryContext)">
            <summary>
            创建作业处理程序实例
            </summary>
            <param name="serviceProvider">服务提供器</param>
            <param name="context"><see cref="T:Furion.Schedule.JobFactoryContext"/> 上下文</param>
            <returns><see cref="T:Furion.Schedule.IJob"/></returns>
        </member>
        <member name="M:Furion.Schedule.SchedulerFactory.GCCollect">
            <summary>
            GC 垃圾回收器回收处理
            </summary>
            <remarks>避免频繁 GC 回收</remarks>
        </member>
        <member name="M:Furion.Schedule.SchedulerFactory.Dispose">
            <summary>
            释放非托管资源
            </summary>
        </member>
        <member name="M:Furion.Schedule.SchedulerFactory.RecordTimelineAsync(Furion.Schedule.PersistenceExecutionRecordContext)">
            <summary>
            记录作业触发器运行信息
            </summary>
            <param name="context">作业执行记录持久上下文</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:Furion.Schedule.SchedulerFactory.GetSleepMilliseconds(System.DateTime)">
            <summary>
            获取作业调度器总休眠时间
            </summary>
            <param name="startAt">起始时间</param>
            <returns><see cref="T:System.Double"/></returns>
        </member>
        <member name="M:Furion.Schedule.SchedulerFactory.ProcessQueueAsync">
            <summary>
            监听作业计划变更并调用持久化方法
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:Furion.Schedule.SchedulerFactory.CreateCancellationTokenSource">
            <summary>
            创建新的作业调度器取消休眠 Token
            </summary>
        </member>
        <member name="M:Furion.Schedule.SchedulerFactory.InternalTryGetJob(System.String,Furion.Schedule.Scheduler@,System.Boolean,System.String)">
            <summary>
            内部获取作业
            </summary>
            <param name="jobId">作业 Id</param>
            <param name="scheduler">作业计划</param>
            <param name="outputLog">是否显示日志</param>
            <param name="group">作业组名称</param>
            <returns><see cref="T:Furion.Schedule.ScheduleResult"/></returns>
        </member>
        <member name="T:Furion.Schedule.ScheduleHostedService">
            <summary>
            作业调度器后台主机服务
            </summary>
        </member>
        <member name="E:Furion.Schedule.ScheduleHostedService.UnobservedTaskException">
            <summary>
            避免由 CLR 的终结器捕获该异常从而终止应用程序，让所有未觉察异常被觉察
            </summary>
        </member>
        <member name="F:Furion.Schedule.ScheduleHostedService._logger">
            <summary>
            作业调度器日志服务
            </summary>
        </member>
        <member name="F:Furion.Schedule.ScheduleHostedService._schedulerFactory">
            <summary>
            作业计划工厂服务
            </summary>
        </member>
        <member name="F:Furion.Schedule.ScheduleHostedService._serviceProvider">
            <summary>
            服务提供器
            </summary>
        </member>
        <member name="F:Furion.Schedule.ScheduleHostedService._serviceProviderIsService">
            <summary>
            服务检测器
            </summary>
        </member>
        <member name="F:Furion.Schedule.ScheduleHostedService._jobCancellationToken">
            <summary>
            取消作业执行 Token 器
            </summary>
        </member>
        <member name="M:Furion.Schedule.ScheduleHostedService.#ctor(System.IServiceProvider,Furion.Schedule.IScheduleLogger,Furion.Schedule.ISchedulerFactory,Furion.Schedule.IJobCancellationToken,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="serviceProvider">服务提供器</param>
            <param name="logger">作业调度器日志服务</param>
            <param name="schedulerFactory">作业计划工厂服务</param>
            <param name="jobCancellationToken">取消作业执行 Token 器</param>
            <param name="clusterId">作业集群 Id</param>
        </member>
        <member name="P:Furion.Schedule.ScheduleHostedService.Monitor">
            <summary>
            作业处理程序监视器
            </summary>
        </member>
        <member name="P:Furion.Schedule.ScheduleHostedService.Executor">
            <summary>
            作业处理程序执行器
            </summary>
        </member>
        <member name="P:Furion.Schedule.ScheduleHostedService.ClusterServer">
            <summary>
            作业集群服务
            </summary>
        </member>
        <member name="P:Furion.Schedule.ScheduleHostedService.ClusterId">
            <summary>
            作业集群 Id
            </summary>
        </member>
        <member name="M:Furion.Schedule.ScheduleHostedService.StartAsync(System.Threading.CancellationToken)">
            <summary>
            监听作业调度服务启动
            </summary>
            <param name="cancellationToken">后台主机服务停止时取消任务 Token</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:Furion.Schedule.ScheduleHostedService.ExecuteAsync(System.Threading.CancellationToken)">
            <summary>
            执行后台任务
            </summary>
            <param name="stoppingToken">后台主机服务停止时取消任务 Token</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/> 实例</returns>
        </member>
        <member name="M:Furion.Schedule.ScheduleHostedService.BackgroundProcessing(System.Threading.CancellationToken)">
            <summary>
            后台调用处理程序
            </summary>
            <param name="stoppingToken">后台主机服务停止时取消任务 Token</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/> 实例</returns>
        </member>
        <member name="M:Furion.Schedule.ScheduleHostedService.StopAsync(System.Threading.CancellationToken)">
            <summary>
            监听作业调度服务停止
            </summary>
            <param name="cancellationToken">后台主机服务停止时取消任务 Token</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:Furion.Schedule.ScheduleHostedService.Dispose">
            <summary>
            监听作业调度器对象销毁
            </summary>
        </member>
        <member name="M:Furion.Schedule.ScheduleHostedService.CheckIsBlocked(Furion.Schedule.JobDetail,Furion.Schedule.Trigger,System.DateTime)">
            <summary>
            检查是否是串行执行
            </summary>
            <param name="jobDetail">作业信息</param>
            <param name="trigger">作业触发器</param>
            <param name="startAt">检查时间</param>
            <returns>返回 true 是串行执行，则阻塞并进入下一轮，返回 false 则继续执行</returns>
        </member>
        <member name="M:Furion.Schedule.ScheduleHostedService.WaitingClusterAsync">
            <summary>
            等待作业集群指示
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:Furion.Schedule.ScheduleHostedService.ReleaseJobHandlerAsync(Furion.Schedule.IJob)">
            <summary>
            释放作业处理程序对象
            </summary>
            <param name="jobHandler"><see cref="T:Furion.Schedule.IJob"/></param>
            <returns><see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="T:Furion.Schedule.HttpJob">
            <summary>
            HTTP 请求作业处理程序
            </summary>
        </member>
        <member name="F:Furion.Schedule.HttpJob.INVALID_HTTP_ERROR_MESSAGE">
            <summary>
            无效 HTTP 请求错误消息
            </summary>
        </member>
        <member name="F:Furion.Schedule.HttpJob.DEFAULT_HTTP_USER_AGENT">
            <summary>
            默认请求 User-Agent
            </summary>
        </member>
        <member name="F:Furion.Schedule.HttpJob._httpClientFactory">
            <summary>
            <see cref="T:System.Net.Http.HttpClient"/> 创建工厂
            </summary>
        </member>
        <member name="F:Furion.Schedule.HttpJob._logger">
            <summary>
            作业调度器日志服务
            </summary>
        </member>
        <member name="M:Furion.Schedule.HttpJob.#ctor(System.Net.Http.IHttpClientFactory,Furion.Schedule.IScheduleLogger)">
            <summary>
            构造函数
            </summary>
            <param name="httpClientFactory"><see cref="T:System.Net.Http.HttpClient"/> 创建工厂</param>
            <param name="logger">作业调度器日志服务</param>
        </member>
        <member name="M:Furion.Schedule.HttpJob.ExecuteAsync(Furion.Schedule.JobExecutingContext,System.Threading.CancellationToken)">
            <summary>
            具体处理逻辑
            </summary>
            <param name="context">作业执行前上下文</param>
            <param name="stoppingToken">取消任务 Token</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="T:Furion.Schedule.HttpJobMessage">
            <summary>
            HTTP 作业消息
            </summary>
        </member>
        <member name="P:Furion.Schedule.HttpJobMessage.RequestUri">
            <summary>
            请求地址
            </summary>
        </member>
        <member name="P:Furion.Schedule.HttpJobMessage.HttpMethod">
            <summary>
            请求方法
            </summary>
        </member>
        <member name="P:Furion.Schedule.HttpJobMessage.Headers">
            <summary>
            请求头
            </summary>
        </member>
        <member name="P:Furion.Schedule.HttpJobMessage.Body">
            <summary>
            请求报文体
            </summary>
        </member>
        <member name="P:Furion.Schedule.HttpJobMessage.ClientName">
            <summary>
            请求客户端名称
            </summary>
        </member>
        <member name="P:Furion.Schedule.HttpJobMessage.EnsureSuccessStatusCode">
            <summary>
            确保请求成功，否则抛异常
            </summary>
        </member>
        <member name="P:Furion.Schedule.HttpJobMessage.Timeout">
            <summary>
            超时时间（毫秒）
            </summary>
        </member>
        <member name="P:Furion.Schedule.HttpJobMessage.PrintResponseContent">
            <summary>
            是否打印 HTTP 响应内容
            </summary>
            <remarks>默认 true（打印）</remarks>
        </member>
        <member name="P:Furion.Schedule.HttpJobMessage.GroupName">
            <summary>
            作业组名称
            </summary>
        </member>
        <member name="P:Furion.Schedule.HttpJobMessage.Description">
            <summary>
            描述信息
            </summary>
        </member>
        <member name="T:Furion.Schedule.DynamicJob">
            <summary>
            动态作业处理程序
            </summary>
        </member>
        <member name="M:Furion.Schedule.DynamicJob.ExecuteAsync(Furion.Schedule.JobExecutingContext,System.Threading.CancellationToken)">
            <summary>
            具体处理逻辑
            </summary>
            <param name="context">作业执行前上下文</param>
            <param name="stoppingToken">取消任务 Token</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="T:Furion.Schedule.Penetrates">
            <summary>
            常量、公共方法配置类
            </summary>
        </member>
        <member name="M:Furion.Schedule.Penetrates.GetDefaultJsonSerializerOptions">
            <summary>
            获取默认的序列化对象
            </summary>
            <returns><see cref="T:System.Text.Json.JsonSerializerOptions"/></returns>
        </member>
        <member name="M:Furion.Schedule.Penetrates.Serialize(System.Object)">
            <summary>
            序列化对象
            </summary>
            <param name="obj">对象</param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:Furion.Schedule.Penetrates.Deserialize``1(System.String)">
            <summary>
            反序列化对象
            </summary>
            <param name="json">JSON 字符串</param>
            <returns>T</returns>
        </member>
        <member name="M:Furion.Schedule.Penetrates.GetNowTime">
            <summary>
            获取当前时间
            </summary>
            <remarks>忽略毫秒之后的部分</remarks>
            <returns><see cref="T:System.DateTime"/></returns>
        </member>
        <member name="M:Furion.Schedule.Penetrates.GetStandardDateTime(System.DateTime)">
            <summary>
            获取标准计算时间
            </summary>
            <remarks>忽略毫秒之后的部分</remarks>
            <param name="dateTime"><see cref="T:System.DateTime"/></param>
            <returns><see cref="T:System.DateTime"/></returns>
        </member>
        <member name="M:Furion.Schedule.Penetrates.SplitToWords(System.String)">
            <summary>
            将属性名切割成多个单词
            </summary>
            <param name="propertyName">属性名</param>
            <returns>单词数组</returns>
        </member>
        <member name="M:Furion.Schedule.Penetrates.SetFirstLetterCase(System.String,System.Boolean)">
            <summary>
            设置字符串首字母大/小写
            </summary>
            <param name="str">字符串</param>
            <param name="isUpper">是否大写</param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:Furion.Schedule.Penetrates.GetNaming(System.String,Furion.Schedule.NamingConventions)">
            <summary>
            根据属性名获取指定的命名法
            </summary>
            <param name="propertyName">属性名</param>
            <param name="naming">命名法</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Furion.Schedule.Penetrates.GetNoNumberSqlValueOrNull(System.Object)">
            <summary>
            获取非数值类型 SQL 的值
            </summary>
            <remarks>如果为 null 输出 NULL，否则输出 '值'</remarks>
            <param name="obj">对象值</param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:Furion.Schedule.Penetrates.GetBooleanSqlValue(System.Boolean)">
            <summary>
            获取 Boolean 类型 SQL 值
            </summary>
            <param name="value"><see cref="T:System.Boolean"/></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Schedule.Penetrates.WrapDatabaseFieldName(System.String)">
            <summary>
            包裹数据库字段名
            </summary>
            <remarks>如 PostgreSQL 表名和列名添加双引号</remarks>
            <param name="field">数据库字段名</param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:Furion.Schedule.Penetrates.Write(System.Action{System.Text.Json.Utf8JsonWriter})">
            <summary>
            高性能创建 JSON 字符串
            </summary>
            <param name="writeAction"><see cref="T:System.Text.Json.Utf8JsonWriter"/></param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:Furion.Schedule.Penetrates.GetJsonElementValue(System.Object)">
            <summary>
            获取 JsonElement 实际的值
            </summary>
            <param name="value">对象值</param>
            <returns><see cref="T:System.Object"/></returns>
        </member>
        <member name="M:Furion.Schedule.Penetrates.LoadAssembly(System.String)">
            <summary>
            加载程序集
            </summary>
            <param name="assemblyName">程序集名称</param>
            <returns><see cref="T:System.Reflection.Assembly"/></returns>
        </member>
        <member name="T:Furion.Schedule.RepeatKeyEqualityComparer">
            <summary>
            支持重复 Key 的字典比较器
            </summary>
        </member>
        <member name="M:Furion.Schedule.RepeatKeyEqualityComparer.Equals(Furion.Schedule.JobDetail,Furion.Schedule.JobDetail)">
            <summary>
            相等比较
            </summary>
            <param name="x"><see cref="T:Furion.Schedule.JobDetail"/></param>
            <param name="y"><see cref="T:Furion.Schedule.JobDetail"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Furion.Schedule.RepeatKeyEqualityComparer.GetHashCode(Furion.Schedule.JobDetail)">
            <summary>
            获取哈希值
            </summary>
            <param name="obj"><see cref="T:Furion.Schedule.JobDetail"/></param>
            <returns><see cref="T:System.Int32"/></returns>
        </member>
        <member name="T:Furion.Schedule.IScheduleLogger">
            <summary>
            作业调度器日志服务
            </summary>
        </member>
        <member name="M:Furion.Schedule.IScheduleLogger.LogInformation(System.String,System.Object[])">
            <summary>
            记录 Information 日志
            </summary>
            <param name="message">消息</param>
            <param name="args">参数</param>
        </member>
        <member name="M:Furion.Schedule.IScheduleLogger.LogTrace(System.String,System.Object[])">
            <summary>
            记录 Trace 日志
            </summary>
            <param name="message">消息</param>
            <param name="args">参数</param>
        </member>
        <member name="M:Furion.Schedule.IScheduleLogger.LogDebug(System.String,System.Object[])">
            <summary>
            记录 Debug 日志
            </summary>
            <param name="message">消息</param>
            <param name="args">参数</param>
        </member>
        <member name="M:Furion.Schedule.IScheduleLogger.LogWarning(System.String,System.Object[])">
            <summary>
            记录 Warning 日志
            </summary>
            <param name="message">消息</param>
            <param name="args">参数</param>
        </member>
        <member name="M:Furion.Schedule.IScheduleLogger.LogCritical(System.String,System.Object[])">
            <summary>
            记录 Critical 日志
            </summary>
            <param name="message">消息</param>
            <param name="args">参数</param>
        </member>
        <member name="M:Furion.Schedule.IScheduleLogger.LogError(System.Exception,System.String,System.Object[])">
            <summary>
            记录 Error 日志
            </summary>
            <param name="ex">异常消息</param>
            <param name="message">消息</param>
            <param name="args">参数</param>
        </member>
        <member name="M:Furion.Schedule.IScheduleLogger.Log(Microsoft.Extensions.Logging.LogLevel,System.String,System.Object[],System.Exception)">
            <summary>
            记录日志
            </summary>
            <param name="logLevel">日志级别</param>
            <param name="message">消息</param>
            <param name="args">参数</param>
            <param name="ex">异常</param>
        </member>
        <member name="T:Furion.Schedule.ScheduleLogger">
            <summary>
            作业调度器日志默认实现类
            </summary>
        </member>
        <member name="F:Furion.Schedule.ScheduleLogger._logger">
            <summary>
            日志对象
            </summary>
        </member>
        <member name="M:Furion.Schedule.ScheduleLogger.#ctor(Microsoft.Extensions.Logging.ILogger{System.Logging.ScheduleService},System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="logger">日志对象</param>
            <param name="logEnabled">是否启用日志记录</param>
        </member>
        <member name="P:Furion.Schedule.ScheduleLogger.LogEnabled">
            <summary>
            是否启用日志记录
            </summary>
            <remarks>以后这里的日志应该读取配置文件的 Logging:Level </remarks>
        </member>
        <member name="M:Furion.Schedule.ScheduleLogger.LogInformation(System.String,System.Object[])">
            <summary>
            记录 Information 日志
            </summary>
            <param name="message">消息</param>
            <param name="args">参数</param>
        </member>
        <member name="M:Furion.Schedule.ScheduleLogger.LogTrace(System.String,System.Object[])">
            <summary>
            记录 Trace 日志
            </summary>
            <param name="message">消息</param>
            <param name="args">参数</param>
        </member>
        <member name="M:Furion.Schedule.ScheduleLogger.LogDebug(System.String,System.Object[])">
            <summary>
            记录 Debug 日志
            </summary>
            <param name="message">消息</param>
            <param name="args">参数</param>
        </member>
        <member name="M:Furion.Schedule.ScheduleLogger.LogWarning(System.String,System.Object[])">
            <summary>
            记录 Warning 日志
            </summary>
            <param name="message">消息</param>
            <param name="args">参数</param>
        </member>
        <member name="M:Furion.Schedule.ScheduleLogger.LogCritical(System.String,System.Object[])">
            <summary>
            记录 Critical 日志
            </summary>
            <param name="message">消息</param>
            <param name="args">参数</param>
        </member>
        <member name="M:Furion.Schedule.ScheduleLogger.LogError(System.Exception,System.String,System.Object[])">
            <summary>
            记录 Error 日志
            </summary>
            <param name="ex">异常消息</param>
            <param name="message">消息</param>
            <param name="args">参数</param>
        </member>
        <member name="M:Furion.Schedule.ScheduleLogger.Log(Microsoft.Extensions.Logging.LogLevel,System.String,System.Object[],System.Exception)">
            <summary>
            记录日志
            </summary>
            <param name="logLevel">日志级别</param>
            <param name="message">消息</param>
            <param name="args">参数</param>
            <param name="ex">异常</param>
        </member>
        <member name="T:Furion.Schedule.IJobMonitor">
            <summary>
            作业处理程序监视器
            </summary>
        </member>
        <member name="M:Furion.Schedule.IJobMonitor.OnExecutingAsync(Furion.Schedule.JobExecutingContext,System.Threading.CancellationToken)">
            <summary>
            作业处理程序执行前
            </summary>
            <param name="context">作业处理程序执行前上下文</param>
            <param name="stoppingToken">取消任务 Token</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/> 实例</returns>
        </member>
        <member name="M:Furion.Schedule.IJobMonitor.OnExecutedAsync(Furion.Schedule.JobExecutedContext,System.Threading.CancellationToken)">
            <summary>
            作业处理程序执行后
            </summary>
            <param name="context">作业处理程序执行后上下文</param>
            <param name="stoppingToken">取消任务 Token</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/> 实例</returns>
        </member>
        <member name="T:Furion.Schedule.IJobPersistence">
            <summary>
            作业调度持久化器
            </summary>
        </member>
        <member name="M:Furion.Schedule.IJobPersistence.PreloadAsync(System.Threading.CancellationToken)">
            <summary>
            作业调度器预加载服务
            </summary>
            <param name="stoppingToken">取消任务 Token</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:Furion.Schedule.IJobPersistence.OnLoadingAsync(Furion.Schedule.SchedulerBuilder,System.Threading.CancellationToken)">
            <summary>
            作业计划初始化通知
            </summary>
            <param name="builder">作业计划构建器</param>
            <param name="stoppingToken">取消任务 Token</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:Furion.Schedule.IJobPersistence.OnChangedAsync(Furion.Schedule.PersistenceContext)">
            <summary>
            作业信息更改通知
            </summary>
            <param name="context">作业信息持久化上下文</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:Furion.Schedule.IJobPersistence.OnTriggerChangedAsync(Furion.Schedule.PersistenceTriggerContext)">
            <summary>
            作业触发器更改通知
            </summary>
            <param name="context">作业触发器持久化上下文</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:Furion.Schedule.IJobPersistence.OnExecutionRecordAsync(Furion.Schedule.PersistenceExecutionRecordContext)">
            <summary>
            作业触发记录通知
            </summary>
            <param name="context">作业执行记录持久上下文</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="T:Furion.Schedule.ScheduleServe">
            <summary>
            调度作业服务静态类
            </summary>
        </member>
        <member name="M:Furion.Schedule.ScheduleServe.Run(System.Action{Furion.Schedule.ScheduleOptionsBuilder})">
            <summary>
            初始化 Schedule 服务
            </summary>
            <remarks>仅限不能依赖注入的服务使用</remarks>
            <param name="configureOptionsBuilder">作业调度器配置选项构建器委托</param>
            <returns><see cref="T:System.IDisposable"/></returns>
        </member>
        <member name="M:Furion.Schedule.ScheduleServe.Run(Furion.Schedule.ScheduleOptionsBuilder)">
            <summary>
            初始化 Schedule 服务
            </summary>
            <remarks>仅限不能依赖注入的服务使用</remarks>
            <param name="scheduleOptionsBuilder">作业调度器配置选项构建器</param>
        </member>
        <member name="T:Furion.Schedule.Schedular">
            <summary>
            作业调度器静态类
            </summary>
        </member>
        <member name="M:Furion.Schedule.Schedular.GetFactory">
            <summary>
            获取作业计划工厂
            </summary>
            <returns><see cref="T:Furion.Schedule.ISchedulerFactory"/></returns>
        </member>
        <member name="M:Furion.Schedule.Schedular.GetJob(System.String)">
            <summary>
            获取作业
            </summary>
            <param name="jobId">作业 Id</param>
            <returns><see cref="T:Furion.Schedule.IScheduler"/></returns>
        </member>
        <member name="M:Furion.Schedule.Schedular.Serialize(System.Object)">
            <summary>
            序列化对象
            </summary>
            <remarks>主要用于作业触发器参数，作业信息额外数据序列化</remarks>
            <param name="obj">对象</param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:Furion.Schedule.Schedular.Deserialize``1(System.String)">
            <summary>
            反序列化对象
            </summary>
            <remarks>主要用于作业触发器参数，作业信息额外数据序列化</remarks>
            <param name="json">JSON 字符串</param>
            <returns>T</returns>
        </member>
        <member name="M:Furion.Schedule.Schedular.CompileCSharpClassCode(System.String,System.String,System.Reflection.Assembly[])">
            <summary>
            编译 C# 类定义代码
            </summary>
            <param name="csharpCode">字符串代码</param>
            <param name="assemblyName">自定义程序集名称</param>
            <param name="additionalAssemblies">附加的程序集</param>
            <returns><see cref="T:System.Reflection.Assembly"/></returns>
        </member>
        <member name="T:Furion.Schedule.IScheduler">
            <summary>
            作业计划接口
            </summary>
        </member>
        <member name="P:Furion.Schedule.IScheduler.JobId">
            <summary>
            作业 Id
            </summary>
        </member>
        <member name="P:Furion.Schedule.IScheduler.GroupName">
            <summary>
            作业组名称
            </summary>
        </member>
        <member name="P:Furion.Schedule.IScheduler.TriggerCount">
            <summary>
            作业触发器数量
            </summary>
        </member>
        <member name="M:Furion.Schedule.IScheduler.GetModel">
            <summary>
            返回可公开访问的作业计划模型
            </summary>
            <remarks>常用于接口返回或序列化操作</remarks>
            <returns><see cref="T:Furion.Schedule.SchedulerModel"/></returns>
        </member>
        <member name="M:Furion.Schedule.IScheduler.GetBuilder">
            <summary>
            获取作业计划构建器
            </summary>
            <returns><see cref="T:Furion.Schedule.SchedulerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.IScheduler.GetJobBuilder">
            <summary>
            获取作业信息构建器
            </summary>
            <returns><see cref="T:Furion.Schedule.JobBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.IScheduler.GetTriggerBuilders">
            <summary>
            获取作业触发器构建器集合
            </summary>
            <returns><see cref="T:System.Collections.Generic.List`1"/></returns>
        </member>
        <member name="M:Furion.Schedule.IScheduler.GetTriggerBuilder(System.String)">
            <summary>
            获取作业触发器构建器
            </summary>
            <param name="triggerId">作业触发器 Id</param>
            <returns><see cref="T:Furion.Schedule.TriggerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.IScheduler.GetJobDetail">
            <summary>
            查找作业信息
            </summary>
            <returns><see cref="T:Furion.Schedule.JobDetail"/></returns>
        </member>
        <member name="M:Furion.Schedule.IScheduler.GetTriggers">
            <summary>
            查找作业触发器集合
            </summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:Furion.Schedule.IScheduler.TryGetTrigger(System.String,Furion.Schedule.Trigger@)">
            <summary>
            查找作业触发器
            </summary>
            <param name="triggerId">作业触发器 Id</param>
            <param name="trigger">作业触发器</param>
            <returns><see cref="T:Furion.Schedule.ScheduleResult"/></returns>
        </member>
        <member name="M:Furion.Schedule.IScheduler.GetTrigger(System.String)">
            <summary>
            查找作业触发器
            </summary>
            <param name="triggerId">作业触发器 Id</param>
            <returns><see cref="T:Furion.Schedule.Trigger"/></returns>
        </member>
        <member name="M:Furion.Schedule.IScheduler.TrySaveTrigger(Furion.Schedule.TriggerBuilder,Furion.Schedule.Trigger@,System.Boolean)">
            <summary>
            保存作业触发器
            </summary>
            <param name="triggerBuilder">作业触发器构建器</param>
            <param name="trigger">作业触发器</param>
            <param name="immediately">是否立即通知作业调度器重新载入</param>
            <returns><see cref="T:Furion.Schedule.ScheduleResult"/></returns>
        </member>
        <member name="M:Furion.Schedule.IScheduler.SaveTrigger(Furion.Schedule.TriggerBuilder[])">
            <summary>
            保存作业触发器
            </summary>
            <param name="triggerBuilders">作业触发器构建器集合</param>
        </member>
        <member name="M:Furion.Schedule.IScheduler.TryUpdateDetail(Furion.Schedule.JobBuilder,Furion.Schedule.JobDetail@)">
            <summary>
            更新作业计划信息
            </summary>
            <param name="jobBuilder">作业信息构建器</param>
            <param name="jobDetail">作业信息</param>
            <returns><see cref="T:Furion.Schedule.ScheduleResult"/></returns>
        </member>
        <member name="M:Furion.Schedule.IScheduler.UpdateDetail(Furion.Schedule.JobBuilder)">
            <summary>
            更新作业信息
            </summary>
            <param name="jobBuilder">作业信息构建器</param>
        </member>
        <member name="M:Furion.Schedule.IScheduler.TryUpdateDetail(System.Action{Furion.Schedule.JobBuilder},Furion.Schedule.JobDetail@)">
            <summary>
            更新作业计划信息
            </summary>
            <param name="jobBuilderAction">作业信息构建器委托</param>
            <param name="jobDetail">作业信息</param>
            <returns><see cref="T:Furion.Schedule.ScheduleResult"/></returns>
        </member>
        <member name="M:Furion.Schedule.IScheduler.UpdateDetail(System.Action{Furion.Schedule.JobBuilder})">
            <summary>
            更新作业信息
            </summary>
            <param name="jobBuilderAction">作业信息构建器委托</param>
        </member>
        <member name="M:Furion.Schedule.IScheduler.TryAddTrigger(Furion.Schedule.TriggerBuilder,Furion.Schedule.Trigger@)">
            <summary>
            添加作业触发器
            </summary>
            <param name="triggerBuilder">作业触发器构建器</param>
            <param name="trigger">作业触发器</param>
            <returns><see cref="T:Furion.Schedule.ScheduleResult"/></returns>
        </member>
        <member name="M:Furion.Schedule.IScheduler.AddTrigger(Furion.Schedule.TriggerBuilder[])">
            <summary>
            添加作业触发器
            </summary>
            <param name="triggerBuilders">作业触发器构建器</param>
        </member>
        <member name="M:Furion.Schedule.IScheduler.TryUpdateTrigger(Furion.Schedule.TriggerBuilder,Furion.Schedule.Trigger@)">
            <summary>
            更新作业触发器
            </summary>
            <param name="triggerBuilder">作业触发器构建器</param>
            <param name="trigger">作业触发器</param>
            <returns><see cref="T:Furion.Schedule.ScheduleResult"/></returns>
        </member>
        <member name="M:Furion.Schedule.IScheduler.UpdateTrigger(Furion.Schedule.TriggerBuilder[])">
            <summary>
            更新作业触发器
            </summary>
            <param name="triggerBuilders">作业触发器构建器</param>
        </member>
        <member name="M:Furion.Schedule.IScheduler.TryUpdateTrigger(System.String,System.Action{Furion.Schedule.TriggerBuilder},Furion.Schedule.Trigger@)">
            <summary>
            更新作业触发器
            </summary>
            <param name="triggerId">作业触发器 Id</param>
            <param name="triggerBuilderAction">作业触发器构建器委托</param>
            <param name="trigger">作业触发器</param>
            <returns><see cref="T:Furion.Schedule.ScheduleResult"/></returns>
        </member>
        <member name="M:Furion.Schedule.IScheduler.UpdateTrigger(System.String,System.Action{Furion.Schedule.TriggerBuilder})">
            <summary>
            更新作业触发器
            </summary>
            <param name="triggerId">作业触发器 Id</param>
            <param name="triggerBuilderAction">作业触发器构建器委托</param>
        </member>
        <member name="M:Furion.Schedule.IScheduler.TryRemoveTrigger(System.String,Furion.Schedule.Trigger@)">
            <summary>
            删除作业触发器
            </summary>
            <param name="triggerId">作业触发器 Id</param>
            <param name="trigger">作业触发器</param>
            <returns><see cref="T:Furion.Schedule.ScheduleResult"/></returns>
        </member>
        <member name="M:Furion.Schedule.IScheduler.RemoveTrigger(System.String[])">
            <summary>
            删除作业触发器
            </summary>
            <param name="triggerIds">作业触发器 Id 集合</param>
        </member>
        <member name="M:Furion.Schedule.IScheduler.TryRemove">
            <summary>
            将当前作业计划从调度器中删除
            </summary>
            <remarks><see cref="T:Furion.Schedule.ScheduleResult"/></remarks>
        </member>
        <member name="M:Furion.Schedule.IScheduler.Remove">
            <summary>
            将当前作业计划从调度器中删除
            </summary>
        </member>
        <member name="M:Furion.Schedule.IScheduler.ContainsTrigger(System.String)">
            <summary>
            检查作业触发器是否存在
            </summary>
            <param name="triggerId">作业触发器 Id</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Furion.Schedule.IScheduler.StartTrigger(System.String,System.Boolean)">
            <summary>
            启动作业触发器
            </summary>
            <param name="triggerId">作业触发器 Id</param>
            <param name="immediately">是否立即通知作业调度器重新载入</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Furion.Schedule.IScheduler.PauseTrigger(System.String,System.Boolean)">
            <summary>
            暂停作业触发器
            </summary>
            <param name="triggerId">作业触发器 Id</param>
            <param name="immediately">是否立即通知作业调度器重新载入</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Furion.Schedule.IScheduler.Persist">
            <summary>
            强制触发作业持久化记录
            </summary>
        </member>
        <member name="M:Furion.Schedule.IScheduler.Start">
            <summary>
            启动作业
            </summary>
        </member>
        <member name="M:Furion.Schedule.IScheduler.Pause">
            <summary>
            暂停作业
            </summary>
        </member>
        <member name="M:Furion.Schedule.IScheduler.Collate(System.Boolean)">
            <summary>
            校对作业
            </summary>
            <param name="immediately">是否立即通知作业调度器重新载入</param>
        </member>
        <member name="M:Furion.Schedule.IScheduler.Reload">
            <summary>
            刷新作业计划
            </summary>
        </member>
        <member name="M:Furion.Schedule.IScheduler.ConvertToJSON(Furion.Schedule.NamingConventions)">
            <summary>
            转换成 JSON 字符串
            </summary>
            <param name="naming">命名法</param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:Furion.Schedule.IScheduler.GetEnumerable">
            <summary>
            将作业计划转换成可枚举集合
            </summary>
            <returns><see cref="T:System.Collections.Generic.Dictionary`2"/></returns>
        </member>
        <member name="M:Furion.Schedule.IScheduler.Run(System.String)">
            <summary>
            立即执行作业
            </summary>
            <param name="triggerId">作业触发器 Id</param>
        </member>
        <member name="M:Furion.Schedule.IScheduler.Cancel(System.String)">
            <summary>
            取消正在执行的作业
            </summary>
            <param name="triggerId">作业触发器 Id</param>
        </member>
        <member name="T:Furion.Schedule.Scheduler">
            <summary>
            作业计划
            </summary>
            <summary>
            作业计划
            </summary>
        </member>
        <member name="M:Furion.Schedule.Scheduler.#ctor(Furion.Schedule.JobDetail,System.Collections.Generic.Dictionary{System.String,Furion.Schedule.Trigger})">
            <summary>
            构造函数
            </summary>
            <param name="jobDetail">作业信息</param>
            <param name="triggers">作业触发器集合</param>
        </member>
        <member name="P:Furion.Schedule.Scheduler.JobId">
            <summary>
            作业 Id
            </summary>
        </member>
        <member name="P:Furion.Schedule.Scheduler.GroupName">
            <summary>
            作业组名称
            </summary>
        </member>
        <member name="P:Furion.Schedule.Scheduler.TriggerCount">
            <summary>
            作业触发器数量
            </summary>
        </member>
        <member name="P:Furion.Schedule.Scheduler.JobDetail">
            <summary>
            作业信息
            </summary>
        </member>
        <member name="P:Furion.Schedule.Scheduler.Triggers">
            <summary>
            作业触发器集合
            </summary>
        </member>
        <member name="P:Furion.Schedule.Scheduler.Factory">
            <summary>
            作业计划工厂
            </summary>
        </member>
        <member name="P:Furion.Schedule.Scheduler.Logger">
            <summary>
            作业调度器日志服务
            </summary>
        </member>
        <member name="P:Furion.Schedule.Scheduler.JobLogger">
            <summary>
            作业处理类型日志服务
            </summary>
        </member>
        <member name="M:Furion.Schedule.Scheduler.GetModel">
            <summary>
            返回可公开访问的作业计划模型
            </summary>
            <remarks>常用于接口返回或序列化操作</remarks>
            <returns><see cref="T:Furion.Schedule.SchedulerModel"/></returns>
        </member>
        <member name="M:Furion.Schedule.Scheduler.GetBuilder">
            <summary>
            获取作业计划构建器
            </summary>
            <returns><see cref="T:Furion.Schedule.SchedulerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.Scheduler.GetJobBuilder">
            <summary>
            获取作业信息构建器
            </summary>
            <returns><see cref="T:Furion.Schedule.JobBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.Scheduler.GetTriggerBuilders">
            <summary>
            获取作业触发器构建器集合
            </summary>
            <returns><see cref="T:System.Collections.Generic.List`1"/></returns>
        </member>
        <member name="M:Furion.Schedule.Scheduler.GetTriggerBuilder(System.String)">
            <summary>
            获取作业触发器构建器
            </summary>
            <param name="triggerId">作业触发器 Id</param>
            <returns><see cref="T:Furion.Schedule.TriggerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.Scheduler.GetJobDetail">
            <summary>
            查找作业信息
            </summary>
            <returns><see cref="P:Furion.Schedule.Scheduler.JobDetail"/></returns>
        </member>
        <member name="M:Furion.Schedule.Scheduler.GetTriggers">
            <summary>
            查找作业触发器集合
            </summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:Furion.Schedule.Scheduler.TryGetTrigger(System.String,Furion.Schedule.Trigger@)">
            <summary>
            查找作业触发器
            </summary>
            <param name="triggerId">作业触发器 Id</param>
            <param name="trigger">作业触发器</param>
            <returns><see cref="T:Furion.Schedule.ScheduleResult"/></returns>
        </member>
        <member name="M:Furion.Schedule.Scheduler.GetTrigger(System.String)">
            <summary>
            查找作业触发器
            </summary>
            <param name="triggerId">作业触发器 Id</param>
            <returns><see cref="T:Furion.Schedule.Trigger"/></returns>
        </member>
        <member name="M:Furion.Schedule.Scheduler.TrySaveTrigger(Furion.Schedule.TriggerBuilder,Furion.Schedule.Trigger@,System.Boolean)">
            <summary>
            保存作业触发器
            </summary>
            <param name="triggerBuilder">作业触发器构建器</param>
            <param name="trigger">作业触发器</param>
            <param name="immediately">是否立即通知作业调度器重新载入</param>
            <returns><see cref="T:Furion.Schedule.ScheduleResult"/></returns>
        </member>
        <member name="M:Furion.Schedule.Scheduler.SaveTrigger(Furion.Schedule.TriggerBuilder[])">
            <summary>
            保存作业触发器
            </summary>
            <param name="triggerBuilders">作业触发器构建器集合</param>
        </member>
        <member name="M:Furion.Schedule.Scheduler.TryUpdateDetail(Furion.Schedule.JobBuilder,Furion.Schedule.JobDetail@)">
            <summary>
            更新作业计划信息
            </summary>
            <param name="jobBuilder">作业信息构建器</param>
            <param name="jobDetail">作业信息</param>
            <returns><see cref="T:Furion.Schedule.ScheduleResult"/></returns>
        </member>
        <member name="M:Furion.Schedule.Scheduler.UpdateDetail(Furion.Schedule.JobBuilder)">
            <summary>
            更新作业信息
            </summary>
            <param name="jobBuilder">作业信息构建器</param>
        </member>
        <member name="M:Furion.Schedule.Scheduler.TryUpdateDetail(System.Action{Furion.Schedule.JobBuilder},Furion.Schedule.JobDetail@)">
            <summary>
            更新作业计划信息
            </summary>
            <param name="jobBuilderAction">作业信息构建器委托</param>
            <param name="jobDetail">作业信息</param>
            <returns><see cref="T:Furion.Schedule.ScheduleResult"/></returns>
        </member>
        <member name="M:Furion.Schedule.Scheduler.UpdateDetail(System.Action{Furion.Schedule.JobBuilder})">
            <summary>
            更新作业信息
            </summary>
            <param name="jobBuilderAction">作业信息构建器委托</param>
        </member>
        <member name="M:Furion.Schedule.Scheduler.TryAddTrigger(Furion.Schedule.TriggerBuilder,Furion.Schedule.Trigger@)">
            <summary>
            添加作业触发器
            </summary>
            <param name="triggerBuilder">作业触发器构建器</param>
            <param name="trigger">作业触发器</param>
            <returns><see cref="T:Furion.Schedule.ScheduleResult"/></returns>
        </member>
        <member name="M:Furion.Schedule.Scheduler.AddTrigger(Furion.Schedule.TriggerBuilder[])">
            <summary>
            添加作业触发器
            </summary>
            <param name="triggerBuilders">作业触发器构建器</param>
        </member>
        <member name="M:Furion.Schedule.Scheduler.TryUpdateTrigger(Furion.Schedule.TriggerBuilder,Furion.Schedule.Trigger@)">
            <summary>
            更新作业触发器
            </summary>
            <param name="triggerBuilder">作业触发器构建器</param>
            <param name="trigger">作业触发器</param>
            <returns><see cref="T:Furion.Schedule.ScheduleResult"/></returns>
        </member>
        <member name="M:Furion.Schedule.Scheduler.UpdateTrigger(Furion.Schedule.TriggerBuilder[])">
            <summary>
            更新作业触发器
            </summary>
            <param name="triggerBuilders">作业触发器构建器</param>
        </member>
        <member name="M:Furion.Schedule.Scheduler.TryUpdateTrigger(System.String,System.Action{Furion.Schedule.TriggerBuilder},Furion.Schedule.Trigger@)">
            <summary>
            更新作业触发器
            </summary>
            <param name="triggerId">作业触发器 Id</param>
            <param name="triggerBuilderAction">作业触发器构建器委托</param>
            <param name="trigger">作业触发器</param>
            <returns><see cref="T:Furion.Schedule.ScheduleResult"/></returns>
        </member>
        <member name="M:Furion.Schedule.Scheduler.UpdateTrigger(System.String,System.Action{Furion.Schedule.TriggerBuilder})">
            <summary>
            更新作业触发器
            </summary>
            <param name="triggerId">作业触发器 Id</param>
            <param name="triggerBuilderAction">作业触发器构建器委托</param>
        </member>
        <member name="M:Furion.Schedule.Scheduler.TryRemoveTrigger(System.String,Furion.Schedule.Trigger@)">
            <summary>
            删除作业触发器
            </summary>
            <param name="triggerId">作业触发器 Id</param>
            <param name="trigger">作业触发器</param>
            <returns><see cref="T:Furion.Schedule.ScheduleResult"/></returns>
        </member>
        <member name="M:Furion.Schedule.Scheduler.RemoveTrigger(System.String[])">
            <summary>
            删除作业触发器
            </summary>
            <param name="triggerIds">作业触发器 Id 集合</param>
        </member>
        <member name="M:Furion.Schedule.Scheduler.TryRemove">
            <summary>
            将当前作业计划从调度器中删除
            </summary>
            <remarks><see cref="T:Furion.Schedule.ScheduleResult"/></remarks>
        </member>
        <member name="M:Furion.Schedule.Scheduler.Remove">
            <summary>
            将当前作业计划从调度器中删除
            </summary>
        </member>
        <member name="M:Furion.Schedule.Scheduler.ContainsTrigger(System.String)">
            <summary>
            检查作业触发器是否存在
            </summary>
            <param name="triggerId">作业触发器 Id</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Furion.Schedule.Scheduler.StartTrigger(System.String,System.Boolean)">
            <summary>
            启动作业触发器
            </summary>
            <param name="triggerId">作业触发器 Id</param>
            <param name="immediately">是否立即通知作业调度器重新载入</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Furion.Schedule.Scheduler.PauseTrigger(System.String,System.Boolean)">
            <summary>
            暂停作业触发器
            </summary>
            <param name="triggerId">作业触发器 Id</param>
            <param name="immediately">是否立即通知作业调度器重新载入</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Furion.Schedule.Scheduler.Persist">
            <summary>
            强制触发作业持久化记录
            </summary>
        </member>
        <member name="M:Furion.Schedule.Scheduler.Start">
            <summary>
            启动作业
            </summary>
        </member>
        <member name="M:Furion.Schedule.Scheduler.Pause">
            <summary>
            暂停作业
            </summary>
        </member>
        <member name="M:Furion.Schedule.Scheduler.Collate(System.Boolean)">
            <summary>
            校对作业
            </summary>
            <param name="immediately">是否立即通知作业调度器重新载入</param>
        </member>
        <member name="M:Furion.Schedule.Scheduler.Reload">
            <summary>
            刷新作业计划
            </summary>
        </member>
        <member name="M:Furion.Schedule.Scheduler.ConvertToJSON(Furion.Schedule.NamingConventions)">
            <summary>
            转换成 JSON 字符串
            </summary>
            <param name="naming">命名法</param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:Furion.Schedule.Scheduler.GetEnumerable">
            <summary>
            将作业计划转换成可枚举集合
            </summary>
            <returns><see cref="T:System.Collections.Generic.Dictionary`2"/></returns>
        </member>
        <member name="M:Furion.Schedule.Scheduler.Run(System.String)">
            <summary>
            立即执行作业
            </summary>
            <param name="triggerId">作业触发器 Id</param>
        </member>
        <member name="M:Furion.Schedule.Scheduler.Cancel(System.String)">
            <summary>
            取消正在执行作业
            </summary>
            <param name="triggerId">作业触发器 Id</param>
        </member>
        <member name="M:Furion.Schedule.Scheduler.InternalTryGetTrigger(System.String,Furion.Schedule.Trigger@,System.Boolean)">
            <summary>
            内部获取作业触发器
            </summary>
            <param name="triggerId">作业触发器 Id</param>
            <param name="trigger">作业触发器</param>
            <param name="outputLog">是否显示日志</param>
            <returns><see cref="T:Furion.Schedule.ScheduleResult"/></returns>
        </member>
        <member name="T:Furion.Schedule.SchedulerModel">
            <summary>
            作业计划模型
            </summary>
            <remarks>常用于接口返回或序列化操作</remarks>
        </member>
        <member name="P:Furion.Schedule.SchedulerModel.JobDetail">
            <summary>
            作业信息
            </summary>
        </member>
        <member name="P:Furion.Schedule.SchedulerModel.Triggers">
            <summary>
            作业触发器
            </summary>
        </member>
        <member name="T:Furion.Schedule.IJobClusterServer">
            <summary>
            作业集群服务
            </summary>
            <remarks>集群并不能达到负载均衡的效果，而仅仅提供了故障转移的功能，当一个任务服务器宕机时，另一个任务服务器会启动</remarks>
        </member>
        <member name="M:Furion.Schedule.IJobClusterServer.Start(Furion.Schedule.JobClusterContext)">
            <summary>
            当前作业调度器启动通知
            </summary>
            <param name="context">作业集群服务上下文</param>
        </member>
        <member name="M:Furion.Schedule.IJobClusterServer.WaitingForAsync(Furion.Schedule.JobClusterContext)">
            <summary>
            等待被唤醒
            </summary>
            <param name="context">作业集群服务上下文</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:Furion.Schedule.IJobClusterServer.Stop(Furion.Schedule.JobClusterContext)">
            <summary>
            当前作业调度器停止通知
            </summary>
            <param name="context">作业集群服务上下文</param>
        </member>
        <member name="M:Furion.Schedule.IJobClusterServer.Crash(Furion.Schedule.JobClusterContext)">
            <summary>
            当前作业调度器宕机
            </summary>
            <param name="context">作业集群服务上下文</param>
        </member>
        <member name="T:Furion.Schedule.CronTrigger">
            <summary>
            Cron 表达式作业触发器
            </summary>
        </member>
        <member name="M:Furion.Schedule.CronTrigger.#ctor(System.String,System.Object)">
            <summary>
            构造函数
            </summary>
            <param name="schedule">Cron 表达式</param>
            <param name="args">动态参数类型，支持 <see cref="T:System.Int32"/>，<see cref="T:Furion.TimeCrontab.CronStringFormat"/> 和 object[]</param>
        </member>
        <member name="P:Furion.Schedule.CronTrigger.Crontab">
            <summary>
            <see cref="P:Furion.Schedule.CronTrigger.Crontab"/> 对象
            </summary>
        </member>
        <member name="M:Furion.Schedule.CronTrigger.GetNextOccurrence(System.DateTime)">
            <summary>
            计算下一个触发时间
            </summary>
            <param name="startAt">起始时间</param>
            <returns><see cref="T:System.DateTime"/></returns>
        </member>
        <member name="M:Furion.Schedule.CronTrigger.ToString">
            <summary>
            作业触发器转字符串输出
            </summary>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="T:Furion.Schedule.PeriodTrigger">
            <summary>
            毫秒周期（间隔）作业触发器
            </summary>
        </member>
        <member name="M:Furion.Schedule.PeriodTrigger.#ctor(System.Int64)">
            <summary>
            构造函数
            </summary>
            <param name="interval">间隔（毫秒）</param>
        </member>
        <member name="P:Furion.Schedule.PeriodTrigger.Interval">
            <summary>
            间隔（毫秒）
            </summary>
        </member>
        <member name="M:Furion.Schedule.PeriodTrigger.GetNextOccurrence(System.DateTime)">
            <summary>
            计算下一个触发时间
            </summary>
            <param name="startAt">起始时间</param>
            <returns><see cref="T:System.DateTime"/></returns>
        </member>
        <member name="M:Furion.Schedule.PeriodTrigger.ToString">
            <summary>
            作业触发器转字符串输出
            </summary>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:Furion.Schedule.PeriodTrigger.GetUnit">
            <summary>
            计算间隔单位
            </summary>
            <returns></returns>
        </member>
        <member name="T:Furion.Schedule.Trigger">
            <summary>
            作业触发器基类
            </summary>
            <summary>
            作业触发器基类
            </summary>
        </member>
        <member name="P:Furion.Schedule.Trigger.TriggerId">
            <summary>
            作业触发器 Id
            </summary>
        </member>
        <member name="P:Furion.Schedule.Trigger.JobId">
            <summary>
            作业 Id
            </summary>
        </member>
        <member name="P:Furion.Schedule.Trigger.TriggerType">
            <summary>
            作业触发器类型
            </summary>
            <remarks>存储的是类型的 FullName</remarks>
        </member>
        <member name="P:Furion.Schedule.Trigger.AssemblyName">
            <summary>
            作业触发器类型所在程序集
            </summary>
            <remarks>存储的是程序集 Name</remarks>
        </member>
        <member name="P:Furion.Schedule.Trigger.Args">
            <summary>
            作业触发器参数
            </summary>
            <remarks>运行时将反序列化为 object[] 类型并作为构造函数参数</remarks>
        </member>
        <member name="P:Furion.Schedule.Trigger.Description">
            <summary>
            描述信息
            </summary>
        </member>
        <member name="P:Furion.Schedule.Trigger.Status">
            <summary>
            作业触发器状态
            </summary>
        </member>
        <member name="P:Furion.Schedule.Trigger.StartTime">
            <summary>
            起始时间
            </summary>
        </member>
        <member name="P:Furion.Schedule.Trigger.EndTime">
            <summary>
            结束时间
            </summary>
        </member>
        <member name="P:Furion.Schedule.Trigger.LastRunTime">
            <summary>
            最近运行时间
            </summary>
        </member>
        <member name="P:Furion.Schedule.Trigger.NextRunTime">
            <summary>
            下一次运行时间
            </summary>
        </member>
        <member name="P:Furion.Schedule.Trigger.NumberOfRuns">
            <summary>
            触发次数
            </summary>
        </member>
        <member name="P:Furion.Schedule.Trigger.MaxNumberOfRuns">
            <summary>
            最大触发次数
            </summary>
            <remarks>
            <para>0：不限制</para>
            <para>n：N 次</para>
            </remarks>
        </member>
        <member name="P:Furion.Schedule.Trigger.NumberOfErrors">
            <summary>
            出错次数
            </summary>
        </member>
        <member name="P:Furion.Schedule.Trigger.MaxNumberOfErrors">
            <summary>
            最大出错次数
            </summary>
            <remarks>
            <para>0：不限制</para>
            <para>n：N 次</para>
            </remarks>
        </member>
        <member name="P:Furion.Schedule.Trigger.NumRetries">
            <summary>
            重试次数
            </summary>
        </member>
        <member name="P:Furion.Schedule.Trigger.RetryTimeout">
            <summary>
            重试间隔时间
            </summary>
            <remarks>默认1000毫秒</remarks>
        </member>
        <member name="P:Furion.Schedule.Trigger.StartNow">
            <summary>
            是否立即启动
            </summary>
        </member>
        <member name="P:Furion.Schedule.Trigger.RunOnStart">
            <summary>
            是否启动时执行一次
            </summary>
        </member>
        <member name="P:Furion.Schedule.Trigger.ResetOnlyOnce">
            <summary>
            是否在启动时重置最大触发次数等于一次的作业
            </summary>
            <remarks>解决因持久化数据已完成一次触发但启动时不再执行的问题</remarks>
        </member>
        <member name="P:Furion.Schedule.Trigger.Result">
            <summary>
            本次执行结果
            </summary>
        </member>
        <member name="P:Furion.Schedule.Trigger.ElapsedTime">
            <summary>
            本次执行耗时
            </summary>
        </member>
        <member name="P:Furion.Schedule.Trigger.UpdatedTime">
            <summary>
            作业触发器更新时间
            </summary>
        </member>
        <member name="P:Furion.Schedule.Trigger.Behavior">
            <summary>
            标记作业触发器持久化行为
            </summary>
        </member>
        <member name="P:Furion.Schedule.Trigger.RuntimeTriggerType">
            <summary>
            作业触发器运行时类型
            </summary>
        </member>
        <member name="P:Furion.Schedule.Trigger.RuntimeTriggerArgs">
            <summary>
            作业触发器运行时参数
            </summary>
        </member>
        <member name="P:Furion.Schedule.Trigger.Timelines">
            <summary>
            作业触发器最近运行记录
            </summary>
            <remarks>默认只保存 10 条</remarks>
        </member>
        <member name="P:Furion.Schedule.Trigger.Mode">
            <summary>
            触发模式
            </summary>
            <remarks>默认为定时触发</remarks>
        </member>
        <member name="M:Furion.Schedule.Trigger.GetNextOccurrence(System.DateTime)">
            <summary>
            计算下一个触发时间
            </summary>
            <param name="startAt">起始时间</param>
            <returns><see cref="T:System.DateTime"/></returns>
        </member>
        <member name="M:Furion.Schedule.Trigger.ShouldRun(Furion.Schedule.JobDetail,System.DateTime)">
            <summary>
            执行条件检查
            </summary>
            <param name="jobDetail">作业信息</param>
            <param name="startAt">起始时间</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Furion.Schedule.Trigger.GetBuilder">
            <summary>
            获取作业触发器构建器
            </summary>
            <returns><see cref="T:Furion.Schedule.TriggerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.Trigger.GetTimelines">
            <summary>
            获取作业触发器最近运行时间
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.Schedule.Trigger.ToString">
            <summary>
            作业触发器转字符串输出
            </summary>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:Furion.Schedule.Trigger.ResetMaxNumberOfRunsEqualOnceOnStart(System.DateTime)">
            <summary>
            重置启动时最大触发次数等于一次的作业触发器
            </summary>
            <param name="startAt">起始时间</param>
        </member>
        <member name="M:Furion.Schedule.Trigger.Increment(Furion.Schedule.JobDetail,System.DateTime)">
            <summary>
            记录运行信息和计算下一个触发时间
            </summary>
            <param name="jobDetail">作业信息</param>
            <param name="startAt">起始时间</param>
        </member>
        <member name="M:Furion.Schedule.Trigger.IncrementErrors(Furion.Schedule.JobDetail,System.DateTime)">
            <summary>
            记录错误信息，包含错误次数和运行状态
            </summary>
            <param name="jobDetail">作业信息</param>
            <param name="startAt">起始时间</param>
        </member>
        <member name="M:Furion.Schedule.Trigger.GetNextRunTime(System.DateTime)">
            <summary>
            计算下一次运行时间
            </summary>
            <param name="startAt">起始时间</param>
            <returns><see cref="T:System.DateTime"/></returns>
        </member>
        <member name="M:Furion.Schedule.Trigger.CheckRunOnStartAndReturnNextRunTime(System.DateTime)">
            <summary>
            检查是否启动时执行一次并返回下一次执行时间
            </summary>
            <param name="startAt">起始时间</param>
            <returns><see cref="T:System.DateTime"/></returns>
        </member>
        <member name="M:Furion.Schedule.Trigger.SetStatus(Furion.Schedule.TriggerStatus)">
            <summary>
            设置作业触发器状态
            </summary>
            <param name="status"><see cref="T:Furion.Schedule.TriggerStatus"/></param>
        </member>
        <member name="M:Furion.Schedule.Trigger.IsNormalStatus">
            <summary>
            是否是正常触发器状态
            </summary>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Furion.Schedule.Trigger.CheckAndFixNextOccurrence(Furion.Schedule.JobDetail,System.DateTime)">
            <summary>
            检查下一次执行信息并修正 <see cref="P:Furion.Schedule.Trigger.NextRunTime"/> 和 <see cref="P:Furion.Schedule.Trigger.Status"/>
            </summary>
            <param name="jobDetail">作业信息</param>
            <param name="startAt">起始时间</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Furion.Schedule.Trigger.NextShouldRun(System.DateTime)">
            <summary>
            下一次可执行检查
            </summary>
            <param name="startAt">起始时间</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Furion.Schedule.Trigger.CurrentShouldRun(Furion.Schedule.JobDetail,System.DateTime)">
            <summary>
            当前可执行检查
            </summary>
            <param name="jobDetail">作业信息</param>
            <param name="startAt">起始时间</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Furion.Schedule.Trigger.RecordTimelineAsync(Furion.Schedule.ISchedulerFactory,System.String,System.String)">
            <summary>
            记录作业触发器运行信息
            </summary>
            <param name="schedulerFactory">作业计划工厂</param>
            <param name="jobId">作业 Id</param>
            <param name="exception">异常信息</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="F:Furion.Schedule.Trigger._namingColumnNames">
            <summary>
            带命名规则的数据库列名
            </summary>
        </member>
        <member name="M:Furion.Schedule.Trigger.ColumnNames(Furion.Schedule.NamingConventions)">
            <summary>
            获取数据库列名
            </summary>
            <param name="naming">命名法</param>
            <returns>string[]</returns>
        </member>
        <member name="M:Furion.Schedule.Trigger.GetStartAt(System.DateTime)">
            <summary>
            获取触发器初始化时间
            </summary>
            <param name="startAt">起始时间</param>
            <returns><see cref="T:System.DateTime"/> 或者 null</returns>
        </member>
        <member name="M:Furion.Schedule.Trigger.ConvertToSQL(System.String,Furion.Schedule.PersistenceBehavior,Furion.Schedule.NamingConventions)">
            <summary>
            转换成 Sql 语句
            </summary>
            <param name="tableName">数据库表名</param>
            <param name="behavior">持久化行为</param>
            <param name="naming">命名法</param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:Furion.Schedule.Trigger.ConvertToInsertSQL(System.String,Furion.Schedule.NamingConventions)">
            <summary>
            转换成 Sql 新增语句
            </summary>
            <param name="tableName">数据库表名</param>
            <param name="naming">命名法</param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:Furion.Schedule.Trigger.ConvertToUpdateSQL(System.String,Furion.Schedule.NamingConventions)">
            <summary>
            转换成 Sql 更新语句
            </summary>
            <param name="tableName">数据库表名</param>
            <param name="naming">命名法</param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:Furion.Schedule.Trigger.ConvertToDeleteSQL(System.String,Furion.Schedule.NamingConventions)">
            <summary>
            转换成 Sql 删除语句
            </summary>
            <param name="tableName">数据库表名</param>
            <param name="naming">命名法</param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:Furion.Schedule.Trigger.ConvertToJSON(Furion.Schedule.NamingConventions)">
            <summary>
            转换成 JSON 字符串
            </summary>
            <param name="naming">命名法</param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:Furion.Schedule.Trigger.ConvertToMonitor(Furion.Schedule.NamingConventions)">
            <summary>
            转换成 Monitor 字符串
            </summary>
            <param name="naming">命名法</param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="T:Furion.Schedule.TriggerOptions">
            <summary>
            作业触发器配置选项
            </summary>
        </member>
        <member name="M:Furion.Schedule.TriggerOptions.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:Furion.Schedule.TriggerOptions.ConvertToSQL">
            <summary>
            重写 <see cref="P:Furion.Schedule.TriggerOptions.ConvertToSQL"/>
            </summary>
        </member>
        <member name="P:Furion.Schedule.TriggerOptions.ConvertToSQLConfigure">
            <summary>
            <see cref="P:Furion.Schedule.TriggerOptions.ConvertToSQL"/> 静态配置
            </summary>
        </member>
        <member name="T:Furion.Schedule.Triggers">
            <summary>
            作业触发器静态类
            </summary>
        </member>
        <member name="M:Furion.Schedule.Triggers.Period(System.Int64)">
            <summary>
            创建毫秒周期（间隔）作业触发器构建器
            </summary>
            <param name="interval">间隔（毫秒）</param>
            <returns><see cref="T:Furion.Schedule.TriggerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.Triggers.PeriodSeconds(System.Int64)">
            <summary>
            创建秒周期（间隔）作业触发器构建器
            </summary>
            <param name="interval">间隔（秒）</param>
            <returns><see cref="T:Furion.Schedule.TriggerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.Triggers.PeriodMinutes(System.Int64)">
            <summary>
            创建分钟周期（间隔）作业触发器构建器
            </summary>
            <param name="interval">间隔（分钟）</param>
            <returns><see cref="T:Furion.Schedule.TriggerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.Triggers.PeriodHours(System.Int64)">
            <summary>
            创建小时周期（间隔）作业触发器构建器
            </summary>
            <param name="interval">间隔（小时）</param>
            <returns><see cref="T:Furion.Schedule.TriggerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.Triggers.Cron(System.String,Furion.TimeCrontab.CronStringFormat)">
            <summary>
            创建 Cron 表达式作业触发器构建器
            </summary>
            <param name="schedule">Cron 表达式</param>
            <param name="format">Cron 表达式格式化类型，默认 <see cref="F:Furion.TimeCrontab.CronStringFormat.Default"/></param>
            <returns><see cref="T:Furion.Schedule.TriggerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.Triggers.Cron(System.String,System.Object)">
            <summary>
            创建 Cron 表达式作业触发器构建器
            </summary>
            <param name="schedule">Cron 表达式</param>
            <param name="args">动态参数类型，支持 <see cref="T:System.Int32"/> 和 object[]</param>
            <returns><see cref="T:Furion.Schedule.TriggerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.Triggers.Create(System.String)">
            <summary>
            创建作业触发器构建器
            </summary>
            <param name="triggerId">作业触发器 Id</param>
            <returns><see cref="T:Furion.Schedule.JobBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.Triggers.Create``1">
            <summary>
            创建作业触发器构建器
            </summary>
            <typeparam name="TTrigger"><see cref="T:Furion.Schedule.Trigger"/> 派生类</typeparam>
            <returns><see cref="T:Furion.Schedule.TriggerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.Triggers.Create``1(System.Object[])">
            <summary>
            创建作业触发器构建器
            </summary>
            <typeparam name="TTrigger"><see cref="T:Furion.Schedule.Trigger"/> 派生类</typeparam>
            <param name="args">作业触发器参数</param>
            <returns><see cref="T:Furion.Schedule.TriggerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.Triggers.Create(System.String,System.String)">
            <summary>
            创建作业触发器构建器
            </summary>
            <param name="assemblyName">作业触发器类型所在程序集 Name</param>
            <param name="triggerTypeFullName">作业触发器类型 FullName</param>
            <returns><see cref="T:Furion.Schedule.TriggerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.Triggers.Create(System.String,System.String,System.Object[])">
            <summary>
            创建作业触发器构建器
            </summary>
            <param name="assemblyName">作业触发器类型所在程序集 Name</param>
            <param name="triggerTypeFullName">作业触发器类型 FullName</param>
            <param name="args">作业触发器参数</param>
            <returns><see cref="T:Furion.Schedule.TriggerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.Triggers.Create(System.Type)">
            <summary>
            创建作业触发器构建器
            </summary>
            <param name="triggerType"><see cref="T:Furion.Schedule.Trigger"/> 派生类</param>
            <returns><see cref="T:Furion.Schedule.TriggerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.Triggers.Create(System.Type,System.Object[])">
            <summary>
            创建作业触发器构建器
            </summary>
            <param name="triggerType"><see cref="T:Furion.Schedule.Trigger"/> 派生类</param>
            <param name="args">作业触发器参数</param>
            <returns><see cref="T:Furion.Schedule.TriggerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.Triggers.From(Furion.Schedule.Trigger)">
            <summary>
            将 <see cref="T:Furion.Schedule.Trigger"/> 转换成 <see cref="T:Furion.Schedule.TriggerBuilder"/>
            </summary>
            <param name="trigger">作业触发器</param>
            <returns><see cref="T:Furion.Schedule.TriggerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.Triggers.From(System.String)">
            <summary>
            将 JSON 字符串转换成 <see cref="T:Furion.Schedule.TriggerBuilder"/>
            </summary>
            <param name="json">JSON 字符串</param>
            <returns><see cref="T:Furion.Schedule.TriggerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.Triggers.Clone(Furion.Schedule.TriggerBuilder)">
            <summary>
            克隆作业触发器构建器
            </summary>
            <param name="fromTriggerBuilder">被克隆的作业触发器构建器</param>
            <returns><see cref="T:Furion.Schedule.TriggerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.Triggers.Secondly">
            <summary>
            创建每秒开始作业触发器构建器
            </summary>
            <returns><see cref="T:Furion.Schedule.TriggerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.Triggers.SecondlyAt(System.Object[])">
            <summary>
            创建指定特定秒开始作业触发器构建器
            </summary>
            <param name="fields">字段值</param>
            <returns><see cref="T:Furion.Schedule.TriggerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.Triggers.Minutely">
            <summary>
            创建每分钟开始作业触发器构建器
            </summary>
            <returns><see cref="T:Furion.Schedule.TriggerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.Triggers.MinutelyAt(System.Object[])">
            <summary>
            创建每分钟特定秒开始作业触发器构建器
            </summary>
            <param name="fields">字段值</param>
            <returns><see cref="T:Furion.Schedule.TriggerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.Triggers.Hourly">
            <summary>
            创建每小时开始作业触发器构建器
            </summary>
            <returns><see cref="T:Furion.Schedule.TriggerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.Triggers.HourlyAt(System.Object[])">
            <summary>
            创建每小时特定分钟开始作业触发器构建器
            </summary>
            <param name="fields">字段值</param>
            <returns><see cref="T:Furion.Schedule.TriggerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.Triggers.Daily">
            <summary>
            创建每天（午夜）开始作业触发器构建器
            </summary>
            <returns><see cref="T:Furion.Schedule.TriggerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.Triggers.DailyAt(System.Object[])">
            <summary>
            创建每天特定小时开始作业触发器构建器
            </summary>
            <param name="fields">字段值</param>
            <returns><see cref="T:Furion.Schedule.TriggerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.Triggers.Monthly">
            <summary>
            创建每月1号（午夜）开始作业触发器构建器
            </summary>
            <returns><see cref="T:Furion.Schedule.TriggerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.Triggers.MonthlyAt(System.Object[])">
            <summary>
            创建每月特定天（午夜）开始作业触发器构建器
            </summary>
            <param name="fields">字段值</param>
            <returns><see cref="T:Furion.Schedule.TriggerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.Triggers.Weekly">
            <summary>
            创建每周日（午夜）开始作业触发器构建器
            </summary>
            <returns><see cref="T:Furion.Schedule.TriggerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.Triggers.WeeklyAt(System.Object[])">
            <summary>
            创建每周特定星期几（午夜）开始作业触发器构建器
            </summary>
            <param name="fields">字段值</param>
            <returns><see cref="T:Furion.Schedule.TriggerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.Triggers.Yearly">
            <summary>
            创建每年1月1号（午夜）开始作业触发器构建器
            </summary>
            <returns><see cref="T:Furion.Schedule.TriggerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.Triggers.YearlyAt(System.Object[])">
            <summary>
            创建每年特定月1号（午夜）开始作业触发器构建器
            </summary>
            <param name="fields">字段值</param>
            <returns><see cref="T:Furion.Schedule.TriggerBuilder"/></returns>
        </member>
        <member name="M:Furion.Schedule.Triggers.Workday">
            <summary>
            创建每周一至周五（午夜）开始作业触发器构建器
            </summary>
            <returns><see cref="T:Furion.Schedule.TriggerBuilder"/></returns>
        </member>
        <member name="T:Furion.Schedule.TriggerTimeline">
            <summary>
            作业触发器运行记录
            </summary>
        </member>
        <member name="P:Furion.Schedule.TriggerTimeline.JobId">
            <summary>
            作业 Id
            </summary>
        </member>
        <member name="P:Furion.Schedule.TriggerTimeline.TriggerId">
            <summary>
            作业触发器 Id
            </summary>
        </member>
        <member name="P:Furion.Schedule.TriggerTimeline.NumberOfRuns">
            <summary>
            当前运行次数
            </summary>
        </member>
        <member name="P:Furion.Schedule.TriggerTimeline.LastRunTime">
            <summary>
            最近运行时间
            </summary>
        </member>
        <member name="P:Furion.Schedule.TriggerTimeline.NextRunTime">
            <summary>
            下一次运行时间
            </summary>
        </member>
        <member name="P:Furion.Schedule.TriggerTimeline.Status">
            <summary>
            作业触发器状态
            </summary>
        </member>
        <member name="P:Furion.Schedule.TriggerTimeline.Result">
            <summary>
            本次执行结果
            </summary>
        </member>
        <member name="P:Furion.Schedule.TriggerTimeline.ElapsedTime">
            <summary>
            本次执行耗时
            </summary>
        </member>
        <member name="P:Furion.Schedule.TriggerTimeline.CreatedTime">
            <summary>
            新增时间
            </summary>
        </member>
        <member name="P:Furion.Schedule.TriggerTimeline.Mode">
            <summary>
            触发模式
            </summary>
            <remarks>默认为定时触发</remarks>
        </member>
        <member name="P:Furion.Schedule.TriggerTimeline.Exception">
            <summary>
            异常信息
            </summary>
        </member>
        <member name="M:Furion.Schedule.TriggerTimeline.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Furion.SpecificationDocument.EnumToNumberAttribute">
            <summary>
            用于控制 Swager 生成 Enum 类型
            </summary>
        </member>
        <member name="M:Furion.SpecificationDocument.EnumToNumberAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.SpecificationDocument.EnumToNumberAttribute.#ctor(System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="enabled">启用状态</param>
        </member>
        <member name="P:Furion.SpecificationDocument.EnumToNumberAttribute.Enabled">
            <summary>
            启用状态
            </summary>
            <remarks>设置 false 则使用字符串类型</remarks>
        </member>
        <member name="T:Furion.SpecificationDocument.OperationIdAttribute">
            <summary>
            配置规范化文档 OperationId 问题
            </summary>
        </member>
        <member name="M:Furion.SpecificationDocument.OperationIdAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="operationId">自定义 OperationId，可用户生成可读的前端代码</param>
        </member>
        <member name="P:Furion.SpecificationDocument.OperationIdAttribute.OperationId">
            <summary>
            自定义 OperationId
            </summary>
        </member>
        <member name="T:Furion.SpecificationDocument.SchemaIdAttribute">
            <summary>
            解决规范化文档 SchemaId 冲突问题
            </summary>
        </member>
        <member name="M:Furion.SpecificationDocument.SchemaIdAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="schemaId">自定义 SchemaId，只能是字母开头，只运行下划线_连接</param>
        </member>
        <member name="M:Furion.SpecificationDocument.SchemaIdAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="schemaId">自定义 SchemaId</param>
            <param name="replace">默认在头部叠加，设置 true 之后，将直接使用 <see cref="P:Furion.SpecificationDocument.SchemaIdAttribute.SchemaId"/></param>
        </member>
        <member name="P:Furion.SpecificationDocument.SchemaIdAttribute.SchemaId">
            <summary>
            自定义 SchemaId
            </summary>
        </member>
        <member name="P:Furion.SpecificationDocument.SchemaIdAttribute.Replace">
            <summary>
            完全覆盖
            </summary>
            <remarks>默认在头部叠加，设置 true 之后，将直接使用 <see cref="P:Furion.SpecificationDocument.SchemaIdAttribute.SchemaId"/></remarks>
        </member>
        <member name="T:Furion.SpecificationDocument.SpecificationDocumentBuilder">
            <summary>
            规范化文档构建器
            </summary>
        </member>
        <member name="F:Furion.SpecificationDocument.SpecificationDocumentBuilder.AllGroupsKey">
            <summary>
            所有分组默认的组名 Key
            </summary>
        </member>
        <member name="F:Furion.SpecificationDocument.SpecificationDocumentBuilder._specificationDocumentSettings">
            <summary>
            规范化文档配置
            </summary>
        </member>
        <member name="F:Furion.SpecificationDocument.SpecificationDocumentBuilder._appSettings">
            <summary>
            应用全局配置
            </summary>
        </member>
        <member name="F:Furion.SpecificationDocument.SpecificationDocumentBuilder.DocumentGroupExtras">
            <summary>
            分组信息
            </summary>
        </member>
        <member name="F:Furion.SpecificationDocument.SpecificationDocumentBuilder._groupOrderRegex">
            <summary>
            带排序的分组名
            </summary>
        </member>
        <member name="F:Furion.SpecificationDocument.SpecificationDocumentBuilder.DocumentGroups">
            <summary>
            文档分组列表
            </summary>
        </member>
        <member name="M:Furion.SpecificationDocument.SpecificationDocumentBuilder.#cctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.SpecificationDocument.SpecificationDocumentBuilder.CheckApiDescriptionInCurrentGroup(System.String,Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescription)">
            <summary>
            检查方法是否在分组中
            </summary>
            <param name="currentGroup"></param>
            <param name="apiDescription"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.SpecificationDocument.SpecificationDocumentBuilder.GetOpenApiGroups">
            <summary>
            获取所有的规范化分组信息
            </summary>
            <returns></returns>
        </member>
        <member name="F:Furion.SpecificationDocument.SpecificationDocumentBuilder.GetGroupOpenApiInfoCached">
            <summary>
            获取分组信息缓存集合
            </summary>
        </member>
        <member name="M:Furion.SpecificationDocument.SpecificationDocumentBuilder.GetGroupOpenApiInfo(System.String)">
            <summary>
            获取分组配置信息
            </summary>
            <param name="group"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.SpecificationDocument.SpecificationDocumentBuilder.SetProperty``1(System.String,System.String,System.Action{``0})">
            <summary>
            设置额外配置的值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="group"></param>
            <param name="propertyName"></param>
            <param name="action"></param>
        </member>
        <member name="M:Furion.SpecificationDocument.SpecificationDocumentBuilder.Build(Swashbuckle.AspNetCore.Swagger.SwaggerOptions,System.Action{Swashbuckle.AspNetCore.Swagger.SwaggerOptions})">
            <summary>
            构建Swagger全局配置
            </summary>
            <param name="swaggerOptions">Swagger 全局配置</param>
            <param name="configure"></param>
        </member>
        <member name="M:Furion.SpecificationDocument.SpecificationDocumentBuilder.BuildGen(Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions,System.Action{Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions})">
            <summary>
            Swagger 生成器构建
            </summary>
            <param name="swaggerGenOptions">Swagger 生成器配置</param>
            <param name="configure">自定义配置</param>
        </member>
        <member name="M:Furion.SpecificationDocument.SpecificationDocumentBuilder.BuildUI(Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIOptions,System.String,System.Action{Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIOptions},System.Boolean)">
            <summary>
            Swagger UI 构建
            </summary>
            <param name="swaggerUIOptions"></param>
            <param name="routePrefix"></param>
            <param name="configure"></param>
            <param name="withProxy">解决 Swagger 被代理问题</param>
        </member>
        <member name="M:Furion.SpecificationDocument.SpecificationDocumentBuilder.CreateSwaggerDocs(Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions)">
            <summary>
            创建分组文档
            </summary>
            <param name="swaggerGenOptions">Swagger生成器对象</param>
        </member>
        <member name="M:Furion.SpecificationDocument.SpecificationDocumentBuilder.LoadGroupControllerWithActions(Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions)">
            <summary>
            加载分组控制器和动作方法列表
            </summary>
            <param name="swaggerGenOptions">Swagger 生成器配置</param>
        </member>
        <member name="M:Furion.SpecificationDocument.SpecificationDocumentBuilder.ConfigureTagsAction(Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions)">
            <summary>
             配置标签
            </summary>
            <param name="swaggerGenOptions"></param>
        </member>
        <member name="M:Furion.SpecificationDocument.SpecificationDocumentBuilder.ConfigureActionSequence(Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions)">
            <summary>
             配置 Action 排序
            </summary>
            <param name="swaggerGenOptions"></param>
        </member>
        <member name="M:Furion.SpecificationDocument.SpecificationDocumentBuilder.ConfigureOperationIds(Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions)">
            <summary>
            配置 Swagger OperationIds
            </summary>
            <param name="swaggerGenOptions">Swagger 生成器配置</param>
        </member>
        <member name="M:Furion.SpecificationDocument.SpecificationDocumentBuilder.ConfigureSchemaIds(Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions)">
            <summary>
            配置 Swagger SchemaIds
            </summary>
            <param name="swaggerGenOptions">Swagger 生成器配置</param>
        </member>
        <member name="M:Furion.SpecificationDocument.SpecificationDocumentBuilder.LoadXmlComments(Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions)">
            <summary>
            加载注释描述文件
            </summary>
            <param name="swaggerGenOptions">Swagger 生成器配置</param>
        </member>
        <member name="M:Furion.SpecificationDocument.SpecificationDocumentBuilder.GenerateInheritdocCref(System.Xml.Linq.XDocument,System.String,System.String)">
            <summary>
            生成 Inheritdoc cref 属性
            </summary>
            <param name="xmlDoc"></param>
            <param name="memberName"></param>
            <param name="className"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.SpecificationDocument.SpecificationDocumentBuilder.ConfigureSecurities(Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions)">
            <summary>
            配置授权
            </summary>
            <param name="swaggerGenOptions">Swagger 生成器配置</param>
        </member>
        <member name="M:Furion.SpecificationDocument.SpecificationDocumentBuilder.CreateGroupEndpoint(Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIOptions,System.String,System.Boolean)">
            <summary>
            配置分组终点路由
            </summary>
            <param name="swaggerUIOptions"></param>
            <param name="routePrefix"></param>
            <param name="withProxy">解决 Swagger 被代理问题</param>
        </member>
        <member name="M:Furion.SpecificationDocument.SpecificationDocumentBuilder.CustomizeIndex(Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIOptions)">
            <summary>
            自定义 Swagger 首页
            </summary>
            <param name="swaggerUIOptions"></param>
        </member>
        <member name="M:Furion.SpecificationDocument.SpecificationDocumentBuilder.AddDefaultInterceptor(Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIOptions)">
            <summary>
            添加默认请求/响应拦截器
            </summary>
            <param name="swaggerUIOptions"></param>
        </member>
        <member name="M:Furion.SpecificationDocument.SpecificationDocumentBuilder.ReadGroups">
            <summary>
            读取所有分组信息
            </summary>
            <returns></returns>
        </member>
        <member name="F:Furion.SpecificationDocument.SpecificationDocumentBuilder.GetControllerGroupsCached">
            <summary>
            获取控制器组缓存集合
            </summary>
        </member>
        <member name="M:Furion.SpecificationDocument.SpecificationDocumentBuilder.GetControllerGroups(System.Type)">
            <summary>
            获取控制器分组列表
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="F:Furion.SpecificationDocument.SpecificationDocumentBuilder.GetActionGroupsCached">
            <summary>
            <see cref="M:Furion.SpecificationDocument.SpecificationDocumentBuilder.GetActionGroups(System.Reflection.MethodInfo)"/> 缓存集合
            </summary>
        </member>
        <member name="M:Furion.SpecificationDocument.SpecificationDocumentBuilder.GetActionGroups(System.Reflection.MethodInfo)">
            <summary>
            获取动作方法分组列表
            </summary>
            <param name="method">方法</param>
            <returns></returns>
        </member>
        <member name="F:Furion.SpecificationDocument.SpecificationDocumentBuilder.GetControllerTagCached">
            <summary>
            <see cref="M:Furion.SpecificationDocument.SpecificationDocumentBuilder.GetActionTag(Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescription)"/> 缓存集合
            </summary>
        </member>
        <member name="M:Furion.SpecificationDocument.SpecificationDocumentBuilder.GetControllerTag(Microsoft.AspNetCore.Mvc.Controllers.ControllerActionDescriptor)">
            <summary>
            获取控制器标签
            </summary>
            <param name="controllerActionDescriptor">控制器接口描述器</param>
            <returns></returns>
        </member>
        <member name="F:Furion.SpecificationDocument.SpecificationDocumentBuilder.GetActionTagCached">
            <summary>
            <see cref="M:Furion.SpecificationDocument.SpecificationDocumentBuilder.GetActionTag(Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescription)"/> 缓存集合
            </summary>
        </member>
        <member name="M:Furion.SpecificationDocument.SpecificationDocumentBuilder.GetActionTag(Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescription)">
            <summary>
            获取动作方法标签
            </summary>
            <param name="apiDescription">接口描述器</param>
            <returns></returns>
        </member>
        <member name="M:Furion.SpecificationDocument.SpecificationDocumentBuilder.IsApiAction(System.Reflection.MethodInfo,System.Type)">
            <summary>
            是否是动作方法
            </summary>
            <param name="method">方法</param>
            <param name="ReflectedType">声明类型</param>
            <returns></returns>
        </member>
        <member name="M:Furion.SpecificationDocument.SpecificationDocumentBuilder.ResolveGroupExtraInfo(System.String)">
            <summary>
            解析分组附加信息
            </summary>
            <param name="group">分组名</param>
            <returns></returns>
        </member>
        <member name="T:Furion.SpecificationDocument.AnySchemaFilter">
            <summary>
            修正 规范化文档 object schema，统一显示为 any
            </summary>
            <remarks>相关 issue：https://github.com/swagger-api/swagger-codegen-generators/issues/692 </remarks>
        </member>
        <member name="M:Furion.SpecificationDocument.AnySchemaFilter.Apply(Microsoft.OpenApi.Models.OpenApiSchema,Swashbuckle.AspNetCore.SwaggerGen.SchemaFilterContext)">
            <summary>
            实现过滤器方法
            </summary>
            <param name="model"></param>
            <param name="context"></param>
        </member>
        <member name="T:Furion.SpecificationDocument.ApiActionFilter">
            <summary>
            规范化文档自定义更多功能
            </summary>
        </member>
        <member name="M:Furion.SpecificationDocument.ApiActionFilter.Apply(Microsoft.OpenApi.Models.OpenApiOperation,Swashbuckle.AspNetCore.SwaggerGen.OperationFilterContext)">
            <summary>
            实现过滤器方法
            </summary>
            <param name="operation"></param>
            <param name="context"></param>
        </member>
        <member name="T:Furion.SpecificationDocument.EnumSchemaFilter">
            <summary>
            修正 规范化文档 Enum 提示
            </summary>
        </member>
        <member name="F:Furion.SpecificationDocument.EnumSchemaFilter.CHINESE_PATTERN">
            <summary>
            中文正则表达式
            </summary>
        </member>
        <member name="M:Furion.SpecificationDocument.EnumSchemaFilter.Apply(Microsoft.OpenApi.Models.OpenApiSchema,Swashbuckle.AspNetCore.SwaggerGen.SchemaFilterContext)">
            <summary>
            实现过滤器方法
            </summary>
            <param name="model"></param>
            <param name="context"></param>
        </member>
        <member name="T:Furion.SpecificationDocument.TagsOrderDocumentFilter">
            <summary>
            标签文档排序/注释拦截器
            </summary>
        </member>
        <member name="M:Furion.SpecificationDocument.TagsOrderDocumentFilter.Apply(Microsoft.OpenApi.Models.OpenApiDocument,Swashbuckle.AspNetCore.SwaggerGen.DocumentFilterContext)">
            <summary>
            配置拦截
            </summary>
            <param name="swaggerDoc"></param>
            <param name="context"></param>
        </member>
        <member name="T:Furion.SpecificationDocument.GroupExtraInfo">
            <summary>
            分组附加信息
            </summary>
        </member>
        <member name="P:Furion.SpecificationDocument.GroupExtraInfo.Group">
            <summary>
            分组名
            </summary>
        </member>
        <member name="P:Furion.SpecificationDocument.GroupExtraInfo.Order">
            <summary>
            分组排序
            </summary>
        </member>
        <member name="P:Furion.SpecificationDocument.GroupExtraInfo.Visible">
            <summary>
            是否可见
            </summary>
        </member>
        <member name="T:Furion.SpecificationDocument.SpecificationAuth">
            <summary>
            规范化文档授权参数类型
            </summary>
        </member>
        <member name="P:Furion.SpecificationDocument.SpecificationAuth.UserName">
            <summary>
            用户名
            </summary>
        </member>
        <member name="P:Furion.SpecificationDocument.SpecificationAuth.Password">
            <summary>
            密码
            </summary>
        </member>
        <member name="T:Furion.SpecificationDocument.SpecificationLoginInfo">
            <summary>
            规范化文档授权登录配置信息
            </summary>
        </member>
        <member name="P:Furion.SpecificationDocument.SpecificationLoginInfo.Enabled">
            <summary>
            是否启用授权控制
            </summary>
        </member>
        <member name="P:Furion.SpecificationDocument.SpecificationLoginInfo.CheckUrl">
            <summary>
            检查登录地址
            </summary>
        </member>
        <member name="P:Furion.SpecificationDocument.SpecificationLoginInfo.SubmitUrl">
            <summary>
            提交登录地址
            </summary>
        </member>
        <member name="P:Furion.SpecificationDocument.SpecificationLoginInfo.EnableOnProduction">
            <summary>
            生产环境自动开启
            </summary>
        </member>
        <member name="T:Furion.SpecificationDocument.SpecificationOpenApiInfo">
            <summary>
            规范化文档开放接口信息
            </summary>
        </member>
        <member name="M:Furion.SpecificationDocument.SpecificationOpenApiInfo.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="F:Furion.SpecificationDocument.SpecificationOpenApiInfo._group">
            <summary>
            分组私有字段
            </summary>
        </member>
        <member name="P:Furion.SpecificationDocument.SpecificationOpenApiInfo.Group">
            <summary>
            所属组
            </summary>
        </member>
        <member name="P:Furion.SpecificationDocument.SpecificationOpenApiInfo.Order">
            <summary>
            排序
            </summary>
        </member>
        <member name="P:Furion.SpecificationDocument.SpecificationOpenApiInfo.Visible">
            <summary>
            是否可见
            </summary>
        </member>
        <member name="P:Furion.SpecificationDocument.SpecificationOpenApiInfo.RouteTemplate">
            <summary>
            路由模板
            </summary>
        </member>
        <member name="T:Furion.SpecificationDocument.SpecificationOpenApiSecurityRequirementItem">
            <summary>
            安全定义需求子项
            </summary>
        </member>
        <member name="M:Furion.SpecificationDocument.SpecificationOpenApiSecurityRequirementItem.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:Furion.SpecificationDocument.SpecificationOpenApiSecurityRequirementItem.Scheme">
            <summary>
            安全Schema
            </summary>
        </member>
        <member name="P:Furion.SpecificationDocument.SpecificationOpenApiSecurityRequirementItem.Accesses">
            <summary>
            权限
            </summary>
        </member>
        <member name="T:Furion.SpecificationDocument.SpecificationOpenApiSecurityScheme">
            <summary>
            规范化文档安全配置
            </summary>
        </member>
        <member name="M:Furion.SpecificationDocument.SpecificationOpenApiSecurityScheme.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:Furion.SpecificationDocument.SpecificationOpenApiSecurityScheme.Id">
            <summary>
            唯一Id
            </summary>
        </member>
        <member name="P:Furion.SpecificationDocument.SpecificationOpenApiSecurityScheme.Requirement">
            <summary>
            安全需求
            </summary>
        </member>
        <member name="T:Furion.SpecificationDocument.SpecificationDocumentSettingsOptions">
            <summary>
            规范化文档配置选项
            </summary>
        </member>
        <member name="P:Furion.SpecificationDocument.SpecificationDocumentSettingsOptions.DocumentTitle">
            <summary>
            文档标题
            </summary>
        </member>
        <member name="P:Furion.SpecificationDocument.SpecificationDocumentSettingsOptions.DefaultGroupName">
            <summary>
            默认分组名
            </summary>
        </member>
        <member name="P:Furion.SpecificationDocument.SpecificationDocumentSettingsOptions.EnableAuthorized">
            <summary>
            启用授权支持
            </summary>
        </member>
        <member name="P:Furion.SpecificationDocument.SpecificationDocumentSettingsOptions.FormatAsV2">
            <summary>
            格式化为V2版本
            </summary>
        </member>
        <member name="P:Furion.SpecificationDocument.SpecificationDocumentSettingsOptions.RoutePrefix">
            <summary>
            配置规范化文档地址
            </summary>
        </member>
        <member name="P:Furion.SpecificationDocument.SpecificationDocumentSettingsOptions.DocExpansionState">
            <summary>
            文档展开设置
            </summary>
        </member>
        <member name="P:Furion.SpecificationDocument.SpecificationDocumentSettingsOptions.XmlComments">
            <summary>
            XML 描述文件
            </summary>
        </member>
        <member name="P:Furion.SpecificationDocument.SpecificationDocumentSettingsOptions.EnableXmlComments">
            <summary>
            是否自动加载 Xml 注释文件
            </summary>
        </member>
        <member name="P:Furion.SpecificationDocument.SpecificationDocumentSettingsOptions.GroupOpenApiInfos">
            <summary>
            分组信息
            </summary>
        </member>
        <member name="P:Furion.SpecificationDocument.SpecificationDocumentSettingsOptions.SecurityDefinitions">
            <summary>
            安全定义
            </summary>
        </member>
        <member name="P:Furion.SpecificationDocument.SpecificationDocumentSettingsOptions.Servers">
            <summary>
            配置 Servers
            </summary>
        </member>
        <member name="P:Furion.SpecificationDocument.SpecificationDocumentSettingsOptions.HideServers">
            <summary>
            隐藏 Servers
            </summary>
        </member>
        <member name="P:Furion.SpecificationDocument.SpecificationDocumentSettingsOptions.RouteTemplate">
            <summary>
            默认 swagger.json 路由模板
            </summary>
        </member>
        <member name="P:Furion.SpecificationDocument.SpecificationDocumentSettingsOptions.PackagesGroups">
            <summary>
            配置安装第三方包的分组名
            </summary>
        </member>
        <member name="P:Furion.SpecificationDocument.SpecificationDocumentSettingsOptions.EnableEnumSchemaFilter">
            <summary>
            启用枚举 Schema 筛选器
            </summary>
        </member>
        <member name="P:Furion.SpecificationDocument.SpecificationDocumentSettingsOptions.EnableTagsOrderDocumentFilter">
            <summary>
            启用标签排序筛选器
            </summary>
        </member>
        <member name="P:Furion.SpecificationDocument.SpecificationDocumentSettingsOptions.ServerDir">
            <summary>
            服务目录（修正 IIS 创建 Application 问题）
            </summary>
        </member>
        <member name="P:Furion.SpecificationDocument.SpecificationDocumentSettingsOptions.LoginInfo">
            <summary>
            配置规范化文档登录信息
            </summary>
        </member>
        <member name="P:Furion.SpecificationDocument.SpecificationDocumentSettingsOptions.EnableAllGroups">
            <summary>
            启用 All Groups 功能
            </summary>
        </member>
        <member name="P:Furion.SpecificationDocument.SpecificationDocumentSettingsOptions.EnumToNumber">
            <summary>
            枚举类型生成值类型
            </summary>
        </member>
        <member name="M:Furion.SpecificationDocument.SpecificationDocumentSettingsOptions.PostConfigure(Furion.SpecificationDocument.SpecificationDocumentSettingsOptions,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            后期配置
            </summary>
            <param name="options"></param>
            <param name="configuration"></param>
        </member>
        <member name="T:Furion.TaskQueue.TaskQueueOptionsBuilder">
            <summary>
            任务队列配置选项构建器
            </summary>
        </member>
        <member name="P:Furion.TaskQueue.TaskQueueOptionsBuilder.ChannelCapacity">
            <summary>
            默认内置任务队列内存通道容量
            </summary>
            <remarks>超过 n 条待处理消息，第 n+1 条将进入等待，默认为 12000</remarks>
        </member>
        <member name="P:Furion.TaskQueue.TaskQueueOptionsBuilder.UnobservedTaskExceptionHandler">
            <summary>
            未察觉任务异常事件处理程序
            </summary>
        </member>
        <member name="P:Furion.TaskQueue.TaskQueueOptionsBuilder.Concurrent">
            <summary>
            是否采用并行执行
            </summary>
        </member>
        <member name="P:Furion.TaskQueue.TaskQueueOptionsBuilder.NumRetries">
            <summary>
            重试次数（默认 3 次）
            </summary>
        </member>
        <member name="P:Furion.TaskQueue.TaskQueueOptionsBuilder.RetryTimeout">
            <summary>
            重试间隔（默认 1000ms）
            </summary>
        </member>
        <member name="M:Furion.TaskQueue.TaskQueueOptionsBuilder.Build">
            <summary>
            构建任务配置选项
            </summary>
        </member>
        <member name="T:Furion.TaskQueue.ITaskQueue">
            <summary>
            任务队列接口
            </summary>
        </member>
        <member name="E:Furion.TaskQueue.ITaskQueue.OnExecuted">
            <summary>
            任务委托执行事件
            </summary>
        </member>
        <member name="M:Furion.TaskQueue.ITaskQueue.Enqueue(System.Action{System.IServiceProvider},System.Int32,System.String,System.Object,System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            任务项入队
            </summary>
            <param name="taskHandler">任务处理委托</param>
            <param name="delay">延迟时间（毫秒）</param>
            <param name="channel">任务通道</param>
            <param name="taskId">任务 Id</param>
            <param name="concurrent">是否采用并行执行</param>
            <param name="runOnceIfDelaySet">配置是否设置了延迟执行后立即执行一次</param>
            <returns><see cref="T:System.Object"/></returns>
        </member>
        <member name="M:Furion.TaskQueue.ITaskQueue.EnqueueAsync(System.Func{System.IServiceProvider,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask},System.Int32,System.String,System.Object,System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            任务项入队
            </summary>
            <param name="taskHandler">任务处理委托</param>
            <param name="delay">延迟时间（毫秒）</param>
            <param name="channel">任务通道</param>
            <param name="taskId">任务 Id</param>
            <param name="concurrent">是否采用并行执行</param>
            <param name="runOnceIfDelaySet">配置是否设置了延迟执行后立即执行一次</param>
            <returns><see cref="T:System.Threading.Tasks.ValueTask"/></returns>
        </member>
        <member name="M:Furion.TaskQueue.ITaskQueue.Enqueue(System.Action{System.IServiceProvider},System.String,Furion.TimeCrontab.CronStringFormat,System.String,System.Object,System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            任务项入队
            </summary>
            <param name="taskHandler">任务处理委托</param>
            <param name="cronExpression">Cron 表达式</param>
            <param name="channel">任务通道</param>
            <param name="format"><see cref="T:Furion.TimeCrontab.CronStringFormat"/></param>
            <param name="taskId">任务 Id</param>
            <param name="concurrent">是否采用并行执行</param>
            <param name="runOnceIfDelaySet">配置是否设置了延迟执行后立即执行一次</param>
            <returns><see cref="T:System.Object"/></returns>
        </member>
        <member name="M:Furion.TaskQueue.ITaskQueue.EnqueueAsync(System.Func{System.IServiceProvider,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask},System.String,Furion.TimeCrontab.CronStringFormat,System.String,System.Object,System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            任务项入队
            </summary>
            <param name="taskHandler">任务处理委托</param>
            <param name="cronExpression">Cron 表达式</param>
            <param name="format"><see cref="T:Furion.TimeCrontab.CronStringFormat"/></param>
            <param name="channel">任务通道</param>
            <param name="taskId">任务 Id</param>
            <param name="concurrent">是否采用并行执行</param>
            <param name="runOnceIfDelaySet">配置是否设置了延迟执行后立即执行一次</param>
            <returns><see cref="T:System.Threading.Tasks.ValueTask"/></returns>
        </member>
        <member name="M:Furion.TaskQueue.ITaskQueue.DequeueAsync(System.Threading.CancellationToken)">
            <summary>
            任务项出队
            </summary>
            <param name="cancellationToken">取消任务 Token</param>
            <returns><see cref="T:System.Threading.Tasks.ValueTask"/></returns>
        </member>
        <member name="M:Furion.TaskQueue.ITaskQueue.InvokeEvents(Furion.TaskQueue.TaskHandlerEventArgs)">
            <summary>
            触发任务队列事件
            </summary>
            <param name="args">事件参数</param>
        </member>
        <member name="T:Furion.TaskQueue.TaskQueue">
            <summary>
            任务队列默认实现
            </summary>
        </member>
        <member name="E:Furion.TaskQueue.TaskQueue.OnExecuted">
            <summary>
            任务委托执行事件
            </summary>
        </member>
        <member name="F:Furion.TaskQueue.TaskQueue._queue">
            <summary>
            队列通道
            </summary>
        </member>
        <member name="M:Furion.TaskQueue.TaskQueue.#ctor(System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="capacity">队列通道默认容量，超过该容量进入等待</param>
        </member>
        <member name="M:Furion.TaskQueue.TaskQueue.Enqueue(System.Action{System.IServiceProvider},System.Int32,System.String,System.Object,System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            任务项入队
            </summary>
            <param name="taskHandler">任务处理委托</param>
            <param name="delay">延迟时间（毫秒）</param>
            <param name="channel">任务通道</param>
            <param name="taskId">任务 Id</param>
            <param name="concurrent">是否采用并行执行</param>
            <param name="runOnceIfDelaySet">配置是否设置了延迟执行后立即执行一次</param>
            <returns><see cref="T:System.Object"/></returns>
        </member>
        <member name="M:Furion.TaskQueue.TaskQueue.EnqueueAsync(System.Func{System.IServiceProvider,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask},System.Int32,System.String,System.Object,System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            任务项入队
            </summary>
            <param name="taskHandler">任务处理委托</param>
            <param name="delay">延迟时间（毫秒）</param>
            <param name="channel">任务通道</param>
            <param name="taskId">任务 Id</param>
            <param name="concurrent">是否采用并行执行</param>
            <param name="runOnceIfDelaySet">配置是否设置了延迟执行后立即执行一次</param>
            <returns><see cref="T:System.Threading.Tasks.ValueTask"/></returns>
        </member>
        <member name="M:Furion.TaskQueue.TaskQueue.Enqueue(System.Action{System.IServiceProvider},System.String,Furion.TimeCrontab.CronStringFormat,System.String,System.Object,System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            任务项入队
            </summary>
            <param name="taskHandler">任务处理委托</param>
            <param name="cronExpression">Cron 表达式</param>
            <param name="channel">任务通道</param>
            <param name="format"><see cref="T:Furion.TimeCrontab.CronStringFormat"/></param>
            <param name="taskId">任务 Id</param>
            <param name="concurrent">是否采用并行执行</param>
            <param name="runOnceIfDelaySet">配置是否设置了延迟执行后立即执行一次</param>
            <returns><see cref="T:System.Object"/></returns>
        </member>
        <member name="M:Furion.TaskQueue.TaskQueue.EnqueueAsync(System.Func{System.IServiceProvider,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask},System.String,Furion.TimeCrontab.CronStringFormat,System.String,System.Object,System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            任务项入队
            </summary>
            <param name="taskHandler">任务处理委托</param>
            <param name="cronExpression">Cron 表达式</param>
            <param name="format"><see cref="T:Furion.TimeCrontab.CronStringFormat"/></param>
            <param name="channel">任务通道</param>
            <param name="taskId">任务 Id</param>
            <param name="concurrent">是否采用并行执行</param>
            <param name="runOnceIfDelaySet">配置是否设置了延迟执行后立即执行一次</param>
            <returns><see cref="T:System.Threading.Tasks.ValueTask"/></returns>
        </member>
        <member name="M:Furion.TaskQueue.TaskQueue.DequeueAsync(System.Threading.CancellationToken)">
            <summary>
            任务项出队
            </summary>
            <param name="cancellationToken">取消任务 Token</param>
            <returns><see cref="T:System.Threading.Tasks.ValueTask"/></returns>
        </member>
        <member name="M:Furion.TaskQueue.TaskQueue.InvokeEvents(Furion.TaskQueue.TaskHandlerEventArgs)">
            <summary>
            触发任务队列事件
            </summary>
            <param name="args">事件参数</param>
        </member>
        <member name="T:Furion.TaskQueue.TaskHandlerEventArgs">
            <summary>
            任务处理委托事件参数
            </summary>
        </member>
        <member name="M:Furion.TaskQueue.TaskHandlerEventArgs.#ctor(System.Object,System.String,System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="taskId">任务 Id</param>
            <param name="channel">任务通道</param>
            <param name="success">任务处理委托调用结果</param>
        </member>
        <member name="P:Furion.TaskQueue.TaskHandlerEventArgs.TaskId">
            <summary>
            任务 Id
            </summary>
        </member>
        <member name="P:Furion.TaskQueue.TaskHandlerEventArgs.Channel">
            <summary>
            任务通道
            </summary>
        </member>
        <member name="P:Furion.TaskQueue.TaskHandlerEventArgs.Status">
            <summary>
            执行状态
            </summary>
        </member>
        <member name="P:Furion.TaskQueue.TaskHandlerEventArgs.Exception">
            <summary>
            异常信息
            </summary>
        </member>
        <member name="T:Furion.TaskQueue.TaskQueueHostedService">
            <summary>
            任务队列后台主机服务
            </summary>
            <remarks>用于长时间监听任务项入队后进行出队调用</remarks>
        </member>
        <member name="E:Furion.TaskQueue.TaskQueueHostedService.UnobservedTaskException">
            <summary>
            避免由 CLR 的终结器捕获该异常从而终止应用程序，让所有未觉察异常被觉察
            </summary>
        </member>
        <member name="F:Furion.TaskQueue.TaskQueueHostedService._logger">
            <summary>
            日志对象
            </summary>
        </member>
        <member name="F:Furion.TaskQueue.TaskQueueHostedService._serviceProvider">
            <summary>
            服务提供器
            </summary>
        </member>
        <member name="F:Furion.TaskQueue.TaskQueueHostedService._taskQueue">
            <summary>
            后台任务队列
            </summary>
        </member>
        <member name="F:Furion.TaskQueue.TaskQueueHostedService._concurrent">
            <summary>
            是否采用并行执行
            </summary>
        </member>
        <member name="F:Furion.TaskQueue.TaskQueueHostedService._numRetries">
            <summary>
            重试次数
            </summary>
        </member>
        <member name="F:Furion.TaskQueue.TaskQueueHostedService._retryTimeout">
            <summary>
            重试间隔
            </summary>
        </member>
        <member name="F:Furion.TaskQueue.TaskQueueHostedService._processQueueTask">
            <summary>
            长时间运行的后台任务
            </summary>
            <remarks>解决局部设置执行策略问题</remarks>
        </member>
        <member name="F:Furion.TaskQueue.TaskQueueHostedService._syncTaskWrapperQueue">
            <summary>
            同步任务队列（线程安全）
            </summary>
        </member>
        <member name="M:Furion.TaskQueue.TaskQueueHostedService.#ctor(Microsoft.Extensions.Logging.ILogger{System.Logging.TaskQueueService},System.IServiceProvider,Furion.TaskQueue.ITaskQueue,System.Boolean,System.Int32,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="logger">日志对象</param>
            <param name="serviceProvider">服务提供器</param>
            <param name="taskQueue">后台任务队列</param>
            <param name="concurrent">是否采用并行执行</param>
            <param name="numRetries">重试次数</param>
            <param name="retryTimeout">重试间隔</param>
        </member>
        <member name="M:Furion.TaskQueue.TaskQueueHostedService.ExecuteAsync(System.Threading.CancellationToken)">
            <summary>
            执行后台任务
            </summary>
            <param name="stoppingToken">后台主机服务停止时取消任务 Token</param>
            <returns>Task</returns>
        </member>
        <member name="M:Furion.TaskQueue.TaskQueueHostedService.BackgroundProcessing(System.Threading.CancellationToken)">
            <summary>
            后台调用处理程序
            </summary>
            <param name="stoppingToken">后台主机服务停止时取消任务 Token</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:Furion.TaskQueue.TaskQueueHostedService.ProcessQueueAsync(System.Threading.CancellationToken)">
            <summary>
            同步队列出队
            </summary>
            <param name="stoppingToken">后台主机服务停止时取消任务 Token</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:Furion.TaskQueue.TaskQueueHostedService.DequeueHandleAsync(Furion.TaskQueue.TaskWrapper,System.Threading.CancellationToken)">
            <summary>
            出队调用处理程序
            </summary>
            <param name="taskWrapper">任务包装器</param>
            <param name="stoppingToken">后台主机服务停止时取消任务 Token</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:Furion.TaskQueue.TaskQueueHostedService.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Furion.TaskQueue.TaskWrapper">
            <summary>
            任务包装器
            </summary>
        </member>
        <member name="P:Furion.TaskQueue.TaskWrapper.Channel">
            <summary>
            任务通道
            </summary>
        </member>
        <member name="P:Furion.TaskQueue.TaskWrapper.TaskId">
            <summary>
            任务 ID
            </summary>
        </member>
        <member name="P:Furion.TaskQueue.TaskWrapper.Handler">
            <summary>
            任务处理委托
            </summary>
        </member>
        <member name="P:Furion.TaskQueue.TaskWrapper.Concurrent">
            <summary>
            是否采用并行执行
            </summary>
        </member>
        <member name="T:Furion.TaskQueue.TaskQueued">
            <summary>
            任务队列静态类
            </summary>
        </member>
        <member name="M:Furion.TaskQueue.TaskQueued.Enqueue(System.Action{System.IServiceProvider},System.Int32,System.String,System.Object,System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            任务项入队
            </summary>
            <param name="taskHandler">任务处理委托</param>
            <param name="delay">延迟时间（毫秒）</param>
            <param name="channel">任务通道</param>
            <param name="taskId">任务 Id</param>
            <param name="concurrent">是否采用并行执行</param>
            <param name="runOnceIfDelaySet">配置是否设置了延迟执行后立即执行一次</param>
            <returns><see cref="T:System.Object"/></returns>
        </member>
        <member name="M:Furion.TaskQueue.TaskQueued.EnqueueAsync(System.Func{System.IServiceProvider,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask},System.Int32,System.String,System.Object,System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            任务项入队
            </summary>
            <param name="taskHandler">任务处理委托</param>
            <param name="delay">延迟时间（毫秒）</param>
            <param name="channel">任务通道</param>
            <param name="taskId">任务 Id</param>
            <param name="concurrent">是否采用并行执行</param>
            <param name="runOnceIfDelaySet">配置是否设置了延迟执行后立即执行一次</param>
            <returns><see cref="T:System.Threading.Tasks.ValueTask"/></returns>
        </member>
        <member name="M:Furion.TaskQueue.TaskQueued.Enqueue(System.Action{System.IServiceProvider},System.String,Furion.TimeCrontab.CronStringFormat,System.String,System.Object,System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            任务项入队
            </summary>
            <param name="taskHandler">任务处理委托</param>
            <param name="cronExpression">Cron 表达式</param>
            <param name="format"><see cref="T:Furion.TimeCrontab.CronStringFormat"/></param>
            <param name="channel">任务通道</param>
            <param name="taskId">任务 Id</param>
            <param name="concurrent">是否采用并行执行</param>
            <param name="runOnceIfDelaySet">配置是否设置了延迟执行后立即执行一次</param>
            <returns><see cref="T:System.Object"/></returns>
        </member>
        <member name="M:Furion.TaskQueue.TaskQueued.EnqueueAsync(System.Func{System.IServiceProvider,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask},System.String,Furion.TimeCrontab.CronStringFormat,System.String,System.Object,System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            任务项入队
            </summary>
            <param name="taskHandler">任务处理委托</param>
            <param name="cronExpression">Cron 表达式</param>
            <param name="format"><see cref="T:Furion.TimeCrontab.CronStringFormat"/></param>
            <param name="channel">任务通道</param>
            <param name="taskId">任务 Id</param>
            <param name="concurrent">是否采用并行执行</param>
            <param name="runOnceIfDelaySet">配置是否设置了延迟执行后立即执行一次</param>
            <returns><see cref="T:System.Threading.Tasks.ValueTask"/></returns>
        </member>
        <member name="T:Furion.Templates.Extensions.StringRenderExtensions">
            <summary>
            字符串渲染模板拓展类
            </summary>
        </member>
        <member name="F:Furion.Templates.Extensions.StringRenderExtensions.commonTemplatePattern">
            <summary>
            模板正则表达式
            </summary>
        </member>
        <member name="F:Furion.Templates.Extensions.StringRenderExtensions.configTemplatePattern">
            <summary>
            读取配置模板正则表达式
            </summary>
        </member>
        <member name="M:Furion.Templates.Extensions.StringRenderExtensions.Render(System.String,System.Object,System.Boolean)">
            <summary>
            渲染模板
            </summary>
            <param name="template"></param>
            <param name="templateData"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Templates.Extensions.StringRenderExtensions.Render(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            渲染模板
            </summary>
            <param name="template"></param>
            <param name="templateData"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Templates.Extensions.StringRenderExtensions.Render(System.String,System.Boolean)">
            <summary>
            从配置中渲染字符串模板
            </summary>
            <param name="template"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Templates.Extensions.StringRenderExtensions.MatchTemplateValue(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            匹配模板值
            </summary>
            <param name="template"></param>
            <param name="templateData"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Templates.Extensions.StringRenderExtensions.ResolveTemplateValue(System.String,System.Object)">
            <summary>
            解析模板的值
            </summary>
            <param name="template"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.Templates.TP">
            <summary>
            模板静态类
            </summary>
        </member>
        <member name="F:Furion.Templates.TP._lazyRegex">
            <summary>
            模板正则表达式对象
            </summary>
        </member>
        <member name="M:Furion.Templates.TP.Wrapper(System.String,System.String,System.String[])">
            <summary>
            生成规范日志模板
            </summary>
            <param name="title">标题</param>
            <param name="description">描述</param>
            <param name="items">列表项，如果以 ##xxx## 开头，自动生成 xxx: 属性</param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:Furion.Templates.TP.WrapperRectangle(System.String[],System.Int32,System.Int32)">
            <summary>
            矩形包裹
            </summary>
            <param name="lines">多行消息</param>
            <param name="align">对齐方式，-1/左对齐；0/居中对其；1/右对齐</param>
            <param name="pad">间隙</param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:Furion.Templates.TP.PadRight(System.String,System.Int32)">
            <summary>
            等宽文字对齐
            </summary>
            <param name="str"></param>
            <param name="totalByteCount"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Templates.TP.GetLength(System.String)">
            <summary>
            获取字符串长度
            </summary>
            <param name="str">字符串</param>
            <returns>字符串长度</returns>
        </member>
        <member name="T:Furion.TimeCrontab.Constants">
            <summary>
            TimeCrontab 模块常量
            </summary>
        </member>
        <member name="F:Furion.TimeCrontab.Constants.MaximumDateTimeValues">
            <summary>
            Cron 字段种类最大值
            </summary>
        </member>
        <member name="F:Furion.TimeCrontab.Constants.MinimumDateTimeValues">
            <summary>
            Cron 字段种类最大值
            </summary>
        </member>
        <member name="F:Furion.TimeCrontab.Constants.ExpectedFieldCounts">
            <summary>
            Cron 不同格式化类型字段数量
            </summary>
        </member>
        <member name="F:Furion.TimeCrontab.Constants.CronDays">
            <summary>
            配置 C# 中 <see cref="T:System.DayOfWeek"/> 枚举元素值
            </summary>
            <remarks>主要解决 C# 中该类型和 Cron 星期字段域不对应问题</remarks>
        </member>
        <member name="F:Furion.TimeCrontab.Constants.Days">
            <summary>
            定义 Cron 星期字段域值支持的星期英文缩写
            </summary>
        </member>
        <member name="F:Furion.TimeCrontab.Constants.Months">
            <summary>
            定义 Cron 月字段域值支持的星期英文缩写
            </summary>
        </member>
        <member name="T:Furion.TimeCrontab.CrontabFieldKind">
            <summary>
            Cron 字段种类
            </summary>
        </member>
        <member name="F:Furion.TimeCrontab.CrontabFieldKind.Second">
            <summary>
            秒
            </summary>
        </member>
        <member name="F:Furion.TimeCrontab.CrontabFieldKind.Minute">
            <summary>
            分
            </summary>
        </member>
        <member name="F:Furion.TimeCrontab.CrontabFieldKind.Hour">
            <summary>
            时
            </summary>
        </member>
        <member name="F:Furion.TimeCrontab.CrontabFieldKind.Day">
            <summary>
            天
            </summary>
        </member>
        <member name="F:Furion.TimeCrontab.CrontabFieldKind.Month">
            <summary>
            月
            </summary>
        </member>
        <member name="F:Furion.TimeCrontab.CrontabFieldKind.DayOfWeek">
            <summary>
            星期
            </summary>
        </member>
        <member name="F:Furion.TimeCrontab.CrontabFieldKind.Year">
            <summary>
            年
            </summary>
        </member>
        <member name="T:Furion.TimeCrontab.CronStringFormat">
            <summary>
            Cron 表达式格式化类型
            </summary>
        </member>
        <member name="F:Furion.TimeCrontab.CronStringFormat.Default">
            <summary>
            默认格式
            </summary>
            <remarks>书写顺序：分 时 天 月 周</remarks>
        </member>
        <member name="F:Furion.TimeCrontab.CronStringFormat.WithYears">
            <summary>
            带年份格式
            </summary>
            <remarks>书写顺序：分 时 天 月 周 年</remarks>
        </member>
        <member name="F:Furion.TimeCrontab.CronStringFormat.WithSeconds">
            <summary>
            带秒格式
            </summary>
            <remarks>书写顺序：秒 分 时 天 月 周</remarks>
        </member>
        <member name="F:Furion.TimeCrontab.CronStringFormat.WithSecondsAndYears">
            <summary>
            带秒和年格式
            </summary>
            <remarks>书写顺序：秒 分 时 天 月 周 年</remarks>
        </member>
        <member name="T:Furion.TimeCrontab.Crontab">
            <summary>
            Cron 表达式抽象类
            </summary>
            <remarks>主要将 Cron 表达式转换成 OOP 类进行操作</remarks>
            <summary>
            Cron 表达式抽象类
            </summary>
            <remarks>主要将 Cron 表达式转换成 OOP 类进行操作</remarks>
            <summary>
            Cron 表达式抽象类
            </summary>
            <remarks>主要将 Cron 表达式转换成 OOP 类进行操作</remarks>
            <summary>
            Cron 表达式抽象类
            </summary>
            <remarks>主要将 Cron 表达式转换成 OOP 类进行操作</remarks>
        </member>
        <member name="M:Furion.TimeCrontab.Crontab.#ctor">
            <summary>
            构造函数
            </summary>
            <remarks>禁止外部 new 实例化</remarks>
        </member>
        <member name="P:Furion.TimeCrontab.Crontab.Parsers">
            <summary>
            Cron 字段解析器字典集合
            </summary>
        </member>
        <member name="P:Furion.TimeCrontab.Crontab.Format">
            <summary>
            Cron 表达式格式化类型
            </summary>
            <remarks>禁止运行时更改</remarks>
        </member>
        <member name="M:Furion.TimeCrontab.Crontab.Parse(System.String,Furion.TimeCrontab.CronStringFormat)">
            <summary>
            解析 Cron 表达式并转换成 <see cref="T:Furion.TimeCrontab.Crontab"/> 对象
            </summary>
            <param name="expression">Cron 表达式</param>
            <param name="format">Cron 表达式格式化类型</param>
            <returns><see cref="T:Furion.TimeCrontab.Crontab"/></returns>
            <exception cref="T:Furion.TimeCrontab.TimeCrontabException"></exception>
        </member>
        <member name="M:Furion.TimeCrontab.Crontab.ParseAt(System.String,System.Object[])">
            <summary>
            解析 Cron Macro 符号并转换成 <see cref="T:Furion.TimeCrontab.Crontab"/> 对象
            </summary>
            <param name="macro">Macro 符号</param>
            <param name="fields">字段值</param>
            <returns><see cref="T:Furion.TimeCrontab.Crontab"/></returns>
            <exception cref="T:Furion.TimeCrontab.TimeCrontabException"></exception>
        </member>
        <member name="M:Furion.TimeCrontab.Crontab.TryParse(System.String,Furion.TimeCrontab.CronStringFormat)">
            <summary>
            解析 Cron 表达式并转换成 <see cref="T:Furion.TimeCrontab.Crontab"/> 对象
            </summary>
            <remarks>解析失败返回 default</remarks>
            <param name="expression">Cron 表达式</param>
            <param name="format">Cron 表达式格式化类型</param>
            <returns><see cref="T:Furion.TimeCrontab.Crontab"/></returns>
        </member>
        <member name="M:Furion.TimeCrontab.Crontab.IsValid(System.String,Furion.TimeCrontab.CronStringFormat)">
            <summary>
            判断 Cron 表达式是否有效
            </summary>
            <param name="expression">Cron 表达式</param>
            <param name="format">Cron 表达式格式化类型</param>
            <returns><see cref="T:Furion.TimeCrontab.Crontab"/></returns>
        </member>
        <member name="M:Furion.TimeCrontab.Crontab.GetNextOccurrence(System.DateTime)">
            <summary>
            获取起始时间下一个发生时间
            </summary>
            <param name="baseTime">起始时间</param>
            <returns><see cref="T:System.DateTime"/></returns>
        </member>
        <member name="M:Furion.TimeCrontab.Crontab.GetNextOccurrence(System.DateTime,System.DateTime)">
            <summary>
            获取特定时间范围下一个发生时间
            </summary>
            <param name="baseTime">起始时间</param>
            <param name="endTime">结束时间</param>
            <returns><see cref="T:System.DateTime"/></returns>
        </member>
        <member name="M:Furion.TimeCrontab.Crontab.GetNextOccurrences(System.DateTime,System.DateTime)">
            <summary>
            获取特定时间范围所有发生时间
            </summary>
            <param name="baseTime">起始时间</param>
            <param name="endTime">结束时间</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:Furion.TimeCrontab.Crontab.GetSleepMilliseconds(System.DateTime)">
            <summary>
            计算距离下一个发生时间相差毫秒数
            </summary>
            <param name="baseTime">起始时间</param>
            <returns></returns>
        </member>
        <member name="M:Furion.TimeCrontab.Crontab.GetSleepTimeSpan(System.DateTime)">
            <summary>
            计算距离下一个发生时间相差时间戳
            </summary>
            <param name="baseTime">起始时间</param>
            <returns></returns>
        </member>
        <member name="M:Furion.TimeCrontab.Crontab.ToString">
            <summary>
            将 <see cref="T:Furion.TimeCrontab.Crontab"/> 对象转换成 Cron 表达式字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.TimeCrontab.Crontab.ParseToDictionary(System.String,Furion.TimeCrontab.CronStringFormat)">
            <summary>
            解析 Cron 表达式字段并存储其 所有发生值 字符解析器
            </summary>
            <param name="expression">Cron 表达式</param>
            <param name="format">Cron 表达式格式化类型</param>
            <returns><see cref="T:System.Collections.Generic.Dictionary`2"/></returns>
            <exception cref="T:Furion.TimeCrontab.TimeCrontabException"></exception>
        </member>
        <member name="M:Furion.TimeCrontab.Crontab.ParseField(System.String,Furion.TimeCrontab.CrontabFieldKind)">
            <summary>
            解析 Cron 单个字段域所有发生值 字符解析器
            </summary>
            <param name="field">字段值</param>
            <param name="kind">Cron 表达式格式化类型</param>
            <returns><see cref="T:System.Collections.Generic.List`1"/></returns>
            <exception cref="T:Furion.TimeCrontab.TimeCrontabException"></exception>
        </member>
        <member name="M:Furion.TimeCrontab.Crontab.ParseParser(System.String,Furion.TimeCrontab.CrontabFieldKind)">
            <summary>
            解析 Cron 字段域值中值
            </summary>
            <param name="parser">字段值中值</param>
            <param name="kind">Cron 表达式格式化类型</param>
            <returns><see cref="T:Furion.TimeCrontab.ICronParser"/></returns>
            <exception cref="T:Furion.TimeCrontab.TimeCrontabException"></exception>
        </member>
        <member name="M:Furion.TimeCrontab.Crontab.GetValue(System.String@,Furion.TimeCrontab.CrontabFieldKind)">
            <summary>
            将 Cron 字段值中值进一步解析
            </summary>
            <param name="parser">当前解析值</param>
            <param name="kind">Cron 表达式格式化类型</param>
            <returns><see cref="T:System.Int32"/></returns>
            <exception cref="T:Furion.TimeCrontab.TimeCrontabException"></exception>
        </member>
        <member name="M:Furion.TimeCrontab.Crontab.CheckForIllegalParsers(System.Collections.Generic.Dictionary{Furion.TimeCrontab.CrontabFieldKind,System.Collections.Generic.List{Furion.TimeCrontab.ICronParser}})">
            <summary>
            检查非法字符解析器，如 2 月没有 30 和 31 号
            </summary>
            <remarks>检查 2 月份是否存在 30 和 31 天的非法数值解析器</remarks>
            <param name="parsers">Cron 字段解析器字典集合</param>
            <exception cref="T:Furion.TimeCrontab.TimeCrontabException"></exception>
        </member>
        <member name="M:Furion.TimeCrontab.Crontab.GetSpecificParsers(System.Collections.Generic.Dictionary{Furion.TimeCrontab.CrontabFieldKind,System.Collections.Generic.List{Furion.TimeCrontab.ICronParser}},Furion.TimeCrontab.CrontabFieldKind)">
            <summary>
            查找 Cron 字段类型所有具体值解析器
            </summary>
            <param name="parsers">Cron 字段解析器字典集合</param>
            <param name="kind">Cron 字段种类</param>
            <returns><see cref="T:System.Collections.Generic.List`1"/></returns>
        </member>
        <member name="M:Furion.TimeCrontab.Crontab.InternalGetNextOccurence(System.DateTime,System.DateTime)">
            <summary>
            获取特定时间范围下一个发生时间
            </summary>
            <param name="baseTime">起始时间</param>
            <param name="endTime">结束时间</param>
            <returns><see cref="T:System.DateTime"/></returns>
        </member>
        <member name="M:Furion.TimeCrontab.Crontab.Increment(System.Collections.Generic.IEnumerable{Furion.TimeCrontab.ITimeParser},System.Int32,System.Int32,System.Boolean@)">
            <summary>
            获取当前时间解析器下一个发生值
            </summary>
            <param name="parsers">解析器</param>
            <param name="value">当前值</param>
            <param name="defaultValue">默认值</param>
            <param name="overflow">控制秒、分钟、小时到达59秒/分和23小时开关</param>
            <returns><see cref="T:System.Int32"/></returns>
        </member>
        <member name="M:Furion.TimeCrontab.Crontab.MinDate(System.DateTime,System.DateTime)">
            <summary>
            处理下一个发生时间边界值
            </summary>
            <remarks>如果发生时间大于终止时间，则返回终止时间，否则返回发生时间</remarks>
            <param name="newTime">下一个发生时间</param>
            <param name="endTime">终止时间</param>
            <returns><see cref="T:System.DateTime"/></returns>
        </member>
        <member name="M:Furion.TimeCrontab.Crontab.IsMatch(System.DateTime)">
            <summary>
            判断 Cron 所有字段字符解析器是否都能匹配当前时间各个部分
            </summary>
            <param name="datetime">当前时间</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Furion.TimeCrontab.Crontab.IsMatch(System.DateTime,Furion.TimeCrontab.CrontabFieldKind)">
            <summary>
            判断当前 Cron 字段类型字符解析器和当前时间至少存在一种匹配
            </summary>
            <param name="datetime">当前时间</param>
            <param name="kind">Cron 字段种类</param>
            <returns></returns>
        </member>
        <member name="M:Furion.TimeCrontab.Crontab.JoinParsers(System.Collections.Generic.List{System.String},Furion.TimeCrontab.CrontabFieldKind)">
            <summary>
            将 Cron 字段解析器转换成字符串
            </summary>
            <param name="paramList">Cron 字段字符串集合</param>
            <param name="kind">Cron 字段种类</param>
        </member>
        <member name="F:Furion.TimeCrontab.Crontab.Secondly">
            <summary>
            表示每秒开始的 <see cref="T:Furion.TimeCrontab.Crontab"/> 对象
            </summary>
        </member>
        <member name="F:Furion.TimeCrontab.Crontab.Minutely">
            <summary>
            表示每分钟开始的 <see cref="T:Furion.TimeCrontab.Crontab"/> 对象
            </summary>
        </member>
        <member name="F:Furion.TimeCrontab.Crontab.Hourly">
            <summary>
            表示每小时开始 的 <see cref="T:Furion.TimeCrontab.Crontab"/> 对象
            </summary>
        </member>
        <member name="F:Furion.TimeCrontab.Crontab.Daily">
            <summary>
            表示每天（午夜）开始的 <see cref="T:Furion.TimeCrontab.Crontab"/> 对象
            </summary>
        </member>
        <member name="F:Furion.TimeCrontab.Crontab.Monthly">
            <summary>
            表示每月1号（午夜）开始的 <see cref="T:Furion.TimeCrontab.Crontab"/> 对象
            </summary>
        </member>
        <member name="F:Furion.TimeCrontab.Crontab.Weekly">
            <summary>
            表示每周日（午夜）开始的 <see cref="T:Furion.TimeCrontab.Crontab"/> 对象
            </summary>
        </member>
        <member name="F:Furion.TimeCrontab.Crontab.Yearly">
            <summary>
            表示每年1月1号（午夜）开始的 <see cref="T:Furion.TimeCrontab.Crontab"/> 对象
            </summary>
        </member>
        <member name="F:Furion.TimeCrontab.Crontab.Workday">
            <summary>
            表示每周一至周五（午夜）开始的 <see cref="T:Furion.TimeCrontab.Crontab"/> 对象
            </summary>
        </member>
        <member name="M:Furion.TimeCrontab.Crontab.SecondlyAt(System.Object[])">
            <summary>
            创建指定特定秒开始作业触发器构建器
            </summary>
            <param name="fields">字段值</param>
            <returns><see cref="T:Furion.TimeCrontab.Crontab"/></returns>
        </member>
        <member name="M:Furion.TimeCrontab.Crontab.MinutelyAt(System.Object[])">
            <summary>
            创建每分钟特定秒开始作业触发器构建器
            </summary>
            <param name="fields">字段值</param>
            <returns><see cref="T:Furion.TimeCrontab.Crontab"/></returns>
        </member>
        <member name="M:Furion.TimeCrontab.Crontab.HourlyAt(System.Object[])">
            <summary>
            创建每小时特定分钟开始作业触发器构建器
            </summary>
            <param name="fields">字段值</param>
            <returns><see cref="T:Furion.TimeCrontab.Crontab"/></returns>
        </member>
        <member name="M:Furion.TimeCrontab.Crontab.DailyAt(System.Object[])">
            <summary>
            创建每天特定小时开始作业触发器构建器
            </summary>
            <param name="fields">字段值</param>
            <returns><see cref="T:Furion.TimeCrontab.Crontab"/></returns>
        </member>
        <member name="M:Furion.TimeCrontab.Crontab.MonthlyAt(System.Object[])">
            <summary>
            创建每月特定天（午夜）开始作业触发器构建器
            </summary>
            <param name="fields">字段值</param>
            <returns><see cref="T:Furion.TimeCrontab.Crontab"/></returns>
        </member>
        <member name="M:Furion.TimeCrontab.Crontab.WeeklyAt(System.Object[])">
            <summary>
            创建每周特定星期几（午夜）开始作业触发器构建器
            </summary>
            <param name="fields">字段值</param>
            <returns><see cref="T:Furion.TimeCrontab.Crontab"/></returns>
        </member>
        <member name="M:Furion.TimeCrontab.Crontab.YearlyAt(System.Object[])">
            <summary>
            创建每年特定月1号（午夜）开始作业触发器构建器
            </summary>
            <param name="fields">字段值</param>
            <returns><see cref="T:Furion.TimeCrontab.Crontab"/></returns>
        </member>
        <member name="M:Furion.TimeCrontab.Crontab.CheckFieldsNotNullOrEmpty(System.Object[])">
            <summary>
            检查字段域 非 Null 非空数组
            </summary>
            <param name="fields">字段值</param>
        </member>
        <member name="M:Furion.TimeCrontab.Crontab.FieldsToString(System.Object[])">
            <summary>
            将字段域转换成 string
            </summary>
            <param name="fields">字段值</param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="T:Furion.TimeCrontab.TimeCrontabException">
            <summary>
            TimeCrontab 模块异常类
            </summary>
        </member>
        <member name="M:Furion.TimeCrontab.TimeCrontabException.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.TimeCrontab.TimeCrontabException.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="message">异常消息</param>
        </member>
        <member name="M:Furion.TimeCrontab.TimeCrontabException.#ctor(System.String,System.Exception)">
            <summary>
            构造函数
            </summary>
            <param name="message">异常消息</param>
            <param name="innerException">内部异常</param>
        </member>
        <member name="T:Furion.TimeCrontab.DayOfWeekExtensions">
            <summary>
            <see cref="T:System.DayOfWeek"/> 拓展类
            </summary>
        </member>
        <member name="M:Furion.TimeCrontab.DayOfWeekExtensions.ToCronDayOfWeek(System.DayOfWeek)">
            <summary>
            将 C# 中 <see cref="T:System.DayOfWeek"/> 枚举元素转换成数值
            </summary>
            <param name="dayOfWeek"><see cref="T:System.DayOfWeek"/> 枚举</param>
            <returns><see cref="T:System.Int32"/></returns>
        </member>
        <member name="M:Furion.TimeCrontab.DayOfWeekExtensions.ToDayOfWeek(System.Int32)">
            <summary>
            将数值转换成 C# 中 <see cref="T:System.DayOfWeek"/> 枚举元素
            </summary>
            <param name="dayOfWeek"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.TimeCrontab.DayOfWeekExtensions.LastDayOfMonth(System.DayOfWeek,System.Int32,System.Int32)">
            <summary>
            获取当前年月最后一个星期几
            </summary>
            <param name="dayOfWeek">星期几，<see cref="T:System.DayOfWeek"/> 类型</param>
            <param name="year">年</param>
            <param name="month">月</param>
            <returns><see cref="T:System.Int32"/></returns>
        </member>
        <member name="T:Furion.TimeCrontab.AnyParser">
            <summary>
            Cron 字段值含 * 字符解析器
            </summary>
            <remarks>
            <para>* 表示任意值，该字符支持在 Cron 所有字段域中设置</para>
            </remarks>
        </member>
        <member name="M:Furion.TimeCrontab.AnyParser.#ctor(Furion.TimeCrontab.CrontabFieldKind)">
            <summary>
            构造函数
            </summary>
            <param name="kind">Cron 字段种类</param>
        </member>
        <member name="P:Furion.TimeCrontab.AnyParser.Kind">
            <summary>
            Cron 字段种类
            </summary>
        </member>
        <member name="M:Furion.TimeCrontab.AnyParser.IsMatch(System.DateTime)">
            <summary>
            判断当前时间是否符合 Cron 字段种类解析规则
            </summary>
            <param name="datetime">当前时间</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Furion.TimeCrontab.AnyParser.Next(System.Int32)">
            <summary>
            获取 Cron 字段种类当前值的下一个发生值
            </summary>
            <param name="currentValue">时间值</param>
            <returns><see cref="T:System.Int32"/></returns>
            <exception cref="T:Furion.TimeCrontab.TimeCrontabException"></exception>
        </member>
        <member name="M:Furion.TimeCrontab.AnyParser.First">
            <summary>
            获取 Cron 字段种类字段起始值
            </summary>
            <returns><see cref="T:System.Int32"/></returns>
            <exception cref="T:Furion.TimeCrontab.TimeCrontabException"></exception>
        </member>
        <member name="M:Furion.TimeCrontab.AnyParser.ToString">
            <summary>
            将解析器转换成字符串输出
            </summary>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="T:Furion.TimeCrontab.BlankDayOfMonthOrWeekParser">
            <summary>
            Cron 字段值含 ? 字符解析器
            </summary>
            <remarks>
            <para>只能用在 Day 和 DayOfWeek 两个域使用。它也匹配域的任意值，但实际不会。因为 Day 和 DayOfWeek 会相互影响</para>
            <para>例如想在每月的 20 日触发调度，不管 20 日到底是星期几，则只能使用如下写法：13 15 20 * ?</para>
            <para>其中最后一位只能用 ?，而不能使用 *，如果使用 * 表示不管星期几都会触发，实际上并不是这样</para>
            <para>所以 ? 起着 Day 和 DayOfWeek 互斥性作用</para>
            <para>仅在 <see cref="F:Furion.TimeCrontab.CrontabFieldKind.Day"/> 或 <see cref="F:Furion.TimeCrontab.CrontabFieldKind.DayOfWeek"/> 字段域中使用</para>
            </remarks>
        </member>
        <member name="M:Furion.TimeCrontab.BlankDayOfMonthOrWeekParser.#ctor(Furion.TimeCrontab.CrontabFieldKind)">
            <summary>
             构造函数
            </summary>
            <param name="kind">Cron 字段种类</param>
            <exception cref="T:Furion.TimeCrontab.TimeCrontabException"></exception>
        </member>
        <member name="P:Furion.TimeCrontab.BlankDayOfMonthOrWeekParser.Kind">
            <summary>
            Cron 字段种类
            </summary>
        </member>
        <member name="M:Furion.TimeCrontab.BlankDayOfMonthOrWeekParser.IsMatch(System.DateTime)">
            <summary>
            判断当前时间是否符合 Cron 字段种类解析规则
            </summary>
            <param name="datetime">当前时间</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Furion.TimeCrontab.BlankDayOfMonthOrWeekParser.Next(System.Int32)">
            <summary>
            获取 Cron 字段种类当前值的下一个发生值
            </summary>
            <param name="currentValue">时间值</param>
            <returns><see cref="T:System.Int32"/></returns>
            <exception cref="T:Furion.TimeCrontab.TimeCrontabException"></exception>
        </member>
        <member name="M:Furion.TimeCrontab.BlankDayOfMonthOrWeekParser.First">
            <summary>
            获取 Cron 字段种类字段起始值
            </summary>
            <returns><see cref="T:System.Int32"/></returns>
            <exception cref="T:Furion.TimeCrontab.TimeCrontabException"></exception>
        </member>
        <member name="M:Furion.TimeCrontab.BlankDayOfMonthOrWeekParser.ToString">
            <summary>
            将解析器转换成字符串输出
            </summary>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="T:Furion.TimeCrontab.ICronParser">
            <summary>
            Cron 字段字符解析器依赖接口
            </summary>
        </member>
        <member name="P:Furion.TimeCrontab.ICronParser.Kind">
            <summary>
            Cron 字段种类
            </summary>
        </member>
        <member name="M:Furion.TimeCrontab.ICronParser.IsMatch(System.DateTime)">
            <summary>
            判断当前时间是否符合 Cron 字段种类解析规则
            </summary>
            <param name="datetime">当前时间</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="T:Furion.TimeCrontab.ITimeParser">
            <summary>
            DateTime 时间解析器依赖接口
            </summary>
            <remarks>主要用于计算 DateTime 主要组成部分（秒，分，时，年）的下一个取值</remarks>
        </member>
        <member name="M:Furion.TimeCrontab.ITimeParser.Next(System.Int32)">
            <summary>
            获取 Cron 字段种类当前值的下一个发生值
            </summary>
            <param name="currentValue">时间值</param>
            <returns><see cref="T:System.Int32"/></returns>
            <exception cref="T:Furion.TimeCrontab.TimeCrontabException"></exception>
        </member>
        <member name="M:Furion.TimeCrontab.ITimeParser.First">
            <summary>
            获取 Cron 字段种类字段起始值
            </summary>
            <returns><see cref="T:System.Int32"/></returns>
            <exception cref="T:Furion.TimeCrontab.TimeCrontabException"></exception>
        </member>
        <member name="T:Furion.TimeCrontab.LastDayOfMonthParser">
            <summary>
            Cron 字段值含 L 字符解析器
            </summary>
            <remarks>
            <para>L 表示月中最后一天，仅在 <see cref="F:Furion.TimeCrontab.CrontabFieldKind.Day"/> 字段域中使用</para>
            </remarks>
        </member>
        <member name="M:Furion.TimeCrontab.LastDayOfMonthParser.#ctor(Furion.TimeCrontab.CrontabFieldKind)">
            <summary>
            构造函数
            </summary>
            <param name="kind">Cron 字段种类</param>
            <exception cref="T:Furion.TimeCrontab.TimeCrontabException"></exception>
        </member>
        <member name="P:Furion.TimeCrontab.LastDayOfMonthParser.Kind">
            <summary>
            Cron 字段种类
            </summary>
        </member>
        <member name="M:Furion.TimeCrontab.LastDayOfMonthParser.IsMatch(System.DateTime)">
            <summary>
            判断当前时间是否符合 Cron 字段种类解析规则
            </summary>
            <param name="datetime">当前时间</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Furion.TimeCrontab.LastDayOfMonthParser.ToString">
            <summary>
            将解析器转换成字符串输出
            </summary>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="T:Furion.TimeCrontab.LastDayOfWeekInMonthParser">
            <summary>
            Cron 字段值含 {0}L 字符解析器
            </summary>
            <remarks>
            <para>表示月中最后一个星期{0}，仅在 <see cref="F:Furion.TimeCrontab.CrontabFieldKind.DayOfWeek"/> 字段域中使用</para>
            </remarks>
        </member>
        <member name="M:Furion.TimeCrontab.LastDayOfWeekInMonthParser.#ctor(System.Int32,Furion.TimeCrontab.CrontabFieldKind)">
            <summary>
            构造函数
            </summary>
            <param name="dayOfWeek">星期，0 = 星期天，7 = 星期六</param>
            <param name="kind">Cron 字段种类</param>
            <exception cref="T:Furion.TimeCrontab.TimeCrontabException"></exception>
        </member>
        <member name="P:Furion.TimeCrontab.LastDayOfWeekInMonthParser.Kind">
            <summary>
            Cron 字段种类
            </summary>
        </member>
        <member name="P:Furion.TimeCrontab.LastDayOfWeekInMonthParser.DayOfWeek">
            <summary>
            星期
            </summary>
        </member>
        <member name="P:Furion.TimeCrontab.LastDayOfWeekInMonthParser.DateTimeDayOfWeek">
            <summary>
            <see cref="P:Furion.TimeCrontab.LastDayOfWeekInMonthParser.DayOfWeek"/> 类型星期
            </summary>
        </member>
        <member name="M:Furion.TimeCrontab.LastDayOfWeekInMonthParser.IsMatch(System.DateTime)">
            <summary>
            判断当前时间是否符合 Cron 字段种类解析规则
            </summary>
            <param name="datetime">当前时间</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Furion.TimeCrontab.LastDayOfWeekInMonthParser.ToString">
            <summary>
            将解析器转换成字符串输出
            </summary>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="T:Furion.TimeCrontab.LastWeekdayOfMonthParser">
            <summary>
            Cron 字段值含 LW 字符解析器
            </summary>
            <remarks>
            <para>表示月中最后一个工作日，即最后一个非周六周末的日期，仅在 <see cref="F:Furion.TimeCrontab.CrontabFieldKind.Day"/> 字段域中使用</para>
            </remarks>
        </member>
        <member name="M:Furion.TimeCrontab.LastWeekdayOfMonthParser.#ctor(Furion.TimeCrontab.CrontabFieldKind)">
            <summary>
            构造函数
            </summary>
            <param name="kind">Cron 字段种类</param>
            <exception cref="T:Furion.TimeCrontab.TimeCrontabException"></exception>
        </member>
        <member name="P:Furion.TimeCrontab.LastWeekdayOfMonthParser.Kind">
            <summary>
            Cron 字段种类
            </summary>
        </member>
        <member name="M:Furion.TimeCrontab.LastWeekdayOfMonthParser.IsMatch(System.DateTime)">
            <summary>
            判断当前时间是否符合 Cron 字段种类解析规则
            </summary>
            <param name="datetime">当前时间</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Furion.TimeCrontab.LastWeekdayOfMonthParser.ToString">
            <summary>
            将解析器转换成字符串输出
            </summary>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="T:Furion.TimeCrontab.NearestWeekdayParser">
            <summary>
            Cron 字段值含 {0}W 字符解析器
            </summary>
            <remarks>
            <para>表示离指定日期最近的工作日，即最后一个非周六周末日，仅在 <see cref="F:Furion.TimeCrontab.CrontabFieldKind.Day"/> 字段域中使用</para>
            </remarks>
        </member>
        <member name="M:Furion.TimeCrontab.NearestWeekdayParser.#ctor(System.Int32,Furion.TimeCrontab.CrontabFieldKind)">
            <summary>
            构造函数
            </summary>
            <param name="specificValue">天数（具体值）</param>
            <param name="kind">Cron 字段种类</param>
            <exception cref="T:Furion.TimeCrontab.TimeCrontabException">Cron 字段种类</exception>
        </member>
        <member name="P:Furion.TimeCrontab.NearestWeekdayParser.Kind">
            <summary>
            Cron 字段种类
            </summary>
        </member>
        <member name="P:Furion.TimeCrontab.NearestWeekdayParser.SpecificValue">
            <summary>
            天数（具体值）
            </summary>
        </member>
        <member name="M:Furion.TimeCrontab.NearestWeekdayParser.IsMatch(System.DateTime)">
            <summary>
            判断当前时间是否符合 Cron 字段种类解析规则
            </summary>
            <param name="datetime">当前时间</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Furion.TimeCrontab.NearestWeekdayParser.ToString">
            <summary>
            将解析器转换成字符串输出
            </summary>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="T:Furion.TimeCrontab.RangeParser">
            <summary>
            Cron 字段值含 - 字符解析器
            </summary>
            <remarks>
            <para>表示特定取值范围，如 1-5 或 1-5/2，该字符支持在 Cron 所有字段域中设置</para>
            </remarks>
        </member>
        <member name="M:Furion.TimeCrontab.RangeParser.#ctor(System.Int32,System.Int32,System.Nullable{System.Int32},Furion.TimeCrontab.CrontabFieldKind)">
            <summary>
            构造函数
            </summary>
            <param name="start">起始值</param>
            <param name="end">终止值</param>
            <param name="steps">步长</param>
            <param name="kind">Cron 字段种类</param>
            <exception cref="T:Furion.TimeCrontab.TimeCrontabException"></exception>
        </member>
        <member name="P:Furion.TimeCrontab.RangeParser.Kind">
            <summary>
            Cron 字段种类
            </summary>
        </member>
        <member name="P:Furion.TimeCrontab.RangeParser.Start">
            <summary>
            起始值
            </summary>
        </member>
        <member name="P:Furion.TimeCrontab.RangeParser.End">
            <summary>
            终止值
            </summary>
        </member>
        <member name="P:Furion.TimeCrontab.RangeParser.Steps">
            <summary>
            步长
            </summary>
        </member>
        <member name="P:Furion.TimeCrontab.RangeParser.SpecificParsers">
            <summary>
            所有满足范围计算的解析器
            </summary>
        </member>
        <member name="M:Furion.TimeCrontab.RangeParser.IsMatch(System.DateTime)">
            <summary>
            判断当前时间是否符合 Cron 字段种类解析规则
            </summary>
            <param name="datetime">当前时间</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Furion.TimeCrontab.RangeParser.Next(System.Int32)">
            <summary>
            获取 Cron 字段种类当前值的下一个发生值
            </summary>
            <param name="currentValue">时间值</param>
            <returns><see cref="T:System.Int32"/></returns>
            <exception cref="T:Furion.TimeCrontab.TimeCrontabException"></exception>
        </member>
        <member name="P:Furion.TimeCrontab.RangeParser.FirstCache">
            <summary>
            存储起始值，避免重复计算
            </summary>
        </member>
        <member name="M:Furion.TimeCrontab.RangeParser.First">
            <summary>
            获取 Cron 字段种类字段起始值
            </summary>
            <returns><see cref="T:System.Int32"/></returns>
            <exception cref="T:Furion.TimeCrontab.TimeCrontabException"></exception>
        </member>
        <member name="M:Furion.TimeCrontab.RangeParser.ToString">
            <summary>
            将解析器转换成字符串输出
            </summary>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:Furion.TimeCrontab.RangeParser.IsMatch(System.Int32)">
            <summary>
            判断是否符合范围或带步长范围解析规则
            </summary>
            <param name="evalValue">当前值</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="T:Furion.TimeCrontab.SpecificDayOfWeekInMonthParser">
            <summary>
            Cron 字段值含 {0}#{1} 字符解析器
            </summary>
            <remarks>
            <para>表示月中第{0}个星期{1}，仅在 <see cref="F:Furion.TimeCrontab.CrontabFieldKind.DayOfWeek"/> 字段域中使用</para>
            </remarks>
        </member>
        <member name="M:Furion.TimeCrontab.SpecificDayOfWeekInMonthParser.#ctor(System.Int32,System.Int32,Furion.TimeCrontab.CrontabFieldKind)">
            <summary>
            构造函数
            </summary>
            <param name="dayOfWeek">星期，0 = 星期天，7 = 星期六</param>
            <param name="weekNumber">月中第几个星期</param>
            <param name="kind">Cron 字段种类</param>
            <exception cref="T:Furion.TimeCrontab.TimeCrontabException"></exception>
        </member>
        <member name="P:Furion.TimeCrontab.SpecificDayOfWeekInMonthParser.Kind">
            <summary>
            Cron 字段种类
            </summary>
        </member>
        <member name="P:Furion.TimeCrontab.SpecificDayOfWeekInMonthParser.DayOfWeek">
            <summary>
            星期
            </summary>
        </member>
        <member name="P:Furion.TimeCrontab.SpecificDayOfWeekInMonthParser.DateTimeDayOfWeek">
            <summary>
            <see cref="P:Furion.TimeCrontab.SpecificDayOfWeekInMonthParser.DayOfWeek"/> 类型星期
            </summary>
        </member>
        <member name="P:Furion.TimeCrontab.SpecificDayOfWeekInMonthParser.WeekNumber">
            <summary>
            月中第几个星期
            </summary>
        </member>
        <member name="M:Furion.TimeCrontab.SpecificDayOfWeekInMonthParser.IsMatch(System.DateTime)">
            <summary>
            判断当前时间是否符合 Cron 字段种类解析规则
            </summary>
            <param name="datetime">当前时间</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Furion.TimeCrontab.SpecificDayOfWeekInMonthParser.ToString">
            <summary>
            将解析器转换成字符串输出
            </summary>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="T:Furion.TimeCrontab.SpecificParser">
            <summary>
            Cron 字段值含 数值 字符解析器
            </summary>
            <remarks>
            <para>表示具体值，该字符支持在 Cron 所有字段域中设置</para>
            </remarks>
        </member>
        <member name="M:Furion.TimeCrontab.SpecificParser.#ctor(System.Int32,Furion.TimeCrontab.CrontabFieldKind)">
            <summary>
            构造函数
            </summary>
            <param name="specificValue">具体值</param>
            <param name="kind">Cron 字段种类</param>
        </member>
        <member name="P:Furion.TimeCrontab.SpecificParser.Kind">
            <summary>
            Cron 字段种类
            </summary>
        </member>
        <member name="P:Furion.TimeCrontab.SpecificParser.SpecificValue">
            <summary>
            具体值
            </summary>
        </member>
        <member name="M:Furion.TimeCrontab.SpecificParser.IsMatch(System.DateTime)">
            <summary>
            判断当前时间是否符合 Cron 字段种类解析规则
            </summary>
            <param name="datetime">当前时间</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Furion.TimeCrontab.SpecificParser.Next(System.Int32)">
            <summary>
            获取 Cron 字段种类当前值的下一个发生值
            </summary>
            <param name="currentValue">时间值</param>
            <returns><see cref="T:System.Int32"/></returns>
            <exception cref="T:Furion.TimeCrontab.TimeCrontabException"></exception>
        </member>
        <member name="M:Furion.TimeCrontab.SpecificParser.First">
            <summary>
            获取 Cron 字段种类字段起始值
            </summary>
            <returns><see cref="T:System.Int32"/></returns>
            <exception cref="T:Furion.TimeCrontab.TimeCrontabException"></exception>
        </member>
        <member name="M:Furion.TimeCrontab.SpecificParser.ToString">
            <summary>
            将解析器转换成字符串输出
            </summary>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:Furion.TimeCrontab.SpecificParser.ValidateBounds(System.Int32)">
            <summary>
            验证值有效性
            </summary>
            <param name="value">具体值</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="T:Furion.TimeCrontab.SpecificYearParser">
            <summary>
            Cron 字段值含 数值 字符解析器
            </summary>
            <remarks>
            <para>表示具体值，这里仅处理 <see cref="F:Furion.TimeCrontab.CrontabFieldKind.Year"/> 字段域</para>
            </remarks>
        </member>
        <member name="M:Furion.TimeCrontab.SpecificYearParser.#ctor(System.Int32,Furion.TimeCrontab.CrontabFieldKind)">
            <summary>
            构造函数
            </summary>
            <param name="specificValue">年（具体值)</param>
            <param name="kind">Cron 字段种类</param>
        </member>
        <member name="M:Furion.TimeCrontab.SpecificYearParser.Next(System.Int32)">
            <summary>
            获取 Cron 字段种类当前值的下一个发生值
            </summary>
            <param name="currentValue">时间值</param>
            <returns><see cref="T:System.Int32"/></returns>
            <exception cref="T:Furion.TimeCrontab.TimeCrontabException"></exception>
        </member>
        <member name="T:Furion.TimeCrontab.StepParser">
            <summary>
            Cron 字段值含 / 字符解析器
            </summary>
            <remarks>
            <para>表示从某值开始，每隔固定值触发，该字符支持在 Cron 所有字段域中设置</para>
            </remarks>
        </member>
        <member name="M:Furion.TimeCrontab.StepParser.#ctor(System.Int32,System.Int32,Furion.TimeCrontab.CrontabFieldKind)">
            <summary>
            构造函数
            </summary>
            <param name="start">起始值</param>
            <param name="steps">步长</param>
            <param name="kind">Cron 字段种类</param>
            <exception cref="T:Furion.TimeCrontab.TimeCrontabException"></exception>
        </member>
        <member name="P:Furion.TimeCrontab.StepParser.Kind">
            <summary>
            Cron 字段种类
            </summary>
        </member>
        <member name="P:Furion.TimeCrontab.StepParser.Start">
            <summary>
            起始值
            </summary>
        </member>
        <member name="P:Furion.TimeCrontab.StepParser.Steps">
            <summary>
            步长
            </summary>
        </member>
        <member name="P:Furion.TimeCrontab.StepParser.SpecificParsers">
            <summary>
            所有满足间隔步长计算的解析器
            </summary>
        </member>
        <member name="M:Furion.TimeCrontab.StepParser.IsMatch(System.DateTime)">
            <summary>
            判断当前时间是否符合 Cron 字段种类解析规则
            </summary>
            <param name="datetime">当前时间</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Furion.TimeCrontab.StepParser.Next(System.Int32)">
            <summary>
            获取 Cron 字段种类当前值的下一个发生值
            </summary>
            <param name="currentValue">时间值</param>
            <returns><see cref="T:System.Int32"/></returns>
            <exception cref="T:Furion.TimeCrontab.TimeCrontabException"></exception>
        </member>
        <member name="P:Furion.TimeCrontab.StepParser.FirstCache">
            <summary>
            存储起始值，避免重复计算
            </summary>
        </member>
        <member name="M:Furion.TimeCrontab.StepParser.First">
            <summary>
            获取 Cron 字段种类字段起始值
            </summary>
            <returns><see cref="T:System.Int32"/></returns>
            <exception cref="T:Furion.TimeCrontab.TimeCrontabException"></exception>
        </member>
        <member name="M:Furion.TimeCrontab.StepParser.ToString">
            <summary>
            将解析器转换成字符串输出
            </summary>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:Furion.TimeCrontab.StepParser.IsMatch(System.Int32)">
            <summary>
            判断是否符合间隔或带步长间隔解析规则
            </summary>
            <param name="evalValue">当前值</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="T:Furion.UnifyResult.UnifyModelAttribute">
            <summary>
            规范化模型特性
            </summary>
        </member>
        <member name="M:Furion.UnifyResult.UnifyModelAttribute.#ctor(System.Type)">
            <summary>
            规范化模型
            </summary>
            <param name="modelType"></param>
        </member>
        <member name="P:Furion.UnifyResult.UnifyModelAttribute.ModelType">
            <summary>
            模型类型（泛型）
            </summary>
        </member>
        <member name="T:Furion.UnifyResult.SucceededUnifyResultFilter">
            <summary>
            规范化结构（请求成功）过滤器
            </summary>
        </member>
        <member name="F:Furion.UnifyResult.SucceededUnifyResultFilter.FilterOrder">
            <summary>
            过滤器排序
            </summary>
        </member>
        <member name="P:Furion.UnifyResult.SucceededUnifyResultFilter.Order">
            <summary>
            排序属性
            </summary>
        </member>
        <member name="M:Furion.UnifyResult.SucceededUnifyResultFilter.OnActionExecutionAsync(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext,Microsoft.AspNetCore.Mvc.Filters.ActionExecutionDelegate)">
            <summary>
            处理规范化结果
            </summary>
            <param name="context"></param>
            <param name="next"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.UnifyResult.RESTfulResult`1">
            <summary>
            RESTful 风格结果集
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Furion.UnifyResult.RESTfulResult`1.StatusCode">
            <summary>
            状态码
            </summary>
        </member>
        <member name="P:Furion.UnifyResult.RESTfulResult`1.Data">
            <summary>
            数据
            </summary>
        </member>
        <member name="P:Furion.UnifyResult.RESTfulResult`1.Succeeded">
            <summary>
            执行成功
            </summary>
        </member>
        <member name="P:Furion.UnifyResult.RESTfulResult`1.Errors">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="P:Furion.UnifyResult.RESTfulResult`1.Extras">
            <summary>
            附加数据
            </summary>
        </member>
        <member name="P:Furion.UnifyResult.RESTfulResult`1.Timestamp">
            <summary>
            时间戳
            </summary>
        </member>
        <member name="T:Furion.UnifyResult.UnifyMetadata">
            <summary>
            规范化元数据
            </summary>
        </member>
        <member name="P:Furion.UnifyResult.UnifyMetadata.ProviderName">
            <summary>
            提供器名称
            </summary>
        </member>
        <member name="P:Furion.UnifyResult.UnifyMetadata.ProviderType">
            <summary>
            提供器类型
            </summary>
        </member>
        <member name="P:Furion.UnifyResult.UnifyMetadata.ResultType">
            <summary>
            统一的结果类型
            </summary>
        </member>
        <member name="T:Furion.UnifyResult.UnifyResultStatusCodesMiddleware">
            <summary>
            状态码中间件
            </summary>
        </member>
        <member name="F:Furion.UnifyResult.UnifyResultStatusCodesMiddleware._next">
            <summary>
            请求委托
            </summary>
        </member>
        <member name="F:Furion.UnifyResult.UnifyResultStatusCodesMiddleware._authorizedHeaders">
            <summary>
            授权头
            </summary>
        </member>
        <member name="F:Furion.UnifyResult.UnifyResultStatusCodesMiddleware._withAuthorizationHeaderCheck">
            <summary>
            是否携带授权头判断
            </summary>
        </member>
        <member name="M:Furion.UnifyResult.UnifyResultStatusCodesMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,System.String[],System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="next"></param>
            <param name="authorizedHeaders"></param>
            <param name="withAuthorizationHeaderCheck"></param>
        </member>
        <member name="M:Furion.UnifyResult.UnifyResultStatusCodesMiddleware.InvokeAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            中间件执行方法
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.UnifyResult.UnifyResultSettingsOptions">
            <summary>
            规范化配置选项
            </summary>
        </member>
        <member name="P:Furion.UnifyResult.UnifyResultSettingsOptions.Return200StatusCodes">
            <summary>
            设置返回 200 状态码列表
            <para>默认：401，403，如果设置为 null，则标识所有状态码都返回 200 </para>
            </summary>
        </member>
        <member name="P:Furion.UnifyResult.UnifyResultSettingsOptions.AdaptStatusCodes">
            <summary>
            适配（篡改）Http 状态码（只支持短路状态码，比如 401，403，500 等）
            </summary>
        </member>
        <member name="P:Furion.UnifyResult.UnifyResultSettingsOptions.SupportMvcController">
            <summary>
            是否支持 MVC 控制台规范化处理
            </summary>
        </member>
        <member name="P:Furion.UnifyResult.UnifyResultSettingsOptions.SingleValidationErrorDisplay">
            <summary>
            默认只显示验证错误的首个消息
            </summary>
        </member>
        <member name="M:Furion.UnifyResult.UnifyResultSettingsOptions.PostConfigure(Furion.UnifyResult.UnifyResultSettingsOptions,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            选项后期配置
            </summary>
            <param name="options"></param>
            <param name="configuration"></param>
        </member>
        <member name="T:Furion.UnifyResult.IUnifyResultProvider">
            <summary>
            规范化结果提供器
            </summary>
        </member>
        <member name="M:Furion.UnifyResult.IUnifyResultProvider.OnAuthorizeException(Microsoft.AspNetCore.Http.DefaultHttpContext,Furion.FriendlyException.ExceptionMetadata)">
            <summary>
            JWT 授权异常返回值
            </summary>
            <param name="context"></param>
            <param name="metadata"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.UnifyResult.IUnifyResultProvider.OnException(Microsoft.AspNetCore.Mvc.Filters.ExceptionContext,Furion.FriendlyException.ExceptionMetadata)">
            <summary>
            异常返回值
            </summary>
            <param name="context"></param>
            <param name="metadata"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.UnifyResult.IUnifyResultProvider.OnSucceeded(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext,System.Object)">
            <summary>
            成功返回值
            </summary>
            <param name="context"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.UnifyResult.IUnifyResultProvider.OnValidateFailed(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext,Furion.DataValidation.ValidationMetadata)">
            <summary>
            验证失败返回值
            </summary>
            <param name="context"></param>
            <param name="metadata"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.UnifyResult.IUnifyResultProvider.OnResponseStatusCodes(Microsoft.AspNetCore.Http.HttpContext,System.Int32,Furion.UnifyResult.UnifyResultSettingsOptions)">
            <summary>
            拦截返回状态码
            </summary>
            <param name="context"></param>
            <param name="statusCode"></param>
            <param name="unifyResultSettings"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.UnifyResult.RESTfulResultProvider">
            <summary>
            RESTful 风格返回值
            </summary>
        </member>
        <member name="M:Furion.UnifyResult.RESTfulResultProvider.OnAuthorizeException(Microsoft.AspNetCore.Http.DefaultHttpContext,Furion.FriendlyException.ExceptionMetadata)">
            <summary>
            JWT 授权异常返回值
            </summary>
            <param name="context"></param>
            <param name="metadata"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.UnifyResult.RESTfulResultProvider.OnException(Microsoft.AspNetCore.Mvc.Filters.ExceptionContext,Furion.FriendlyException.ExceptionMetadata)">
            <summary>
            异常返回值
            </summary>
            <param name="context"></param>
            <param name="metadata"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.UnifyResult.RESTfulResultProvider.OnSucceeded(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext,System.Object)">
            <summary>
            成功返回值
            </summary>
            <param name="context"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.UnifyResult.RESTfulResultProvider.OnValidateFailed(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext,Furion.DataValidation.ValidationMetadata)">
            <summary>
            验证失败/业务异常返回值
            </summary>
            <param name="context"></param>
            <param name="metadata"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.UnifyResult.RESTfulResultProvider.OnResponseStatusCodes(Microsoft.AspNetCore.Http.HttpContext,System.Int32,Furion.UnifyResult.UnifyResultSettingsOptions)">
            <summary>
            特定状态码返回值
            </summary>
            <param name="context"></param>
            <param name="statusCode"></param>
            <param name="unifyResultSettings"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.UnifyResult.RESTfulResultProvider.RESTfulResult(System.Int32,System.Boolean,System.Object,System.Object)">
            <summary>
            返回 RESTful 风格结果集
            </summary>
            <param name="statusCode"></param>
            <param name="succeeded"></param>
            <param name="data"></param>
            <param name="errors"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.UnifyResult.UnifyContext">
            <summary>
            规范化结果上下文
            </summary>
        </member>
        <member name="F:Furion.UnifyResult.UnifyContext.EnabledUnifyHandler">
            <summary>
            是否启用规范化结果
            </summary>
        </member>
        <member name="F:Furion.UnifyResult.UnifyContext.EnabledStatusCodesMiddleware">
            <summary>
            是否启用状态码拦截中间件
            </summary>
        </member>
        <member name="F:Furion.UnifyResult.UnifyContext.UnifyResultExtrasKey">
            <summary>
            规范化结果额外数据键
            </summary>
        </member>
        <member name="F:Furion.UnifyResult.UnifyContext.UnifyProviders">
            <summary>
            规范化结果提供器
            </summary>
        </member>
        <member name="F:Furion.UnifyResult.UnifyContext.UnifySerializerSettings">
            <summary>
            规范化序列化配置
            </summary>
        </member>
        <member name="M:Furion.UnifyResult.UnifyContext.GetExceptionMetadata(Microsoft.AspNetCore.Mvc.ActionContext)">
            <summary>
            获取异常元数据
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.UnifyResult.UnifyContext.Fill(System.Object)">
            <summary>
            填充附加信息
            </summary>
            <param name="extras"></param>
        </member>
        <member name="M:Furion.UnifyResult.UnifyContext.Take">
            <summary>
            读取附加信息
            </summary>
        </member>
        <member name="M:Furion.UnifyResult.UnifyContext.SetResponseStatusCodes(Microsoft.AspNetCore.Http.HttpContext,System.Int32,Furion.UnifyResult.UnifyResultSettingsOptions)">
            <summary>
            设置响应状态码
            </summary>
            <param name="context"></param>
            <param name="statusCode"></param>
            <param name="unifyResultSettings"></param>
        </member>
        <member name="M:Furion.UnifyResult.UnifyContext.GetSerializerSettings(Microsoft.AspNetCore.Mvc.Filters.FilterContext)">
            <summary>
            获取序列化配置
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.UnifyResult.UnifyContext.GetSerializerSettings(System.String)">
            <summary>
            获取序列化配置
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.UnifyResult.UnifyContext.GetSerializerSettings(Microsoft.AspNetCore.Http.DefaultHttpContext)">
            <summary>
            获取序列化配置
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.UnifyResult.UnifyContext.CheckSucceededNonUnify(System.Reflection.MethodInfo,Furion.UnifyResult.IUnifyResultProvider@,System.Boolean)">
            <summary>
            检查请求成功是否进行规范化处理
            </summary>
            <param name="method"></param>
            <param name="unifyResult"></param>
            <param name="isWebRequest"></param>
            <returns>返回 true 跳过处理，否则进行规范化处理</returns>
        </member>
        <member name="M:Furion.UnifyResult.UnifyContext.CheckFailedNonUnify(System.Reflection.MethodInfo,Furion.UnifyResult.IUnifyResultProvider@)">
            <summary>
            检查请求失败（验证失败、抛异常）是否进行规范化处理
            </summary>
            <param name="method"></param>
            <param name="unifyResult"></param>
            <returns>返回 true 跳过处理，否则进行规范化处理</returns>
        </member>
        <member name="M:Furion.UnifyResult.UnifyContext.CheckExceptionHttpContextNonUnify(Microsoft.AspNetCore.Http.HttpContext,Furion.UnifyResult.IUnifyResultProvider@)">
            <summary>
            检查短路状态码（>=400）是否进行规范化处理
            </summary>
            <param name="context"></param>
            <param name="unifyResult"></param>
            <returns>返回 true 跳过处理，否则进行规范化处理</returns>
        </member>
        <member name="M:Furion.UnifyResult.UnifyContext.CheckSupportMvcController(Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Mvc.Controllers.ControllerActionDescriptor,Furion.UnifyResult.UnifyResultSettingsOptions@)">
            <summary>
            判断是否支持 Mvc 控制器规范化处理
            </summary>
            <param name="httpContext"></param>
            <param name="actionDescriptor"></param>
            <param name="unifyResultSettings"></param>
            <returns></returns>
        </member>
        <member name="F:Furion.UnifyResult.UnifyContext.ResponseContentTypesOfNonUnify">
            <summary>
            跳过规范化处理的 Response Content-Type
            </summary>
        </member>
        <member name="M:Furion.UnifyResult.UnifyContext.CheckHttpContextNonUnify(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            检查 HttpContext 是否进行规范化处理
            </summary>
            <param name="httpContext"></param>
            <returns>返回 true 跳过处理，否则进行规范化处理</returns>
        </member>
        <member name="M:Furion.UnifyResult.UnifyContext.CheckVaildResult(Microsoft.AspNetCore.Mvc.IActionResult,System.Object@)">
            <summary>
            检查是否是有效的结果（可进行规范化的结果）
            </summary>
            <param name="result"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.UnifyResult.UnifyContext.GetMethodUnityMetadata(System.Reflection.MethodInfo)">
            <summary>
            获取方法规范化元数据
            </summary>
            <remarks>如果追求性能，这里理应缓存起来，避免每次请求去检测</remarks>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.Constants">
            <summary>
                核心模块常量配置
            </summary>
        </member>
        <member name="F:Furion.Constants.NUGET_PACKAGE_PAGE">
            <summary>
                NuGet 包主页地址
            </summary>
        </member>
        <member name="F:Furion.Constants.FURION_COMPONENT_DOCS_PAGE">
            <summary>
                Furion 组件文档地址
            </summary>
        </member>
        <member name="T:Furion.JsonConverters.ExpandoObjectConverter">
            <summary>
                <see cref="T:System.Dynamic.ExpandoObject" /> 类型 JSON 序列化转换器
            </summary>
        </member>
        <member name="M:Furion.JsonConverters.ExpandoObjectConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
        </member>
        <member name="M:Furion.JsonConverters.ExpandoObjectConverter.Write(System.Text.Json.Utf8JsonWriter,System.Dynamic.ExpandoObject,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
        </member>
        <member name="M:Furion.JsonConverters.ExpandoObjectConverter.ReadObject(System.Text.Json.Utf8JsonReader@,System.Text.Json.JsonSerializerOptions)">
            <summary>
                读取 JSON 对象并将其转换为 <see cref="T:System.Dynamic.ExpandoObject" />
            </summary>
            <param name="reader">
                <see cref="T:System.Text.Json.Utf8JsonReader" />
            </param>
            <param name="options">
                <see cref="T:System.Text.Json.JsonSerializerOptions" />
            </param>
            <returns>
                <see cref="T:System.Dynamic.ExpandoObject" />
            </returns>
            <exception cref="T:System.Text.Json.JsonException"></exception>
        </member>
        <member name="M:Furion.JsonConverters.ExpandoObjectConverter.ReadValue(System.Text.Json.Utf8JsonReader@,System.Text.Json.JsonSerializerOptions)">
            <summary>
                读取 JSON 值并根据其类型返回相应的对象
            </summary>
            <param name="reader">
                <see cref="T:System.Text.Json.Utf8JsonReader" />
            </param>
            <param name="options">
                <see cref="T:System.Text.Json.JsonSerializerOptions" />
            </param>
            <returns>
                <see cref="T:System.Object" />
            </returns>
            <exception cref="T:System.Text.Json.JsonException"></exception>
        </member>
        <member name="M:Furion.JsonConverters.ExpandoObjectConverter.ReadArrayAsList(System.Text.Json.Utf8JsonReader@,System.Text.Json.JsonSerializerOptions)">
            <summary>
                读取 JSON 数组并将其转换为 <see cref="T:System.Collections.Generic.List`1" />
            </summary>
            <param name="reader">
                <see cref="T:System.Text.Json.Utf8JsonReader" />
            </param>
            <param name="options">
                <see cref="T:System.Text.Json.JsonSerializerOptions" />
            </param>
            <returns>
                <see cref="T:System.Collections.Generic.List`1" />
            </returns>
        </member>
        <member name="M:Furion.JsonConverters.ExpandoObjectConverter.ReadArrayAsExpandoObject(System.Text.Json.Utf8JsonReader@,System.Text.Json.JsonSerializerOptions)">
            <summary>
                读取 JSON 数组并将其转换为包含 "Items" 属性的 <see cref="T:System.Dynamic.ExpandoObject" />
            </summary>
            <param name="reader">
                <see cref="T:System.Text.Json.Utf8JsonReader" />
            </param>
            <param name="options">
                <see cref="T:System.Text.Json.JsonSerializerOptions" />
            </param>
            <returns>
                <see cref="T:System.Dynamic.ExpandoObject" />
            </returns>
        </member>
        <member name="M:Furion.JsonConverters.ExpandoObjectConverter.WriteValue(System.Text.Json.Utf8JsonWriter,System.Object,System.Text.Json.JsonSerializerOptions)">
            <summary>
                写出 JSON 值
            </summary>
            <param name="writer">
                <see cref="T:System.Text.Json.Utf8JsonWriter" />
            </param>
            <param name="value">
                要写出的值
            </param>
            <param name="options">
                <see cref="T:System.Text.Json.JsonSerializerOptions" />
            </param>
        </member>
        <member name="T:Furion.ComponentMetadata">
            <summary>
                组件元数据
            </summary>
        </member>
        <member name="M:Furion.ComponentMetadata.#ctor(System.String,System.Version,System.String)">
            <summary>
                <inheritdoc cref="T:Furion.ComponentMetadata" />
            </summary>
            <param name="name">组件名称</param>
            <param name="version">版本号</param>
            <param name="description">描述</param>
        </member>
        <member name="P:Furion.ComponentMetadata.Name">
            <summary>
                组件名称
            </summary>
        </member>
        <member name="P:Furion.ComponentMetadata.Version">
            <summary>
                版本号
            </summary>
        </member>
        <member name="P:Furion.ComponentMetadata.Description">
            <summary>
                描述
            </summary>
        </member>
        <member name="P:Furion.ComponentMetadata.NuGetPage">
            <summary>
                NuGet 地址
            </summary>
        </member>
        <member name="P:Furion.ComponentMetadata.DocumentationPage">
            <summary>
                文档地址
            </summary>
        </member>
        <member name="T:Furion.CoreOptions">
            <summary>
                核心模块选项
            </summary>
        </member>
        <member name="F:Furion.CoreOptions._metadataOfRegistered">
            <summary>
                已注册的组件元数据集合
            </summary>
        </member>
        <member name="F:Furion.CoreOptions._optionsInstances">
            <summary>
                子选项集合
            </summary>
        </member>
        <member name="M:Furion.CoreOptions.#ctor">
            <summary>
                <inheritdoc cref="T:Furion.CoreOptions" />
            </summary>
        </member>
        <member name="P:Furion.CoreOptions.EntryComponentTypes">
            <summary>
                入口组件类型集合
            </summary>
        </member>
        <member name="M:Furion.CoreOptions.GetOrAdd``1">
            <summary>
                获取子选项
            </summary>
            <typeparam name="TOptions">选项类型</typeparam>
            <returns>
                <typeparamref name="TOptions" />
            </returns>
        </member>
        <member name="M:Furion.CoreOptions.Remove``1">
            <summary>
                移除子选项
            </summary>
            <typeparam name="TOptions">选项类型</typeparam>
        </member>
        <member name="M:Furion.CoreOptions.TryRegisterComponent(Furion.ComponentMetadata)">
            <summary>
                登记组件注册信息
            </summary>
            <param name="metadata">
                <see cref="T:Furion.ComponentMetadata" />
            </param>
        </member>
        <member name="T:Furion.Utilities.AliasAsUtility">
            <summary>
                提供别名获取实用方法
            </summary>
        </member>
        <member name="M:Furion.Utilities.AliasAsUtility.GetPropertyName(System.Reflection.PropertyInfo,System.Boolean@)">
            <summary>
                获取属性名
            </summary>
            <param name="property">
                <see cref="T:System.Reflection.PropertyInfo" />
            </param>
            <param name="isDefined">是否定义特性</param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:Furion.Utilities.AliasAsUtility.GetParameterName(System.Reflection.ParameterInfo,System.Boolean@)">
            <summary>
                获取参数名
            </summary>
            <param name="parameter">
                <see cref="T:System.Reflection.ParameterInfo" />
            </param>
            <param name="isDefined">是否定义特性</param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="T:Furion.Utilities.FileUtility">
            <summary>
                提供文件实用方法
            </summary>
        </member>
        <member name="M:Furion.Utilities.FileUtility.TryValidateExtension(System.String,System.String,System.Collections.Generic.HashSet{System.String}@)">
            <summary>
                尝试验证文件拓展名
            </summary>
            <remarks>特别说明：不支持拓展名中包含通配符，如 <c>*</c>。</remarks>
            <param name="fileName">文件的名称</param>
            <param name="allowedFileExtensions">允许的文件扩展名字符串，用分号分隔</param>
            <param name="validFileExtensions">有效的文件拓展名集合</param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:Furion.Utilities.FileUtility.TryValidateExtension(System.String,System.String[],System.Collections.Generic.HashSet{System.String}@)">
            <summary>
                尝试验证文件拓展名
            </summary>
            <remarks>特别说明：不支持拓展名中包含通配符，如 <c>*</c>。</remarks>
            <param name="fileName">文件的名称</param>
            <param name="allowedFileExtensions">允许的文件拓展名数组</param>
            <param name="validFileExtensions">有效的文件拓展名集合</param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:Furion.Utilities.FileUtility.ValidateExtension(System.String,System.String)">
            <summary>
                验证文件拓展名
            </summary>
            <remarks>特别说明：不支持拓展名中包含通配符，如 <c>*</c>。</remarks>
            <param name="fileName">文件的名称</param>
            <param name="allowedFileExtensions">允许的文件扩展名字符串，用分号分隔</param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Furion.Utilities.FileUtility.ValidateExtension(System.String,System.String[])">
            <summary>
                验证文件拓展名
            </summary>
            <remarks>特别说明：不支持拓展名中包含通配符，如 <c>*</c>。</remarks>
            <param name="fileName">文件的名称</param>
            <param name="allowedFileExtensions">允许的文件拓展名数组</param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Furion.Utilities.FileUtility.TryValidateSize(System.String,System.Int64)">
            <summary>
                尝试验证文件大小
            </summary>
            <param name="filePath">文件路径</param>
            <param name="maxFileSizeInBytes">允许的文件大小。以字节为单位。</param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Furion.Utilities.FileUtility.ValidateSize(System.String,System.Int64)">
            <summary>
                验证文件大小
            </summary>
            <param name="filePath">文件路径</param>
            <param name="maxFileSizeInBytes">允许的文件大小。以字节为单位。</param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Furion.Utilities.FileUtility.GetValidFileExtensions(System.String[])">
            <summary>
                获取有效的文件拓展名集合
            </summary>
            <param name="allowedFileExtensions">允许的文件拓展名数组</param>
            <returns>
                <see cref="T:System.Collections.Generic.HashSet`1" />
            </returns>
        </member>
        <member name="T:Furion.Utilities.JsonUtility">
            <summary>
                提供 JSON 实用方法
            </summary>
        </member>
        <member name="M:Furion.Utilities.JsonUtility.Parse(System.String)">
            <summary>
                解析 JSON 字符串
            </summary>
            <param name="jsonString">JSON 字符串</param>
            <returns>
                <see cref="T:System.Text.Json.JsonDocument" />
            </returns>
            <exception cref="T:System.Text.Json.JsonException"></exception>
        </member>
        <member name="M:Furion.Utilities.JsonUtility.TryParse(System.String,System.Text.Json.JsonDocument@)">
            <summary>
                尝试解析 JSON 字符串
            </summary>
            <param name="jsonString">JSON 字符串</param>
            <param name="jsonDocument">
                <see cref="T:System.Text.Json.JsonDocument" />
            </param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:Furion.Utilities.JsonUtility.IsObjectOrArrayOrNull(System.Text.Json.JsonDocument)">
            <summary>
                检查 <see cref="T:System.Text.Json.JsonDocument" /> 的 <c>ValueKind</c> 属性值是否是 <c>Object</c>、<c>Array</c> 或 <c>Null</c>
            </summary>
            <param name="jsonDocument">
                <see cref="T:System.Text.Json.JsonDocument" />
            </param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="T:Furion.Utilities.NetworkUtility">
            <summary>
                提供网络相关的实用方法
            </summary>
        </member>
        <member name="M:Furion.Utilities.NetworkUtility.FindAvailableTcpPort">
            <summary>
                查找一个可用的 TCP 端口
            </summary>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:Furion.Utilities.NetworkUtility.IsWebUrl(System.String)">
            <summary>
                检查 URL 是否是一个互联网地址
            </summary>
            <param name="url">URL 地址</param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:Furion.Utilities.NetworkUtility.IsPortInUse(System.Int32)">
            <summary>
                检查指定端口是否正在使用
            </summary>
            <remarks>如果端口正在使用则返回 <c>true</c>，否则返回 <c>false</c>。</remarks>
            <param name="port">要检查的端口号。</param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="T:Furion.Utilities.RuntimeUtility">
            <summary>
                提供运行时实用方法
            </summary>
        </member>
        <member name="P:Furion.Utilities.RuntimeUtility.OSDescription">
            <summary>
                获取操作系统描述
            </summary>
        </member>
        <member name="M:Furion.Utilities.RuntimeUtility.GetOSName">
            <summary>
                获取操作系统基本名称
            </summary>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="T:Furion.Utilities.StringUtility">
            <summary>
                提供字符串实用方法
            </summary>
        </member>
        <member name="M:Furion.Utilities.StringUtility.FormatKeyValuesSummary(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Collections.Generic.IEnumerable{System.String}}},System.String)">
            <summary>
                格式化键值集合摘要
            </summary>
            <param name="keyValues">键值集合</param>
            <param name="summary">摘要</param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:Furion.Utilities.StringUtility.AddTabToEachLine(System.String,System.Boolean)">
            <summary>
                在字符串每一行添加制表符
            </summary>
            <param name="input">文本</param>
            <param name="skipFirstLine">是否跳过第一行</param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="T:Furion.HttpRemote.HttpContextForwardBuilder">
            <summary>
                <see cref="P:Furion.HttpRemote.HttpContextForwardBuilder.HttpContext" /> 转发构建器
            </summary>
        </member>
        <member name="F:Furion.HttpRemote.HttpContextForwardBuilder._actionResultContentConverterInstance">
            <summary>
                <see cref="T:Furion.HttpRemote.IActionResultContentConverter" /> 实例
            </summary>
        </member>
        <member name="F:Furion.HttpRemote.HttpContextForwardBuilder._ignoreRequestHeaders">
            <summary>
                忽略在转发时需要跳过的请求标头列表
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.HttpContextForwardBuilder.#ctor(Microsoft.AspNetCore.Http.HttpContext,System.Net.Http.HttpMethod,System.Uri,Furion.HttpRemote.HttpContextForwardOptions)">
            <summary>
                <inheritdoc cref="T:Furion.HttpRemote.HttpContextForwardBuilder" />
            </summary>
            <param name="httpContext">
                <see cref="P:Furion.HttpRemote.HttpContextForwardBuilder.HttpContext" />
            </param>
            <param name="httpMethod">请求方式</param>
            <param name="requestUri">请求地址。若为空则尝试从请求标头 <c>X-Forward-To</c> 中获取目标地址。</param>
            <param name="forwardOptions">
                <see cref="T:Furion.HttpRemote.HttpContextForwardOptions" />
            </param>
        </member>
        <member name="P:Furion.HttpRemote.HttpContextForwardBuilder.RequestUri">
            <summary>
                请求地址
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.HttpContextForwardBuilder.Method">
            <summary>
                请求方式
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.HttpContextForwardBuilder.HttpContext">
            <inheritdoc cref="T:Microsoft.AspNetCore.Http.HttpContext" />
        </member>
        <member name="P:Furion.HttpRemote.HttpContextForwardBuilder.ForwardOptions">
            <inheritdoc cref="T:Furion.HttpRemote.HttpContextForwardOptions" />
        </member>
        <member name="M:Furion.HttpRemote.HttpContextForwardBuilder.GetTargetUri(Microsoft.AspNetCore.Http.HttpContext,System.Uri)">
            <summary>
                获取目标地址
            </summary>
            <param name="httpContext">
                <see cref="P:Furion.HttpRemote.HttpContextForwardBuilder.HttpContext" />
            </param>
            <param name="requestUri">请求地址。若为空则尝试从请求标头 <c>X-Forward-To</c> 中获取目标地址。</param>
            <returns>
                <see cref="T:System.Uri" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpContextForwardBuilder.GetForwardOptions(Microsoft.AspNetCore.Http.HttpContext,Furion.HttpRemote.HttpContextForwardOptions)">
            <summary>
                获取 <see cref="T:Furion.HttpRemote.HttpContextForwardOptions" /> 实例
            </summary>
            <param name="httpContext">
                <see cref="P:Furion.HttpRemote.HttpContextForwardBuilder.HttpContext" />
            </param>
            <param name="forwardOptions">
                <see cref="T:Furion.HttpRemote.HttpContextForwardOptions" />
            </param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpContextForwardOptions" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpContextForwardBuilder.Build(System.Action{Furion.HttpRemote.HttpRequestBuilder})">
            <summary>
                构建 <see cref="T:Furion.HttpRemote.HttpRequestBuilder" /> 实例
            </summary>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpContextForwardBuilder.BuildAsync(System.Action{Furion.HttpRemote.HttpRequestBuilder})">
            <summary>
                构建 <see cref="T:Furion.HttpRemote.HttpRequestBuilder" /> 实例
            </summary>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpContextForwardBuilder.CopyQueryAndRouteValues(Furion.HttpRemote.HttpRequestBuilder)">
            <summary>
                复制查询参数和路由参数
            </summary>
            <param name="httpRequestBuilder">
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </param>
        </member>
        <member name="M:Furion.HttpRemote.HttpContextForwardBuilder.CopyHeaders(Furion.HttpRemote.HttpRequestBuilder)">
            <summary>
                复制请求标头
            </summary>
            <param name="httpRequestBuilder">
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </param>
        </member>
        <member name="M:Furion.HttpRemote.HttpContextForwardBuilder.CopyBodyAsync(Furion.HttpRemote.HttpRequestBuilder)">
            <summary>
                复制请求内容
            </summary>
            <param name="httpRequestBuilder">
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </param>
        </member>
        <member name="M:Furion.HttpRemote.HttpContextForwardBuilder.CopyNonMultipartFormData(System.IO.Stream,System.String,Furion.HttpRemote.HttpRequestBuilder)">
            <summary>
                复制非多部分表单内容
            </summary>
            <param name="bodyStream">
                <see cref="T:System.IO.Stream" />
            </param>
            <param name="contentType">内容类型</param>
            <param name="httpRequestBuilder">
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </param>
        </member>
        <member name="M:Furion.HttpRemote.HttpContextForwardBuilder.CopyMultipartFormDataAsync(System.IO.Stream,System.String,Furion.HttpRemote.HttpRequestBuilder,System.Threading.CancellationToken)">
            <summary>
                复制多部分表单内容
            </summary>
            <param name="bodyStream">
                <see cref="T:System.IO.Stream" />
            </param>
            <param name="rawContentType">原始内容类型</param>
            <param name="httpRequestBuilder">
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
        </member>
        <member name="M:Furion.HttpRemote.HttpContextForwardBuilder.CopyTextMultipartSectionAsync(Microsoft.AspNetCore.WebUtilities.MultipartSection,Furion.HttpRemote.HttpMultipartFormDataBuilder,System.Threading.CancellationToken)">
            <summary>
                复制多部分表单内容文本节内容
            </summary>
            <param name="multipartSection">
                <see cref="T:Microsoft.AspNetCore.WebUtilities.MultipartSection" />
            </param>
            <param name="httpMultipartFormDataBuilder">
                <see cref="T:Furion.HttpRemote.HttpMultipartFormDataBuilder" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
        </member>
        <member name="M:Furion.HttpRemote.HttpContextForwardBuilder.CopyFileMultipartSection(Microsoft.AspNetCore.WebUtilities.FileMultipartSection,Furion.HttpRemote.HttpMultipartFormDataBuilder,Furion.HttpRemote.HttpRequestBuilder)">
            <summary>
                复制多部分表单内容文件节内容
            </summary>
            <param name="fileMultipartSection">
                <see cref="T:Microsoft.AspNetCore.WebUtilities.FileMultipartSection" />
            </param>
            <param name="httpMultipartFormDataBuilder">
                <see cref="T:Furion.HttpRemote.HttpMultipartFormDataBuilder" />
            </param>
            <param name="httpRequestBuilder">
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </param>
        </member>
        <member name="M:Furion.HttpRemote.HttpContextForwardBuilder.ReadBodyAsync(Furion.HttpRemote.HttpRequestBuilder)">
            <summary>
                读取 <see cref="P:Furion.HttpRemote.HttpContextForwardBuilder.HttpContext" /> 请求体流
            </summary>
            <param name="httpRequestBuilder">
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </param>
            <returns>
                <see cref="T:System.IO.Stream" />
            </returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="T:Furion.HttpRemote.HttpFileDownloadBuilder">
            <summary>
                HTTP 文件下载构建器
            </summary>
            <remarks>使用 <c>HttpRequestBuilder.DownloadFile(requestUri, destinationPath)</c> 静态方法创建。</remarks>
        </member>
        <member name="M:Furion.HttpRemote.HttpFileDownloadBuilder.#ctor(System.Net.Http.HttpMethod,System.Uri)">
            <summary>
                <inheritdoc cref="T:Furion.HttpRemote.HttpFileDownloadBuilder" />
            </summary>
            <param name="httpMethod">请求方式</param>
            <param name="requestUri">请求地址</param>
        </member>
        <member name="P:Furion.HttpRemote.HttpFileDownloadBuilder.RequestUri">
            <summary>
                请求地址
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.HttpFileDownloadBuilder.Method">
            <summary>
                请求方式
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.HttpFileDownloadBuilder.BufferSize">
            <summary>
                用于传输操作的缓冲区大小
            </summary>
            <remarks>以字节为单位，默认值为 <c>80 KB</c>。</remarks>
        </member>
        <member name="P:Furion.HttpRemote.HttpFileDownloadBuilder.DestinationPath">
            <summary>
                文件保存的目标路径
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.HttpFileDownloadBuilder.FileExistsBehavior">
            <summary>
                当目标文件已存在时的行为
            </summary>
            <remarks>默认值为创建新文件，如果文件已存在则抛出异常。</remarks>
        </member>
        <member name="P:Furion.HttpRemote.HttpFileDownloadBuilder.ProgressInterval">
            <summary>
                进度更新（通知）的间隔时间
            </summary>
            <remarks>默认值为 1 秒。</remarks>
        </member>
        <member name="P:Furion.HttpRemote.HttpFileDownloadBuilder.OnTransferStarted">
            <summary>
                用于处理在文件开始传输时的操作
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.HttpFileDownloadBuilder.OnTransferCompleted">
            <summary>
                用于处理在文件传输完成时的操作
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.HttpFileDownloadBuilder.OnTransferFailed">
            <summary>
                用于处理在文件传输发生异常时的操作
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.HttpFileDownloadBuilder.OnFileExistAndSkip">
            <summary>
                用于处理在文件存在且配置为跳过时的操作
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.HttpFileDownloadBuilder.OnProgressChanged">
            <summary>
                用于传输进度发生变化时的操作
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.HttpFileDownloadBuilder.FileTransferEventHandlerType">
            <summary>
                实现 <see cref="T:Furion.HttpRemote.IHttpFileTransferEventHandler" /> 的类型
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.HttpFileDownloadBuilder.SetBufferSize(System.Int32)">
            <summary>
                设置用于传输操作的缓冲区大小
            </summary>
            <param name="bufferSize">用于传输操作的缓冲区大小</param>
            <remarks>以字节为单位，默认值为 <c>80 KB</c>。</remarks>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpFileDownloadBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpFileDownloadBuilder.SetDestinationPath(System.String)">
            <summary>
                设置文件保存的目标路径
            </summary>
            <param name="destinationPath">文件保存的目标路径</param>
            <remarks>
                如果设置为 <c>null</c>，则尝试获取 HTTP 模块的 <see cref="T:Furion.HttpRemote.HttpRemoteBuilder" /> 构建器的 <c>DefaultFileDownloadDirectory</c>
                的属性配置。
            </remarks>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpFileDownloadBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpFileDownloadBuilder.SetFileExistsBehavior(Furion.HttpRemote.FileExistsBehavior)">
            <summary>
                设置当目标文件已存在时的行为
            </summary>
            <param name="fileExistsBehavior">
                <see cref="P:Furion.HttpRemote.HttpFileDownloadBuilder.FileExistsBehavior" />
            </param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpFileDownloadBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpFileDownloadBuilder.SetProgressInterval(System.TimeSpan)">
            <summary>
                设置文件传输进度（通知）的间隔时间
            </summary>
            <param name="progressInterval">进度更新（通知）的间隔时间</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpFileDownloadBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpFileDownloadBuilder.SetOnTransferStarted(System.Action)">
            <summary>
                设置在文件开始传输时的操作
            </summary>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpFileDownloadBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpFileDownloadBuilder.SetOnProgressChanged(System.Func{Furion.HttpRemote.FileTransferProgress,System.Threading.Tasks.Task})">
            <summary>
                设置用于传输进度发生变化时执行的委托
            </summary>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpFileDownloadBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpFileDownloadBuilder.SetOnTransferCompleted(System.Action{System.Int64})">
            <summary>
                设置在文件传输完成时的操作
            </summary>
            <param name="configure">自定义配置委托；委托参数为文件传输总花费时间（毫秒）</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpFileDownloadBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpFileDownloadBuilder.SetOnTransferFailed(System.Action{System.Exception})">
            <summary>
                设置在文件传输发生异常时的操作
            </summary>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpFileDownloadBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpFileDownloadBuilder.SetOnFileExistAndSkip(System.Action)">
            <summary>
                设置在文件存在且配置为跳过时的操作
            </summary>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpFileDownloadBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpFileDownloadBuilder.SetEventHandler(System.Type)">
            <summary>
                设置 HTTP 文件传输事件处理程序
            </summary>
            <param name="fileTransferEventHandlerType">实现 <see cref="T:Furion.HttpRemote.IHttpFileTransferEventHandler" /> 接口的类型</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpFileDownloadBuilder" />
            </returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Furion.HttpRemote.HttpFileDownloadBuilder.SetEventHandler``1">
            <summary>
                设置 HTTP 文件传输事件处理程序
            </summary>
            <typeparam name="TFileTransferEventHandler">
                <see cref="T:Furion.HttpRemote.IHttpFileTransferEventHandler" />
            </typeparam>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpFileDownloadBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpFileDownloadBuilder.Build(Furion.HttpRemote.HttpRemoteOptions,System.Action{Furion.HttpRemote.HttpRequestBuilder})">
            <summary>
                构建 <see cref="T:Furion.HttpRemote.HttpRequestBuilder" /> 实例
            </summary>
            <param name="httpRemoteOptions">
                <see cref="T:Furion.HttpRemote.HttpRemoteOptions" />
            </param>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="T:Furion.HttpRemote.HttpFileUploadBuilder">
            <summary>
                HTTP 文件上传构建器
            </summary>
            <remarks>使用 <c>HttpRequestBuilder.UploadFile(requestUri, filePath, name)</c> 静态方法创建。</remarks>
        </member>
        <member name="M:Furion.HttpRemote.HttpFileUploadBuilder.#ctor(System.Net.Http.HttpMethod,System.Uri,System.String,System.String,System.String)">
            <summary>
                <inheritdoc cref="T:Furion.HttpRemote.HttpFileUploadBuilder" />
            </summary>
            <param name="httpMethod">请求方式</param>
            <param name="requestUri">请求地址</param>
            <param name="filePath">文件路径</param>
            <param name="name">表单名称</param>
            <param name="fileName">文件的名称</param>
        </member>
        <member name="P:Furion.HttpRemote.HttpFileUploadBuilder.RequestUri">
            <summary>
                请求地址
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.HttpFileUploadBuilder.Method">
            <summary>
                请求方式
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.HttpFileUploadBuilder.FilePath">
            <summary>
                文件路径
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.HttpFileUploadBuilder.FileName">
            <summary>
                文件的名称
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.HttpFileUploadBuilder.Name">
            <summary>
                表单名称
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.HttpFileUploadBuilder.ContentType">
            <summary>
                内容类型
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.HttpFileUploadBuilder.AllowedFileExtensions">
            <summary>
                允许的文件拓展名
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.HttpFileUploadBuilder.MaxFileSizeInBytes">
            <summary>
                允许的文件大小。以字节为单位
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.HttpFileUploadBuilder.ProgressInterval">
            <summary>
                进度更新（通知）的间隔时间
            </summary>
            <remarks>默认值为 1 秒。</remarks>
        </member>
        <member name="P:Furion.HttpRemote.HttpFileUploadBuilder.OnTransferStarted">
            <summary>
                用于处理在文件开始传输时的操作
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.HttpFileUploadBuilder.OnTransferCompleted">
            <summary>
                用于处理在文件传输完成时的操作
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.HttpFileUploadBuilder.OnTransferFailed">
            <summary>
                用于处理在文件传输发生异常时的操作
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.HttpFileUploadBuilder.OnProgressChanged">
            <summary>
                用于传输进度发生变化时的操作
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.HttpFileUploadBuilder.FileTransferEventHandlerType">
            <summary>
                实现 <see cref="T:Furion.HttpRemote.IHttpFileTransferEventHandler" /> 的类型
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.HttpFileUploadBuilder.SetContentType(System.String)">
            <summary>
                设置内容类型（文件类型）
            </summary>
            <param name="contentType">内容类型</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpFileUploadBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpFileUploadBuilder.SetAllowedFileExtensions(System.String[])">
            <summary>
                设置允许的文件拓展名
            </summary>
            <param name="allowedFileExtensions">允许的文件拓展名</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpFileUploadBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpFileUploadBuilder.SetAllowedFileExtensions(System.String)">
            <summary>
                设置允许的文件拓展名
            </summary>
            <param name="allowedFileExtensions">允许的文件扩展名字符串，用分号分隔</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpFileUploadBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpFileUploadBuilder.SetMaxFileSizeInBytes(System.Int64)">
            <summary>
                设置允许的文件大小
            </summary>
            <param name="maxFileSizeInBytes">允许的文件大小。以字节为单位。</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpFileUploadBuilder" />
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Furion.HttpRemote.HttpFileUploadBuilder.SetProgressInterval(System.TimeSpan)">
            <summary>
                设置文件传输进度（通知）的间隔时间
            </summary>
            <param name="progressInterval">进度更新（通知）的间隔时间</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpFileUploadBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpFileUploadBuilder.SetOnTransferStarted(System.Action)">
            <summary>
                设置在文件开始传输时的操作
            </summary>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpFileUploadBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpFileUploadBuilder.SetOnProgressChanged(System.Func{Furion.HttpRemote.FileTransferProgress,System.Threading.Tasks.Task})">
            <summary>
                设置用于上传进度发生变化时执行的委托
            </summary>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpFileUploadBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpFileUploadBuilder.SetOnTransferCompleted(System.Action{System.Int64})">
            <summary>
                设置在文件传输完成时的操作
            </summary>
            <param name="configure">自定义配置委托；委托参数为文件传输总花费时间（毫秒）</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpFileUploadBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpFileUploadBuilder.SetOnTransferFailed(System.Action{System.Exception})">
            <summary>
                设置在文件传输发生异常时的操作
            </summary>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpFileUploadBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpFileUploadBuilder.SetEventHandler(System.Type)">
            <summary>
                设置 HTTP 文件传输事件处理程序
            </summary>
            <param name="fileTransferEventHandlerType">实现 <see cref="T:Furion.HttpRemote.IHttpFileTransferEventHandler" /> 接口的类型</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpFileUploadBuilder" />
            </returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Furion.HttpRemote.HttpFileUploadBuilder.SetEventHandler``1">
            <summary>
                设置 HTTP 文件传输事件处理程序
            </summary>
            <typeparam name="TFileTransferEventHandler">
                <see cref="T:Furion.HttpRemote.IHttpFileTransferEventHandler" />
            </typeparam>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpFileUploadBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpFileUploadBuilder.Build(Furion.HttpRemote.HttpRemoteOptions,System.Threading.Channels.Channel{Furion.HttpRemote.FileTransferProgress},System.Action{Furion.HttpRemote.HttpRequestBuilder})">
            <summary>
                构建 <see cref="T:Furion.HttpRemote.HttpRequestBuilder" /> 实例
            </summary>
            <param name="httpRemoteOptions">
                <see cref="T:Furion.HttpRemote.HttpRemoteOptions" />
            </param>
            <param name="progressChannel">文件传输进度信息的通道</param>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpFileUploadBuilder.EnsureLegalData(System.String,System.String[],System.Nullable{System.Int64})">
            <summary>
                检查文件拓展名和大小合法性
            </summary>
            <param name="filePath">文件路径</param>
            <param name="allowedFileExtensions">允许的文件拓展名</param>
            <param name="maxFileSizeInBytes">允许的文件大小。以字节为单位</param>
        </member>
        <member name="T:Furion.HttpRemote.HttpLongPollingBuilder">
            <summary>
                HTTP 长轮询构建器
            </summary>
            <remarks>使用 <c>HttpRequestBuilder.LongPolling(httpMethod, requestUri, onDataReceived)</c> 静态方法创建。</remarks>
        </member>
        <member name="M:Furion.HttpRemote.HttpLongPollingBuilder.#ctor(System.Net.Http.HttpMethod,System.Uri)">
            <summary>
                <inheritdoc cref="T:Furion.HttpRemote.HttpLongPollingBuilder" />
            </summary>
            <param name="httpMethod">请求方式</param>
            <param name="requestUri">请求地址</param>
        </member>
        <member name="P:Furion.HttpRemote.HttpLongPollingBuilder.RequestUri">
            <summary>
                请求地址
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.HttpLongPollingBuilder.Method">
            <summary>
                请求方式
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.HttpLongPollingBuilder.Timeout">
            <summary>
                超时时间
            </summary>
            <remarks>可为单次请求设置超时时间。</remarks>
        </member>
        <member name="P:Furion.HttpRemote.HttpLongPollingBuilder.RetryInterval">
            <summary>
                轮询重试间隔
            </summary>
            <remarks>默认值为 2 秒。</remarks>
        </member>
        <member name="P:Furion.HttpRemote.HttpLongPollingBuilder.MaxRetries">
            <summary>
                最大重试次数
            </summary>
            <remarks>默认最大重试次数为 100。</remarks>
        </member>
        <member name="P:Furion.HttpRemote.HttpLongPollingBuilder.OnDataReceived">
            <summary>
                用于接收服务器返回 <c>200~299</c> 状态码的数据的操作
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.HttpLongPollingBuilder.OnError">
            <summary>
                用于接收服务器返回非 <c>200~299</c> 状态码的数据的操作
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.HttpLongPollingBuilder.OnEndOfStream">
            <summary>
                用于响应标头包含 <c>X-End-Of-Stream</c> 时触发的操作
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.HttpLongPollingBuilder.LongPollingEventHandlerType">
            <summary>
                实现 <see cref="T:Furion.HttpRemote.IHttpLongPollingEventHandler" /> 的类型
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.HttpLongPollingBuilder.SetRetryInterval(System.TimeSpan)">
            <summary>
                设置轮询重试间隔
            </summary>
            <param name="retryInterval">轮询重试间隔</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpLongPollingBuilder" />
            </returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Furion.HttpRemote.HttpLongPollingBuilder.SetMaxRetries(System.Int32)">
            <summary>
                设置最大重试次数
            </summary>
            <param name="maxRetries">最大重试次数</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpLongPollingBuilder" />
            </returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Furion.HttpRemote.HttpLongPollingBuilder.SetTimeout(System.TimeSpan)">
            <summary>
                设置超时时间
            </summary>
            <param name="timeout">超时时间</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpLongPollingBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpLongPollingBuilder.SetTimeout(System.Double)">
            <summary>
                设置超时时间
            </summary>
            <param name="timeoutMilliseconds">超时时间（毫秒）</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpLongPollingBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpLongPollingBuilder.SetOnDataReceived(System.Func{System.Net.Http.HttpResponseMessage,System.Threading.Tasks.Task})">
            <summary>
                设置在接收服务器返回 <c>200~299</c> 状态码的数据的操作
            </summary>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpLongPollingBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpLongPollingBuilder.SetOnError(System.Func{System.Net.Http.HttpResponseMessage,System.Threading.Tasks.Task})">
            <summary>
                设置在接收服务器返回非 <c>200~299</c> 状态码的数据的操作
            </summary>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpLongPollingBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpLongPollingBuilder.SetOnEndOfStream(System.Func{System.Net.Http.HttpResponseMessage,System.Threading.Tasks.Task})">
            <summary>
                设置在响应标头包含 <c>X-End-Of-Stream</c> 时触发的操作
            </summary>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpLongPollingBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpLongPollingBuilder.SetEventHandler(System.Type)">
            <summary>
                设置长轮询事件处理程序
            </summary>
            <param name="longPollingEventHandlerType">实现 <see cref="T:Furion.HttpRemote.IHttpLongPollingEventHandler" /> 接口的类型</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpLongPollingBuilder" />
            </returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Furion.HttpRemote.HttpLongPollingBuilder.SetEventHandler``1">
            <summary>
                设置长轮询事件处理程序
            </summary>
            <typeparam name="TLongPollingEventHandler">
                <see cref="T:Furion.HttpRemote.IHttpLongPollingEventHandler" />
            </typeparam>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpLongPollingBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpLongPollingBuilder.Build(Furion.HttpRemote.HttpRemoteOptions,System.Action{Furion.HttpRemote.HttpRequestBuilder})">
            <summary>
                构建 <see cref="T:Furion.HttpRemote.HttpRequestBuilder" /> 实例
            </summary>
            <param name="httpRemoteOptions">
                <see cref="T:Furion.HttpRemote.HttpRemoteOptions" />
            </param>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="T:Furion.HttpRemote.HttpMultipartFormDataBuilder">
            <summary>
                <see cref="T:System.Net.Http.MultipartFormDataContent" /> 构建器
            </summary>
        </member>
        <member name="F:Furion.HttpRemote.HttpMultipartFormDataBuilder._httpRequestBuilder">
            <inheritdoc cref="T:Furion.HttpRemote.HttpRequestBuilder" />
        </member>
        <member name="F:Furion.HttpRemote.HttpMultipartFormDataBuilder._partContents">
            <summary>
                <see cref="T:Furion.HttpRemote.MultipartFormDataItem" /> 集合
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.HttpMultipartFormDataBuilder.#ctor(Furion.HttpRemote.HttpRequestBuilder)">
            <summary>
                <inheritdoc cref="T:Furion.HttpRemote.HttpMultipartFormDataBuilder" />
            </summary>
            <param name="httpRequestBuilder">
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </param>
        </member>
        <member name="P:Furion.HttpRemote.HttpMultipartFormDataBuilder.Boundary">
            <summary>
                多部分表单内容的边界
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.HttpMultipartFormDataBuilder.OnPreAddContent">
            <summary>
                用于处理在添加 <see cref="T:System.Net.Http.HttpContent" /> 表单项内容时的操作
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.HttpMultipartFormDataBuilder.SetBoundary(System.String)">
            <summary>
                设置多部分表单内容的边界
            </summary>
            <param name="boundary">多部分表单内容的边界</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpMultipartFormDataBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpMultipartFormDataBuilder.SetOnPreAddContent(System.Action{System.Net.Http.HttpContent,System.String})">
            <summary>
                设置用于处理在添加 <see cref="T:System.Net.Http.HttpContent" /> 表单项内容时的操作
            </summary>
            <remarks>支持多次调用。</remarks>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpMultipartFormDataBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpMultipartFormDataBuilder.AddJson(System.Object,System.String,System.Text.Encoding)">
            <summary>
                添加 JSON 内容
            </summary>
            <param name="rawJson">JSON 字符串/原始对象</param>
            <param name="name">表单名称。该值不为空时作为表单的一项。否则将遍历对象类型的每一个公开属性作为表单的项。</param>
            <param name="contentEncoding">内容编码</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpMultipartFormDataBuilder" />
            </returns>
            <exception cref="T:System.Text.Json.JsonException"></exception>
        </member>
        <member name="M:Furion.HttpRemote.HttpMultipartFormDataBuilder.AddFormItem(System.Object,System.String,System.Text.Encoding)">
            <summary>
                添加单个表单项内容
            </summary>
            <param name="value">表单值</param>
            <param name="name">表单名称</param>
            <param name="contentEncoding">内容编码</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpMultipartFormDataBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpMultipartFormDataBuilder.AddHtml(System.String,System.String,System.Text.Encoding)">
            <summary>
                添加 HTML 内容
            </summary>
            <param name="htmlString">HTML 字符串</param>
            <param name="name">表单名称</param>
            <param name="contentEncoding">内容编码</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpMultipartFormDataBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpMultipartFormDataBuilder.AddXml(System.String,System.String,System.Text.Encoding)">
            <summary>
                添加 XML 内容
            </summary>
            <param name="xmlString">XML 字符串</param>
            <param name="name">表单名称</param>
            <param name="contentEncoding">内容编码</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpMultipartFormDataBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpMultipartFormDataBuilder.AddText(System.String,System.String,System.Text.Encoding)">
            <summary>
                添加文本内容
            </summary>
            <param name="text">文本</param>
            <param name="name">表单名称</param>
            <param name="contentEncoding">内容编码</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpMultipartFormDataBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpMultipartFormDataBuilder.AddObject(System.Object,System.String,System.String,System.Text.Encoding)">
            <summary>
                添加对象内容
            </summary>
            <param name="rawObject">原始对象</param>
            <param name="name">表单名称。该值不为空时作为表单的一项。否则将遍历对象类型的每一个公开属性作为表单的项。</param>
            <param name="contentType">内容类型</param>
            <param name="contentEncoding">内容编码</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpMultipartFormDataBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpMultipartFormDataBuilder.AddFileFromRemote(System.String,System.String,System.String,System.String,System.Text.Encoding)">
            <summary>
                从互联网 URL 中添加文件
            </summary>
            <remarks>文件大小限制在 <c>100MB</c> 以内。</remarks>
            <param name="url">互联网 URL 地址</param>
            <param name="name">表单名称</param>
            <param name="fileName">文件的名称</param>
            <param name="contentType">内容类型</param>
            <param name="contentEncoding">内容编码</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpMultipartFormDataBuilder" />
            </returns>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Furion.HttpRemote.HttpMultipartFormDataBuilder.AddFileFromBase64String(System.String,System.String,System.String,System.String,System.Text.Encoding)">
            <summary>
                从 Base64 字符串中添加文件
            </summary>
            <remarks>文件大小限制在 <c>100MB</c> 以内。</remarks>
            <param name="base64String">Base64 字符串</param>
            <param name="name">表单名称</param>
            <param name="fileName">文件的名称</param>
            <param name="contentType">内容类型</param>
            <param name="contentEncoding">内容编码</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpMultipartFormDataBuilder" />
            </returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Furion.HttpRemote.HttpMultipartFormDataBuilder.AddFileAsStream(System.String,System.String,System.String,System.String,System.Text.Encoding)">
            <summary>
                从本地路径中添加文件
            </summary>
            <param name="filePath">文件路径</param>
            <param name="name">表单名称</param>
            <param name="fileName">文件的名称</param>
            <param name="contentType">内容类型</param>
            <param name="contentEncoding">内容编码</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpMultipartFormDataBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpMultipartFormDataBuilder.AddFileWithProgressAsStream(System.String,System.Threading.Channels.Channel{Furion.HttpRemote.FileTransferProgress},System.String,System.String,System.String,System.Text.Encoding)">
            <summary>
                从本地路径中添加文件（带文件传输进度）
            </summary>
            <param name="filePath">文件路径</param>
            <param name="progressChannel">文件传输进度信息的通道</param>
            <param name="name">表单名称</param>
            <param name="fileName">文件的名称</param>
            <param name="contentType">内容类型</param>
            <param name="contentEncoding">内容编码</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpMultipartFormDataBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpMultipartFormDataBuilder.AddFileAsByteArray(System.String,System.String,System.String,System.String,System.Text.Encoding)">
            <summary>
                从本地路径中添加文件
            </summary>
            <param name="filePath">文件路径</param>
            <param name="name">表单名称</param>
            <param name="fileName">文件的名称</param>
            <param name="contentType">内容类型</param>
            <param name="contentEncoding">内容编码</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpMultipartFormDataBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpMultipartFormDataBuilder.AddFile(Furion.HttpRemote.MultipartFile)">
            <summary>
                添加文件
            </summary>
            <remarks>使用 <c>MultipartFile.CreateFrom[Source]</c> 静态方法创建。</remarks>
            <param name="multipartFile">
                <see cref="T:Furion.HttpRemote.MultipartFile" />
            </param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpMultipartFormDataBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpMultipartFormDataBuilder.AddStream(System.IO.Stream,System.String,System.String,System.String,System.Text.Encoding)">
            <summary>
                添加流
            </summary>
            <param name="stream">
                <see cref="T:System.IO.Stream" />
            </param>
            <param name="name">表单名称</param>
            <param name="fileName">文件的名称</param>
            <param name="contentType">内容类型</param>
            <param name="contentEncoding">内容编码</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpMultipartFormDataBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpMultipartFormDataBuilder.AddByteArray(System.Byte[],System.String,System.String,System.String,System.Text.Encoding)">
            <summary>
                添加字节数组
            </summary>
            <param name="byteArray">字节数组</param>
            <param name="name">表单名称</param>
            <param name="fileName">文件的名称</param>
            <param name="contentType">内容类型</param>
            <param name="contentEncoding">内容编码</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpMultipartFormDataBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpMultipartFormDataBuilder.AddFormUrlEncoded(System.Object,System.String,System.Text.Encoding,System.Boolean)">
            <summary>
                添加 URL 编码表单
            </summary>
            <param name="rawObject">原始对象</param>
            <param name="name">表单名称</param>
            <param name="contentEncoding">内容编码</param>
            <param name="useStringContent">
                是否使用 <see cref="T:System.Net.Http.StringContent" /> 构建
                <see cref="T:System.Net.Http.FormUrlEncodedContent" />。默认 <c>false</c>。
            </param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpMultipartFormDataBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpMultipartFormDataBuilder.AddMultipartFormData(System.Object,System.String,System.Text.Encoding)">
            <summary>
                添加多部分表单内容
            </summary>
            <param name="rawObject">原始对象</param>
            <param name="name">表单名称</param>
            <param name="contentEncoding">内容编码</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpMultipartFormDataBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpMultipartFormDataBuilder.Add(System.Net.Http.HttpContent,System.String,System.String,System.Text.Encoding)">
            <summary>
                添加 <see cref="T:System.Net.Http.HttpContent" />
            </summary>
            <param name="httpContent">
                <see cref="T:System.Net.Http.HttpContent" />
            </param>
            <param name="name">表单名称</param>
            <param name="contentType">内容类型</param>
            <param name="contentEncoding">内容编码</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpMultipartFormDataBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpMultipartFormDataBuilder.Build(Furion.HttpRemote.HttpRemoteOptions,Furion.HttpRemote.IHttpContentProcessorFactory,Furion.HttpRemote.IHttpContentProcessor[])">
            <summary>
                构建 <see cref="T:System.Net.Http.MultipartFormDataContent" /> 实例
            </summary>
            <param name="httpRemoteOptions">
                <see cref="T:Furion.HttpRemote.HttpRemoteOptions" />
            </param>
            <param name="httpContentProcessorFactory">
                <see cref="T:Furion.HttpRemote.IHttpContentProcessorFactory" />
            </param>
            <param name="processors"><see cref="T:Furion.HttpRemote.IHttpContentProcessor" /> 集合</param>
            <returns>
                <see cref="T:System.Net.Http.MultipartFormDataContent" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpMultipartFormDataBuilder.BuildHttpContent(Furion.HttpRemote.MultipartFormDataItem,Furion.HttpRemote.IHttpContentProcessorFactory,Furion.HttpRemote.IHttpContentProcessor[])">
            <summary>
                构建 <see cref="T:System.Net.Http.HttpContent" /> 实例
            </summary>
            <param name="multipartFormDataItem">
                <see cref="T:Furion.HttpRemote.MultipartFormDataItem" />
            </param>
            <param name="httpContentProcessorFactory">
                <see cref="T:Furion.HttpRemote.IHttpContentProcessorFactory" />
            </param>
            <param name="processors"><see cref="T:Furion.HttpRemote.IHttpContentProcessor" /> 集合</param>
            <returns>
                <see cref="T:System.Net.Http.HttpContent" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpMultipartFormDataBuilder.ParseContentType(System.String,System.Text.Encoding,System.Text.Encoding@)">
            <summary>
                解析内容类型字符串
            </summary>
            <param name="contentType">内容类型</param>
            <param name="contentEncoding">内容编码</param>
            <param name="encoding">内容编码</param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="T:Furion.HttpRemote.HttpRemoteBuilder">
            <summary>
                HTTP 远程请求构建器
            </summary>
        </member>
        <member name="F:Furion.HttpRemote.HttpRemoteBuilder._httpContentConverterProviders">
            <summary>
                <see cref="T:Furion.HttpRemote.IHttpContentConverter" /> 集合
            </summary>
        </member>
        <member name="F:Furion.HttpRemote.HttpRemoteBuilder._httpContentProcessorProviders">
            <summary>
                <see cref="T:Furion.HttpRemote.IHttpContentProcessor" /> 集合
            </summary>
        </member>
        <member name="F:Furion.HttpRemote.HttpRemoteBuilder._httpDeclarativeExtractors">
            <summary>
                <see cref="T:Furion.HttpRemote.IHttpDeclarativeExtractor" /> 集合
            </summary>
        </member>
        <member name="F:Furion.HttpRemote.HttpRemoteBuilder._httpDeclarativeTypes">
            <summary>
                <see cref="T:Furion.HttpRemote.IHttpDeclarative" /> 类型集合
            </summary>
        </member>
        <member name="F:Furion.HttpRemote.HttpRemoteBuilder._objectContentConverterFactoryType">
            <summary>
                <see cref="T:Furion.HttpRemote.IObjectContentConverterFactory" /> 实现类型
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteBuilder.AddHttpContentProcessors(System.Func{System.Collections.Generic.IEnumerable{Furion.HttpRemote.IHttpContentProcessor}})">
            <summary>
                添加 <see cref="T:Furion.HttpRemote.IHttpContentProcessor" /> 请求内容处理器
            </summary>
            <remarks>支持多次调用。</remarks>
            <param name="configure"><see cref="T:Furion.HttpRemote.IHttpContentProcessor" /> 实例提供器</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRemoteBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteBuilder.AddHttpContentConverters(System.Func{System.Collections.Generic.IEnumerable{Furion.HttpRemote.IHttpContentConverter}})">
            <summary>
                添加 <see cref="T:Furion.HttpRemote.IHttpContentConverter" /> 响应内容转换器
            </summary>
            <remarks>支持多次调用。</remarks>
            <param name="configure"><see cref="T:Furion.HttpRemote.IHttpContentConverter" /> 实例提供器</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRemoteBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteBuilder.UseObjectContentConverterFactory``1">
            <summary>
                设置 <see cref="T:Furion.HttpRemote.IObjectContentConverterFactory" /> 对象内容转换器工厂
            </summary>
            <typeparam name="TFactory">
                <see cref="T:Furion.HttpRemote.IObjectContentConverterFactory" />
            </typeparam>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRemoteBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteBuilder.UseObjectContentConverterFactory(System.Type)">
            <summary>
                设置 <see cref="T:Furion.HttpRemote.IObjectContentConverterFactory" /> 对象内容转换器工厂
            </summary>
            <param name="factoryType">
                <see cref="T:Furion.HttpRemote.IObjectContentConverterFactory" />
            </param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRemoteBuilder" />
            </returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteBuilder.AddHttpDeclarative``1">
            <summary>
                添加 HTTP 声明式服务
            </summary>
            <typeparam name="TDeclarative">
                <see cref="T:Furion.HttpRemote.IHttpDeclarative" />
            </typeparam>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRemoteBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteBuilder.AddHttpDeclarative(System.Type)">
            <summary>
                添加 HTTP 声明式服务
            </summary>
            <param name="declarativeType">
                <see cref="T:Furion.HttpRemote.IHttpDeclarative" />
            </param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRemoteBuilder" />
            </returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteBuilder.AddHttpDeclaratives(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
                添加 HTTP 声明式服务
            </summary>
            <param name="declarativeTypes">
                <see cref="T:Furion.HttpRemote.IHttpDeclarative" /> 集合
            </param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRemoteBuilder" />
            </returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteBuilder.AddHttpDeclarativeFromAssemblies(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
                扫描程序集并添加 HTTP 声明式服务
            </summary>
            <param name="assemblies"><see cref="T:System.Reflection.Assembly" /> 集合</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRemoteBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteBuilder.AddHttpDeclarativeExtractors(System.Func{System.Collections.Generic.IEnumerable{Furion.HttpRemote.IHttpDeclarativeExtractor}})">
            <summary>
                添加 HTTP 声明式 <see cref="T:Furion.HttpRemote.IHttpDeclarativeExtractor" /> 提取器
            </summary>
            <remarks>支持多次调用。</remarks>
            <param name="configure"><see cref="T:Furion.HttpRemote.IHttpDeclarativeExtractor" /> 实例提供器</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRemoteBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteBuilder.AddHttpDeclarativeExtractorFromAssemblies(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
                扫描程序集并添加 HTTP 声明式 <see cref="T:Furion.HttpRemote.IHttpDeclarativeExtractor" /> 提取器
            </summary>
            <remarks>支持多次调用。</remarks>
            <param name="assemblies"><see cref="T:System.Reflection.Assembly" /> 集合</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRemoteBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteBuilder.Build(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
                构建模块服务
            </summary>
            <param name="services">
                <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
            </param>
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteBuilder.BuildHttpDeclarativeServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
                构建 HTTP 声明式远程请求服务
            </summary>
            <param name="services">
                <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
            </param>
        </member>
        <member name="T:Furion.HttpRemote.HttpRequestBuilder">
            <summary>
                <see cref="T:System.Net.Http.HttpRequestMessage" /> 构建器
            </summary>
            <summary>
                <see cref="T:System.Net.Http.HttpRequestMessage" /> 构建器
            </summary>
            <summary>
                <see cref="T:System.Net.Http.HttpRequestMessage" /> 构建器
            </summary>
            <summary>
                <see cref="T:System.Net.Http.HttpRequestMessage" /> 构建器
            </summary>
        </member>
        <member name="F:Furion.HttpRemote.HttpRequestBuilder._stringContentForFormUrlEncodedContentProcessorInstance">
            <summary>
                <see cref="T:Furion.HttpRemote.StringContentForFormUrlEncodedContentProcessor" /> 实例
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.#ctor(System.Net.Http.HttpMethod,System.Uri)">
            <summary>
                <inheritdoc cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </summary>
            <param name="httpMethod">请求方式</param>
            <param name="requestUri">请求地址</param>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.Build(Furion.HttpRemote.HttpRemoteOptions,Furion.HttpRemote.IHttpContentProcessorFactory,System.Uri)">
            <summary>
                构建 <see cref="T:System.Net.Http.HttpRequestMessage" /> 实例
            </summary>
            <param name="httpRemoteOptions">
                <see cref="T:Furion.HttpRemote.HttpRemoteOptions" />
            </param>
            <param name="httpContentProcessorFactory">
                <see cref="T:Furion.HttpRemote.IHttpContentProcessorFactory" />
            </param>
            <param name="baseUri">基地址</param>
            <returns>
                <see cref="T:System.Net.Http.HttpRequestMessage" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.BuildFinalRequestUri(System.Uri)">
            <summary>
                构建最终的请求地址
            </summary>
            <param name="baseUri">基地址</param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.AppendFragment(System.UriBuilder)">
            <summary>
                追加片段标识符
            </summary>
            <param name="uriBuilder">
                <see cref="T:System.UriBuilder" />
            </param>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.AppendQueryParameters(System.UriBuilder)">
            <summary>
                追加查询参数
            </summary>
            <param name="uriBuilder">
                <see cref="T:System.UriBuilder" />
            </param>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.ReplacePathPlaceholders(System.String)">
            <summary>
                替换路径参数
            </summary>
            <param name="originalUri">源请求地址</param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.AppendHeaders(System.Net.Http.HttpRequestMessage)">
            <summary>
                追加请求标头
            </summary>
            <param name="httpRequestMessage">
                <see cref="T:System.Net.Http.HttpRequestMessage" />
            </param>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.AppendAuthentication(System.Net.Http.HttpRequestMessage)">
            <summary>
                添加身份认证
            </summary>
            <param name="httpRequestMessage">
                <see cref="T:System.Net.Http.HttpRequestMessage" />
            </param>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.RemoveHeaders(System.Net.Http.HttpRequestMessage)">
            <summary>
                移除请求标头
            </summary>
            <param name="httpRequestMessage">
                <see cref="T:System.Net.Http.HttpRequestMessage" />
            </param>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.EnablePerformanceOptimization(System.Net.Http.HttpRequestMessage)">
            <summary>
                启用性能优化
            </summary>
            <param name="httpRequestMessage">
                <see cref="T:System.Net.Http.HttpRequestMessage" />
            </param>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.AppendCookies(System.Net.Http.HttpRequestMessage)">
            <summary>
                追加 Cookies
            </summary>
            <param name="httpRequestMessage">
                <see cref="T:System.Net.Http.HttpRequestMessage" />
            </param>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.RemoveCookies(System.Net.Http.HttpRequestMessage)">
            <summary>
                移除 Cookies
            </summary>
            <param name="httpRequestMessage">
                <see cref="T:System.Net.Http.HttpRequestMessage" />
            </param>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.BuildAndSetContent(System.Net.Http.HttpRequestMessage,Furion.HttpRemote.IHttpContentProcessorFactory,Furion.HttpRemote.HttpRemoteOptions)">
            <summary>
                构建并设置指定的 <see cref="T:System.Net.Http.HttpRequestMessage" /> 请求消息的内容
            </summary>
            <param name="httpRequestMessage">
                <see cref="T:System.Net.Http.HttpRequestMessage" />
            </param>
            <param name="httpContentProcessorFactory">
                <see cref="T:Furion.HttpRemote.IHttpContentProcessorFactory" />
            </param>
            <param name="httpRemoteOptions">
                <see cref="T:Furion.HttpRemote.HttpRemoteOptions" />
            </param>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.AppendProperties(System.Net.Http.HttpRequestMessage)">
            <summary>
                追加 <see cref="T:System.Net.Http.HttpRequestMessage" /> 请求属性集合
            </summary>
            <param name="httpRequestMessage">
                <see cref="T:System.Net.Http.HttpRequestMessage" />
            </param>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.SetDefaultContentType(System.String)">
            <summary>
                设置默认的内容类型
            </summary>
            <param name="defaultContentType">默认请求内容类型</param>
        </member>
        <member name="F:Furion.HttpRemote.HttpRequestBuilder._lock">
            <summary>
                线程锁
            </summary>
            <remarks>用于保证 <see cref="M:Furion.HttpRemote.HttpRequestBuilder.AddStringContentForFormUrlEncodedContentProcessor" /> 方法调用是线程安全的。</remarks>
        </member>
        <member name="F:Furion.HttpRemote.HttpRequestBuilder._isAddedStringContentForFormUrlEncodedContentProcessor">
            <summary>
                表示是否已添加了 <see cref="T:Furion.HttpRemote.StringContentForFormUrlEncodedContentProcessor" /> 处理器
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.SetTraceIdentifier(System.String,System.Boolean)">
            <summary>
                设置跟踪标识
            </summary>
            <param name="traceIdentifier">设置跟踪标识</param>
            <param name="escape">是否转义字符串，默认 <c>false</c></param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.SetContentType(System.String)">
            <summary>
                设置内容类型
            </summary>
            <param name="contentType">内容类型</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.SetContentEncoding(System.Text.Encoding)">
            <summary>
                设置内容编码
            </summary>
            <param name="encoding">内容编码</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.SetContentEncoding(System.String)">
            <summary>
                设置内容编码
            </summary>
            <param name="encodingName">内容编码名</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.SetJsonContent(System.Object,System.Text.Encoding)">
            <summary>
                设置 JSON 内容
            </summary>
            <param name="rawJson">JSON 字符串/原始对象</param>
            <param name="contentEncoding">内容编码</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </returns>
            <exception cref="T:System.Text.Json.JsonException"></exception>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.SetHtmlContent(System.String,System.Text.Encoding)">
            <summary>
                设置 HTML 内容
            </summary>
            <param name="htmlString">HTML 字符串</param>
            <param name="contentEncoding">内容编码</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.SetXmlContent(System.String,System.Text.Encoding)">
            <summary>
                设置 XML 内容
            </summary>
            <param name="xmlString">XML 字符串</param>
            <param name="contentEncoding">内容编码</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.SetTextContent(System.String,System.Text.Encoding)">
            <summary>
                设置文本内容
            </summary>
            <param name="text">文本</param>
            <param name="contentEncoding">内容编码</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.SetRawStringContent(System.String,System.String,System.Text.Encoding)">
            <summary>
                设置原始字符串内容
            </summary>
            <remarks>字符串内容将被双引号包围并发送，格式如下：<c>"内容"</c>。</remarks>
            <param name="text">文本</param>
            <param name="contentType">内容类型</param>
            <param name="contentEncoding">内容编码</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.SetFormUrlEncodedContent(System.Object,System.Text.Encoding,System.Boolean)">
            <summary>
                设置 URL 编码表单内容
            </summary>
            <param name="rawObject">原始对象</param>
            <param name="contentEncoding">内容编码</param>
            <param name="useStringContent">
                是否使用 <see cref="T:System.Net.Http.StringContent" /> 构建
                <see cref="T:System.Net.Http.FormUrlEncodedContent" />。默认 <c>false</c>。
            </param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.SetContent(System.Object,System.String,System.Text.Encoding)">
            <summary>
                设置请求内容
            </summary>
            <param name="rawContent">原始请求内容</param>
            <param name="contentType">内容类型</param>
            <param name="contentEncoding">内容编码</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.SetMultipartContent(System.Action{Furion.HttpRemote.HttpMultipartFormDataBuilder})">
            <summary>
                设置多部分表单内容，请求类型为 <c>multipart/form-data</c>
            </summary>
            <remarks>
                该操作将强制覆盖 <see cref="M:Furion.HttpRemote.HttpRequestBuilder.SetContent(System.Object,System.String,System.Text.Encoding)" />、<see cref="M:Furion.HttpRemote.HttpRequestBuilder.SetContentEncoding(System.Text.Encoding)" /> 和
                <see cref="M:Furion.HttpRemote.HttpRequestBuilder.SetContentType(System.String)" /> 设置的内容。
            </remarks>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.SetMultipartContent(Furion.HttpRemote.HttpMultipartFormDataBuilder)">
            <summary>
                设置多部分表单内容，请求类型为 <c>multipart/form-data</c>
            </summary>
            <remarks>
                该操作将强制覆盖 <see cref="M:Furion.HttpRemote.HttpRequestBuilder.SetContent(System.Object,System.String,System.Text.Encoding)" />、<see cref="M:Furion.HttpRemote.HttpRequestBuilder.SetContentEncoding(System.Text.Encoding)" /> 和
                <see cref="M:Furion.HttpRemote.HttpRequestBuilder.SetContentType(System.String)" /> 设置的内容。
            </remarks>
            <param name="httpMultipartFormDataBuilder">
                <see cref="T:Furion.HttpRemote.HttpMultipartFormDataBuilder" />
            </param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.WithHeader(System.String,System.Object,System.Boolean,System.Globalization.CultureInfo,System.Collections.Generic.IEqualityComparer{System.String},System.Boolean)">
            <summary>
                设置请求标头
            </summary>
            <remarks>支持多次调用。</remarks>
            <param name="key">键</param>
            <param name="value">值</param>
            <param name="escape">是否转义字符串，默认 <c>false</c></param>
            <param name="culture">
                <see cref="T:System.Globalization.CultureInfo" />
            </param>
            <param name="comparer">
                <see cref="T:System.Collections.Generic.IEqualityComparer`1" />
            </param>
            <param name="replace">是否替换已存在的请求标头。默认值为 <c>false</c>。</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.WithHeaders(System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean,System.Globalization.CultureInfo,System.Collections.Generic.IEqualityComparer{System.String},System.Boolean)">
            <summary>
                设置请求标头
            </summary>
            <remarks>支持多次调用。</remarks>
            <param name="headers">请求标头集合</param>
            <param name="escape">是否转义字符串，默认 <c>false</c></param>
            <param name="culture">
                <see cref="T:System.Globalization.CultureInfo" />
            </param>
            <param name="comparer">
                <see cref="T:System.Collections.Generic.IEqualityComparer`1" />
            </param>
            <param name="replace">是否替换已存在的请求标头。默认值为 <c>false</c>。</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.WithHeaders(System.Object,System.Boolean,System.Globalization.CultureInfo,System.Collections.Generic.IEqualityComparer{System.String},System.Boolean)">
            <summary>
                设置请求标头
            </summary>
            <remarks>支持多次调用。</remarks>
            <param name="headerSource">请求标头源对象</param>
            <param name="escape">是否转义字符串，默认 <c>false</c></param>
            <param name="culture">
                <see cref="T:System.Globalization.CultureInfo" />
            </param>
            <param name="comparer">
                <see cref="T:System.Collections.Generic.IEqualityComparer`1" />
            </param>
            <param name="replace">是否替换已存在的请求标头。默认值为 <c>false</c>。</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.RemoveHeaders(System.String[])">
            <summary>
                设置需要从请求中移除的标头
            </summary>
            <remarks>支持多次调用。</remarks>
            <param name="headerNames">请求标头名集合</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.SetFragment(System.String,System.Boolean)">
            <summary>
                设置片段标识符
            </summary>
            <param name="fragment">片段标识符</param>
            <param name="escape">是否转义字符串，默认 <c>false</c></param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.SetTimeout(System.TimeSpan)">
            <summary>
                设置超时时间
            </summary>
            <param name="timeout">超时时间</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.SetTimeout(System.Double)">
            <summary>
                设置超时时间
            </summary>
            <param name="timeoutMilliseconds">超时时间（毫秒）</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.WithQueryParameter(System.String,System.Object,System.Boolean,System.Globalization.CultureInfo,System.Collections.Generic.IEqualityComparer{System.String},System.Boolean,System.Boolean)">
            <summary>
                设置查询参数
            </summary>
            <remarks>支持多次调用。</remarks>
            <param name="key">键</param>
            <param name="value">值</param>
            <param name="escape">是否转义字符串，默认 <c>false</c></param>
            <param name="culture">
                <see cref="T:System.Globalization.CultureInfo" />
            </param>
            <param name="comparer">
                <see cref="T:System.Collections.Generic.IEqualityComparer`1" />
            </param>
            <param name="replace">是否替换已存在的查询参数。默认值为 <c>false</c>。</param>
            <param name="ignoreNullValues">是否忽略空值。默认值为 <c>false</c>。</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.WithQueryParameters(System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean,System.Globalization.CultureInfo,System.Collections.Generic.IEqualityComparer{System.String},System.Boolean,System.Boolean)">
            <summary>
                设置查询参数
            </summary>
            <remarks>支持多次调用。</remarks>
            <param name="parameters">查询参数集合</param>
            <param name="escape">是否转义字符串，默认 <c>false</c></param>
            <param name="culture">
                <see cref="T:System.Globalization.CultureInfo" />
            </param>
            <param name="comparer">
                <see cref="T:System.Collections.Generic.IEqualityComparer`1" />
            </param>
            <param name="replace">是否替换已存在的查询参数。默认值为 <c>false</c>。</param>
            <param name="ignoreNullValues">是否忽略空值。默认值为 <c>false</c>。</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.WithQueryParameters(System.Object,System.String,System.Boolean,System.Globalization.CultureInfo,System.Collections.Generic.IEqualityComparer{System.String},System.Boolean,System.Boolean)">
            <summary>
                设置查询参数
            </summary>
            <remarks>支持多次调用。</remarks>
            <param name="parameterSource">查询参数集合</param>
            <param name="prefix">参数前缀。对于对象类型可生成如 <c>prefix.Name=furion</c> 与 <c>prefix.Age=30</c> 参数格式。</param>
            <param name="escape">是否转义字符串，默认 <c>false</c></param>
            <param name="culture">
                <see cref="T:System.Globalization.CultureInfo" />
            </param>
            <param name="comparer">
                <see cref="T:System.Collections.Generic.IEqualityComparer`1" />
            </param>
            <param name="replace">是否替换已存在的查询参数。默认值为 <c>false</c>。</param>
            <param name="ignoreNullValues">是否忽略空值。默认值为 <c>false</c>。</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.RemoveQueryParameters(System.String[])">
            <summary>
                设置需要从 URL 中移除的查询参数集合
            </summary>
            <remarks>支持多次调用。</remarks>
            <param name="parameterNames">查询参数键集合</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.WithPathParameter(System.String,System.Object,System.Boolean,System.Globalization.CultureInfo,System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
                设置路径参数
            </summary>
            <remarks>支持多次调用。</remarks>
            <param name="key">键</param>
            <param name="value">值</param>
            <param name="escape">是否转义字符串，默认 <c>false</c></param>
            <param name="culture">
                <see cref="T:System.Globalization.CultureInfo" />
            </param>
            <param name="comparer">
                <see cref="T:System.Collections.Generic.IEqualityComparer`1" />
            </param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.WithPathParameters(System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean,System.Globalization.CultureInfo,System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
                设置路径参数
            </summary>
            <remarks>支持多次调用。</remarks>
            <param name="parameters">路径参数集合</param>
            <param name="escape">是否转义字符串，默认 <c>false</c></param>
            <param name="culture">
                <see cref="T:System.Globalization.CultureInfo" />
            </param>
            <param name="comparer">
                <see cref="T:System.Collections.Generic.IEqualityComparer`1" />
            </param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.WithPathParameters(System.Object,System.String,System.Boolean,System.Globalization.CultureInfo,System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
                设置路径参数
            </summary>
            <remarks>支持多次调用。</remarks>
            <param name="parameterSource">路径参数源对象</param>
            <param name="prefix">模板字符串前缀。若该参数值不为空，则支持 <c>{prefix.Prop.SubProp}</c> 对象路径方式。</param>
            <param name="escape">是否转义字符串，默认 <c>false</c></param>
            <param name="culture">
                <see cref="T:System.Globalization.CultureInfo" />
            </param>
            <param name="comparer">
                <see cref="T:System.Collections.Generic.IEqualityComparer`1" />
            </param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.WithCookie(System.String,System.Object,System.Boolean,System.Globalization.CultureInfo,System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
                设置 Cookies
            </summary>
            <remarks>支持多次调用。</remarks>
            <param name="key">键</param>
            <param name="value">值</param>
            <param name="escape">是否转义字符串，默认 <c>false</c></param>
            <param name="culture">
                <see cref="T:System.Globalization.CultureInfo" />
            </param>
            <param name="comparer">
                <see cref="T:System.Collections.Generic.IEqualityComparer`1" />
            </param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.WithCookies(System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean,System.Globalization.CultureInfo,System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
                设置 Cookies
            </summary>
            <remarks>支持多次调用。</remarks>
            <param name="cookies">Cookies 集合</param>
            <param name="escape">是否转义字符串，默认 <c>false</c></param>
            <param name="culture">
                <see cref="T:System.Globalization.CultureInfo" />
            </param>
            <param name="comparer">
                <see cref="T:System.Collections.Generic.IEqualityComparer`1" />
            </param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.WithCookies(System.Object,System.Boolean,System.Globalization.CultureInfo,System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
                设置 Cookies
            </summary>
            <remarks>支持多次调用。</remarks>
            <param name="cookieSource">Cookie 参数源对象</param>
            <param name="escape">是否转义字符串，默认 <c>false</c></param>
            <param name="culture">
                <see cref="T:System.Globalization.CultureInfo" />
            </param>
            <param name="comparer">
                <see cref="T:System.Collections.Generic.IEqualityComparer`1" />
            </param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.RemoveCookies(System.String[])">
            <summary>
                需要从请求中移除的 Cookie 集合
            </summary>
            <remarks>支持多次调用。</remarks>
            <param name="cookieNames">Cookie 键集合</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.SetHttpClientName(System.String)">
            <summary>
                设置 <see cref="T:System.Net.Http.HttpClient" /> 实例的配置名称
            </summary>
            <param name="httpClientName"><see cref="T:System.Net.Http.HttpClient" /> 实例的配置名称</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.SetMaxResponseContentBufferSize(System.Int64)">
            <summary>
                设置响应内容最大缓存字节数
            </summary>
            <param name="maxResponseContentBufferSize">响应内容最大缓存字节数</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.SetHttpClientProvider(System.Func{System.ValueTuple{System.Net.Http.HttpClient,System.Action{System.Net.Http.HttpClient}}})">
            <summary>
                设置 <see cref="T:System.Net.Http.HttpClient" /> 实例提供器
            </summary>
            <param name="configure"><inheritdoc cref="T:System.Net.Http.HttpClient" /> 实例提供器</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.AddHttpContentProcessors(System.Func{System.Collections.Generic.IEnumerable{Furion.HttpRemote.IHttpContentProcessor}})">
            <summary>
                添加 <see cref="T:Furion.HttpRemote.IHttpContentProcessor" /> 请求内容处理器
            </summary>
            <remarks>支持多次调用。</remarks>
            <param name="configure"><see cref="T:Furion.HttpRemote.IHttpContentProcessor" /> 实例提供器</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.AddHttpContentConverters(System.Func{System.Collections.Generic.IEnumerable{Furion.HttpRemote.IHttpContentConverter}})">
            <summary>
                添加 <see cref="T:Furion.HttpRemote.IHttpContentConverter" /> 响应内容转换器
            </summary>
            <remarks>支持多次调用。</remarks>
            <param name="configure"><see cref="T:Furion.HttpRemote.IHttpContentConverter" /> 实例提供器</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.SetOnPreSetContent(System.Action{System.Net.Http.HttpContent})">
            <summary>
                设置用于处理在设置 <see cref="T:System.Net.Http.HttpRequestMessage" /> 的 <c>Content</c> 时的操作
            </summary>
            <remarks>支持多次调用。</remarks>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.SetOnPreSendRequest(System.Action{System.Net.Http.HttpRequestMessage})">
            <summary>
                设置在发送 HTTP 请求之前执行的操作
            </summary>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.SetOnPostReceiveResponse(System.Action{System.Net.Http.HttpResponseMessage})">
            <summary>
                设置在收到 HTTP 响应之后执行的操作
            </summary>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.SetOnRequestFailed(System.Action{System.Exception,System.Net.Http.HttpResponseMessage})">
            <summary>
                设置在发送 HTTP 请求发生异常时的操作
            </summary>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.EnsureSuccessStatusCode">
            <summary>
                如果 HTTP 响应的 IsSuccessStatusCode 属性是 <c>false</c>，则引发异常。
            </summary>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.EnsureSuccessStatusCode(System.Boolean)">
            <summary>
                设置是否如果 HTTP 响应的 IsSuccessStatusCode 属性是 <c>false</c>，则引发异常
            </summary>
            <param name="enabled">是否启用</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.AddBasicAuthentication(System.String,System.String)">
            <summary>
                设置 Basic 身份验证凭据请求授权标头
            </summary>
            <param name="username">用户名</param>
            <param name="password">密码</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.AddJwtBearerAuthentication(System.String)">
            <summary>
                设置 JWT (JSON Web Token) 身份验证凭据请求授权标头
            </summary>
            <param name="jwtToken">JWT 字符串</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.AddDigestAuthentication(System.String,System.String)">
            <summary>
                设置 Digest 摘要身份验证凭据请求授权标头
            </summary>
            <param name="username">用户名</param>
            <param name="password">密码</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.AddAuthentication(System.Net.Http.Headers.AuthenticationHeaderValue)">
            <summary>
                设置身份验证凭据请求授权标头
            </summary>
            <param name="authenticationHeader">
                <see cref="T:System.Net.Http.Headers.AuthenticationHeaderValue" />
            </param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.DisableCache">
            <summary>
                设置禁用 HTTP 缓存
            </summary>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.DisableCache(System.Boolean)">
            <summary>
                设置禁用 HTTP 缓存
            </summary>
            <param name="disabled">是否禁用</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.SetEventHandler(System.Type)">
            <summary>
                设置 HTTP 远程请求事件处理程序
            </summary>
            <param name="requestEventHandlerType">实现 <see cref="T:Furion.HttpRemote.IHttpRequestEventHandler" /> 接口的类型</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.SetEventHandler``1">
            <summary>
                设置 HTTP 远程请求事件处理程序
            </summary>
            <typeparam name="TRequestEventHandler">
                <see cref="T:Furion.HttpRemote.IHttpRequestEventHandler" />
            </typeparam>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.UseHttpClientPool">
            <summary>
                设置是否启用 <see cref="T:System.Net.Http.HttpClient" /> 的池化管理
            </summary>
            <remarks>
                <para>用于在并发请求中复用同一个 <see cref="T:System.Net.Http.HttpClient" /> 实例。</para>
                <para>注意：启用池化管理后，在请求完成之后需手动调用 <see cref="M:Furion.HttpRemote.HttpRequestBuilder.ReleaseResources" /> 方法释放资源。</para>
            </remarks>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.AddDisposable(System.IDisposable)">
            <summary>
                添加请求结束时需要释放的对象
            </summary>
            <remarks>支持多次调用。</remarks>
            <param name="disposable">
                <see cref="T:System.IDisposable" />
            </param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.ReleaseResources">
            <summary>
                释放资源集合
            </summary>
            <remarks>包含自定义 <see cref="T:System.Net.Http.HttpClient" /> 实例和其他可释放对象集合。</remarks>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.SimulateBrowser(System.Boolean)">
            <summary>
                设置模拟浏览器环境
            </summary>
            <remarks>设置此配置后，将在单次请求标头中添加主流浏览器的 <c>User-Agent</c> 值。</remarks>
            <param name="simulateMobile">是否模拟移动端，默认值为：<c>false</c>（即模拟桌面端）。</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.WithStatusCodeHandler(System.Object,System.Func{System.Net.Http.HttpResponseMessage,System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>
                添加状态码处理程序
            </summary>
            <remarks>支持多次调用。</remarks>
            <param name="statusCode">HTTP 状态码</param>
            <param name="handler">自定义处理程序</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.WithAnyStatusCodeHandler(System.Func{System.Net.Http.HttpResponseMessage,System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>
                添加任何状态码处理程序
            </summary>
            <remarks>支持多次调用。</remarks>
            <param name="handler">自定义处理程序</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.WithStatusCodeHandler(System.Collections.Generic.IEnumerable{System.Object},System.Func{System.Net.Http.HttpResponseMessage,System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>
                添加状态码处理程序
            </summary>
            <remarks>支持多次调用。</remarks>
            <param name="statusCodes">HTTP 状态码集合</param>
            <param name="handler">自定义处理程序</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.Profiler">
            <summary>
                设置是否启用请求分析工具
            </summary>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.Profiler(System.Boolean)">
            <summary>
                设置是否启用请求分析工具
            </summary>
            <param name="enabled">是否启用</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.AcceptLanguage(System.String)">
            <summary>
                设置客户端所偏好的自然语言和区域设置
            </summary>
            <remarks>设置此配置后，将在单次请求标头中添加 <c>Accept-Language</c> 值。</remarks>
            <param name="language">自然语言和区域设置</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.WithProperty(System.String,System.Object)">
            <summary>
                设置 <see cref="T:System.Net.Http.HttpRequestMessage" /> 请求属性
            </summary>
            <remarks>支持多次调用。</remarks>
            <param name="key">键</param>
            <param name="value">值</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.WithProperties(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
                设置 <see cref="T:System.Net.Http.HttpRequestMessage" /> 请求属性集合
            </summary>
            <remarks>支持多次调用。</remarks>
            <param name="properties">请求的属性集合</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.WithProperties(System.Object)">
            <summary>
                设置 <see cref="T:System.Net.Http.HttpRequestMessage" /> 请求属性集合
            </summary>
            <remarks>支持多次调用。</remarks>
            <param name="propertySource"><see cref="T:System.Net.Http.HttpRequestMessage" /> 请求的属性源对象</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.PerformanceOptimization">
            <summary>
                设置是否启用性能优化
            </summary>
            <remarks>当需要返回 <see cref="T:System.IO.Stream" /> 内容或进行 <c>HttpContext</c> 网页转发时，请勿启用此配置，因为流会因压缩而变得不可读，同时该配置也不适用于网页转发的场景。</remarks>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.PerformanceOptimization(System.Boolean)">
            <summary>
                设置是否启用性能优化
            </summary>
            <remarks>当需要返回 <see cref="T:System.IO.Stream" /> 内容或进行 <c>HttpContext</c> 网页转发时，请勿启用此配置，因为流会因压缩而变得不可读，同时该配置也不适用于网页转发的场景。</remarks>
            <param name="enabled">是否启用</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.AutoSetHostHeader">
            <summary>
                设置是否自动设置 <c>Host</c> 标头
            </summary>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.AutoSetHostHeader(System.Boolean)">
            <summary>
                设置是否自动设置 <c>Host</c> 标头
            </summary>
            <param name="enabled">是否启用</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.ReleaseDisposables">
            <summary>
                释放可释放的对象集合
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.AddStringContentForFormUrlEncodedContentProcessor">
            <summary>
                添加 <see cref="T:Furion.HttpRemote.StringContentForFormUrlEncodedContentProcessor" /> 处理器
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.HttpRequestBuilder.RequestUri">
            <summary>
                请求地址
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.HttpRequestBuilder.Method">
            <summary>
                请求方式
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.HttpRequestBuilder.TraceIdentifier">
            <summary>
                跟踪标识
            </summary>
            <remarks>
                <para>可为每个请求指定唯一标识符，用于请求的跟踪和调试。</para>
                <para>唯一标识符将在 <see cref="T:System.Net.Http.HttpRequestMessage" /> 类型实例的 <c>Headers</c> 属性中通过 <c>X-Trace-ID</c> 作为键指定。</para>
            </remarks>
        </member>
        <member name="P:Furion.HttpRemote.HttpRequestBuilder.ContentType">
            <summary>
                内容类型
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.HttpRequestBuilder.ContentEncoding">
            <summary>
                内容编码
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.HttpRequestBuilder.RawContent">
            <summary>
                原始请求内容
            </summary>
            <remarks>此属性值最终将转换为 <see cref="T:System.Net.Http.HttpContent" /> 类型实例。</remarks>
        </member>
        <member name="P:Furion.HttpRemote.HttpRequestBuilder.Headers">
            <summary>
                请求标头集合
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.HttpRequestBuilder.HeadersToRemove">
            <summary>
                需要从请求中移除的标头集合
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.HttpRequestBuilder.Fragment">
            <summary>
                片段标识符
            </summary>
            <remarks>请求地址中的 <c>#</c> 符号后面的部分。</remarks>
        </member>
        <member name="P:Furion.HttpRemote.HttpRequestBuilder.Timeout">
            <summary>
                超时时间
            </summary>
            <remarks>可为单次请求设置超时时间。</remarks>
        </member>
        <member name="P:Furion.HttpRemote.HttpRequestBuilder.QueryParameters">
            <summary>
                查询参数集合
            </summary>
            <remarks>请求地址中位于 <c>?</c> 符号之后且 <c>#</c> 符号之前的部分。</remarks>
        </member>
        <member name="P:Furion.HttpRemote.HttpRequestBuilder.QueryParametersToRemove">
            <summary>
                需要从 URL 中移除的查询参数集合
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.HttpRequestBuilder.PathParameters">
            <summary>
                路径参数集合
            </summary>
            <remarks>用于替换请求地址中符合 <c>\{\s*(\w+\s*(\.\s*\w+\s*)*)\s*\}</c> 正则表达式匹配的数据。</remarks>
        </member>
        <member name="P:Furion.HttpRemote.HttpRequestBuilder.ObjectPathParameters">
            <summary>
                路径参数集合
            </summary>
            <remarks>支持自定义类类型。用于替换请求地址中符合 <c>\{\s*(\w+\s*(\.\s*\w+\s*)*)\s*\}</c> 正则表达式匹配的数据。</remarks>
        </member>
        <member name="P:Furion.HttpRemote.HttpRequestBuilder.Cookies">
            <summary>
                Cookies 集合
            </summary>
            <remarks>
                <para>可为单次请求设置 Cookies。</para>
                <para>Cookies 将在 <see cref="T:System.Net.Http.HttpRequestMessage" /> 类型实例的 <c>Headers</c> 属性中通过 <c>Cookie</c> 作为键指定。</para>
                <para>使用该方式不会自动处理服务器返回的 <c>Set-Cookie</c> 头。</para>
            </remarks>
        </member>
        <member name="P:Furion.HttpRemote.HttpRequestBuilder.CookiesToRemove">
            <summary>
                需要从请求中移除的 Cookie 集合
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.HttpRequestBuilder.HttpClientName">
            <summary>
                <see cref="T:System.Net.Http.HttpClient" /> 实例的配置名称
            </summary>
            <remarks>
                <para>此属性用于指定 <see cref="T:System.Net.Http.IHttpClientFactory" /> 创建 <see cref="T:System.Net.Http.HttpClient" /> 实例时传递的名称。</para>
                <para>该名称用于标识在服务容器中与特定 <see cref="T:System.Net.Http.HttpClient" /> 实例相关的配置。</para>
            </remarks>
        </member>
        <member name="P:Furion.HttpRemote.HttpRequestBuilder.MaxResponseContentBufferSize">
            <summary>
                响应内容最大缓存字节数
            </summary>
            <remarks>可为单次请求设置最大缓存字节数。</remarks>
        </member>
        <member name="P:Furion.HttpRemote.HttpRequestBuilder.HttpClientProvider">
            <summary>
                <see cref="T:System.Net.Http.HttpClient" /> 实例提供器
            </summary>
            <value>
                <para>返回一个包含 <see cref="T:System.Net.Http.HttpClient" /> 实例及其释放方法的委托。</para>
                <para>释放方法的委托用于在不再需要 <see cref="T:System.Net.Http.HttpClient" /> 实例时释放资源。</para>
            </value>
        </member>
        <member name="P:Furion.HttpRemote.HttpRequestBuilder.HttpContentProcessorProviders">
            <summary>
                <see cref="T:Furion.HttpRemote.IHttpContentProcessor" /> 集合提供器
            </summary>
            <value>返回多个包含实现 <see cref="T:Furion.HttpRemote.IHttpContentProcessor" /> 集合的集合。</value>
        </member>
        <member name="P:Furion.HttpRemote.HttpRequestBuilder.HttpContentConverterProviders">
            <summary>
                <see cref="T:Furion.HttpRemote.IHttpContentConverter" /> 集合提供器
            </summary>
            <value>返回多个包含实现 <see cref="T:Furion.HttpRemote.IHttpContentConverter" /> 集合的集合。</value>
        </member>
        <member name="P:Furion.HttpRemote.HttpRequestBuilder.OnPreSetContent">
            <summary>
                用于处理在设置 <see cref="T:System.Net.Http.HttpRequestMessage" /> 的请求消息的内容时的操作
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.HttpRequestBuilder.OnPreSendRequest">
            <summary>
                用于处理在发送 HTTP 请求之前的操作
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.HttpRequestBuilder.OnPostReceiveResponse">
            <summary>
                用于处理在收到 HTTP 响应之后的操作
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.HttpRequestBuilder.OnRequestFailed">
            <summary>
                用于处理在发送 HTTP 请求发生异常时的操作
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.HttpRequestBuilder.AuthenticationHeader">
            <summary>
                身份验证凭据请求授权标头
            </summary>
            <remarks>可为单次请求设置身份验证凭据请求授权标头。</remarks>
        </member>
        <member name="P:Furion.HttpRemote.HttpRequestBuilder.Properties">
            <summary>
                <see cref="T:System.Net.Http.HttpRequestMessage" /> 请求属性集合
            </summary>
            <remarks>用于添加 <see cref="T:System.Net.Http.HttpRequestMessage" /> 请求属性。该值将合并到 <c>HttpRequestMessage.Options</c> 属性中。</remarks>
        </member>
        <member name="P:Furion.HttpRemote.HttpRequestBuilder.MultipartFormDataBuilder">
            <summary>
                <inheritdoc cref="T:Furion.HttpRemote.HttpMultipartFormDataBuilder" />
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.HttpRequestBuilder.EnsureSuccessStatusCodeEnabled">
            <summary>
                如果 HTTP 响应的 <c>IsSuccessStatusCode</c> 属性是 <c>false</c>，则引发异常。
            </summary>
            <remarks>默认值为 <c>false</c>。</remarks>
        </member>
        <member name="P:Furion.HttpRemote.HttpRequestBuilder.DisableCacheEnabled">
            <summary>
                是否禁用 HTTP 缓存
            </summary>
            <remarks>可为单次请求设置禁用 HTTP 缓存。</remarks>
        </member>
        <member name="P:Furion.HttpRemote.HttpRequestBuilder.RequestEventHandlerType">
            <summary>
                实现 <see cref="T:Furion.HttpRemote.IHttpRequestEventHandler" /> 的类型
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.HttpRequestBuilder.Disposables">
            <summary>
                用于请求结束时需要释放的对象集合
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.HttpRequestBuilder.HttpClientPooling">
            <summary>
                <see cref="T:System.Net.Http.HttpClient" /> 实例管理器
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.HttpRequestBuilder.HttpClientPoolingEnabled">
            <summary>
                是否启用 <see cref="T:System.Net.Http.HttpClient" /> 的池化管理
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.HttpRequestBuilder.ProfilerEnabled">
            <summary>
                是否启用请求分析工具
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.HttpRequestBuilder.PerformanceOptimizationEnabled">
            <summary>
                是否启用性能优化
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.HttpRequestBuilder.AutoSetHostHeaderEnabled">
            <summary>
                是否自动设置 <c>Host</c> 标头
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.HttpRequestBuilder.__Disabled_Profiler__">
            <summary>
                表示禁用请求分析工具标识
            </summary>
            <remarks>用于禁用全局请求分析工具。</remarks>
        </member>
        <member name="P:Furion.HttpRemote.HttpRequestBuilder.StatusCodeHandlers">
            <summary>
                状态码处理程序
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.Get(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder})">
            <summary>
                创建 <c>GET</c> 请求的 <see cref="T:Furion.HttpRemote.HttpRequestBuilder" /> 构建器
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.Get(System.Uri,System.Action{Furion.HttpRemote.HttpRequestBuilder})">
            <summary>
                创建 <c>GET</c> 请求的 <see cref="T:Furion.HttpRemote.HttpRequestBuilder" /> 构建器
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.Put(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder})">
            <summary>
                创建 <c>PUT</c> 请求的 <see cref="T:Furion.HttpRemote.HttpRequestBuilder" /> 构建器
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.Put(System.Uri,System.Action{Furion.HttpRemote.HttpRequestBuilder})">
            <summary>
                创建 <c>PUT</c> 请求的 <see cref="T:Furion.HttpRemote.HttpRequestBuilder" /> 构建器
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.Post(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder})">
            <summary>
                创建 <c>POST</c> 请求的 <see cref="T:Furion.HttpRemote.HttpRequestBuilder" /> 构建器
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.Post(System.Uri,System.Action{Furion.HttpRemote.HttpRequestBuilder})">
            <summary>
                创建 <c>POST</c> 请求的 <see cref="T:Furion.HttpRemote.HttpRequestBuilder" /> 构建器
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.Delete(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder})">
            <summary>
                创建 <c>DELETE</c> 请求的 <see cref="T:Furion.HttpRemote.HttpRequestBuilder" /> 构建器
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.Delete(System.Uri,System.Action{Furion.HttpRemote.HttpRequestBuilder})">
            <summary>
                创建 <c>DELETE</c> 请求的 <see cref="T:Furion.HttpRemote.HttpRequestBuilder" /> 构建器
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.Head(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder})">
            <summary>
                创建 <c>HEAD</c> 请求的 <see cref="T:Furion.HttpRemote.HttpRequestBuilder" /> 构建器
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.Head(System.Uri,System.Action{Furion.HttpRemote.HttpRequestBuilder})">
            <summary>
                创建 <c>HEAD</c> 请求的 <see cref="T:Furion.HttpRemote.HttpRequestBuilder" /> 构建器
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.Options(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder})">
            <summary>
                创建 <c>OPTIONS</c> 请求的 <see cref="T:Furion.HttpRemote.HttpRequestBuilder" /> 构建器
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.Options(System.Uri,System.Action{Furion.HttpRemote.HttpRequestBuilder})">
            <summary>
                创建 <c>OPTIONS</c> 请求的 <see cref="T:Furion.HttpRemote.HttpRequestBuilder" /> 构建器
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.Trace(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder})">
            <summary>
                创建 <c>TRACE</c> 请求的 <see cref="T:Furion.HttpRemote.HttpRequestBuilder" /> 构建器
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.Trace(System.Uri,System.Action{Furion.HttpRemote.HttpRequestBuilder})">
            <summary>
                创建 <c>TRACE</c> 请求的 <see cref="T:Furion.HttpRemote.HttpRequestBuilder" /> 构建器
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.Patch(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder})">
            <summary>
                创建 <c>PATCH</c> 请求的 <see cref="T:Furion.HttpRemote.HttpRequestBuilder" /> 构建器
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.Patch(System.Uri,System.Action{Furion.HttpRemote.HttpRequestBuilder})">
            <summary>
                创建 <c>PATCH</c> 请求的 <see cref="T:Furion.HttpRemote.HttpRequestBuilder" /> 构建器
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.Create(System.Net.Http.HttpMethod,System.Uri)">
            <summary>
                创建 <see cref="T:Furion.HttpRemote.HttpRequestBuilder" /> 构建器
            </summary>
            <param name="httpMethod">请求方式</param>
            <param name="requestUri">请求地址</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.Create(System.Net.Http.HttpMethod,System.String)">
            <summary>
                创建 <see cref="T:Furion.HttpRemote.HttpRequestBuilder" /> 构建器
            </summary>
            <param name="httpMethod">请求方式</param>
            <param name="requestUri">请求地址</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.Create(System.String,System.String)">
            <summary>
                创建 <see cref="T:Furion.HttpRemote.HttpRequestBuilder" /> 构建器
            </summary>
            <param name="httpMethod">请求方式</param>
            <param name="requestUri">请求地址</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.Create(System.String,System.Uri)">
            <summary>
                创建 <see cref="T:Furion.HttpRemote.HttpRequestBuilder" /> 构建器
            </summary>
            <param name="httpMethod">请求方式</param>
            <param name="requestUri">请求地址</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.Create(System.Net.Http.HttpMethod,System.Uri,System.Action{Furion.HttpRemote.HttpRequestBuilder})">
            <summary>
                创建 <see cref="T:Furion.HttpRemote.HttpRequestBuilder" /> 构建器
            </summary>
            <param name="httpMethod">请求方式</param>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.Create(System.Net.Http.HttpMethod,System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder})">
            <summary>
                创建 <see cref="T:Furion.HttpRemote.HttpRequestBuilder" /> 构建器
            </summary>
            <param name="httpMethod">请求方式</param>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.Create(System.String,System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder})">
            <summary>
                创建 <see cref="T:Furion.HttpRemote.HttpRequestBuilder" /> 构建器
            </summary>
            <param name="httpMethod">请求方式</param>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.DownloadFile(System.Net.Http.HttpMethod,System.Uri,System.String,System.Func{Furion.HttpRemote.FileTransferProgress,System.Threading.Tasks.Task},Furion.HttpRemote.FileExistsBehavior,System.Action{Furion.HttpRemote.HttpFileDownloadBuilder})">
            <summary>
                创建 <see cref="T:Furion.HttpRemote.HttpFileDownloadBuilder" /> 构建器
            </summary>
            <param name="httpMethod">请求方式</param>
            <param name="requestUri">请求地址</param>
            <param name="destinationPath">文件保存的目标路径</param>
            <param name="onProgressChanged">用于传输进度发生变化时执行的委托</param>
            <param name="fileExistsBehavior">
                <see cref="T:Furion.HttpRemote.FileExistsBehavior" />
            </param>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpFileDownloadBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.DownloadFile(System.Uri,System.String,System.Func{Furion.HttpRemote.FileTransferProgress,System.Threading.Tasks.Task},Furion.HttpRemote.FileExistsBehavior,System.Action{Furion.HttpRemote.HttpFileDownloadBuilder})">
            <summary>
                创建 <see cref="T:Furion.HttpRemote.HttpFileDownloadBuilder" /> 构建器
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="destinationPath">文件保存的目标路径</param>
            <param name="onProgressChanged">用于传输进度发生变化时执行的委托</param>
            <param name="fileExistsBehavior">
                <see cref="T:Furion.HttpRemote.FileExistsBehavior" />
            </param>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpFileDownloadBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.DownloadFile(System.String,System.String,System.Func{Furion.HttpRemote.FileTransferProgress,System.Threading.Tasks.Task},Furion.HttpRemote.FileExistsBehavior,System.Action{Furion.HttpRemote.HttpFileDownloadBuilder})">
            <summary>
                创建 <see cref="T:Furion.HttpRemote.HttpFileDownloadBuilder" /> 构建器
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="destinationPath">文件保存的目标路径</param>
            <param name="onProgressChanged">用于传输进度发生变化时执行的委托</param>
            <param name="fileExistsBehavior">
                <see cref="T:Furion.HttpRemote.FileExistsBehavior" />
            </param>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpFileDownloadBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.UploadFile(System.Net.Http.HttpMethod,System.Uri,System.String,System.String,System.Func{Furion.HttpRemote.FileTransferProgress,System.Threading.Tasks.Task},System.String,System.Action{Furion.HttpRemote.HttpFileUploadBuilder})">
            <summary>
                创建 <see cref="T:Furion.HttpRemote.HttpFileUploadBuilder" /> 构建器
            </summary>
            <param name="httpMethod">请求方式</param>
            <param name="requestUri">请求地址</param>
            <param name="filePath">文件路径</param>
            <param name="name">表单名称；默认值为 <c>file</c>。</param>
            <param name="onProgressChanged">用于传输进度发生变化时执行的委托</param>
            <param name="fileName">文件的名称</param>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpFileUploadBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.UploadFile(System.Uri,System.String,System.String,System.Func{Furion.HttpRemote.FileTransferProgress,System.Threading.Tasks.Task},System.String,System.Action{Furion.HttpRemote.HttpFileUploadBuilder})">
            <summary>
                创建 <see cref="T:Furion.HttpRemote.HttpFileUploadBuilder" /> 构建器
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="filePath">文件路径</param>
            <param name="name">表单名称；默认值为 <c>file</c>。</param>
            <param name="onProgressChanged">用于传输进度发生变化时执行的委托</param>
            <param name="fileName">文件的名称</param>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpFileUploadBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.UploadFile(System.String,System.String,System.String,System.Func{Furion.HttpRemote.FileTransferProgress,System.Threading.Tasks.Task},System.String,System.Action{Furion.HttpRemote.HttpFileUploadBuilder})">
            <summary>
                创建 <see cref="T:Furion.HttpRemote.HttpFileUploadBuilder" /> 构建器
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="filePath">文件路径</param>
            <param name="name">表单名称；默认值为 <c>file</c>。</param>
            <param name="onProgressChanged">用于传输进度发生变化时执行的委托</param>
            <param name="fileName">文件的名称</param>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpFileUploadBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.ServerSentEvents(System.Uri,System.Func{Furion.HttpRemote.ServerSentEventsData,System.Threading.Tasks.Task},System.Action{Furion.HttpRemote.HttpServerSentEventsBuilder})">
            <summary>
                创建 <see cref="T:Furion.HttpRemote.HttpServerSentEventsBuilder" /> 构建器
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="onMessage">用于在从事件源接收到数据时的操作</param>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpServerSentEventsBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.ServerSentEvents(System.String,System.Func{Furion.HttpRemote.ServerSentEventsData,System.Threading.Tasks.Task},System.Action{Furion.HttpRemote.HttpServerSentEventsBuilder})">
            <summary>
                创建 <see cref="T:Furion.HttpRemote.HttpServerSentEventsBuilder" /> 构建器
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="onMessage">用于在从事件源接收到数据时的操作</param>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpServerSentEventsBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.StressTestHarness(System.Net.Http.HttpMethod,System.Uri,System.Int32,System.Action{Furion.HttpRemote.HttpStressTestHarnessBuilder})">
            <summary>
                创建 <see cref="T:Furion.HttpRemote.HttpStressTestHarnessBuilder" /> 构建器
            </summary>
            <param name="httpMethod">请求方式</param>
            <param name="requestUri">请求地址</param>
            <param name="numberOfRequests">并发请求数量，默认值为：100。</param>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpStressTestHarnessBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.StressTestHarness(System.Uri,System.Int32,System.Action{Furion.HttpRemote.HttpStressTestHarnessBuilder})">
            <summary>
                创建 <see cref="T:Furion.HttpRemote.HttpStressTestHarnessBuilder" /> 构建器
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="numberOfRequests">并发请求数量，默认值为：100。</param>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpStressTestHarnessBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.StressTestHarness(System.String,System.Int32,System.Action{Furion.HttpRemote.HttpStressTestHarnessBuilder})">
            <summary>
                创建 <see cref="T:Furion.HttpRemote.HttpStressTestHarnessBuilder" /> 构建器
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="numberOfRequests">并发请求数量，默认值为：100。</param>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpStressTestHarnessBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.LongPolling(System.Net.Http.HttpMethod,System.Uri,System.Func{System.Net.Http.HttpResponseMessage,System.Threading.Tasks.Task},System.Action{Furion.HttpRemote.HttpLongPollingBuilder})">
            <summary>
                创建 <see cref="T:Furion.HttpRemote.HttpLongPollingBuilder" /> 构建器
            </summary>
            <param name="httpMethod">请求方式</param>
            <param name="requestUri">请求地址</param>
            <param name="onDataReceived">用于接收服务器返回 <c>200~299</c> 状态码的数据的操作</param>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpLongPollingBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.LongPolling(System.Uri,System.Func{System.Net.Http.HttpResponseMessage,System.Threading.Tasks.Task},System.Action{Furion.HttpRemote.HttpLongPollingBuilder})">
            <summary>
                创建 <see cref="T:Furion.HttpRemote.HttpLongPollingBuilder" /> 构建器
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="onDataReceived">用于接收服务器返回 <c>200~299</c> 状态码的数据的操作</param>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpLongPollingBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.LongPolling(System.String,System.Func{System.Net.Http.HttpResponseMessage,System.Threading.Tasks.Task},System.Action{Furion.HttpRemote.HttpLongPollingBuilder})">
            <summary>
                创建 <see cref="T:Furion.HttpRemote.HttpLongPollingBuilder" /> 构建器
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="onDataReceived">用于接收服务器返回 <c>200~299</c> 状态码的数据的操作</param>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpLongPollingBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilder.Declarative(System.Reflection.MethodInfo,System.Object[])">
            <summary>
                创建 <see cref="T:Furion.HttpRemote.HttpDeclarativeBuilder" /> 构建器
            </summary>
            <param name="method">被调用方法</param>
            <param name="args">被调用方法的参数值数组</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpDeclarativeBuilder" />
            </returns>
        </member>
        <member name="T:Furion.HttpRemote.HttpServerSentEventsBuilder">
            <summary>
                HTTP Server-Sent Events 构建器
            </summary>
            <remarks>
                <para>使用 <c>HttpRequestBuilder.ServerSentEvents(requestUri, onMessage)</c> 静态方法创建。</para>
                <para>参考文献：https://developer.mozilla.org/zh-CN/docs/Web/API/Server-sent_events/Using_server-sent_events。</para>
            </remarks>
        </member>
        <member name="M:Furion.HttpRemote.HttpServerSentEventsBuilder.#ctor(System.Uri)">
            <summary>
                <inheritdoc cref="T:Furion.HttpRemote.HttpServerSentEventsBuilder" />
            </summary>
            <param name="requestUri">请求地址</param>
        </member>
        <member name="P:Furion.HttpRemote.HttpServerSentEventsBuilder.RequestUri">
            <summary>
                请求地址
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.HttpServerSentEventsBuilder.DefaultRetryInterval">
            <summary>
                默认重新连接的间隔时间（毫秒）
            </summary>
            <remarks>默认值为 2000 毫秒。</remarks>
        </member>
        <member name="P:Furion.HttpRemote.HttpServerSentEventsBuilder.MaxRetries">
            <summary>
                最大重试次数
            </summary>
            <remarks>默认最大重试次数为 100。</remarks>
        </member>
        <member name="P:Furion.HttpRemote.HttpServerSentEventsBuilder.OnOpen">
            <summary>
                用于在与事件源的连接打开时的操作
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.HttpServerSentEventsBuilder.OnMessage">
            <summary>
                用于在从事件源接收到数据时的操作
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.HttpServerSentEventsBuilder.OnError">
            <summary>
                用于在事件源连接未能打开时的操作
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.HttpServerSentEventsBuilder.ServerSentEventsEventHandlerType">
            <summary>
                实现 <see cref="T:Furion.HttpRemote.IHttpServerSentEventsEventHandler" /> 的类型
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.HttpServerSentEventsBuilder.SetDefaultRetryInterval(System.Int32)">
            <summary>
                设置默认重新连接的间隔时间
            </summary>
            <param name="retryInterval">默认重新连接的间隔时间</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpServerSentEventsBuilder" />
            </returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Furion.HttpRemote.HttpServerSentEventsBuilder.SetMaxRetries(System.Int32)">
            <summary>
                设置最大重试次数
            </summary>
            <param name="maxRetries">最大重试次数</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpServerSentEventsBuilder" />
            </returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Furion.HttpRemote.HttpServerSentEventsBuilder.SetOnOpen(System.Action)">
            <summary>
                设置用于在与事件源的连接打开时的操作
            </summary>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpServerSentEventsBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpServerSentEventsBuilder.SetOnMessage(System.Func{Furion.HttpRemote.ServerSentEventsData,System.Threading.Tasks.Task})">
            <summary>
                设置用于在从事件源接收到数据时的操作
            </summary>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpServerSentEventsBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpServerSentEventsBuilder.SetOnError(System.Action{System.Exception})">
            <summary>
                设置用于在事件源连接未能打开时的操作
            </summary>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpServerSentEventsBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpServerSentEventsBuilder.SetEventHandler(System.Type)">
            <summary>
                设置 Server-Sent Events 事件处理程序
            </summary>
            <param name="serverSentEventsEventHandlerType">实现 <see cref="T:Furion.HttpRemote.IHttpServerSentEventsEventHandler" /> 接口的类型</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpServerSentEventsBuilder" />
            </returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Furion.HttpRemote.HttpServerSentEventsBuilder.SetEventHandler``1">
            <summary>
                设置 Server-Sent Events 事件处理程序
            </summary>
            <typeparam name="TServerSentEventsEventHandler">
                <see cref="T:Furion.HttpRemote.IHttpServerSentEventsEventHandler" />
            </typeparam>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpServerSentEventsBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpServerSentEventsBuilder.Build(Furion.HttpRemote.HttpRemoteOptions,System.Action{Furion.HttpRemote.HttpRequestBuilder})">
            <summary>
                构建 <see cref="T:Furion.HttpRemote.HttpRequestBuilder" /> 实例
            </summary>
            <param name="httpRemoteOptions">
                <see cref="T:Furion.HttpRemote.HttpRemoteOptions" />
            </param>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="T:Furion.HttpRemote.HttpStressTestHarnessBuilder">
            <summary>
                压力测试构建器
            </summary>
            <remarks>使用 <c>HttpRequestBuilder.StressTestHarness(requestUri, numberOfRequests)</c> 静态方法创建。</remarks>
        </member>
        <member name="M:Furion.HttpRemote.HttpStressTestHarnessBuilder.#ctor(System.Net.Http.HttpMethod,System.Uri)">
            <summary>
                <inheritdoc cref="T:Furion.HttpRemote.HttpStressTestHarnessBuilder" />
            </summary>
            <param name="httpMethod">请求方式</param>
            <param name="requestUri">请求地址</param>
        </member>
        <member name="P:Furion.HttpRemote.HttpStressTestHarnessBuilder.RequestUri">
            <summary>
                请求地址
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.HttpStressTestHarnessBuilder.Method">
            <summary>
                请求方式
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.HttpStressTestHarnessBuilder.NumberOfRequests">
            <summary>
                并发请求数量
            </summary>
            <remarks>默认值为：100。</remarks>
        </member>
        <member name="P:Furion.HttpRemote.HttpStressTestHarnessBuilder.MaxDegreeOfParallelism">
            <summary>
                最大并发度
            </summary>
            <remarks>用于控制系统在同一时间内处理的请求数量。默认值为：100。</remarks>
        </member>
        <member name="P:Furion.HttpRemote.HttpStressTestHarnessBuilder.NumberOfRounds">
            <summary>
                压测轮次
            </summary>
            <remarks>默认值为：1。</remarks>
        </member>
        <member name="M:Furion.HttpRemote.HttpStressTestHarnessBuilder.SetNumberOfRequests(System.Int32)">
            <summary>
                设置并发请求数量
            </summary>
            <param name="numberOfRequests">并发请求数量</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpStressTestHarnessBuilder" />
            </returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Furion.HttpRemote.HttpStressTestHarnessBuilder.SetMaxDegreeOfParallelism(System.Int32)">
            <summary>
                设置最大并发度
            </summary>
            <param name="maxDegreeOfParallelism">最大并发度</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpStressTestHarnessBuilder" />
            </returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Furion.HttpRemote.HttpStressTestHarnessBuilder.SetNumberOfRounds(System.Int32)">
            <summary>
                设置压测轮次
            </summary>
            <param name="numberOfRounds">压测轮次</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpStressTestHarnessBuilder" />
            </returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Furion.HttpRemote.HttpStressTestHarnessBuilder.Build(Furion.HttpRemote.HttpRemoteOptions,System.Action{Furion.HttpRemote.HttpRequestBuilder})">
            <summary>
                构建 <see cref="T:Furion.HttpRemote.HttpRequestBuilder" /> 实例
            </summary>
            <param name="httpRemoteOptions">
                <see cref="T:Furion.HttpRemote.HttpRemoteOptions" />
            </param>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="T:Furion.HttpRemote.IHttpRemoteBuilder">
            <summary>
                HTTP 远程请求服务构建器
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.IHttpRemoteBuilder.Services">
            <summary>
                <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteBuilder.ConfigureOptions(System.Action{Furion.HttpRemote.HttpRemoteOptions})">
            <summary>
                配置 <see cref="T:Furion.HttpRemote.HttpRemoteOptions" /> 实例
            </summary>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:Furion.HttpRemote.IHttpRemoteBuilder" />
            </returns>
        </member>
        <member name="T:Furion.HttpRemote.DefaultHttpRemoteBuilder">
            <summary>
                <see cref="T:Furion.HttpRemote.IHttpRemoteBuilder" /> 默认实现
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.DefaultHttpRemoteBuilder.#ctor(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
                <inheritdoc cref="T:Furion.HttpRemote.DefaultHttpRemoteBuilder" />
            </summary>
            <param name="services">
                <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
            </param>
        </member>
        <member name="P:Furion.HttpRemote.DefaultHttpRemoteBuilder.Services">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.DefaultHttpRemoteBuilder.ConfigureOptions(System.Action{Furion.HttpRemote.HttpRemoteOptions})">
            <inheritdoc />
        </member>
        <member name="T:Furion.HttpRemote.Constants">
            <summary>
                HTTP 远程请求模块常量配置
            </summary>
        </member>
        <member name="F:Furion.HttpRemote.Constants.X_TRACE_ID_HEADER">
            <summary>
                请求跟踪标识标头
            </summary>
        </member>
        <member name="F:Furion.HttpRemote.Constants.UNKNOWN_USER_AGENT_VERSION">
            <summary>
                未知 <c>User Agent</c> 版本
            </summary>
        </member>
        <member name="F:Furion.HttpRemote.Constants.FORM_DATA_DISPOSITION_TYPE">
            <summary>
                内容正文部分的处置类型
            </summary>
        </member>
        <member name="F:Furion.HttpRemote.Constants.BASIC_AUTHENTICATION_SCHEME">
            <summary>
                Basic 授权标识
            </summary>
        </member>
        <member name="F:Furion.HttpRemote.Constants.JWT_BEARER_AUTHENTICATION_SCHEME">
            <summary>
                JWT (JSON Web Token) 授权标识
            </summary>
        </member>
        <member name="F:Furion.HttpRemote.Constants.DIGEST_AUTHENTICATION_SCHEME">
            <summary>
                Digest 授权标识
            </summary>
        </member>
        <member name="F:Furion.HttpRemote.Constants.TEXT_PLAIN_MIME_TYPE">
            <summary>
                <c>text/plain</c> 内容类型
            </summary>
        </member>
        <member name="F:Furion.HttpRemote.Constants.X_END_OF_STREAM_HEADER">
            <summary>
                响应结束符标头
            </summary>
        </member>
        <member name="F:Furion.HttpRemote.Constants.X_ORIGINAL_URL_HEADER">
            <summary>
                请求原始地址标头
            </summary>
        </member>
        <member name="F:Furion.HttpRemote.Constants.X_FORWARD_TO_HEADER">
            <summary>
                请求转发目标地址标头
            </summary>
        </member>
        <member name="F:Furion.HttpRemote.Constants.X_STRESS_TEST_HEADER">
            <summary>
                压力测试标头
            </summary>
        </member>
        <member name="F:Furion.HttpRemote.Constants.X_STRESS_TEST_VALUE">
            <summary>
                压力测试标头值
            </summary>
        </member>
        <member name="F:Furion.HttpRemote.Constants.DISABLED_PROFILER_KEY">
            <summary>
                禁用请求分析工具键
            </summary>
            <remarks>被用于从 <see cref="T:System.Net.Http.HttpRequestMessage" /> 的 <c>Options</c> 属性中读取。</remarks>
        </member>
        <member name="F:Furion.HttpRemote.Constants.DECLARATIVE_METHOD_KEY">
            <summary>
                HTTP 声明式请求方法签名键
            </summary>
            <remarks>被用于从 <see cref="T:System.Net.Http.HttpRequestMessage" /> 的 <c>Options</c> 属性中读取。</remarks>
        </member>
        <member name="F:Furion.HttpRemote.Constants.USER_AGENT_OF_BROWSER">
            <summary>
                浏览器的 <c>User-Agent</c> 标头值
            </summary>
        </member>
        <member name="F:Furion.HttpRemote.Constants.USER_AGENT_OF_MOBILE_BROWSER">
            <summary>
                移动端浏览器的 <c>User-Agent</c> 标头值
            </summary>
        </member>
        <member name="T:Furion.HttpRemote.FileExistsBehavior">
            <summary>
                指定当目标文件已存在时的行为
            </summary>
        </member>
        <member name="F:Furion.HttpRemote.FileExistsBehavior.CreateNew">
            <summary>
                创建新文件
            </summary>
            <remarks>如果文件已存在则抛出异常。</remarks>
        </member>
        <member name="F:Furion.HttpRemote.FileExistsBehavior.Overwrite">
            <summary>
                覆盖现有文件
            </summary>
        </member>
        <member name="F:Furion.HttpRemote.FileExistsBehavior.Skip">
            <summary>
                保留现有文件
            </summary>
            <remarks>不进行任何操作。</remarks>
        </member>
        <member name="T:Furion.HttpRemote.FileSourceType">
            <summary>
                指定多部分表单内容文件的来源类型
            </summary>
        </member>
        <member name="F:Furion.HttpRemote.FileSourceType.None">
            <summary>
                缺省值
            </summary>
            <remarks>不用作为文件的来源。</remarks>
        </member>
        <member name="F:Furion.HttpRemote.FileSourceType.Path">
            <summary>
                本地文件路径
            </summary>
        </member>
        <member name="F:Furion.HttpRemote.FileSourceType.Base64String">
            <summary>
                Base64 字符串文件
            </summary>
        </member>
        <member name="F:Furion.HttpRemote.FileSourceType.Remote">
            <summary>
                互联网文件地址
            </summary>
        </member>
        <member name="F:Furion.HttpRemote.FileSourceType.Stream">
            <summary>
                <see cref="F:Furion.HttpRemote.FileSourceType.Stream" />
            </summary>
        </member>
        <member name="F:Furion.HttpRemote.FileSourceType.ByteArray">
            <summary>
                字节数组
            </summary>
        </member>
        <member name="T:Furion.HttpRemote.ByteArrayContentConverter">
            <summary>
                字节数组内容转换器
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.ByteArrayContentConverter.Read(System.Net.Http.HttpResponseMessage,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.ByteArrayContentConverter.ReadAsync(System.Net.Http.HttpResponseMessage,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Furion.HttpRemote.HttpContentConverterBase`1">
            <summary>
                <see cref="T:Furion.HttpRemote.IHttpContentConverter`1" /> 内容处理器基类
            </summary>
            <typeparam name="TResult">转换的目标类型</typeparam>
        </member>
        <member name="P:Furion.HttpRemote.HttpContentConverterBase`1.ServiceProvider">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpContentConverterBase`1.Read(System.Net.Http.HttpResponseMessage,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpContentConverterBase`1.ReadAsync(System.Net.Http.HttpResponseMessage,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpContentConverterBase`1.Read(System.Type,System.Net.Http.HttpResponseMessage,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpContentConverterBase`1.ReadAsync(System.Type,System.Net.Http.HttpResponseMessage,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Furion.HttpRemote.HttpResponseMessageConverter">
            <summary>
                <see cref="T:System.Net.Http.HttpResponseMessage" /> 内容转换器
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.HttpResponseMessageConverter.Read(System.Net.Http.HttpResponseMessage,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpResponseMessageConverter.ReadAsync(System.Net.Http.HttpResponseMessage,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Furion.HttpRemote.IActionResultContentConverter">
            <summary>
                <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult" /> 内容转换器
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.IActionResultContentConverter.Read(System.Net.Http.HttpResponseMessage,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.IActionResultContentConverter.ReadAsync(System.Net.Http.HttpResponseMessage,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.IActionResultContentConverter.TryGetStatusCodeResult(System.Net.Http.HttpResponseMessage,System.Net.HttpStatusCode@,Microsoft.AspNetCore.Mvc.IActionResult@)">
            <summary>
                处理特定状态码结果
            </summary>
            <param name="httpResponseMessage">
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </param>
            <param name="statusCode">HTTP 状态码</param>
            <param name="statusCodeResult">
                <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult" />
            </param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="T:Furion.HttpRemote.IHttpContentConverter">
            <summary>
                <see cref="T:System.Net.Http.HttpResponseMessage" /> 响应内容转换器默认实现接口
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.IHttpContentConverter.ServiceProvider">
            <summary>
                <inheritdoc cref="T:System.IServiceProvider" />
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.IHttpContentConverter.Read(System.Type,System.Net.Http.HttpResponseMessage,System.Threading.CancellationToken)">
            <summary>
                从 <see cref="T:System.Net.Http.HttpResponseMessage" /> 中同步读取数据并转换为 <see cref="T:System.Object" /> 实例
            </summary>
            <param name="resultType">转换的目标类型</param>
            <param name="httpResponseMessage">
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Object" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpContentConverter.ReadAsync(System.Type,System.Net.Http.HttpResponseMessage,System.Threading.CancellationToken)">
            <summary>
                从 <see cref="T:System.Net.Http.HttpResponseMessage" /> 中异步读取数据并转换为 <see cref="T:System.Object" /> 实例
            </summary>
            <param name="resultType">转换的目标类型</param>
            <param name="httpResponseMessage">
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Object" />
            </returns>
        </member>
        <member name="T:Furion.HttpRemote.IHttpContentConverter`1">
            <summary>
                <see cref="T:System.Net.Http.HttpResponseMessage" /> 响应内容转换器
            </summary>
            <typeparam name="TResult">转换的目标类型</typeparam>
        </member>
        <member name="M:Furion.HttpRemote.IHttpContentConverter`1.Read(System.Net.Http.HttpResponseMessage,System.Threading.CancellationToken)">
            <summary>
                从 <see cref="T:System.Net.Http.HttpResponseMessage" /> 中同步读取数据并转换为目标类型
            </summary>
            <param name="httpResponseMessage">
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <typeparamref name="TResult" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpContentConverter`1.ReadAsync(System.Net.Http.HttpResponseMessage,System.Threading.CancellationToken)">
            <summary>
                从 <see cref="T:System.Net.Http.HttpResponseMessage" /> 中异步读取数据并转换为目标类型
            </summary>
            <param name="httpResponseMessage">
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <typeparamref name="TResult" />
            </returns>
        </member>
        <member name="T:Furion.HttpRemote.ObjectContentConverter">
            <summary>
                <see cref="T:Furion.HttpRemote.ObjectContentConverter`1" /> 默认基类
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.ObjectContentConverter.ServiceProvider">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.ObjectContentConverter.Read(System.Type,System.Net.Http.HttpResponseMessage,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.ObjectContentConverter.ReadAsync(System.Type,System.Net.Http.HttpResponseMessage,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Furion.HttpRemote.ObjectContentConverter`1">
            <summary>
                对象转换器
            </summary>
            <typeparam name="TResult">转换的目标类型</typeparam>
        </member>
        <member name="M:Furion.HttpRemote.ObjectContentConverter`1.Read(System.Net.Http.HttpResponseMessage,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.ObjectContentConverter`1.ReadAsync(System.Net.Http.HttpResponseMessage,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Furion.HttpRemote.StreamContentConverter">
            <summary>
                流内容转换器
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.StreamContentConverter.Read(System.Net.Http.HttpResponseMessage,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.StreamContentConverter.ReadAsync(System.Net.Http.HttpResponseMessage,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Furion.HttpRemote.StringContentConverter">
            <summary>
                字符串内容转换器
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.StringContentConverter.Read(System.Net.Http.HttpResponseMessage,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.StringContentConverter.ReadAsync(System.Net.Http.HttpResponseMessage,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Furion.HttpRemote.VoidContentConverter">
            <summary>
                <see cref="T:Furion.HttpRemote.VoidContent" /> 内容转换器
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.VoidContentConverter.Read(System.Net.Http.HttpResponseMessage,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.VoidContentConverter.ReadAsync(System.Net.Http.HttpResponseMessage,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Furion.HttpRemote.AcceptLanguageAttribute">
            <summary>
                HTTP 声明式客户端所偏好的自然语言和区域特性
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.AcceptLanguageAttribute.#ctor(System.String)">
            <summary>
                <inheritdoc cref="T:Furion.HttpRemote.AcceptLanguageAttribute" />
            </summary>
            <param name="language">自然语言和区域设置</param>
        </member>
        <member name="P:Furion.HttpRemote.AcceptLanguageAttribute.Language">
            <summary>
                客户端偏好的语言和区域
            </summary>
        </member>
        <member name="T:Furion.HttpRemote.AutoSetHostHeaderAttribute">
            <summary>
                HTTP 声明式设置自动 <c>Host</c> 标头特性
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.AutoSetHostHeaderAttribute.#ctor">
            <summary>
                <inheritdoc cref="T:Furion.HttpRemote.AutoSetHostHeaderAttribute" />
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.AutoSetHostHeaderAttribute.#ctor(System.Boolean)">
            <summary>
                <inheritdoc cref="T:Furion.HttpRemote.AutoSetHostHeaderAttribute" />
            </summary>
            <param name="enabled">是否启用</param>
        </member>
        <member name="P:Furion.HttpRemote.AutoSetHostHeaderAttribute.Enabled">
            <summary>
                是否启用
            </summary>
        </member>
        <member name="T:Furion.HttpRemote.BodyAttribute">
            <summary>
                HTTP 声明式请求内容特性
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.BodyAttribute.#ctor">
            <summary>
                <inheritdoc cref="T:Furion.HttpRemote.BodyAttribute" />
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.BodyAttribute.#ctor(System.String)">
            <summary>
                <inheritdoc cref="T:Furion.HttpRemote.BodyAttribute" />
            </summary>
            <param name="contentType">内容类型</param>
        </member>
        <member name="M:Furion.HttpRemote.BodyAttribute.#ctor(System.String,System.String)">
            <summary>
                <inheritdoc cref="T:Furion.HttpRemote.QueryAttribute" />
            </summary>
            <param name="contentType">内容类型</param>
            <param name="contentEncoding">内容编码</param>
        </member>
        <member name="P:Furion.HttpRemote.BodyAttribute.ContentType">
            <summary>
                内容类型
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.BodyAttribute.ContentEncoding">
            <summary>
                内容编码
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.BodyAttribute.UseStringContent">
            <summary>
                是否使用 <see cref="T:System.Net.Http.StringContent" /> 构建 <see cref="T:System.Net.Http.FormUrlEncodedContent" />。默认 <c>false</c>
            </summary>
            <remarks>当 <see cref="P:Furion.HttpRemote.BodyAttribute.ContentType" /> 值为 <c>application/x-www-form-urlencoded</c> 时有效。</remarks>
        </member>
        <member name="P:Furion.HttpRemote.BodyAttribute.RawString">
            <summary>
                是否为原始字符串内容。默认 <c>false</c>
            </summary>
            <remarks>
                <para>作用于 <see cref="T:System.String" /> 类型参数时有效。</para>
                <para>当属性值设置为 <c>true</c> 时，将校验 <see cref="P:Furion.HttpRemote.BodyAttribute.ContentType" /> 属性值是否为空，并且字符串内容将被双引号包围并发送，格式如下：<c>"内容"</c>。</para>
            </remarks>
        </member>
        <member name="T:Furion.HttpRemote.CookieAttribute">
            <summary>
                HTTP 声明式 Cookie 特性
            </summary>
            <remarks>支持多次指定。</remarks>
        </member>
        <member name="M:Furion.HttpRemote.CookieAttribute.#ctor">
            <summary>
                <inheritdoc cref="T:Furion.HttpRemote.CookieAttribute" />
            </summary>
            <remarks>特性作用于参数时有效。</remarks>
        </member>
        <member name="M:Furion.HttpRemote.CookieAttribute.#ctor(System.String)">
            <summary>
                <inheritdoc cref="T:Furion.HttpRemote.CookieAttribute" />
            </summary>
            <remarks>
                <para>当特性作用于方法或接口时，则表示移除指定 Cookie 操作。</para>
                <para>当特性作用于参数时，则表示添加 Cookie ，同时设置 Cookie 键为 <c>name</c> 的值。</para>
            </remarks>
            <param name="name">Cookie 键</param>
        </member>
        <member name="M:Furion.HttpRemote.CookieAttribute.#ctor(System.String,System.Object)">
            <summary>
                <inheritdoc cref="T:Furion.HttpRemote.CookieAttribute" />
            </summary>
            <param name="name">Cookie 键</param>
            <param name="value">Cookie 的值</param>
        </member>
        <member name="P:Furion.HttpRemote.CookieAttribute.Name">
            <summary>
                Cookie 键
            </summary>
            <remarks>该属性优先级低于 <see cref="P:Furion.HttpRemote.CookieAttribute.AliasAs" /> 属性设置的值。</remarks>
        </member>
        <member name="P:Furion.HttpRemote.CookieAttribute.Value">
            <summary>
                Cookie 的值
            </summary>
            <remarks>当特性作用于参数时，表示默认值。</remarks>
        </member>
        <member name="P:Furion.HttpRemote.CookieAttribute.AliasAs">
            <summary>
                别名
            </summary>
            <remarks>
                <para>特性用于参数时有效。</para>
                <para>该属性优先级高于 <see cref="P:Furion.HttpRemote.CookieAttribute.Name" /> 属性设置的值。</para>
            </remarks>
        </member>
        <member name="P:Furion.HttpRemote.CookieAttribute.Escape">
            <summary>
                是否转义
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.CookieAttribute.HasSetValue">
            <summary>
                是否设置了值
            </summary>
        </member>
        <member name="T:Furion.HttpRemote.DisableCacheAttribute">
            <summary>
                HTTP 声明式禁用 HTTP 缓存特性
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.DisableCacheAttribute.#ctor">
            <summary>
                <inheritdoc cref="T:Furion.HttpRemote.DisableCacheAttribute" />
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.DisableCacheAttribute.#ctor(System.Boolean)">
            <summary>
                <inheritdoc cref="T:Furion.HttpRemote.DisableCacheAttribute" />
            </summary>
            <param name="disabled">是否禁用</param>
        </member>
        <member name="P:Furion.HttpRemote.DisableCacheAttribute.Disabled">
            <summary>
                是否禁用
            </summary>
        </member>
        <member name="T:Furion.HttpRemote.EnsureSuccessStatusCodeAttribute">
            <summary>
                HTTP 声明式如果 HTTP 响应的 IsSuccessStatusCode 属性是 <c>false</c>，则引发异常特性
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.EnsureSuccessStatusCodeAttribute.#ctor">
            <summary>
                <inheritdoc cref="T:Furion.HttpRemote.EnsureSuccessStatusCodeAttribute" />
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.EnsureSuccessStatusCodeAttribute.#ctor(System.Boolean)">
            <summary>
                <inheritdoc cref="T:Furion.HttpRemote.EnsureSuccessStatusCodeAttribute" />
            </summary>
            <param name="enabled">是否启用</param>
        </member>
        <member name="P:Furion.HttpRemote.EnsureSuccessStatusCodeAttribute.Enabled">
            <summary>
                是否启用
            </summary>
        </member>
        <member name="T:Furion.HttpRemote.HeaderAttribute">
            <summary>
                HTTP 声明式请求标头特性
            </summary>
            <remarks>支持多次指定。</remarks>
        </member>
        <member name="M:Furion.HttpRemote.HeaderAttribute.#ctor">
            <summary>
                <inheritdoc cref="T:Furion.HttpRemote.HeaderAttribute" />
            </summary>
            <remarks>特性作用于参数时有效。</remarks>
        </member>
        <member name="M:Furion.HttpRemote.HeaderAttribute.#ctor(System.String)">
            <summary>
                <inheritdoc cref="T:Furion.HttpRemote.HeaderAttribute" />
            </summary>
            <remarks>
                <para>当特性作用于方法或接口时，则表示移除指定请求标头操作。</para>
                <para>当特性作用于参数时，则表示添加请求标头，同时设置请求标头键为 <c>name</c> 的值。</para>
            </remarks>
            <param name="name">请求标头键</param>
        </member>
        <member name="M:Furion.HttpRemote.HeaderAttribute.#ctor(System.String,System.Object)">
            <summary>
                <inheritdoc cref="T:Furion.HttpRemote.HeaderAttribute" />
            </summary>
            <param name="name">请求标头键</param>
            <param name="value">请求标头的值</param>
        </member>
        <member name="P:Furion.HttpRemote.HeaderAttribute.Name">
            <summary>
                请求标头键
            </summary>
            <remarks>该属性优先级低于 <see cref="P:Furion.HttpRemote.HeaderAttribute.AliasAs" /> 属性设置的值。</remarks>
        </member>
        <member name="P:Furion.HttpRemote.HeaderAttribute.Value">
            <summary>
                请求标头的值
            </summary>
            <remarks>当特性作用于参数时，表示默认值。</remarks>
        </member>
        <member name="P:Furion.HttpRemote.HeaderAttribute.AliasAs">
            <summary>
                别名
            </summary>
            <remarks>
                <para>特性用于参数时有效。</para>
                <para>该属性优先级高于 <see cref="P:Furion.HttpRemote.HeaderAttribute.Name" /> 属性设置的值。</para>
            </remarks>
        </member>
        <member name="P:Furion.HttpRemote.HeaderAttribute.Escape">
            <summary>
                是否转义
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.HeaderAttribute.Replace">
            <summary>
                是否替换已存在的请求标头。默认值为 <c>false</c>
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.HeaderAttribute.HasSetValue">
            <summary>
                是否设置了值
            </summary>
        </member>
        <member name="T:Furion.HttpRemote.HttpClientNameAttribute">
            <summary>
                HTTP 声明式 <see cref="T:System.Net.Http.HttpClient" /> 实例的配置名称特性
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.HttpClientNameAttribute.#ctor(System.String)">
            <summary>
                <inheritdoc cref="T:Furion.HttpRemote.HttpClientNameAttribute" />
            </summary>
            <param name="name"><see cref="T:System.Net.Http.HttpClient" /> 实例的配置名称</param>
        </member>
        <member name="P:Furion.HttpRemote.HttpClientNameAttribute.Name">
            <summary>
                <see cref="T:System.Net.Http.HttpClient" /> 实例的配置名称
            </summary>
        </member>
        <member name="T:Furion.HttpRemote.DeleteAttribute">
            <summary>
                HTTP 声明式 DELETE 请求方式特性
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.DeleteAttribute.#ctor(System.String)">
            <summary>
                <inheritdoc cref="T:Furion.HttpRemote.DeleteAttribute" />
            </summary>
            <param name="requestUri">请求地址</param>
        </member>
        <member name="T:Furion.HttpRemote.GetAttribute">
            <summary>
                HTTP 声明式 GET 请求方式特性
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.GetAttribute.#ctor(System.String)">
            <summary>
                <inheritdoc cref="T:Furion.HttpRemote.GetAttribute" />
            </summary>
            <param name="requestUri">请求地址</param>
        </member>
        <member name="T:Furion.HttpRemote.HeadAttribute">
            <summary>
                HTTP 声明式 HEAD 请求方式特性
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.HeadAttribute.#ctor(System.String)">
            <summary>
                <inheritdoc cref="T:Furion.HttpRemote.HeadAttribute" />
            </summary>
            <param name="requestUri">请求地址</param>
        </member>
        <member name="T:Furion.HttpRemote.HttpMethodAttribute">
            <summary>
                HTTP 声明式请求方式特性
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.HttpMethodAttribute.#ctor(System.String,System.String)">
            <summary>
                <inheritdoc cref="T:Furion.HttpRemote.HttpMethodAttribute" />
            </summary>
            <param name="httpMethod">请求方式</param>
            <param name="requestUri">请求地址</param>
        </member>
        <member name="M:Furion.HttpRemote.HttpMethodAttribute.#ctor(System.Net.Http.HttpMethod,System.String)">
            <summary>
                <inheritdoc cref="T:Furion.HttpRemote.HttpMethodAttribute" />
            </summary>
            <param name="httpMethod">请求方式</param>
            <param name="requestUri">请求地址</param>
        </member>
        <member name="P:Furion.HttpRemote.HttpMethodAttribute.Method">
            <summary>
                请求方式
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.HttpMethodAttribute.RequestUri">
            <summary>
                请求地址
            </summary>
        </member>
        <member name="T:Furion.HttpRemote.OptionsAttribute">
            <summary>
                HTTP 声明式 OPTIONS 请求方式特性
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.OptionsAttribute.#ctor(System.String)">
            <summary>
                <inheritdoc cref="T:Furion.HttpRemote.OptionsAttribute" />
            </summary>
            <param name="requestUri">请求地址</param>
        </member>
        <member name="T:Furion.HttpRemote.PatchAttribute">
            <summary>
                HTTP 声明式 PATCH 请求方式特性
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.PatchAttribute.#ctor(System.String)">
            <summary>
                <inheritdoc cref="T:Furion.HttpRemote.PatchAttribute" />
            </summary>
            <param name="requestUri">请求地址</param>
        </member>
        <member name="T:Furion.HttpRemote.PostAttribute">
            <summary>
                HTTP 声明式 POST 请求方式特性
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.PostAttribute.#ctor(System.String)">
            <summary>
                <inheritdoc cref="T:Furion.HttpRemote.PostAttribute" />
            </summary>
            <param name="requestUri">请求地址</param>
        </member>
        <member name="T:Furion.HttpRemote.PutAttribute">
            <summary>
                HTTP 声明式 PUT 请求方式特性
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.PutAttribute.#ctor(System.String)">
            <summary>
                <inheritdoc cref="T:Furion.HttpRemote.PutAttribute" />
            </summary>
            <param name="requestUri">请求地址</param>
        </member>
        <member name="T:Furion.HttpRemote.TraceAttribute">
            <summary>
                HTTP 声明式 TRACE 请求方式特性
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.TraceAttribute.#ctor(System.String)">
            <summary>
                <inheritdoc cref="T:Furion.HttpRemote.TraceAttribute" />
            </summary>
            <param name="requestUri">请求地址</param>
        </member>
        <member name="T:Furion.HttpRemote.MultipartAttribute">
            <summary>
                HTTP 声明式多部分表单项内容特性
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.MultipartAttribute.#ctor">
            <summary>
                <inheritdoc cref="T:Furion.HttpRemote.MultipartAttribute" />
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.MultipartAttribute.#ctor(System.String)">
            <summary>
                <inheritdoc cref="T:Furion.HttpRemote.BodyAttribute" />
            </summary>
            <param name="name">表单名称</param>
        </member>
        <member name="P:Furion.HttpRemote.MultipartAttribute.Name">
            <summary>
                表单名称
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.MultipartAttribute.FileName">
            <summary>
                文件的名称
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.MultipartAttribute.ContentType">
            <summary>
                内容类型
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.MultipartAttribute.ContentEncoding">
            <summary>
                内容编码
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.MultipartAttribute.AsFileFrom">
            <summary>
                表示将字符串作为多部分表单文件的来源
            </summary>
            <remarks>用于设置多部分表单文件内容。当参数类型为 <see cref="T:System.String" /> 时有效。</remarks>
        </member>
        <member name="P:Furion.HttpRemote.MultipartAttribute.AsFormItem">
            <summary>
                表示是否作为表单的一项
            </summary>
            <remarks>
                <para>当参数类型为对象类型时有效。</para>
                <para>该属性值为 <c>true</c> 时作为表单的一项。否则将遍历对象类型的每一个公开属性作为表单的项。默认值为：<c>true</c>。</para>
            </remarks>
        </member>
        <member name="T:Furion.HttpRemote.MultipartFormAttribute">
            <summary>
                HTTP 声明式多部分表单内容特性
            </summary>
            <remarks>需配合 <see cref="T:Furion.HttpRemote.MultipartAttribute" /> 使用。</remarks>
        </member>
        <member name="M:Furion.HttpRemote.MultipartFormAttribute.#ctor">
            <summary>
                <inheritdoc cref="T:Furion.HttpRemote.MultipartFormAttribute" />
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.MultipartFormAttribute.#ctor(System.String)">
            <summary>
                <inheritdoc cref="T:Furion.HttpRemote.MultipartFormAttribute" />
            </summary>
            <param name="boundary">多部分表单内容的边界</param>
        </member>
        <member name="P:Furion.HttpRemote.MultipartFormAttribute.Boundary">
            <summary>
                多部分表单内容的边界
            </summary>
        </member>
        <member name="T:Furion.HttpRemote.PathAttribute">
            <summary>
                HTTP 声明式路径参数特性
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.PathAttribute.#ctor(System.String,System.Object)">
            <summary>
                <inheritdoc cref="T:Furion.HttpRemote.PathAttribute" />
            </summary>
            <param name="name">参数名称</param>
            <param name="value">参数值</param>
        </member>
        <member name="P:Furion.HttpRemote.PathAttribute.Name">
            <summary>
                路径参数键
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.PathAttribute.Value">
            <summary>
                路径参数的值
            </summary>
        </member>
        <member name="T:Furion.HttpRemote.PerformanceOptimizationAttribute">
            <summary>
                HTTP 声明式启用性能优化特性
            </summary>
            <remarks>当需要返回 <see cref="T:System.IO.Stream" /> 内容或进行 <c>HttpContext</c> 网页转发时，请勿启用此配置，因为流会因压缩而变得不可读，同时该配置也不适用于网页转发的场景。</remarks>
        </member>
        <member name="M:Furion.HttpRemote.PerformanceOptimizationAttribute.#ctor">
            <summary>
                <inheritdoc cref="T:Furion.HttpRemote.PerformanceOptimizationAttribute" />
            </summary>
            <remarks>当需要返回 <see cref="T:System.IO.Stream" /> 内容或进行 <c>HttpContext</c> 网页转发时，请勿启用此配置，因为流会因压缩而变得不可读，同时该配置也不适用于网页转发的场景。</remarks>
        </member>
        <member name="M:Furion.HttpRemote.PerformanceOptimizationAttribute.#ctor(System.Boolean)">
            <summary>
                <inheritdoc cref="T:Furion.HttpRemote.PerformanceOptimizationAttribute" />
            </summary>
            <remarks>当需要返回 <see cref="T:System.IO.Stream" /> 内容或进行 <c>HttpContext</c> 网页转发时，请勿启用此配置，因为流会因压缩而变得不可读，同时该配置也不适用于网页转发的场景。</remarks>
            <param name="enabled">是否启用</param>
        </member>
        <member name="P:Furion.HttpRemote.PerformanceOptimizationAttribute.Enabled">
            <summary>
                是否启用
            </summary>
        </member>
        <member name="T:Furion.HttpRemote.ProfilerAttribute">
            <summary>
                HTTP 声明式启用请求分析工具特性
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.ProfilerAttribute.#ctor">
            <summary>
                <inheritdoc cref="T:Furion.HttpRemote.ProfilerAttribute" />
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.ProfilerAttribute.#ctor(System.Boolean)">
            <summary>
                <inheritdoc cref="T:Furion.HttpRemote.ProfilerAttribute" />
            </summary>
            <param name="enabled">是否启用</param>
        </member>
        <member name="P:Furion.HttpRemote.ProfilerAttribute.Enabled">
            <summary>
                是否启用
            </summary>
        </member>
        <member name="T:Furion.HttpRemote.PropertyAttribute">
            <summary>
                HTTP 声明式 <see cref="T:System.Net.Http.HttpRequestMessage" /> 请求属性特性
            </summary>
            <remarks>支持多次指定。</remarks>
        </member>
        <member name="M:Furion.HttpRemote.PropertyAttribute.#ctor">
            <summary>
                <inheritdoc cref="T:Furion.HttpRemote.PropertyAttribute" />
            </summary>
            <remarks>特性作用于参数时有效。</remarks>
        </member>
        <member name="M:Furion.HttpRemote.PropertyAttribute.#ctor(System.String)">
            <summary>
                <inheritdoc cref="T:Furion.HttpRemote.PropertyAttribute" />
            </summary>
            <remarks>
                当特性作用于参数时，则表示添加 <see cref="T:System.Net.Http.HttpRequestMessage" /> 请求属性，同时设置 <see cref="T:System.Net.Http.HttpRequestMessage" /> 请求属性键为
                <c>name</c> 的值。
            </remarks>
            <param name="name"><see cref="T:System.Net.Http.HttpRequestMessage" /> 请求属性键</param>
        </member>
        <member name="M:Furion.HttpRemote.PropertyAttribute.#ctor(System.String,System.Object)">
            <summary>
                <inheritdoc cref="T:Furion.HttpRemote.PropertyAttribute" />
            </summary>
            <param name="name"><see cref="T:System.Net.Http.HttpRequestMessage" /> 请求属性键</param>
            <param name="value"><see cref="T:System.Net.Http.HttpRequestMessage" /> 请求属性的值</param>
        </member>
        <member name="P:Furion.HttpRemote.PropertyAttribute.Name">
            <summary>
                <see cref="T:System.Net.Http.HttpRequestMessage" /> 请求属性键
            </summary>
            <remarks>该属性优先级低于 <see cref="P:Furion.HttpRemote.PropertyAttribute.AliasAs" /> 属性设置的值。</remarks>
        </member>
        <member name="P:Furion.HttpRemote.PropertyAttribute.Value">
            <summary>
                <see cref="T:System.Net.Http.HttpRequestMessage" /> 请求属性的值
            </summary>
            <remarks>当特性作用于参数时，表示默认值。</remarks>
        </member>
        <member name="P:Furion.HttpRemote.PropertyAttribute.AliasAs">
            <summary>
                别名
            </summary>
            <remarks>
                <para>特性用于参数时有效。</para>
                <para>该属性优先级高于 <see cref="P:Furion.HttpRemote.PropertyAttribute.Name" /> 属性设置的值。</para>
            </remarks>
        </member>
        <member name="P:Furion.HttpRemote.PropertyAttribute.AsItem">
            <summary>
                表示是否作为 <see cref="T:System.Net.Http.HttpRequestMessage" /> 请求属性的一项
            </summary>
            <remarks>
                <para>当参数类型为对象类型时有效。</para>
                <para>
                    该属性值为 <c>true</c> 时作为 <see cref="T:System.Net.Http.HttpRequestMessage" /> 请求属性的一项。否则将遍历对象类型的每一个公开属性作为
                    <see cref="T:System.Net.Http.HttpRequestMessage" /> 请求属性的项。默认值为：<c>true</c>。
                </para>
            </remarks>
        </member>
        <member name="T:Furion.HttpRemote.QueryAttribute">
            <summary>
                HTTP 声明式查询参数特性
            </summary>
            <remarks>支持多次指定。</remarks>
        </member>
        <member name="M:Furion.HttpRemote.QueryAttribute.#ctor">
            <summary>
                <inheritdoc cref="T:Furion.HttpRemote.QueryAttribute" />
            </summary>
            <remarks>特性作用于参数时有效。</remarks>
        </member>
        <member name="M:Furion.HttpRemote.QueryAttribute.#ctor(System.String)">
            <summary>
                <inheritdoc cref="T:Furion.HttpRemote.QueryAttribute" />
            </summary>
            <remarks>
                <para>当特性作用于方法或接口时，则表示移除指定查询参数操作。</para>
                <para>当特性作用于参数时，则表示添加查询参数，同时设置查询参数键为 <c>name</c> 的值。</para>
            </remarks>
            <param name="name">查询参数键</param>
        </member>
        <member name="M:Furion.HttpRemote.QueryAttribute.#ctor(System.String,System.Object)">
            <summary>
                <inheritdoc cref="T:Furion.HttpRemote.QueryAttribute" />
            </summary>
            <param name="name">查询参数键</param>
            <param name="value">查询参数的值</param>
        </member>
        <member name="P:Furion.HttpRemote.QueryAttribute.Name">
            <summary>
                查询参数键
            </summary>
            <remarks>该属性优先级低于 <see cref="P:Furion.HttpRemote.QueryAttribute.AliasAs" /> 属性设置的值。</remarks>
        </member>
        <member name="P:Furion.HttpRemote.QueryAttribute.Value">
            <summary>
                查询参数的值
            </summary>
            <remarks>当特性作用于参数时，表示默认值。</remarks>
        </member>
        <member name="P:Furion.HttpRemote.QueryAttribute.AliasAs">
            <summary>
                别名
            </summary>
            <remarks>
                <para>特性用于参数时有效。</para>
                <para>该属性优先级高于 <see cref="P:Furion.HttpRemote.QueryAttribute.Name" /> 属性设置的值。</para>
            </remarks>
        </member>
        <member name="P:Furion.HttpRemote.QueryAttribute.Escape">
            <summary>
                是否转义
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.QueryAttribute.Prefix">
            <summary>
                参数前缀
            </summary>
            <remarks>作用于对象类型时有效。</remarks>
        </member>
        <member name="P:Furion.HttpRemote.QueryAttribute.Replace">
            <summary>
                是否替换已存在的查询参数。默认值为 <c>false</c>
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.QueryAttribute.IgnoreNullValues">
            <summary>
                是否忽略空值
            </summary>
            <remarks>设置为 <c>true</c> 之后，当参数值为 <c>null</c> 时将被忽略。默认值为 <c>false</c>。</remarks>
        </member>
        <member name="P:Furion.HttpRemote.QueryAttribute.HasSetValue">
            <summary>
                是否设置了值
            </summary>
        </member>
        <member name="T:Furion.HttpRemote.SimulateBrowserAttribute">
            <summary>
                HTTP 声明式模拟浏览器环境特性
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.SimulateBrowserAttribute.Mobile">
            <summary>
                是否模拟移动端，默认值为：<c>false</c>（即模拟桌面端）
            </summary>
        </member>
        <member name="T:Furion.HttpRemote.TimeoutAttribute">
            <summary>
                HTTP 声明式超时时间特性
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.TimeoutAttribute.#ctor(System.Double)">
            <summary>
                <inheritdoc cref="T:Furion.HttpRemote.TimeoutAttribute" />
            </summary>
            <param name="timeoutMilliseconds">超时时间（毫秒）</param>
        </member>
        <member name="P:Furion.HttpRemote.TimeoutAttribute.Timeout">
            <summary>
                超时时间（毫秒）
            </summary>
        </member>
        <member name="T:Furion.HttpRemote.TraceIdentifierAttribute">
            <summary>
                HTTP 声明式跟踪标识特性
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.TraceIdentifierAttribute.#ctor(System.String)">
            <summary>
                <inheritdoc cref="T:Furion.HttpRemote.TraceIdentifierAttribute" />
            </summary>
            <param name="traceIdentifier">跟踪标识</param>
        </member>
        <member name="P:Furion.HttpRemote.TraceIdentifierAttribute.Identifier">
            <summary>
                跟踪标识
            </summary>
        </member>
        <member name="T:Furion.HttpRemote.HttpDeclarativeBuilder">
            <summary>
                HTTP 声明式远程请求构建器
            </summary>
            <remarks>使用 <c>HttpRequestBuilder.Declarative(method, args)</c> 静态方法创建。</remarks>
        </member>
        <member name="F:Furion.HttpRemote.HttpDeclarativeBuilder._extractors">
            <summary>
                HTTP 声明式 <see cref="T:Furion.HttpRemote.IHttpDeclarativeExtractor" /> 提取器集合
            </summary>
        </member>
        <member name="F:Furion.HttpRemote.HttpDeclarativeBuilder._frozenExtractors">
            <summary>
                HTTP 声明式 <see cref="T:Furion.HttpRemote.IHttpDeclarativeExtractor" /> 提取器集合（冻结）
            </summary>
            <remarks>该集合用于确保某些 HTTP 声明式提取器始终位于最后。</remarks>
        </member>
        <member name="F:Furion.HttpRemote.HttpDeclarativeBuilder._hasLoadedExtractors">
            <summary>
                标识是否已加载自定义 HTTP 声明式提取器
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.HttpDeclarativeBuilder.#ctor(System.Reflection.MethodInfo,System.Object[])">
            <summary>
                <inheritdoc cref="T:Furion.HttpRemote.HttpDeclarativeBuilder" />
            </summary>
            <param name="method">被调用方法</param>
            <param name="args">被调用方法的参数值数组</param>
        </member>
        <member name="P:Furion.HttpRemote.HttpDeclarativeBuilder.Method">
            <summary>
                被调用方法
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.HttpDeclarativeBuilder.Args">
            <summary>
                被调用方法的参数值数组
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.HttpDeclarativeBuilder.Build(Furion.HttpRemote.HttpRemoteOptions)">
            <summary>
                构建 <see cref="T:Furion.HttpRemote.HttpRequestBuilder" /> 实例
            </summary>
            <param name="httpRemoteOptions">
                <see cref="T:Furion.HttpRemote.HttpRemoteOptions" />
            </param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="T:Furion.HttpRemote.DeclarativeManager">
            <summary>
                HTTP 声明式管理器
            </summary>
        </member>
        <member name="F:Furion.HttpRemote.DeclarativeManager._httpDeclarativeBuilder">
            <inheritdoc cref="T:Furion.HttpRemote.HttpDeclarativeBuilder" />
        </member>
        <member name="F:Furion.HttpRemote.DeclarativeManager._httpRemoteService">
            <inheritdoc cref="T:Furion.HttpRemote.IHttpRemoteService" />
        </member>
        <member name="M:Furion.HttpRemote.DeclarativeManager.#ctor(Furion.HttpRemote.IHttpRemoteService,Furion.HttpRemote.HttpDeclarativeBuilder)">
            <summary>
                <inheritdoc cref="T:Furion.HttpRemote.DeclarativeManager" />
            </summary>
            <param name="httpRemoteService">
                <see cref="T:Furion.HttpRemote.IHttpRemoteService" />
            </param>
            <param name="httpDeclarativeBuilder">
                <see cref="T:Furion.HttpRemote.HttpDeclarativeBuilder" />
            </param>
        </member>
        <member name="P:Furion.HttpRemote.DeclarativeManager.RequestBuilder">
            <summary>
                <inheritdoc cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.DeclarativeManager.Start">
            <summary>
                开始请求
            </summary>
            <returns>
                <see cref="T:System.Object" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.DeclarativeManager.StartAsync``1">
            <summary>
                开始请求
            </summary>
            <typeparam name="T">转换的目标类型</typeparam>
            <returns>
                <typeparamref name="T" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.DeclarativeManager.ExtractSingleSpecialArguments(System.Object[])">
            <summary>
                尝试解析单个特殊类型参数
            </summary>
            <param name="args">被调用方法的参数值数组</param>
            <returns>
                <see cref="T:System.Tuple`2" />
            </returns>
        </member>
        <member name="T:Furion.HttpRemote.AcceptLanguageDeclarativeExtractor">
            <summary>
                HTTP 声明式 <see cref="T:Furion.HttpRemote.AcceptLanguageAttribute" /> 特性提取器
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.AcceptLanguageDeclarativeExtractor.Extract(Furion.HttpRemote.HttpRequestBuilder,Furion.HttpRemote.HttpDeclarativeExtractorContext)">
            <inheritdoc />
        </member>
        <member name="T:Furion.HttpRemote.AutoSetHostHeaderDeclarativeExtractor">
            <summary>
                HTTP 声明式 <see cref="T:Furion.HttpRemote.AutoSetHostHeaderAttribute" /> 特性提取器
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.AutoSetHostHeaderDeclarativeExtractor.Extract(Furion.HttpRemote.HttpRequestBuilder,Furion.HttpRemote.HttpDeclarativeExtractorContext)">
            <inheritdoc />
        </member>
        <member name="T:Furion.HttpRemote.BodyDeclarativeExtractor">
            <summary>
                HTTP 声明式 <see cref="T:Furion.HttpRemote.BodyAttribute" /> 特性提取器
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.BodyDeclarativeExtractor.Extract(Furion.HttpRemote.HttpRequestBuilder,Furion.HttpRemote.HttpDeclarativeExtractorContext)">
            <inheritdoc />
        </member>
        <member name="T:Furion.HttpRemote.CookieDeclarativeExtractor">
            <summary>
                HTTP 声明式 <see cref="T:Furion.HttpRemote.CookieAttribute" /> 特性提取器
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.CookieDeclarativeExtractor.Extract(Furion.HttpRemote.HttpRequestBuilder,Furion.HttpRemote.HttpDeclarativeExtractorContext)">
            <inheritdoc />
        </member>
        <member name="T:Furion.HttpRemote.DisableCacheDeclarativeExtractor">
            <summary>
                HTTP 声明式 <see cref="T:Furion.HttpRemote.DisableCacheAttribute" /> 特性提取器
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.DisableCacheDeclarativeExtractor.Extract(Furion.HttpRemote.HttpRequestBuilder,Furion.HttpRemote.HttpDeclarativeExtractorContext)">
            <inheritdoc />
        </member>
        <member name="T:Furion.HttpRemote.EnsureSuccessStatusCodeDeclarativeExtractor">
            <summary>
                HTTP 声明式 <see cref="T:Furion.HttpRemote.EnsureSuccessStatusCodeAttribute" /> 特性提取器
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.EnsureSuccessStatusCodeDeclarativeExtractor.Extract(Furion.HttpRemote.HttpRequestBuilder,Furion.HttpRemote.HttpDeclarativeExtractorContext)">
            <inheritdoc />
        </member>
        <member name="T:Furion.HttpRemote.HeaderDeclarativeExtractor">
            <summary>
                HTTP 声明式 <see cref="T:Furion.HttpRemote.HeaderAttribute" /> 特性提取器
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.HeaderDeclarativeExtractor.Extract(Furion.HttpRemote.HttpRequestBuilder,Furion.HttpRemote.HttpDeclarativeExtractorContext)">
            <inheritdoc />
        </member>
        <member name="T:Furion.HttpRemote.HttpClientNameDeclarativeExtractor">
            <summary>
                HTTP 声明式 <see cref="T:Furion.HttpRemote.HttpClientNameAttribute" /> 特性提取器
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.HttpClientNameDeclarativeExtractor.Extract(Furion.HttpRemote.HttpRequestBuilder,Furion.HttpRemote.HttpDeclarativeExtractorContext)">
            <inheritdoc />
        </member>
        <member name="T:Furion.HttpRemote.HttpMultipartFormDataBuilderDeclarativeExtractor">
            <summary>
                HTTP 声明式 <see cref="T:Furion.HttpRemote.HttpMultipartFormDataBuilder" /> 多部分表单内容配置提取器
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.HttpMultipartFormDataBuilderDeclarativeExtractor.Extract(Furion.HttpRemote.HttpRequestBuilder,Furion.HttpRemote.HttpDeclarativeExtractorContext)">
            <inheritdoc />
        </member>
        <member name="P:Furion.HttpRemote.HttpMultipartFormDataBuilderDeclarativeExtractor.Order">
            <inheritdoc />
        </member>
        <member name="T:Furion.HttpRemote.HttpRequestBuilderDeclarativeExtractor">
            <summary>
                HTTP 声明式 <see cref="T:Furion.HttpRemote.HttpRequestBuilder" /> 自定义配置提取器
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.HttpRequestBuilderDeclarativeExtractor.Extract(Furion.HttpRemote.HttpRequestBuilder,Furion.HttpRemote.HttpDeclarativeExtractorContext)">
            <inheritdoc />
        </member>
        <member name="P:Furion.HttpRemote.HttpRequestBuilderDeclarativeExtractor.Order">
            <inheritdoc />
        </member>
        <member name="T:Furion.HttpRemote.IFrozenHttpDeclarativeExtractor">
            <summary>
                HTTP 声明式提取器排序（冻结）
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.IFrozenHttpDeclarativeExtractor.Order">
            <summary>
                获取提取器的顺序值。值越小，提取器越晚被调用
            </summary>
        </member>
        <member name="T:Furion.HttpRemote.IHttpDeclarativeExtractor">
            <summary>
                HTTP 声明式提取器
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.IHttpDeclarativeExtractor.Extract(Furion.HttpRemote.HttpRequestBuilder,Furion.HttpRemote.HttpDeclarativeExtractorContext)">
            <summary>
                提取方法信息构建 <see cref="T:Furion.HttpRemote.HttpRequestBuilder" /> 实例
            </summary>
            <param name="httpRequestBuilder">
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </param>
            <param name="context">
                <see cref="T:Furion.HttpRemote.HttpDeclarativeExtractorContext" />
            </param>
        </member>
        <member name="T:Furion.HttpRemote.MultipartDeclarativeExtractor">
            <summary>
                HTTP 声明式 <see cref="T:Furion.HttpRemote.MultipartAttribute" /> 特性提取器
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.MultipartDeclarativeExtractor.Extract(Furion.HttpRemote.HttpRequestBuilder,Furion.HttpRemote.HttpDeclarativeExtractorContext)">
            <inheritdoc />
        </member>
        <member name="P:Furion.HttpRemote.MultipartDeclarativeExtractor.Order">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.MultipartDeclarativeExtractor.SetBoundary(System.Reflection.MethodInfo,Furion.HttpRemote.HttpMultipartFormDataBuilder)">
            <summary>
                设置多部分表单内容的边界
            </summary>
            <param name="method">
                <see cref="T:System.Reflection.MethodInfo" />
            </param>
            <param name="httpMultipartFormDataBuilder">
                <see cref="T:Furion.HttpRemote.HttpMultipartFormDataBuilder" />
            </param>
        </member>
        <member name="M:Furion.HttpRemote.MultipartDeclarativeExtractor.AddMultipart(System.Reflection.ParameterInfo,System.Object,Furion.HttpRemote.HttpMultipartFormDataBuilder)">
            <summary>
                添加多部分表单内容
            </summary>
            <param name="parameter">
                <see cref="T:System.Reflection.ParameterInfo" />
            </param>
            <param name="value">参数值</param>
            <param name="httpMultipartFormDataBuilder">
                <see cref="T:Furion.HttpRemote.HttpMultipartFormDataBuilder" />
            </param>
        </member>
        <member name="M:Furion.HttpRemote.MultipartDeclarativeExtractor.AddFileFromSource(System.String,System.String,Furion.HttpRemote.MultipartAttribute,Furion.HttpRemote.HttpMultipartFormDataBuilder,System.Text.Encoding)">
            <summary>
                添加文件
            </summary>
            <param name="fileSource">文件的来源</param>
            <param name="name">表单名称</param>
            <param name="multipartAttribute">
                <see cref="T:Furion.HttpRemote.MultipartAttribute" />
            </param>
            <param name="httpMultipartFormDataBuilder">
                <see cref="T:Furion.HttpRemote.HttpMultipartFormDataBuilder" />
            </param>
            <param name="contentEncoding">内容编码</param>
        </member>
        <member name="M:Furion.HttpRemote.MultipartDeclarativeExtractor.AddFormItemOrObject(System.Object,System.String,System.Type,Furion.HttpRemote.MultipartAttribute,Furion.HttpRemote.HttpMultipartFormDataBuilder,System.Text.Encoding)">
            <summary>
                添加单个表单项或对象
            </summary>
            <param name="value">参数的值</param>
            <param name="name">表单名称</param>
            <param name="parameterType">参数类型</param>
            <param name="multipartAttribute">
                <see cref="T:Furion.HttpRemote.MultipartAttribute" />
            </param>
            <param name="httpMultipartFormDataBuilder">
                <see cref="T:Furion.HttpRemote.HttpMultipartFormDataBuilder" />
            </param>
            <param name="contentEncoding">内容编码</param>
        </member>
        <member name="T:Furion.HttpRemote.PathDeclarativeExtractor">
            <summary>
                HTTP 声明式路径参数提取器
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.PathDeclarativeExtractor.Extract(Furion.HttpRemote.HttpRequestBuilder,Furion.HttpRemote.HttpDeclarativeExtractorContext)">
            <inheritdoc />
        </member>
        <member name="T:Furion.HttpRemote.PerformanceOptimizationDeclarativeExtractor">
            <summary>
                HTTP 声明式 <see cref="T:Furion.HttpRemote.PerformanceOptimizationAttribute" /> 特性提取器
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.PerformanceOptimizationDeclarativeExtractor.Extract(Furion.HttpRemote.HttpRequestBuilder,Furion.HttpRemote.HttpDeclarativeExtractorContext)">
            <inheritdoc />
        </member>
        <member name="T:Furion.HttpRemote.ProfilerDeclarativeExtractor">
            <summary>
                HTTP 声明式 <see cref="T:Furion.HttpRemote.ProfilerAttribute" /> 特性提取器
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.ProfilerDeclarativeExtractor.Extract(Furion.HttpRemote.HttpRequestBuilder,Furion.HttpRemote.HttpDeclarativeExtractorContext)">
            <inheritdoc />
        </member>
        <member name="T:Furion.HttpRemote.PropertyDeclarativeExtractor">
            <summary>
                HTTP 声明式 <see cref="T:Furion.HttpRemote.PropertyAttribute" /> 特性提取器
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.PropertyDeclarativeExtractor.Extract(Furion.HttpRemote.HttpRequestBuilder,Furion.HttpRemote.HttpDeclarativeExtractorContext)">
            <inheritdoc />
        </member>
        <member name="T:Furion.HttpRemote.QueryDeclarativeExtractor">
            <summary>
                HTTP 声明式 <see cref="T:Furion.HttpRemote.QueryAttribute" /> 特性提取器
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.QueryDeclarativeExtractor.Extract(Furion.HttpRemote.HttpRequestBuilder,Furion.HttpRemote.HttpDeclarativeExtractorContext)">
            <inheritdoc />
        </member>
        <member name="T:Furion.HttpRemote.SimulateBrowserDeclarativeExtractor">
            <summary>
                HTTP 声明式 <see cref="T:Furion.HttpRemote.SimulateBrowserAttribute" /> 特性提取器
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.SimulateBrowserDeclarativeExtractor.Extract(Furion.HttpRemote.HttpRequestBuilder,Furion.HttpRemote.HttpDeclarativeExtractorContext)">
            <inheritdoc />
        </member>
        <member name="T:Furion.HttpRemote.TimeoutDeclarativeExtractor">
            <summary>
                HTTP 声明式 <see cref="T:Furion.HttpRemote.TimeoutAttribute" /> 特性提取器
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.TimeoutDeclarativeExtractor.Extract(Furion.HttpRemote.HttpRequestBuilder,Furion.HttpRemote.HttpDeclarativeExtractorContext)">
            <inheritdoc />
        </member>
        <member name="T:Furion.HttpRemote.TraceIdentifierDeclarativeExtractor">
            <summary>
                HTTP 声明式 <see cref="T:Furion.HttpRemote.TraceIdentifierAttribute" /> 特性提取器
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.TraceIdentifierDeclarativeExtractor.Extract(Furion.HttpRemote.HttpRequestBuilder,Furion.HttpRemote.HttpDeclarativeExtractorContext)">
            <inheritdoc />
        </member>
        <member name="T:Furion.HttpRemote.ValidationDeclarativeExtractor">
            <summary>
                HTTP 声明式 <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute" /> 特性提取器
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.ValidationDeclarativeExtractor.Extract(Furion.HttpRemote.HttpRequestBuilder,Furion.HttpRemote.HttpDeclarativeExtractorContext)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.ValidationDeclarativeExtractor.ValidateParameter(System.Reflection.ParameterInfo,System.Object)">
            <summary>
                验证参数
            </summary>
            <param name="parameter">
                <see cref="T:System.Reflection.ParameterInfo" />
            </param>
            <param name="value">参数的值</param>
            <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException"></exception>
        </member>
        <member name="T:Furion.HttpRemote.HttpDeclarativeDispatchProxy">
            <summary>
                HTTP 声明式远程请求代理类
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.HttpDeclarativeDispatchProxy.RemoteService">
            <inheritdoc cref="T:Furion.HttpRemote.IHttpRemoteService" />
        </member>
        <member name="M:Furion.HttpRemote.HttpDeclarativeDispatchProxy.Invoke(System.Reflection.MethodInfo,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpDeclarativeDispatchProxy.InvokeAsync(System.Reflection.MethodInfo,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpDeclarativeDispatchProxy.InvokeAsyncT``1(System.Reflection.MethodInfo,System.Object[])">
            <inheritdoc />
        </member>
        <member name="T:Furion.HttpRemote.HttpDeclarativeExtractorContext">
            <summary>
                HTTP 声明式提取器上下文
            </summary>
        </member>
        <member name="F:Furion.HttpRemote.HttpDeclarativeExtractorContext._frozenParameterTypes">
            <summary>
                冻结参数类型集合
            </summary>
            <remarks>此类参数类型不应作为外部提取对象。</remarks>
        </member>
        <member name="M:Furion.HttpRemote.HttpDeclarativeExtractorContext.#ctor(System.Reflection.MethodInfo,System.Object[])">
            <summary>
                <inheritdoc cref="T:Furion.HttpRemote.HttpDeclarativeExtractorContext" />
            </summary>
            <param name="method">被调用方法</param>
            <param name="args">被调用方法的参数值数组</param>
        </member>
        <member name="P:Furion.HttpRemote.HttpDeclarativeExtractorContext.Method">
            <summary>
                被调用方法
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.HttpDeclarativeExtractorContext.Args">
            <summary>
                被调用方法的参数值数组
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.HttpDeclarativeExtractorContext.Parameters">
            <summary>
                被调用方法的参数键值字典
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.HttpDeclarativeExtractorContext.UnFrozenParameters">
            <summary>
                被调用方法的非冻结类型参数键值字典
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.HttpDeclarativeExtractorContext.IsFrozenParameter(System.Reflection.ParameterInfo)">
            <summary>
                判断参数是否为冻结参数
            </summary>
            <remarks>此类参数不应作为外部提取对象。</remarks>
            <param name="parameter">
                <see cref="T:System.Reflection.ParameterInfo" />
            </param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpDeclarativeExtractorContext.IsMethodDefined``1(``0@,System.Boolean)">
            <summary>
                检查被调用方法是否定义了指定特性
            </summary>
            <param name="attribute">
                <typeparamref name="TAttribute" />
            </param>
            <param name="inherit">是否在基类中搜索</param>
            <typeparam name="TAttribute">
                <see cref="T:System.Attribute" />
            </typeparam>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpDeclarativeExtractorContext.GetMethodDefinedCustomAttributes``1(System.Boolean,System.Boolean)">
            <summary>
                获取被调用方法指定特性的所有实例
            </summary>
            <param name="inherit">是否在基类中搜索</param>
            <param name="methodScanFirst">是否优先查找 <see cref="T:System.Reflection.MethodInfo" /> 的特性。默认值为：<c>true</c>。</param>
            <typeparam name="TAttribute">
                <see cref="T:System.Attribute" />
            </typeparam>
            <returns>
                <typeparamref name="TAttribute" /><c>[]</c>
            </returns>
        </member>
        <member name="T:Furion.HttpRemote.IHttpDeclarative">
            <summary>
                HTTP 声明式远程请求依赖接口
            </summary>
        </member>
        <member name="T:Furion.HttpRemote.ProfilerDelegatingHandler">
            <summary>
                HTTP 远程请求分析工具处理委托
            </summary>
            <remarks>参考文献：https://learn.microsoft.com/zh-cn/aspnet/core/fundamentals/http-requests?view=aspnetcore-8.0#outgoing-request-middleware</remarks>
            <param name="logger">
                <see cref="T:Microsoft.Extensions.Logging.Logger`1" />
            </param>
            <param name="httpRemoteOptions">
                <see cref="T:Microsoft.Extensions.Options.IOptions`1" />
            </param>
        </member>
        <member name="M:Furion.HttpRemote.ProfilerDelegatingHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Furion.HttpRemote.Logging},Microsoft.Extensions.Options.IOptions{Furion.HttpRemote.HttpRemoteOptions})">
            <summary>
                HTTP 远程请求分析工具处理委托
            </summary>
            <remarks>参考文献：https://learn.microsoft.com/zh-cn/aspnet/core/fundamentals/http-requests?view=aspnetcore-8.0#outgoing-request-middleware</remarks>
            <param name="logger">
                <see cref="T:Microsoft.Extensions.Logging.Logger`1" />
            </param>
            <param name="httpRemoteOptions">
                <see cref="T:Microsoft.Extensions.Options.IOptions`1" />
            </param>
        </member>
        <member name="M:Furion.HttpRemote.ProfilerDelegatingHandler.IsEnabled(System.Net.Http.HttpRequestMessage)">
            <summary>
                是否启用请求分析工具
            </summary>
            <param name="httpRequestMessage">
                <see cref="T:System.Net.Http.HttpRequestMessage" />
            </param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.ProfilerDelegatingHandler.Send(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.ProfilerDelegatingHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.ProfilerDelegatingHandler.LogRequestAsync(Microsoft.Extensions.Logging.ILogger,Furion.HttpRemote.HttpRemoteOptions,System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <summary>
                记录请求信息
            </summary>
            <param name="logger">
                <see cref="T:Microsoft.Extensions.Logging.ILogger" />
            </param>
            <param name="remoteOptions">
                <see cref="T:Furion.HttpRemote.HttpRemoteOptions" />
            </param>
            <param name="request">
                <see cref="T:System.Net.Http.HttpRequestMessage" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
        </member>
        <member name="M:Furion.HttpRemote.ProfilerDelegatingHandler.LogResponseAsync(Microsoft.Extensions.Logging.ILogger,Furion.HttpRemote.HttpRemoteOptions,System.Net.Http.HttpResponseMessage,System.Int64,System.Threading.CancellationToken)">
            <summary>
                记录响应信息
            </summary>
            <param name="logger">
                <see cref="T:Microsoft.Extensions.Logging.ILogger" />
            </param>
            <param name="remoteOptions">
                <see cref="T:Furion.HttpRemote.HttpRemoteOptions" />
            </param>
            <param name="httpResponseMessage">
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </param>
            <param name="requestDuration">请求耗时（毫秒）</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
        </member>
        <member name="M:Furion.HttpRemote.ProfilerDelegatingHandler.LogCookieContainer(Microsoft.Extensions.Logging.ILogger,Furion.HttpRemote.HttpRemoteOptions,System.Net.Http.HttpRequestMessage,System.Net.CookieContainer)">
            <summary>
                打印 <see cref="T:System.Net.CookieContainer" /> 内容
            </summary>
            <param name="logger">
                <see cref="T:Microsoft.Extensions.Logging.ILogger" />
            </param>
            <param name="remoteOptions">
                <see cref="T:Furion.HttpRemote.HttpRemoteOptions" />
            </param>
            <param name="request">
                <see cref="T:System.Net.Http.HttpRequestMessage" />
            </param>
            <param name="cookieContainer">
                <see cref="T:System.Net.CookieContainer" />
            </param>
        </member>
        <member name="M:Furion.HttpRemote.ProfilerDelegatingHandler.Log(Microsoft.Extensions.Logging.ILogger,Furion.HttpRemote.HttpRemoteOptions,System.String)">
            <summary>
                打印日志
            </summary>
            <param name="logger">
                <see cref="T:Microsoft.Extensions.Logging.ILogger" />
            </param>
            <param name="remoteOptions">
                <see cref="T:Furion.HttpRemote.HttpRemoteOptions" />
            </param>
            <param name="message">日志消息</param>
        </member>
        <member name="M:Furion.HttpRemote.ProfilerDelegatingHandler.ExtractCookieContainer">
            <summary>
                提取 <see cref="T:System.Net.CookieContainer" /> 实例
            </summary>
            <returns>
                <see cref="T:System.Net.CookieContainer" />
            </returns>
        </member>
        <member name="T:Furion.HttpRemote.Extensions.HttpContextExtensions">
            <summary>
                <see cref="T:Microsoft.AspNetCore.Http.HttpContext" /> 拓展类
            </summary>
            <summary>
                <see cref="T:Microsoft.AspNetCore.Http.HttpContext" /> 拓展类
            </summary>
        </member>
        <member name="F:Furion.HttpRemote.Extensions.HttpContextExtensions._ignoreResponseHeaders">
            <summary>
                忽略在转发时需要跳过的响应标头列表。
            </summary>
            <remarks>
                <list type="bullet">
                    <item>
                        <term>Content-Type: </term>
                        <description>
                            非标准的 <c>Content-Type</c> 值（例如 <c>text/plain; charset=utf-8</c>
                            ）可能会导致“No output formatter was found for content types 'text/plain; charset=utf-8, text/plain;
                            charset=utf-8' to write the response.”错误。忽略此标头以防止此类错误。
                        </description>
                    </item>
                    <item>
                        <term>Content-Length: </term>
                        <description>
                            若响应标头中包含 <c>Content-Length</c>，且其值与实际响应体大小不符，则可能引发“Error while copying content to a
                            stream.”。忽略此标头有助于解决因长度不匹配引起的错误。
                        </description>
                    </item>
                    <item>
                        <term>Transfer-Encoding: </term>
                        <description>当响应标头包含 <c>Transfer-Encoding: chunked</c> 时，可能导致响应处理过程无限期挂起。忽略此标头可避免该问题。</description>
                    </item>
                </list>
            </remarks>
        </member>
        <member name="M:Furion.HttpRemote.Extensions.HttpContextExtensions.Forward(Microsoft.AspNetCore.Http.HttpContext,System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,Furion.HttpRemote.HttpContextForwardOptions)">
            <summary>
                转发 <see cref="T:Microsoft.AspNetCore.Http.HttpContext" /> 到新的 HTTP 远程地址
            </summary>
            <param name="httpContext">
                <see cref="T:Microsoft.AspNetCore.Http.HttpContext" />
            </param>
            <param name="requestUri">请求地址。若为空则尝试从请求标头 <c>X-Forward-To</c> 中获取目标地址。</param>
            <param name="configure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="forwardOptions">
                <see cref="T:Furion.HttpRemote.HttpContextForwardOptions" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.Extensions.HttpContextExtensions.Forward(Microsoft.AspNetCore.Http.HttpContext,System.Net.Http.HttpMethod,System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,Furion.HttpRemote.HttpContextForwardOptions)">
            <summary>
                转发 <see cref="T:Microsoft.AspNetCore.Http.HttpContext" /> 到新的 HTTP 远程地址
            </summary>
            <param name="httpContext"></param>
            <param name="httpMethod">请求方式</param>
            <param name="requestUri">请求地址。若为空则尝试从请求标头 <c>X-Forward-To</c> 中获取目标地址。</param>
            <param name="configure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="forwardOptions">
                <see cref="T:Furion.HttpRemote.HttpContextForwardOptions" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.Extensions.HttpContextExtensions.Forward(Microsoft.AspNetCore.Http.HttpContext,System.Uri,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,Furion.HttpRemote.HttpContextForwardOptions)">
            <summary>
                转发 <see cref="T:Microsoft.AspNetCore.Http.HttpContext" /> 到新的 HTTP 远程地址
            </summary>
            <param name="httpContext">
                <see cref="T:Microsoft.AspNetCore.Http.HttpContext" />
            </param>
            <param name="requestUri">请求地址。若为空则尝试从请求标头 <c>X-Forward-To</c> 中获取目标地址。</param>
            <param name="configure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="forwardOptions">
                <see cref="T:Furion.HttpRemote.HttpContextForwardOptions" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.Extensions.HttpContextExtensions.Forward(Microsoft.AspNetCore.Http.HttpContext,System.Net.Http.HttpMethod,System.Uri,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,Furion.HttpRemote.HttpContextForwardOptions)">
            <summary>
                转发 <see cref="T:Microsoft.AspNetCore.Http.HttpContext" /> 到新的 HTTP 远程地址
            </summary>
            <param name="httpContext">
                <see cref="T:Microsoft.AspNetCore.Http.HttpContext" />
            </param>
            <param name="httpMethod">请求方式</param>
            <param name="requestUri">请求地址。若为空则尝试从请求标头 <c>X-Forward-To</c> 中获取目标地址。</param>
            <param name="configure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="forwardOptions">
                <see cref="T:Furion.HttpRemote.HttpContextForwardOptions" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.Extensions.HttpContextExtensions.ForwardAsync(Microsoft.AspNetCore.Http.HttpContext,System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,Furion.HttpRemote.HttpContextForwardOptions)">
            <summary>
                转发 <see cref="T:Microsoft.AspNetCore.Http.HttpContext" /> 到新的 HTTP 远程地址
            </summary>
            <param name="httpContext">
                <see cref="T:Microsoft.AspNetCore.Http.HttpContext" />
            </param>
            <param name="requestUri">请求地址。若为空则尝试从请求标头 <c>X-Forward-To</c> 中获取目标地址。</param>
            <param name="configure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="forwardOptions">
                <see cref="T:Furion.HttpRemote.HttpContextForwardOptions" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.Extensions.HttpContextExtensions.ForwardAsync(Microsoft.AspNetCore.Http.HttpContext,System.Net.Http.HttpMethod,System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,Furion.HttpRemote.HttpContextForwardOptions)">
            <summary>
                转发 <see cref="T:Microsoft.AspNetCore.Http.HttpContext" /> 到新的 HTTP 远程地址
            </summary>
            <param name="httpContext"></param>
            <param name="httpMethod">请求方式</param>
            <param name="requestUri">请求地址。若为空则尝试从请求标头 <c>X-Forward-To</c> 中获取目标地址。</param>
            <param name="configure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="forwardOptions">
                <see cref="T:Furion.HttpRemote.HttpContextForwardOptions" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.Extensions.HttpContextExtensions.ForwardAsync(Microsoft.AspNetCore.Http.HttpContext,System.Uri,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,Furion.HttpRemote.HttpContextForwardOptions)">
            <summary>
                转发 <see cref="T:Microsoft.AspNetCore.Http.HttpContext" /> 到新的 HTTP 远程地址
            </summary>
            <param name="httpContext">
                <see cref="T:Microsoft.AspNetCore.Http.HttpContext" />
            </param>
            <param name="requestUri">请求地址。若为空则尝试从请求标头 <c>X-Forward-To</c> 中获取目标地址。</param>
            <param name="configure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="forwardOptions">
                <see cref="T:Furion.HttpRemote.HttpContextForwardOptions" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.Extensions.HttpContextExtensions.ForwardAsync(Microsoft.AspNetCore.Http.HttpContext,System.Net.Http.HttpMethod,System.Uri,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,Furion.HttpRemote.HttpContextForwardOptions)">
            <summary>
                转发 <see cref="T:Microsoft.AspNetCore.Http.HttpContext" /> 到新的 HTTP 远程地址
            </summary>
            <param name="httpContext">
                <see cref="T:Microsoft.AspNetCore.Http.HttpContext" />
            </param>
            <param name="httpMethod">请求方式</param>
            <param name="requestUri">请求地址。若为空则尝试从请求标头 <c>X-Forward-To</c> 中获取目标地址。</param>
            <param name="configure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="forwardOptions">
                <see cref="T:Furion.HttpRemote.HttpContextForwardOptions" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.Extensions.HttpContextExtensions.Forward``1(Microsoft.AspNetCore.Http.HttpContext,System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,Furion.HttpRemote.HttpContextForwardOptions)">
            <summary>
                转发 <see cref="T:Microsoft.AspNetCore.Http.HttpContext" /> 到新的 HTTP 远程地址
            </summary>
            <param name="httpContext">
                <see cref="T:Microsoft.AspNetCore.Http.HttpContext" />
            </param>
            <param name="requestUri">请求地址。若为空则尝试从请求标头 <c>X-Forward-To</c> 中获取目标地址。</param>
            <param name="configure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="forwardOptions">
                <see cref="T:Furion.HttpRemote.HttpContextForwardOptions" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.Extensions.HttpContextExtensions.Forward``1(Microsoft.AspNetCore.Http.HttpContext,System.Net.Http.HttpMethod,System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,Furion.HttpRemote.HttpContextForwardOptions)">
            <summary>
                转发 <see cref="T:Microsoft.AspNetCore.Http.HttpContext" /> 到新的 HTTP 远程地址
            </summary>
            <param name="httpContext"></param>
            <param name="httpMethod">请求方式</param>
            <param name="requestUri">请求地址。若为空则尝试从请求标头 <c>X-Forward-To</c> 中获取目标地址。</param>
            <param name="configure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="forwardOptions">
                <see cref="T:Furion.HttpRemote.HttpContextForwardOptions" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.Extensions.HttpContextExtensions.Forward``1(Microsoft.AspNetCore.Http.HttpContext,System.Uri,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,Furion.HttpRemote.HttpContextForwardOptions)">
            <summary>
                转发 <see cref="T:Microsoft.AspNetCore.Http.HttpContext" /> 到新的 HTTP 远程地址
            </summary>
            <param name="httpContext">
                <see cref="T:Microsoft.AspNetCore.Http.HttpContext" />
            </param>
            <param name="requestUri">请求地址。若为空则尝试从请求标头 <c>X-Forward-To</c> 中获取目标地址。</param>
            <param name="configure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="forwardOptions">
                <see cref="T:Furion.HttpRemote.HttpContextForwardOptions" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.Extensions.HttpContextExtensions.Forward``1(Microsoft.AspNetCore.Http.HttpContext,System.Net.Http.HttpMethod,System.Uri,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,Furion.HttpRemote.HttpContextForwardOptions)">
            <summary>
                转发 <see cref="T:Microsoft.AspNetCore.Http.HttpContext" /> 到新的 HTTP 远程地址
            </summary>
            <param name="httpContext">
                <see cref="T:Microsoft.AspNetCore.Http.HttpContext" />
            </param>
            <param name="httpMethod">请求方式</param>
            <param name="requestUri">请求地址。若为空则尝试从请求标头 <c>X-Forward-To</c> 中获取目标地址。</param>
            <param name="configure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="forwardOptions">
                <see cref="T:Furion.HttpRemote.HttpContextForwardOptions" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.Extensions.HttpContextExtensions.ForwardAsync``1(Microsoft.AspNetCore.Http.HttpContext,System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,Furion.HttpRemote.HttpContextForwardOptions)">
            <summary>
                转发 <see cref="T:Microsoft.AspNetCore.Http.HttpContext" /> 到新的 HTTP 远程地址
            </summary>
            <param name="httpContext">
                <see cref="T:Microsoft.AspNetCore.Http.HttpContext" />
            </param>
            <param name="requestUri">请求地址。若为空则尝试从请求标头 <c>X-Forward-To</c> 中获取目标地址。</param>
            <param name="configure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="forwardOptions">
                <see cref="T:Furion.HttpRemote.HttpContextForwardOptions" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.Extensions.HttpContextExtensions.ForwardAsync``1(Microsoft.AspNetCore.Http.HttpContext,System.Net.Http.HttpMethod,System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,Furion.HttpRemote.HttpContextForwardOptions)">
            <summary>
                转发 <see cref="T:Microsoft.AspNetCore.Http.HttpContext" /> 到新的 HTTP 远程地址
            </summary>
            <param name="httpContext"></param>
            <param name="httpMethod">请求方式</param>
            <param name="requestUri">请求地址。若为空则尝试从请求标头 <c>X-Forward-To</c> 中获取目标地址。</param>
            <param name="configure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="forwardOptions">
                <see cref="T:Furion.HttpRemote.HttpContextForwardOptions" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.Extensions.HttpContextExtensions.ForwardAsync``1(Microsoft.AspNetCore.Http.HttpContext,System.Uri,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,Furion.HttpRemote.HttpContextForwardOptions)">
            <summary>
                转发 <see cref="T:Microsoft.AspNetCore.Http.HttpContext" /> 到新的 HTTP 远程地址
            </summary>
            <param name="httpContext">
                <see cref="T:Microsoft.AspNetCore.Http.HttpContext" />
            </param>
            <param name="requestUri">请求地址。若为空则尝试从请求标头 <c>X-Forward-To</c> 中获取目标地址。</param>
            <param name="configure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="forwardOptions">
                <see cref="T:Furion.HttpRemote.HttpContextForwardOptions" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.Extensions.HttpContextExtensions.ForwardAsync``1(Microsoft.AspNetCore.Http.HttpContext,System.Net.Http.HttpMethod,System.Uri,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,Furion.HttpRemote.HttpContextForwardOptions)">
            <summary>
                转发 <see cref="T:Microsoft.AspNetCore.Http.HttpContext" /> 到新的 HTTP 远程地址
            </summary>
            <param name="httpContext">
                <see cref="T:Microsoft.AspNetCore.Http.HttpContext" />
            </param>
            <param name="httpMethod">请求方式</param>
            <param name="requestUri">请求地址。若为空则尝试从请求标头 <c>X-Forward-To</c> 中获取目标地址。</param>
            <param name="configure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="forwardOptions">
                <see cref="T:Furion.HttpRemote.HttpContextForwardOptions" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.Extensions.HttpContextExtensions.CreateForwardBuilder(Microsoft.AspNetCore.Http.HttpContext,System.Net.Http.HttpMethod,System.String,Furion.HttpRemote.HttpContextForwardOptions)">
            <summary>
                创建 <see cref="T:Furion.HttpRemote.HttpContextForwardBuilder" /> 实例
            </summary>
            <param name="httpContext">
                <see cref="T:Microsoft.AspNetCore.Http.HttpContext" />
            </param>
            <param name="httpMethod">请求方式</param>
            <param name="requestUri">请求地址。若为空则尝试从请求标头 <c>X-Forward-To</c> 中获取目标地址。</param>
            <param name="forwardOptions">
                <see cref="T:Furion.HttpRemote.HttpContextForwardOptions" />
            </param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpContextForwardBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.Extensions.HttpContextExtensions.CreateForwardBuilder(Microsoft.AspNetCore.Http.HttpContext,System.String,Furion.HttpRemote.HttpContextForwardOptions)">
            <summary>
                创建 <see cref="T:Furion.HttpRemote.HttpContextForwardBuilder" /> 实例
            </summary>
            <param name="httpContext">
                <see cref="T:Microsoft.AspNetCore.Http.HttpContext" />
            </param>
            <param name="requestUri">请求地址。若为空则尝试从请求标头 <c>X-Forward-To</c> 中获取目标地址。</param>
            <param name="forwardOptions">
                <see cref="T:Furion.HttpRemote.HttpContextForwardOptions" />
            </param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpContextForwardBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.Extensions.HttpContextExtensions.CreateForwardBuilder(Microsoft.AspNetCore.Http.HttpContext,System.Net.Http.HttpMethod,System.Uri,Furion.HttpRemote.HttpContextForwardOptions)">
            <summary>
                创建 <see cref="T:Furion.HttpRemote.HttpContextForwardBuilder" /> 实例
            </summary>
            <param name="httpContext">
                <see cref="T:Microsoft.AspNetCore.Http.HttpContext" />
            </param>
            <param name="httpMethod">请求方式</param>
            <param name="requestUri">请求地址。若为空则尝试从请求标头 <c>X-Forward-To</c> 中获取目标地址。</param>
            <param name="forwardOptions">
                <see cref="T:Furion.HttpRemote.HttpContextForwardOptions" />
            </param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpContextForwardBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.Extensions.HttpContextExtensions.CreateForwardBuilder(Microsoft.AspNetCore.Http.HttpContext,System.Uri,Furion.HttpRemote.HttpContextForwardOptions)">
            <summary>
                创建 <see cref="T:Furion.HttpRemote.HttpContextForwardBuilder" /> 实例
            </summary>
            <param name="httpContext">
                <see cref="T:Microsoft.AspNetCore.Http.HttpContext" />
            </param>
            <param name="requestUri">请求地址。若为空则尝试从请求标头 <c>X-Forward-To</c> 中获取目标地址。</param>
            <param name="forwardOptions">
                <see cref="T:Furion.HttpRemote.HttpContextForwardOptions" />
            </param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpContextForwardBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.Extensions.HttpContextExtensions.ForwardResponseMessage(Microsoft.AspNetCore.Http.HttpContext,System.Net.Http.HttpResponseMessage,Furion.HttpRemote.HttpContextForwardOptions)">
            <summary>
                根据配置选项将 <see cref="T:System.Net.Http.HttpResponseMessage" /> 信息转发到 <see cref="T:Microsoft.AspNetCore.Http.HttpContext" /> 中
            </summary>
            <param name="httpContext">
                <see cref="T:Microsoft.AspNetCore.Http.HttpContext" />
            </param>
            <param name="httpResponseMessage">
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </param>
            <param name="forwardOptions">
                <see cref="T:Furion.HttpRemote.HttpContextForwardOptions" />
            </param>
        </member>
        <member name="M:Furion.HttpRemote.Extensions.HttpContextExtensions.ForwardHttpHeaders(Microsoft.AspNetCore.Http.HttpResponse,System.Net.Http.Headers.HttpHeaders)">
            <summary>
                转发 HTTP 标头
            </summary>
            <param name="httpResponse">
                <see cref="T:Microsoft.AspNetCore.Http.HttpResponse" />
            </param>
            <param name="httpHeaders">
                <see cref="T:System.Net.Http.Headers.HttpHeaders" />
            </param>
        </member>
        <member name="M:Furion.HttpRemote.Extensions.HttpContextExtensions.ForwardAs``1(Microsoft.AspNetCore.Http.HttpContext,System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,Furion.HttpRemote.HttpContextForwardOptions)">
            <summary>
                转发 <see cref="T:Microsoft.AspNetCore.Http.HttpContext" /> 到新的 HTTP 远程地址
            </summary>
            <param name="httpContext">
                <see cref="T:Microsoft.AspNetCore.Http.HttpContext" />
            </param>
            <param name="requestUri">请求地址。若为空则尝试从请求标头 <c>X-Forward-To</c> 中获取目标地址。</param>
            <param name="configure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="forwardOptions">
                <see cref="T:Furion.HttpRemote.HttpContextForwardOptions" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <typeparamref name="TResult" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.Extensions.HttpContextExtensions.ForwardAs``1(Microsoft.AspNetCore.Http.HttpContext,System.Net.Http.HttpMethod,System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,Furion.HttpRemote.HttpContextForwardOptions)">
            <summary>
                转发 <see cref="T:Microsoft.AspNetCore.Http.HttpContext" /> 到新的 HTTP 远程地址
            </summary>
            <param name="httpContext"></param>
            <param name="httpMethod">请求方式</param>
            <param name="requestUri">请求地址。若为空则尝试从请求标头 <c>X-Forward-To</c> 中获取目标地址。</param>
            <param name="configure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="forwardOptions">
                <see cref="T:Furion.HttpRemote.HttpContextForwardOptions" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <typeparamref name="TResult" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.Extensions.HttpContextExtensions.ForwardAs``1(Microsoft.AspNetCore.Http.HttpContext,System.Uri,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,Furion.HttpRemote.HttpContextForwardOptions)">
            <summary>
                转发 <see cref="T:Microsoft.AspNetCore.Http.HttpContext" /> 到新的 HTTP 远程地址
            </summary>
            <param name="httpContext">
                <see cref="T:Microsoft.AspNetCore.Http.HttpContext" />
            </param>
            <param name="requestUri">请求地址。若为空则尝试从请求标头 <c>X-Forward-To</c> 中获取目标地址。</param>
            <param name="configure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="forwardOptions">
                <see cref="T:Furion.HttpRemote.HttpContextForwardOptions" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <typeparamref name="TResult" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.Extensions.HttpContextExtensions.ForwardAs``1(Microsoft.AspNetCore.Http.HttpContext,System.Net.Http.HttpMethod,System.Uri,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,Furion.HttpRemote.HttpContextForwardOptions)">
            <summary>
                转发 <see cref="T:Microsoft.AspNetCore.Http.HttpContext" /> 到新的 HTTP 远程地址
            </summary>
            <param name="httpContext">
                <see cref="T:Microsoft.AspNetCore.Http.HttpContext" />
            </param>
            <param name="httpMethod">请求方式</param>
            <param name="requestUri">请求地址。若为空则尝试从请求标头 <c>X-Forward-To</c> 中获取目标地址。</param>
            <param name="configure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="forwardOptions">
                <see cref="T:Furion.HttpRemote.HttpContextForwardOptions" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <typeparamref name="TResult" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.Extensions.HttpContextExtensions.ForwardAsAsync``1(Microsoft.AspNetCore.Http.HttpContext,System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,Furion.HttpRemote.HttpContextForwardOptions)">
            <summary>
                转发 <see cref="T:Microsoft.AspNetCore.Http.HttpContext" /> 到新的 HTTP 远程地址
            </summary>
            <param name="httpContext">
                <see cref="T:Microsoft.AspNetCore.Http.HttpContext" />
            </param>
            <param name="requestUri">请求地址。若为空则尝试从请求标头 <c>X-Forward-To</c> 中获取目标地址。</param>
            <param name="configure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="forwardOptions">
                <see cref="T:Furion.HttpRemote.HttpContextForwardOptions" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <typeparamref name="TResult" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.Extensions.HttpContextExtensions.ForwardAsAsync``1(Microsoft.AspNetCore.Http.HttpContext,System.Net.Http.HttpMethod,System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,Furion.HttpRemote.HttpContextForwardOptions)">
            <summary>
                转发 <see cref="T:Microsoft.AspNetCore.Http.HttpContext" /> 到新的 HTTP 远程地址
            </summary>
            <param name="httpContext"></param>
            <param name="httpMethod">请求方式</param>
            <param name="requestUri">请求地址。若为空则尝试从请求标头 <c>X-Forward-To</c> 中获取目标地址。</param>
            <param name="configure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="forwardOptions">
                <see cref="T:Furion.HttpRemote.HttpContextForwardOptions" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <typeparamref name="TResult" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.Extensions.HttpContextExtensions.ForwardAsAsync``1(Microsoft.AspNetCore.Http.HttpContext,System.Uri,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,Furion.HttpRemote.HttpContextForwardOptions)">
            <summary>
                转发 <see cref="T:Microsoft.AspNetCore.Http.HttpContext" /> 到新的 HTTP 远程地址
            </summary>
            <param name="httpContext">
                <see cref="T:Microsoft.AspNetCore.Http.HttpContext" />
            </param>
            <param name="requestUri">请求地址。若为空则尝试从请求标头 <c>X-Forward-To</c> 中获取目标地址。</param>
            <param name="configure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="forwardOptions">
                <see cref="T:Furion.HttpRemote.HttpContextForwardOptions" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <typeparamref name="TResult" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.Extensions.HttpContextExtensions.ForwardAsAsync``1(Microsoft.AspNetCore.Http.HttpContext,System.Net.Http.HttpMethod,System.Uri,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,Furion.HttpRemote.HttpContextForwardOptions)">
            <summary>
                转发 <see cref="T:Microsoft.AspNetCore.Http.HttpContext" /> 到新的 HTTP 远程地址
            </summary>
            <param name="httpContext">
                <see cref="T:Microsoft.AspNetCore.Http.HttpContext" />
            </param>
            <param name="httpMethod">请求方式</param>
            <param name="requestUri">请求地址。若为空则尝试从请求标头 <c>X-Forward-To</c> 中获取目标地址。</param>
            <param name="configure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="forwardOptions">
                <see cref="T:Furion.HttpRemote.HttpContextForwardOptions" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <typeparamref name="TResult" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.Extensions.HttpContextExtensions.ForwardAsString(Microsoft.AspNetCore.Http.HttpContext,System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,Furion.HttpRemote.HttpContextForwardOptions)">
            <summary>
                转发 <see cref="T:Microsoft.AspNetCore.Http.HttpContext" /> 到新的 HTTP 远程地址
            </summary>
            <param name="httpContext">
                <see cref="T:Microsoft.AspNetCore.Http.HttpContext" />
            </param>
            <param name="requestUri">请求地址。若为空则尝试从请求标头 <c>X-Forward-To</c> 中获取目标地址。</param>
            <param name="configure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="forwardOptions">
                <see cref="T:Furion.HttpRemote.HttpContextForwardOptions" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.Extensions.HttpContextExtensions.ForwardAsString(Microsoft.AspNetCore.Http.HttpContext,System.Net.Http.HttpMethod,System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,Furion.HttpRemote.HttpContextForwardOptions)">
            <summary>
                转发 <see cref="T:Microsoft.AspNetCore.Http.HttpContext" /> 到新的 HTTP 远程地址
            </summary>
            <param name="httpContext"></param>
            <param name="httpMethod">请求方式</param>
            <param name="requestUri">请求地址。若为空则尝试从请求标头 <c>X-Forward-To</c> 中获取目标地址。</param>
            <param name="configure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="forwardOptions">
                <see cref="T:Furion.HttpRemote.HttpContextForwardOptions" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.Extensions.HttpContextExtensions.ForwardAsString(Microsoft.AspNetCore.Http.HttpContext,System.Uri,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,Furion.HttpRemote.HttpContextForwardOptions)">
            <summary>
                转发 <see cref="T:Microsoft.AspNetCore.Http.HttpContext" /> 到新的 HTTP 远程地址
            </summary>
            <param name="httpContext">
                <see cref="T:Microsoft.AspNetCore.Http.HttpContext" />
            </param>
            <param name="requestUri">请求地址。若为空则尝试从请求标头 <c>X-Forward-To</c> 中获取目标地址。</param>
            <param name="configure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="forwardOptions">
                <see cref="T:Furion.HttpRemote.HttpContextForwardOptions" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.Extensions.HttpContextExtensions.ForwardAsString(Microsoft.AspNetCore.Http.HttpContext,System.Net.Http.HttpMethod,System.Uri,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,Furion.HttpRemote.HttpContextForwardOptions)">
            <summary>
                转发 <see cref="T:Microsoft.AspNetCore.Http.HttpContext" /> 到新的 HTTP 远程地址
            </summary>
            <param name="httpContext">
                <see cref="T:Microsoft.AspNetCore.Http.HttpContext" />
            </param>
            <param name="httpMethod">请求方式</param>
            <param name="requestUri">请求地址。若为空则尝试从请求标头 <c>X-Forward-To</c> 中获取目标地址。</param>
            <param name="configure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="forwardOptions">
                <see cref="T:Furion.HttpRemote.HttpContextForwardOptions" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.Extensions.HttpContextExtensions.ForwardAsStringAsync(Microsoft.AspNetCore.Http.HttpContext,System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,Furion.HttpRemote.HttpContextForwardOptions)">
            <summary>
                转发 <see cref="T:Microsoft.AspNetCore.Http.HttpContext" /> 到新的 HTTP 远程地址
            </summary>
            <param name="httpContext">
                <see cref="T:Microsoft.AspNetCore.Http.HttpContext" />
            </param>
            <param name="requestUri">请求地址。若为空则尝试从请求标头 <c>X-Forward-To</c> 中获取目标地址。</param>
            <param name="configure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="forwardOptions">
                <see cref="T:Furion.HttpRemote.HttpContextForwardOptions" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.Extensions.HttpContextExtensions.ForwardAsStringAsync(Microsoft.AspNetCore.Http.HttpContext,System.Net.Http.HttpMethod,System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,Furion.HttpRemote.HttpContextForwardOptions)">
            <summary>
                转发 <see cref="T:Microsoft.AspNetCore.Http.HttpContext" /> 到新的 HTTP 远程地址
            </summary>
            <param name="httpContext"></param>
            <param name="httpMethod">请求方式</param>
            <param name="requestUri">请求地址。若为空则尝试从请求标头 <c>X-Forward-To</c> 中获取目标地址。</param>
            <param name="configure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="forwardOptions">
                <see cref="T:Furion.HttpRemote.HttpContextForwardOptions" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.Extensions.HttpContextExtensions.ForwardAsStringAsync(Microsoft.AspNetCore.Http.HttpContext,System.Uri,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,Furion.HttpRemote.HttpContextForwardOptions)">
            <summary>
                转发 <see cref="T:Microsoft.AspNetCore.Http.HttpContext" /> 到新的 HTTP 远程地址
            </summary>
            <param name="httpContext">
                <see cref="T:Microsoft.AspNetCore.Http.HttpContext" />
            </param>
            <param name="requestUri">请求地址。若为空则尝试从请求标头 <c>X-Forward-To</c> 中获取目标地址。</param>
            <param name="configure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="forwardOptions">
                <see cref="T:Furion.HttpRemote.HttpContextForwardOptions" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.Extensions.HttpContextExtensions.ForwardAsStringAsync(Microsoft.AspNetCore.Http.HttpContext,System.Net.Http.HttpMethod,System.Uri,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,Furion.HttpRemote.HttpContextForwardOptions)">
            <summary>
                转发 <see cref="T:Microsoft.AspNetCore.Http.HttpContext" /> 到新的 HTTP 远程地址
            </summary>
            <param name="httpContext">
                <see cref="T:Microsoft.AspNetCore.Http.HttpContext" />
            </param>
            <param name="httpMethod">请求方式</param>
            <param name="requestUri">请求地址。若为空则尝试从请求标头 <c>X-Forward-To</c> 中获取目标地址。</param>
            <param name="configure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="forwardOptions">
                <see cref="T:Furion.HttpRemote.HttpContextForwardOptions" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.Extensions.HttpContextExtensions.ForwardAsByteArray(Microsoft.AspNetCore.Http.HttpContext,System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,Furion.HttpRemote.HttpContextForwardOptions)">
            <summary>
                转发 <see cref="T:Microsoft.AspNetCore.Http.HttpContext" /> 到新的 HTTP 远程地址
            </summary>
            <param name="httpContext">
                <see cref="T:Microsoft.AspNetCore.Http.HttpContext" />
            </param>
            <param name="requestUri">请求地址。若为空则尝试从请求标头 <c>X-Forward-To</c> 中获取目标地址。</param>
            <param name="configure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="forwardOptions">
                <see cref="T:Furion.HttpRemote.HttpContextForwardOptions" />
            </param>
            <returns>
                <c>byte[]</c>
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.Extensions.HttpContextExtensions.ForwardAsByteArray(Microsoft.AspNetCore.Http.HttpContext,System.Net.Http.HttpMethod,System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,Furion.HttpRemote.HttpContextForwardOptions)">
            <summary>
                转发 <see cref="T:Microsoft.AspNetCore.Http.HttpContext" /> 到新的 HTTP 远程地址
            </summary>
            <param name="httpContext"></param>
            <param name="httpMethod">请求方式</param>
            <param name="requestUri">请求地址。若为空则尝试从请求标头 <c>X-Forward-To</c> 中获取目标地址。</param>
            <param name="configure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="forwardOptions">
                <see cref="T:Furion.HttpRemote.HttpContextForwardOptions" />
            </param>
            <returns>
                <c>byte[]</c>
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.Extensions.HttpContextExtensions.ForwardAsByteArray(Microsoft.AspNetCore.Http.HttpContext,System.Uri,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,Furion.HttpRemote.HttpContextForwardOptions)">
            <summary>
                转发 <see cref="T:Microsoft.AspNetCore.Http.HttpContext" /> 到新的 HTTP 远程地址
            </summary>
            <param name="httpContext">
                <see cref="T:Microsoft.AspNetCore.Http.HttpContext" />
            </param>
            <param name="requestUri">请求地址。若为空则尝试从请求标头 <c>X-Forward-To</c> 中获取目标地址。</param>
            <param name="configure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="forwardOptions">
                <see cref="T:Furion.HttpRemote.HttpContextForwardOptions" />
            </param>
            <returns>
                <c>byte[]</c>
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.Extensions.HttpContextExtensions.ForwardAsByteArray(Microsoft.AspNetCore.Http.HttpContext,System.Net.Http.HttpMethod,System.Uri,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,Furion.HttpRemote.HttpContextForwardOptions)">
            <summary>
                转发 <see cref="T:Microsoft.AspNetCore.Http.HttpContext" /> 到新的 HTTP 远程地址
            </summary>
            <param name="httpContext">
                <see cref="T:Microsoft.AspNetCore.Http.HttpContext" />
            </param>
            <param name="httpMethod">请求方式</param>
            <param name="requestUri">请求地址。若为空则尝试从请求标头 <c>X-Forward-To</c> 中获取目标地址。</param>
            <param name="configure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="forwardOptions">
                <see cref="T:Furion.HttpRemote.HttpContextForwardOptions" />
            </param>
            <returns>
                <c>byte[]</c>
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.Extensions.HttpContextExtensions.ForwardAsByteArrayAsync(Microsoft.AspNetCore.Http.HttpContext,System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,Furion.HttpRemote.HttpContextForwardOptions)">
            <summary>
                转发 <see cref="T:Microsoft.AspNetCore.Http.HttpContext" /> 到新的 HTTP 远程地址
            </summary>
            <param name="httpContext">
                <see cref="T:Microsoft.AspNetCore.Http.HttpContext" />
            </param>
            <param name="requestUri">请求地址。若为空则尝试从请求标头 <c>X-Forward-To</c> 中获取目标地址。</param>
            <param name="configure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="forwardOptions">
                <see cref="T:Furion.HttpRemote.HttpContextForwardOptions" />
            </param>
            <returns>
                <c>byte[]</c>
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.Extensions.HttpContextExtensions.ForwardAsByteArrayAsync(Microsoft.AspNetCore.Http.HttpContext,System.Net.Http.HttpMethod,System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,Furion.HttpRemote.HttpContextForwardOptions)">
            <summary>
                转发 <see cref="T:Microsoft.AspNetCore.Http.HttpContext" /> 到新的 HTTP 远程地址
            </summary>
            <param name="httpContext"></param>
            <param name="httpMethod">请求方式</param>
            <param name="requestUri">请求地址。若为空则尝试从请求标头 <c>X-Forward-To</c> 中获取目标地址。</param>
            <param name="configure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="forwardOptions">
                <see cref="T:Furion.HttpRemote.HttpContextForwardOptions" />
            </param>
            <returns>
                <c>byte[]</c>
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.Extensions.HttpContextExtensions.ForwardAsByteArrayAsync(Microsoft.AspNetCore.Http.HttpContext,System.Uri,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,Furion.HttpRemote.HttpContextForwardOptions)">
            <summary>
                转发 <see cref="T:Microsoft.AspNetCore.Http.HttpContext" /> 到新的 HTTP 远程地址
            </summary>
            <param name="httpContext">
                <see cref="T:Microsoft.AspNetCore.Http.HttpContext" />
            </param>
            <param name="requestUri">请求地址。若为空则尝试从请求标头 <c>X-Forward-To</c> 中获取目标地址。</param>
            <param name="configure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="forwardOptions">
                <see cref="T:Furion.HttpRemote.HttpContextForwardOptions" />
            </param>
            <returns>
                <c>byte[]</c>
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.Extensions.HttpContextExtensions.ForwardAsByteArrayAsync(Microsoft.AspNetCore.Http.HttpContext,System.Net.Http.HttpMethod,System.Uri,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,Furion.HttpRemote.HttpContextForwardOptions)">
            <summary>
                转发 <see cref="T:Microsoft.AspNetCore.Http.HttpContext" /> 到新的 HTTP 远程地址
            </summary>
            <param name="httpContext">
                <see cref="T:Microsoft.AspNetCore.Http.HttpContext" />
            </param>
            <param name="httpMethod">请求方式</param>
            <param name="requestUri">请求地址。若为空则尝试从请求标头 <c>X-Forward-To</c> 中获取目标地址。</param>
            <param name="configure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="forwardOptions">
                <see cref="T:Furion.HttpRemote.HttpContextForwardOptions" />
            </param>
            <returns>
                <c>byte[]</c>
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.Extensions.HttpContextExtensions.ForwardAsStream(Microsoft.AspNetCore.Http.HttpContext,System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,Furion.HttpRemote.HttpContextForwardOptions)">
            <summary>
                转发 <see cref="T:Microsoft.AspNetCore.Http.HttpContext" /> 到新的 HTTP 远程地址
            </summary>
            <param name="httpContext">
                <see cref="T:Microsoft.AspNetCore.Http.HttpContext" />
            </param>
            <param name="requestUri">请求地址。若为空则尝试从请求标头 <c>X-Forward-To</c> 中获取目标地址。</param>
            <param name="configure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="forwardOptions">
                <see cref="T:Furion.HttpRemote.HttpContextForwardOptions" />
            </param>
            <returns>
                <see cref="T:System.IO.Stream" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.Extensions.HttpContextExtensions.ForwardAsStream(Microsoft.AspNetCore.Http.HttpContext,System.Net.Http.HttpMethod,System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,Furion.HttpRemote.HttpContextForwardOptions)">
            <summary>
                转发 <see cref="T:Microsoft.AspNetCore.Http.HttpContext" /> 到新的 HTTP 远程地址
            </summary>
            <param name="httpContext"></param>
            <param name="httpMethod">请求方式</param>
            <param name="requestUri">请求地址。若为空则尝试从请求标头 <c>X-Forward-To</c> 中获取目标地址。</param>
            <param name="configure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="forwardOptions">
                <see cref="T:Furion.HttpRemote.HttpContextForwardOptions" />
            </param>
            <returns>
                <see cref="T:System.IO.Stream" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.Extensions.HttpContextExtensions.ForwardAsStream(Microsoft.AspNetCore.Http.HttpContext,System.Uri,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,Furion.HttpRemote.HttpContextForwardOptions)">
            <summary>
                转发 <see cref="T:Microsoft.AspNetCore.Http.HttpContext" /> 到新的 HTTP 远程地址
            </summary>
            <param name="httpContext">
                <see cref="T:Microsoft.AspNetCore.Http.HttpContext" />
            </param>
            <param name="requestUri">请求地址。若为空则尝试从请求标头 <c>X-Forward-To</c> 中获取目标地址。</param>
            <param name="configure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="forwardOptions">
                <see cref="T:Furion.HttpRemote.HttpContextForwardOptions" />
            </param>
            <returns>
                <see cref="T:System.IO.Stream" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.Extensions.HttpContextExtensions.ForwardAsStream(Microsoft.AspNetCore.Http.HttpContext,System.Net.Http.HttpMethod,System.Uri,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,Furion.HttpRemote.HttpContextForwardOptions)">
            <summary>
                转发 <see cref="T:Microsoft.AspNetCore.Http.HttpContext" /> 到新的 HTTP 远程地址
            </summary>
            <param name="httpContext">
                <see cref="T:Microsoft.AspNetCore.Http.HttpContext" />
            </param>
            <param name="httpMethod">请求方式</param>
            <param name="requestUri">请求地址。若为空则尝试从请求标头 <c>X-Forward-To</c> 中获取目标地址。</param>
            <param name="configure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="forwardOptions">
                <see cref="T:Furion.HttpRemote.HttpContextForwardOptions" />
            </param>
            <returns>
                <see cref="T:System.IO.Stream" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.Extensions.HttpContextExtensions.ForwardAsStreamAsync(Microsoft.AspNetCore.Http.HttpContext,System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,Furion.HttpRemote.HttpContextForwardOptions)">
            <summary>
                转发 <see cref="T:Microsoft.AspNetCore.Http.HttpContext" /> 到新的 HTTP 远程地址
            </summary>
            <param name="httpContext">
                <see cref="T:Microsoft.AspNetCore.Http.HttpContext" />
            </param>
            <param name="requestUri">请求地址。若为空则尝试从请求标头 <c>X-Forward-To</c> 中获取目标地址。</param>
            <param name="configure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="forwardOptions">
                <see cref="T:Furion.HttpRemote.HttpContextForwardOptions" />
            </param>
            <returns>
                <see cref="T:System.IO.Stream" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.Extensions.HttpContextExtensions.ForwardAsStreamAsync(Microsoft.AspNetCore.Http.HttpContext,System.Net.Http.HttpMethod,System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,Furion.HttpRemote.HttpContextForwardOptions)">
            <summary>
                转发 <see cref="T:Microsoft.AspNetCore.Http.HttpContext" /> 到新的 HTTP 远程地址
            </summary>
            <param name="httpContext"></param>
            <param name="httpMethod">请求方式</param>
            <param name="requestUri">请求地址。若为空则尝试从请求标头 <c>X-Forward-To</c> 中获取目标地址。</param>
            <param name="configure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="forwardOptions">
                <see cref="T:Furion.HttpRemote.HttpContextForwardOptions" />
            </param>
            <returns>
                <see cref="T:System.IO.Stream" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.Extensions.HttpContextExtensions.ForwardAsStreamAsync(Microsoft.AspNetCore.Http.HttpContext,System.Uri,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,Furion.HttpRemote.HttpContextForwardOptions)">
            <summary>
                转发 <see cref="T:Microsoft.AspNetCore.Http.HttpContext" /> 到新的 HTTP 远程地址
            </summary>
            <param name="httpContext">
                <see cref="T:Microsoft.AspNetCore.Http.HttpContext" />
            </param>
            <param name="requestUri">请求地址。若为空则尝试从请求标头 <c>X-Forward-To</c> 中获取目标地址。</param>
            <param name="configure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="forwardOptions">
                <see cref="T:Furion.HttpRemote.HttpContextForwardOptions" />
            </param>
            <returns>
                <see cref="T:System.IO.Stream" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.Extensions.HttpContextExtensions.ForwardAsStreamAsync(Microsoft.AspNetCore.Http.HttpContext,System.Net.Http.HttpMethod,System.Uri,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,Furion.HttpRemote.HttpContextForwardOptions)">
            <summary>
                转发 <see cref="T:Microsoft.AspNetCore.Http.HttpContext" /> 到新的 HTTP 远程地址
            </summary>
            <param name="httpContext">
                <see cref="T:Microsoft.AspNetCore.Http.HttpContext" />
            </param>
            <param name="httpMethod">请求方式</param>
            <param name="requestUri">请求地址。若为空则尝试从请求标头 <c>X-Forward-To</c> 中获取目标地址。</param>
            <param name="configure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="forwardOptions">
                <see cref="T:Furion.HttpRemote.HttpContextForwardOptions" />
            </param>
            <returns>
                <see cref="T:System.IO.Stream" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.Extensions.HttpContextExtensions.ForwardAsResult(Microsoft.AspNetCore.Http.HttpContext,System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,Furion.HttpRemote.HttpContextForwardOptions)">
            <summary>
                转发 <see cref="T:Microsoft.AspNetCore.Http.HttpContext" /> 到新的 HTTP 远程地址
            </summary>
            <param name="httpContext">
                <see cref="T:Microsoft.AspNetCore.Http.HttpContext" />
            </param>
            <param name="requestUri">请求地址。若为空则尝试从请求标头 <c>X-Forward-To</c> 中获取目标地址。</param>
            <param name="configure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="forwardOptions">
                <see cref="T:Furion.HttpRemote.HttpContextForwardOptions" />
            </param>
            <returns>
                <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.Extensions.HttpContextExtensions.ForwardAsResult(Microsoft.AspNetCore.Http.HttpContext,System.Net.Http.HttpMethod,System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,Furion.HttpRemote.HttpContextForwardOptions)">
            <summary>
                转发 <see cref="T:Microsoft.AspNetCore.Http.HttpContext" /> 到新的 HTTP 远程地址
            </summary>
            <param name="httpContext"></param>
            <param name="httpMethod">请求方式</param>
            <param name="requestUri">请求地址。若为空则尝试从请求标头 <c>X-Forward-To</c> 中获取目标地址。</param>
            <param name="configure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="forwardOptions">
                <see cref="T:Furion.HttpRemote.HttpContextForwardOptions" />
            </param>
            <returns>
                <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.Extensions.HttpContextExtensions.ForwardAsResult(Microsoft.AspNetCore.Http.HttpContext,System.Uri,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,Furion.HttpRemote.HttpContextForwardOptions)">
            <summary>
                转发 <see cref="T:Microsoft.AspNetCore.Http.HttpContext" /> 到新的 HTTP 远程地址
            </summary>
            <param name="httpContext">
                <see cref="T:Microsoft.AspNetCore.Http.HttpContext" />
            </param>
            <param name="requestUri">请求地址。若为空则尝试从请求标头 <c>X-Forward-To</c> 中获取目标地址。</param>
            <param name="configure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="forwardOptions">
                <see cref="T:Furion.HttpRemote.HttpContextForwardOptions" />
            </param>
            <returns>
                <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.Extensions.HttpContextExtensions.ForwardAsResult(Microsoft.AspNetCore.Http.HttpContext,System.Net.Http.HttpMethod,System.Uri,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,Furion.HttpRemote.HttpContextForwardOptions)">
            <summary>
                转发 <see cref="T:Microsoft.AspNetCore.Http.HttpContext" /> 到新的 HTTP 远程地址
            </summary>
            <param name="httpContext">
                <see cref="T:Microsoft.AspNetCore.Http.HttpContext" />
            </param>
            <param name="httpMethod">请求方式</param>
            <param name="requestUri">请求地址。若为空则尝试从请求标头 <c>X-Forward-To</c> 中获取目标地址。</param>
            <param name="configure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="forwardOptions">
                <see cref="T:Furion.HttpRemote.HttpContextForwardOptions" />
            </param>
            <returns>
                <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.Extensions.HttpContextExtensions.ForwardAsResultAsync(Microsoft.AspNetCore.Http.HttpContext,System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,Furion.HttpRemote.HttpContextForwardOptions)">
            <summary>
                转发 <see cref="T:Microsoft.AspNetCore.Http.HttpContext" /> 到新的 HTTP 远程地址
            </summary>
            <param name="httpContext">
                <see cref="T:Microsoft.AspNetCore.Http.HttpContext" />
            </param>
            <param name="requestUri">请求地址。若为空则尝试从请求标头 <c>X-Forward-To</c> 中获取目标地址。</param>
            <param name="configure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="forwardOptions">
                <see cref="T:Furion.HttpRemote.HttpContextForwardOptions" />
            </param>
            <returns>
                <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.Extensions.HttpContextExtensions.ForwardAsResultAsync(Microsoft.AspNetCore.Http.HttpContext,System.Net.Http.HttpMethod,System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,Furion.HttpRemote.HttpContextForwardOptions)">
            <summary>
                转发 <see cref="T:Microsoft.AspNetCore.Http.HttpContext" /> 到新的 HTTP 远程地址
            </summary>
            <param name="httpContext"></param>
            <param name="httpMethod">请求方式</param>
            <param name="requestUri">请求地址。若为空则尝试从请求标头 <c>X-Forward-To</c> 中获取目标地址。</param>
            <param name="configure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="forwardOptions">
                <see cref="T:Furion.HttpRemote.HttpContextForwardOptions" />
            </param>
            <returns>
                <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.Extensions.HttpContextExtensions.ForwardAsResultAsync(Microsoft.AspNetCore.Http.HttpContext,System.Uri,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,Furion.HttpRemote.HttpContextForwardOptions)">
            <summary>
                转发 <see cref="T:Microsoft.AspNetCore.Http.HttpContext" /> 到新的 HTTP 远程地址
            </summary>
            <param name="httpContext">
                <see cref="T:Microsoft.AspNetCore.Http.HttpContext" />
            </param>
            <param name="requestUri">请求地址。若为空则尝试从请求标头 <c>X-Forward-To</c> 中获取目标地址。</param>
            <param name="configure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="forwardOptions">
                <see cref="T:Furion.HttpRemote.HttpContextForwardOptions" />
            </param>
            <returns>
                <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.Extensions.HttpContextExtensions.ForwardAsResultAsync(Microsoft.AspNetCore.Http.HttpContext,System.Net.Http.HttpMethod,System.Uri,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,Furion.HttpRemote.HttpContextForwardOptions)">
            <summary>
                转发 <see cref="T:Microsoft.AspNetCore.Http.HttpContext" /> 到新的 HTTP 远程地址
            </summary>
            <param name="httpContext">
                <see cref="T:Microsoft.AspNetCore.Http.HttpContext" />
            </param>
            <param name="httpMethod">请求方式</param>
            <param name="requestUri">请求地址。若为空则尝试从请求标头 <c>X-Forward-To</c> 中获取目标地址。</param>
            <param name="configure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="forwardOptions">
                <see cref="T:Furion.HttpRemote.HttpContextForwardOptions" />
            </param>
            <returns>
                <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult" />
            </returns>
        </member>
        <member name="T:Furion.HttpRemote.Extensions.HttpRemoteExtensions">
            <summary>
                HTTP 远程服务拓展类
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.Extensions.HttpRemoteExtensions.AddProfilerDelegatingHandler(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder,System.Func{System.Boolean})">
            <summary>
                添加 HTTP 远程请求分析工具处理委托
            </summary>
            <param name="builder">
                <see cref="T:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" />
            </param>
            <param name="disableConfigure">自定义禁用配置委托</param>
            <returns>
                <see cref="T:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.Extensions.HttpRemoteExtensions.PerformanceOptimization(System.Net.Http.HttpClient)">
            <summary>
                为 <see cref="T:System.Net.Http.HttpClient" /> 启用性能优化
            </summary>
            <param name="httpClient">
                <see cref="T:System.Net.Http.HttpClient" />
            </param>
        </member>
        <member name="M:Furion.HttpRemote.Extensions.HttpRemoteExtensions.ProfilerHeaders(System.Net.Http.HttpRequestMessage,System.String)">
            <summary>
                分析 <see cref="T:System.Net.Http.HttpRequestMessage" /> 标头
            </summary>
            <param name="httpRequestMessage">
                <see cref="T:System.Net.Http.HttpRequestMessage" />
            </param>
            <param name="summary">摘要</param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.Extensions.HttpRemoteExtensions.ProfilerHeaders(System.Net.Http.HttpResponseMessage,System.String)">
            <summary>
                分析 <see cref="T:System.Net.Http.HttpResponseMessage" /> 标头
            </summary>
            <param name="httpResponseMessage">
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </param>
            <param name="summary">摘要</param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.Extensions.HttpRemoteExtensions.ProfilerGeneralAndHeaders(System.Net.Http.HttpResponseMessage,System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Collections.Generic.IEnumerable{System.String}}})">
            <summary>
                分析常规和 <see cref="T:System.Net.Http.HttpResponseMessage" /> 标头
            </summary>
            <param name="httpResponseMessage">
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </param>
            <param name="responseSummary">响应标头摘要</param>
            <param name="generalSummary">常规摘要</param>
            <param name="generalCustomKeyValues">自定义常规摘要键值集合</param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.Extensions.HttpRemoteExtensions.ProfilerAsync(System.Net.Http.HttpContent,System.String,System.Threading.CancellationToken)">
            <summary>
                分析 <see cref="T:System.Net.Http.HttpContent" /> 内容
            </summary>
            <param name="httpContent">
                <see cref="T:System.Net.Http.HttpContent" />
            </param>
            <param name="summary">摘要</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="T:Furion.HttpRemote.HttpContentConverterFactory">
            <inheritdoc cref="T:Furion.HttpRemote.IHttpContentConverterFactory" />
        </member>
        <member name="F:Furion.HttpRemote.HttpContentConverterFactory._converters">
            <summary>
                <see cref="T:Furion.HttpRemote.IHttpContentConverter`1" /> 字典集合
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.HttpContentConverterFactory.#ctor(System.IServiceProvider,Furion.HttpRemote.IHttpContentConverter[])">
            <summary>
                <inheritdoc cref="T:Furion.HttpRemote.HttpContentConverterFactory" />
            </summary>
            <param name="serviceProvider">
                <see cref="T:System.IServiceProvider" />
            </param>
            <param name="converters"><see cref="T:Furion.HttpRemote.IHttpContentConverter`1" /> 数组</param>
        </member>
        <member name="P:Furion.HttpRemote.HttpContentConverterFactory.ServiceProvider">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpContentConverterFactory.Read``1(System.Net.Http.HttpResponseMessage,Furion.HttpRemote.IHttpContentConverter[],System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpContentConverterFactory.Read(System.Type,System.Net.Http.HttpResponseMessage,Furion.HttpRemote.IHttpContentConverter[],System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpContentConverterFactory.ReadAsync``1(System.Net.Http.HttpResponseMessage,Furion.HttpRemote.IHttpContentConverter[],System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpContentConverterFactory.ReadAsync(System.Type,System.Net.Http.HttpResponseMessage,Furion.HttpRemote.IHttpContentConverter[],System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpContentConverterFactory.GetConverter``1(Furion.HttpRemote.IHttpContentConverter[])">
            <summary>
                获取 <see cref="T:Furion.HttpRemote.IHttpContentConverter`1" /> 实例
            </summary>
            <param name="converters"><see cref="T:Furion.HttpRemote.IHttpContentConverter`1" /> 数组</param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:Furion.HttpRemote.IHttpContentConverter`1" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpContentConverterFactory.GetConverter(System.Type,Furion.HttpRemote.IHttpContentConverter[])">
            <summary>
                获取 <see cref="T:Furion.HttpRemote.IHttpContentConverter" /> 实例
            </summary>
            <param name="resultType">转换的目标类型</param>
            <param name="converters"><see cref="T:Furion.HttpRemote.IHttpContentConverter`1" /> 数组</param>
            <returns>
                <see cref="T:Furion.HttpRemote.IHttpContentConverter" />
            </returns>
        </member>
        <member name="T:Furion.HttpRemote.HttpContentProcessorFactory">
            <inheritdoc cref="T:Furion.HttpRemote.IHttpContentProcessorFactory" />
        </member>
        <member name="F:Furion.HttpRemote.HttpContentProcessorFactory._processors">
            <summary>
                <see cref="T:Furion.HttpRemote.IHttpContentProcessor" /> 字典集合
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.HttpContentProcessorFactory.#ctor(System.IServiceProvider,Furion.HttpRemote.IHttpContentProcessor[])">
            <summary>
                <inheritdoc cref="T:Furion.HttpRemote.HttpContentProcessorFactory" />
            </summary>
            <param name="serviceProvider">
                <see cref="T:System.IServiceProvider" />
            </param>
            <param name="processors"><see cref="T:Furion.HttpRemote.IHttpContentProcessor" /> 数组</param>
        </member>
        <member name="P:Furion.HttpRemote.HttpContentProcessorFactory.ServiceProvider">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpContentProcessorFactory.Build(System.Object,System.String,System.Text.Encoding,Furion.HttpRemote.IHttpContentProcessor[])">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpContentProcessorFactory.GetProcessor(System.Object,System.String,Furion.HttpRemote.IHttpContentProcessor[])">
            <summary>
                查找可以处理指定内容类型或数据类型的 <see cref="T:Furion.HttpRemote.IHttpContentProcessor" /> 实例
            </summary>
            <param name="rawContent">原始请求内容</param>
            <param name="contentType">内容类型</param>
            <param name="processors">自定义 <see cref="T:Furion.HttpRemote.IHttpContentProcessor" /> 数组</param>
            <returns>
                <see cref="T:Furion.HttpRemote.IHttpContentProcessor" />
            </returns>
        </member>
        <member name="T:Furion.HttpRemote.IHttpContentConverterFactory">
            <summary>
                <see cref="T:Furion.HttpRemote.IHttpContentConverter`1" /> 工厂
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.IHttpContentConverterFactory.ServiceProvider">
            <summary>
                <inheritdoc cref="T:System.IServiceProvider" />
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.IHttpContentConverterFactory.Read``1(System.Net.Http.HttpResponseMessage,Furion.HttpRemote.IHttpContentConverter[],System.Threading.CancellationToken)">
            <summary>
                将 <see cref="T:System.Net.Http.HttpResponseMessage" /> 转换为
                <typeparamref name="TResult" />
                实例
            </summary>
            <param name="httpResponseMessage">
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </param>
            <param name="converters"><see cref="T:Furion.HttpRemote.IHttpContentConverter`1" /> 数组</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <typeparamref name="TResult" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpContentConverterFactory.Read(System.Type,System.Net.Http.HttpResponseMessage,Furion.HttpRemote.IHttpContentConverter[],System.Threading.CancellationToken)">
            <summary>
                将 <see cref="T:System.Net.Http.HttpResponseMessage" /> 转换为 <see cref="T:System.Object" /> 实例
            </summary>
            <param name="resultType">转换的目标类型</param>
            <param name="httpResponseMessage">
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </param>
            <param name="converters"><see cref="T:Furion.HttpRemote.IHttpContentConverter`1" /> 数组</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Object" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpContentConverterFactory.ReadAsync``1(System.Net.Http.HttpResponseMessage,Furion.HttpRemote.IHttpContentConverter[],System.Threading.CancellationToken)">
            <summary>
                将 <see cref="T:System.Net.Http.HttpResponseMessage" /> 转换为
                <typeparamref name="TResult" />
                实例
            </summary>
            <param name="httpResponseMessage">
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </param>
            <param name="converters"><see cref="T:Furion.HttpRemote.IHttpContentConverter`1" /> 数组</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <typeparamref name="TResult" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpContentConverterFactory.ReadAsync(System.Type,System.Net.Http.HttpResponseMessage,Furion.HttpRemote.IHttpContentConverter[],System.Threading.CancellationToken)">
            <summary>
                将 <see cref="T:System.Net.Http.HttpResponseMessage" /> 转换为 <see cref="T:System.Object" /> 实例
            </summary>
            <param name="resultType">转换的目标类型</param>
            <param name="httpResponseMessage">
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </param>
            <param name="converters"><see cref="T:Furion.HttpRemote.IHttpContentConverter`1" /> 数组</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Object" />
            </returns>
        </member>
        <member name="T:Furion.HttpRemote.IHttpContentProcessorFactory">
            <summary>
                <see cref="T:Furion.HttpRemote.IHttpContentProcessor" /> 工厂
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.IHttpContentProcessorFactory.ServiceProvider">
            <summary>
                <inheritdoc cref="T:System.IServiceProvider" />
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.IHttpContentProcessorFactory.Build(System.Object,System.String,System.Text.Encoding,Furion.HttpRemote.IHttpContentProcessor[])">
            <summary>
                构建 <see cref="T:System.Net.Http.HttpContent" /> 实例
            </summary>
            <param name="rawContent">原始请求内容</param>
            <param name="contentType">内容类型</param>
            <param name="encoding">内容编码</param>
            <param name="processors"><see cref="T:Furion.HttpRemote.IHttpContentProcessor" /> 数组</param>
            <returns>
                <see cref="T:System.Net.Http.HttpContent" />
            </returns>
        </member>
        <member name="T:Furion.HttpRemote.IObjectContentConverterFactory">
            <summary>
                <see cref="T:Furion.HttpRemote.ObjectContentConverter`1" /> 工厂
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.IObjectContentConverterFactory.GetConverter``1">
            <summary>
                获取 <see cref="T:Furion.HttpRemote.ObjectContentConverter`1" /> 实例
            </summary>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:Furion.HttpRemote.ObjectContentConverter`1" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IObjectContentConverterFactory.GetConverter(System.Type)">
            <summary>
                获取 <see cref="T:Furion.HttpRemote.ObjectContentConverter" /> 实例
            </summary>
            <param name="resultType">转换的目标类型</param>
            <returns>
                <see cref="T:Furion.HttpRemote.ObjectContentConverter" />
            </returns>
        </member>
        <member name="T:Furion.HttpRemote.ObjectContentConverterFactory">
            <inheritdoc cref="T:Furion.HttpRemote.IObjectContentConverterFactory" />
        </member>
        <member name="M:Furion.HttpRemote.ObjectContentConverterFactory.GetConverter``1">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.ObjectContentConverterFactory.GetConverter(System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Furion.HttpRemote.IHttpFileTransferEventHandler">
            <summary>
                HTTP 文件传输事件处理程序
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.IHttpFileTransferEventHandler.OnTransferStarted">
            <summary>
                用于处理在文件开始传输时的操作
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.IHttpFileTransferEventHandler.OnProgressChangedAsync(Furion.HttpRemote.FileTransferProgress)">
            <summary>
                用于传输进度发生变化时的操作
            </summary>
            <param name="fileTransferProgress">
                <see cref="T:Furion.HttpRemote.FileTransferProgress" />
            </param>
            <returns>
                <see cref="T:System.Threading.Tasks.Task" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpFileTransferEventHandler.OnTransferCompleted(System.Int64)">
            <summary>
                用于处理在文件传输完成时的操作
            </summary>
            <param name="duration">总耗时（毫秒）</param>
        </member>
        <member name="M:Furion.HttpRemote.IHttpFileTransferEventHandler.OnTransferFailed(System.Exception)">
            <summary>
                用于处理在文件传输发生异常时的操作
            </summary>
            <param name="exception">
                <see cref="T:System.Exception" />
            </param>
        </member>
        <member name="T:Furion.HttpRemote.IHttpLongPollingEventHandler">
            <summary>
                长轮询事件处理程序
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.IHttpLongPollingEventHandler.OnDataReceivedAsync(System.Net.Http.HttpResponseMessage)">
            <summary>
                用于接收服务器返回 <c>200~299</c> 状态码的数据的操作
            </summary>
            <param name="httpResponseMessage">
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </param>
            <returns>
                <see cref="T:System.Threading.Tasks.Task" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpLongPollingEventHandler.OnErrorAsync(System.Net.Http.HttpResponseMessage)">
            <summary>
                用于接收服务器返回非 <c>200~299</c> 状态码的数据的操作
            </summary>
            <param name="httpResponseMessage">
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </param>
            <returns>
                <see cref="T:System.Threading.Tasks.Task" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpLongPollingEventHandler.OnEndOfStreamAsync(System.Net.Http.HttpResponseMessage)">
            <summary>
                用于响应标头包含 <c>X-End-Of-Stream</c> 时触发的操作
            </summary>
            <param name="httpResponseMessage">
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </param>
            <returns>
                <see cref="T:System.Threading.Tasks.Task" />
            </returns>
        </member>
        <member name="T:Furion.HttpRemote.IHttpRequestEventHandler">
            <summary>
                HTTP 远程请求事件处理程序
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRequestEventHandler.OnPreSendRequest(System.Net.Http.HttpRequestMessage)">
            <summary>
                用于处理在发送 HTTP 请求之前的操作
            </summary>
            <param name="httpRequestMessage">
                <see cref="T:System.Net.Http.HttpRequestMessage" />
            </param>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRequestEventHandler.OnPostReceiveResponse(System.Net.Http.HttpResponseMessage)">
            <summary>
                用于处理在收到 HTTP 响应之后的操作
            </summary>
            <param name="httpResponseMessage">
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </param>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRequestEventHandler.OnRequestFailed(System.Exception,System.Net.Http.HttpResponseMessage)">
            <summary>
                用于处理在发送 HTTP 请求发生异常时的操作
            </summary>
            <param name="exception">
                <see cref="T:System.Exception" />
            </param>
            <param name="httpResponseMessage">
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </param>
        </member>
        <member name="T:Furion.HttpRemote.IHttpServerSentEventsEventHandler">
            <summary>
                Server-Sent Events 事件处理程序
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.IHttpServerSentEventsEventHandler.OnOpen">
            <summary>
                用于在与事件源的连接打开时的操作
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.IHttpServerSentEventsEventHandler.OnMessageAsync(Furion.HttpRemote.ServerSentEventsData)">
            <summary>
                用于在从事件源接收到数据时的操作
            </summary>
            <param name="serverSentEventsData">
                <see cref="T:Furion.HttpRemote.ServerSentEventsData" />
            </param>
            <returns>
                <see cref="T:System.Threading.Tasks.Task" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpServerSentEventsEventHandler.OnError(System.Exception)">
            <summary>
                用于在事件源连接未能打开时的操作
            </summary>
            <param name="exception">
                <see cref="T:System.Exception" />
            </param>
        </member>
        <member name="T:Furion.HttpRemote.Helpers">
            <summary>
                HTTP 远程请求模块帮助类
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.Helpers.GetStreamFromRemote(System.String,System.Int64)">
            <summary>
                从互联网 URL 地址中加载流
            </summary>
            <param name="requestUri">互联网 URL 地址</param>
            <param name="maxResponseContentBufferSize">响应内容的最大缓存大小。默认值为：<c>100MB</c>。</param>
            <returns>
                <see cref="T:System.IO.Stream" />
            </returns>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Furion.HttpRemote.Helpers.GetFileNameFromUri(System.Uri)">
            <summary>
                从 <see cref="T:System.Uri" /> 中解析文件的名称
            </summary>
            <param name="uri">
                <see cref="T:System.Uri" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.Helpers.ParseHttpMethod(System.String)">
            <summary>
                解析 HTTP 谓词
            </summary>
            <param name="httpMethod">HTTP 谓词</param>
            <returns>
                <see cref="T:System.Net.Http.HttpMethod" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.Helpers.IsFormUrlEncodedFormat(System.String)">
            <summary>
                验证字符串是否是 <c>application/x-www-form-urlencoded</c> 格式
            </summary>
            <param name="output">字符串</param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.Helpers.FormUrlEncodedFormatRegex">
            <remarks>
            Pattern:<br/>
            <code>^(?:(?:[a-zA-Z0-9-._~]+|%(?:[0-9A-Fa-f]{2}))+=(?:[a-zA-Z0-9-._~]*|%(?:[0-9A-Fa-f]{2}))+)(?:&amp;(?:[a-zA-Z0-9-._~]+|%(?:[0-9A-Fa-f]{2}))+=(?:[a-zA-Z0-9-._~]*|%(?:[0-9A-Fa-f]{2}))+)*$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Loop greedily at least once.<br/>
                ○ Match with 2 alternative expressions.<br/>
                    ○ Match a character in the set [-.0-9A-Z_a-z~] greedily at least once.<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match '%'.<br/>
                        ○ Match a character in the set [0-9A-Fa-f] exactly 2 times.<br/>
            ○ Match '='.<br/>
            ○ Loop greedily at least once.<br/>
                ○ Match with 2 alternative expressions.<br/>
                    ○ Match a character in the set [-.0-9A-Z_a-z~] greedily any number of times.<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match '%'.<br/>
                        ○ Match a character in the set [0-9A-Fa-f] exactly 2 times.<br/>
            ○ Loop greedily any number of times.<br/>
                ○ Match '&amp;'.<br/>
                ○ Loop greedily at least once.<br/>
                    ○ Match with 2 alternative expressions.<br/>
                        ○ Match a character in the set [-.0-9A-Z_a-z~] greedily at least once.<br/>
                        ○ Match a sequence of expressions.<br/>
                            ○ Match '%'.<br/>
                            ○ Match a character in the set [0-9A-Fa-f] exactly 2 times.<br/>
                ○ Match '='.<br/>
                ○ Loop greedily at least once.<br/>
                    ○ Match with 2 alternative expressions.<br/>
                        ○ Match a character in the set [-.0-9A-Z_a-z~] greedily any number of times.<br/>
                        ○ Match a sequence of expressions.<br/>
                            ○ Match '%'.<br/>
                            ○ Match a character in the set [0-9A-Fa-f] exactly 2 times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Furion.HttpRemote.FileDownloadManager">
            <summary>
                文件下载管理器
            </summary>
        </member>
        <member name="F:Furion.HttpRemote.FileDownloadManager._httpFileDownloadBuilder">
            <inheritdoc cref="T:Furion.HttpRemote.HttpFileDownloadBuilder" />
        </member>
        <member name="F:Furion.HttpRemote.FileDownloadManager._httpRemoteService">
            <inheritdoc cref="T:Furion.HttpRemote.IHttpRemoteService" />
        </member>
        <member name="F:Furion.HttpRemote.FileDownloadManager._progressChannel">
            <summary>
                文件传输进度信息的通道
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.FileDownloadManager.#ctor(Furion.HttpRemote.IHttpRemoteService,Furion.HttpRemote.HttpFileDownloadBuilder,System.Action{Furion.HttpRemote.HttpRequestBuilder})">
            <summary>
                <inheritdoc cref="T:Furion.HttpRemote.FileDownloadManager" />
            </summary>
            <param name="httpRemoteService">
                <see cref="T:Furion.HttpRemote.IHttpRemoteService" />
            </param>
            <param name="httpFileDownloadBuilder">
                <see cref="T:Furion.HttpRemote.HttpFileDownloadBuilder" />
            </param>
            <param name="configure">自定义配置委托</param>
        </member>
        <member name="P:Furion.HttpRemote.FileDownloadManager.RequestBuilder">
            <summary>
                <inheritdoc cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.FileDownloadManager.FileTransferEventHandler">
            <summary>
                <inheritdoc cref="T:Furion.HttpRemote.IHttpFileTransferEventHandler" />
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.FileDownloadManager.Start(System.Threading.CancellationToken)">
            <summary>
                开始下载
            </summary>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
        </member>
        <member name="M:Furion.HttpRemote.FileDownloadManager.StartAsync(System.Threading.CancellationToken)">
            <summary>
                开始下载
            </summary>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
        </member>
        <member name="M:Furion.HttpRemote.FileDownloadManager.ReportProgressAsync(System.Threading.CancellationToken)">
            <summary>
                文件传输进度报告任务
            </summary>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
        </member>
        <member name="M:Furion.HttpRemote.FileDownloadManager.HandleTransferStarted">
            <summary>
                处理文件传输开始
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.FileDownloadManager.HandleTransferCompleted(System.Int64)">
            <summary>
                处理文件传输完成
            </summary>
            <param name="duration">文件传输总花费时间</param>
        </member>
        <member name="M:Furion.HttpRemote.FileDownloadManager.HandleTransferFailed(System.Exception)">
            <summary>
                处理文件传输失败
            </summary>
            <param name="e">
                <see cref="T:System.Exception" />
            </param>
        </member>
        <member name="M:Furion.HttpRemote.FileDownloadManager.HandleFileExistAndSkip">
            <summary>
                处理文件存在且配置为跳过时的操作
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.FileDownloadManager.HandleProgressChangedAsync(Furion.HttpRemote.FileTransferProgress)">
            <summary>
                处理文件传输进度变化
            </summary>
            <param name="fileTransferProgress">
                <see cref="T:Furion.HttpRemote.FileTransferProgress" />
            </param>
        </member>
        <member name="M:Furion.HttpRemote.FileDownloadManager.ShouldContinueWithDownload(System.Net.Http.HttpResponseMessage,System.String@)">
            <summary>
                根据文件是否存在及配置的行为来决定是否应继续进行文件下载
            </summary>
            <param name="httpResponseMessage">
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </param>
            <param name="destinationPath">文件保存的目标路径</param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Furion.HttpRemote.FileDownloadManager.GetFileName(System.Net.Http.HttpResponseMessage)">
            <summary>
                获取文件下载名
            </summary>
            <param name="httpResponseMessage">
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.FileDownloadManager.MoveTempFileToDestinationPath(System.IO.FileStream,System.String,System.String)">
            <summary>
                移动临时文件至文件保存的目标路径
            </summary>
            <param name="fileStream">
                <see cref="T:System.IO.FileStream" />
            </param>
            <param name="tempDestinationPath">临时文件路径</param>
            <param name="destinationPath">文件保存的目标路径</param>
        </member>
        <member name="T:Furion.HttpRemote.FileUploadManager">
            <summary>
                文件上传管理器
            </summary>
        </member>
        <member name="F:Furion.HttpRemote.FileUploadManager._httpFileUploadBuilder">
            <inheritdoc cref="T:Furion.HttpRemote.HttpFileUploadBuilder" />
        </member>
        <member name="F:Furion.HttpRemote.FileUploadManager._httpRemoteService">
            <inheritdoc cref="T:Furion.HttpRemote.IHttpRemoteService" />
        </member>
        <member name="F:Furion.HttpRemote.FileUploadManager._progressChannel">
            <summary>
                文件传输进度信息的通道
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.FileUploadManager.#ctor(Furion.HttpRemote.IHttpRemoteService,Furion.HttpRemote.HttpFileUploadBuilder,System.Action{Furion.HttpRemote.HttpRequestBuilder})">
            <summary>
                <inheritdoc cref="T:Furion.HttpRemote.FileUploadManager" />
            </summary>
            <param name="httpRemoteService">
                <see cref="T:Furion.HttpRemote.IHttpRemoteService" />
            </param>
            <param name="httpFileUploadBuilder">
                <see cref="T:Furion.HttpRemote.HttpFileUploadBuilder" />
            </param>
            <param name="configure">自定义配置委托</param>
        </member>
        <member name="P:Furion.HttpRemote.FileUploadManager.RequestBuilder">
            <summary>
                <inheritdoc cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.FileUploadManager.FileTransferEventHandler">
            <summary>
                <inheritdoc cref="T:Furion.HttpRemote.IHttpFileTransferEventHandler" />
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.FileUploadManager.Start(System.Threading.CancellationToken)">
            <summary>
                开始上传
            </summary>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Furion.HttpRemote.FileUploadManager.StartAsync(System.Threading.CancellationToken)">
            <summary>
                开始上传
            </summary>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Threading.Tasks.Task`1" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.FileUploadManager.ReportProgressAsync(System.Threading.CancellationToken)">
            <summary>
                文件传输进度报告任务
            </summary>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
        </member>
        <member name="M:Furion.HttpRemote.FileUploadManager.HandleTransferStarted">
            <summary>
                处理文件传输开始
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.FileUploadManager.HandleTransferCompleted(System.Int64)">
            <summary>
                处理文件传输完成
            </summary>
            <param name="duration">文件传输总花费时间</param>
        </member>
        <member name="M:Furion.HttpRemote.FileUploadManager.HandleTransferFailed(System.Exception)">
            <summary>
                处理文件传输失败
            </summary>
            <param name="e">
                <see cref="T:System.Exception" />
            </param>
        </member>
        <member name="M:Furion.HttpRemote.FileUploadManager.HandleProgressChangedAsync(Furion.HttpRemote.FileTransferProgress)">
            <summary>
                处理文件传输进度变化
            </summary>
            <param name="fileTransferProgress">
                <see cref="T:Furion.HttpRemote.FileTransferProgress" />
            </param>
        </member>
        <member name="T:Furion.HttpRemote.LongPollingManager">
            <summary>
                长轮询管理器
            </summary>
        </member>
        <member name="F:Furion.HttpRemote.LongPollingManager._dataChannel">
            <summary>
                数据接收传输的通道
            </summary>
        </member>
        <member name="F:Furion.HttpRemote.LongPollingManager._httpLongPollingBuilder">
            <inheritdoc cref="T:Furion.HttpRemote.HttpLongPollingBuilder" />
        </member>
        <member name="F:Furion.HttpRemote.LongPollingManager._httpRemoteService">
            <inheritdoc cref="T:Furion.HttpRemote.IHttpRemoteService" />
        </member>
        <member name="M:Furion.HttpRemote.LongPollingManager.#ctor(Furion.HttpRemote.IHttpRemoteService,Furion.HttpRemote.HttpLongPollingBuilder,System.Action{Furion.HttpRemote.HttpRequestBuilder})">
            <summary>
                <inheritdoc cref="T:Furion.HttpRemote.LongPollingManager" />
            </summary>
            <param name="httpRemoteService">
                <see cref="T:Furion.HttpRemote.IHttpRemoteService" />
            </param>
            <param name="httpLongPollingBuilder">
                <see cref="T:Furion.HttpRemote.HttpLongPollingBuilder" />
            </param>
            <param name="configure">自定义配置委托</param>
        </member>
        <member name="P:Furion.HttpRemote.LongPollingManager.CurrentRetries">
            <summary>
                当前重试次数
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.LongPollingManager.RequestBuilder">
            <summary>
                <inheritdoc cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.LongPollingManager.LongPollingEventHandler">
            <summary>
                <inheritdoc cref="T:Furion.HttpRemote.IHttpLongPollingEventHandler" />
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.LongPollingManager.Start(System.Threading.CancellationToken)">
            <summary>
                开始请求
            </summary>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Furion.HttpRemote.LongPollingManager.StartAsync(System.Threading.CancellationToken)">
            <summary>
                开始请求
            </summary>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Furion.HttpRemote.LongPollingManager.Retry(System.Threading.CancellationToken)">
            <summary>
                重新开始请求
            </summary>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
        </member>
        <member name="M:Furion.HttpRemote.LongPollingManager.RetryAsync(System.Threading.CancellationToken)">
            <summary>
                重新开始请求
            </summary>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
        </member>
        <member name="M:Furion.HttpRemote.LongPollingManager.ShouldTerminatePolling(System.Net.Http.HttpResponseMessage)">
            <summary>
                检查是否应该终止长轮询
            </summary>
            <param name="httpResponseMessage">
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.LongPollingManager.FetchResponseAsync(System.Threading.CancellationToken)">
            <summary>
                接收服务器响应数据任务
            </summary>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
        </member>
        <member name="M:Furion.HttpRemote.LongPollingManager.HandleResponseAsync(System.Net.Http.HttpResponseMessage)">
            <summary>
                处理服务器响应数据
            </summary>
            <param name="httpResponseMessage">
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </param>
        </member>
        <member name="M:Furion.HttpRemote.LongPollingManager.HandleDataReceivedAsync(System.Net.Http.HttpResponseMessage)">
            <summary>
                处理服务器返回 <c>200~299</c> 状态码的数据
            </summary>
            <param name="httpResponseMessage">
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </param>
        </member>
        <member name="M:Furion.HttpRemote.LongPollingManager.HandleErrorAsync(System.Net.Http.HttpResponseMessage)">
            <summary>
                处理服务器返回非 <c>200~299</c> 状态码的数据
            </summary>
            <param name="httpResponseMessage">
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </param>
        </member>
        <member name="M:Furion.HttpRemote.LongPollingManager.HandleEndOfStreamAsync(System.Net.Http.HttpResponseMessage)">
            <summary>
                处理服务器响应标头包含 <c>X-End-Of-Stream</c> 时触发的操作
            </summary>
            <param name="httpResponseMessage">
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </param>
        </member>
        <member name="T:Furion.HttpRemote.ServerSentEventsManager">
            <summary>
                Server-Sent Events 管理器
            </summary>
            <remarks>参考文献：https://developer.mozilla.org/zh-CN/docs/Web/API/Server-sent_events/Using_server-sent_events。</remarks>
        </member>
        <member name="F:Furion.HttpRemote.ServerSentEventsManager._httpRemoteService">
            <inheritdoc cref="T:Furion.HttpRemote.IHttpRemoteService" />
        </member>
        <member name="F:Furion.HttpRemote.ServerSentEventsManager._httpServerSentEventsBuilder">
            <inheritdoc cref="T:Furion.HttpRemote.HttpServerSentEventsBuilder" />
        </member>
        <member name="F:Furion.HttpRemote.ServerSentEventsManager._messageChannel">
            <summary>
                事件消息传输的通道
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.ServerSentEventsManager.#ctor(Furion.HttpRemote.IHttpRemoteService,Furion.HttpRemote.HttpServerSentEventsBuilder,System.Action{Furion.HttpRemote.HttpRequestBuilder})">
            <summary>
                <inheritdoc cref="T:Furion.HttpRemote.ServerSentEventsManager" />
            </summary>
            <param name="httpRemoteService">
                <see cref="T:Furion.HttpRemote.IHttpRemoteService" />
            </param>
            <param name="httpServerSentEventsBuilder">
                <see cref="T:Furion.HttpRemote.HttpServerSentEventsBuilder" />
            </param>
            <param name="configure">自定义配置委托</param>
        </member>
        <member name="P:Furion.HttpRemote.ServerSentEventsManager.CurrentRetryInterval">
            <summary>
                当前重新连接的时间（毫秒）
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.ServerSentEventsManager.CurrentRetries">
            <summary>
                当前重试次数
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.ServerSentEventsManager.RequestBuilder">
            <summary>
                <inheritdoc cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.ServerSentEventsManager.ServerSentEventsEventHandler">
            <summary>
                <inheritdoc cref="T:Furion.HttpRemote.IHttpServerSentEventsEventHandler" />
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.ServerSentEventsManager.Start(System.Threading.CancellationToken)">
            <summary>
                开始接收
            </summary>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Furion.HttpRemote.ServerSentEventsManager.StartAsync(System.Threading.CancellationToken)">
            <summary>
                开始接收
            </summary>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Furion.HttpRemote.ServerSentEventsManager.Retry(System.Threading.CancellationToken)">
            <summary>
                重新开始接收
            </summary>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
        </member>
        <member name="M:Furion.HttpRemote.ServerSentEventsManager.RetryAsync(System.Threading.CancellationToken)">
            <summary>
                重新开始接收
            </summary>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
        </member>
        <member name="M:Furion.HttpRemote.ServerSentEventsManager.IsEventComplete(Furion.HttpRemote.ServerSentEventsData)">
            <summary>
                检查是否已经收集了一个完整的事件
            </summary>
            <param name="serverSentEventsData">
                <see cref="T:Furion.HttpRemote.ServerSentEventsData" />
            </param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.ServerSentEventsManager.TryParseEventLine(System.String,Furion.HttpRemote.ServerSentEventsData@)">
            <summary>
                尝试解析事件消息行文本
            </summary>
            <param name="line"></param>
            <param name="serverSentEventsData">
                <see cref="T:Furion.HttpRemote.ServerSentEventsData" />
            </param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.ServerSentEventsManager.ReceiveDataAsync(System.Threading.CancellationToken)">
            <summary>
                接收事件消息任务
            </summary>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
        </member>
        <member name="M:Furion.HttpRemote.ServerSentEventsManager.HandleOpen">
            <summary>
                处理与事件源的连接打开
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.ServerSentEventsManager.HandleError(System.Exception)">
            <summary>
                处理与事件源的连接错误
            </summary>
            <param name="e">
                <see cref="T:System.Exception" />
            </param>
        </member>
        <member name="M:Furion.HttpRemote.ServerSentEventsManager.HandleMessageReceivedAsync(Furion.HttpRemote.ServerSentEventsData)">
            <summary>
                处理服务器发送的事件消息
            </summary>
            <param name="serverSentEventsData">
                <see cref="T:Furion.HttpRemote.ServerSentEventsData" />
            </param>
        </member>
        <member name="T:Furion.HttpRemote.StressTestHarnessManager">
            <summary>
                压力测试管理器
            </summary>
        </member>
        <member name="F:Furion.HttpRemote.StressTestHarnessManager._httpRemoteService">
            <inheritdoc cref="T:Furion.HttpRemote.IHttpRemoteService" />
        </member>
        <member name="F:Furion.HttpRemote.StressTestHarnessManager._httpStressTestHarnessBuilder">
            <inheritdoc cref="T:Furion.HttpRemote.HttpStressTestHarnessBuilder" />
        </member>
        <member name="M:Furion.HttpRemote.StressTestHarnessManager.#ctor(Furion.HttpRemote.IHttpRemoteService,Furion.HttpRemote.HttpStressTestHarnessBuilder,System.Action{Furion.HttpRemote.HttpRequestBuilder})">
            <summary>
                <inheritdoc cref="T:Furion.HttpRemote.StressTestHarnessManager" />
            </summary>
            <param name="httpRemoteService">
                <see cref="T:Furion.HttpRemote.IHttpRemoteService" />
            </param>
            <param name="httpStressTestHarnessBuilder">
                <see cref="T:Furion.HttpRemote.HttpStressTestHarnessBuilder" />
            </param>
            <param name="configure">自定义配置委托</param>
        </member>
        <member name="P:Furion.HttpRemote.StressTestHarnessManager.RequestBuilder">
            <summary>
                <inheritdoc cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.StressTestHarnessManager.Start(System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <summary>
                开始测试
            </summary>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:Furion.HttpRemote.StressTestHarnessResult" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.StressTestHarnessManager.StartAsync(System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <summary>
                开始测试
            </summary>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:Furion.HttpRemote.StressTestHarnessResult" />
            </returns>
        </member>
        <member name="T:Furion.HttpRemote.DigestCredentials">
            <summary>
                摘要认证
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.DigestCredentials.Username">
            <summary>
                用户名
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.DigestCredentials.Password">
            <summary>
                密码
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.DigestCredentials.Realm">
            <summary>
                服务器提供的认证领域
            </summary>
            <remarks>服务器通过 <c>WWW-Authenticate</c> 响应标头返回。</remarks>
        </member>
        <member name="P:Furion.HttpRemote.DigestCredentials.Nonce">
            <summary>
                服务器提供的随机数
            </summary>
            <remarks>服务器通过 <c>WWW-Authenticate</c> 响应标头返回。</remarks>
        </member>
        <member name="P:Furion.HttpRemote.DigestCredentials.Qop">
            <summary>
                保护质量
            </summary>
            <remarks>服务器通过 <c>WWW-Authenticate</c> 响应标头返回。</remarks>
        </member>
        <member name="P:Furion.HttpRemote.DigestCredentials.Nc">
            <summary>
                非一次性计数器
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.DigestCredentials.CNonce">
            <summary>
                客户端提供的随机数
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.DigestCredentials.Opaque">
            <summary>
                服务器提供的不透明数据
            </summary>
            <remarks>服务器通过 <c>WWW-Authenticate</c> 响应标头返回，客户端需原样回去。</remarks>
        </member>
        <member name="M:Furion.HttpRemote.DigestCredentials.GetDigestCredentials(System.String,System.String,System.String,System.Net.Http.HttpMethod)">
            <summary>
                获取 Digest 摘要认证授权凭证
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="username">用户名</param>
            <param name="password">密码</param>
            <param name="httpMethod">
                <see cref="T:System.Net.Http.HttpMethod" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Furion.HttpRemote.DigestCredentials.Create(System.String,System.String,System.String)">
            <summary>
                创建 <see cref="T:Furion.HttpRemote.DigestCredentials" /> 实例
            </summary>
            <param name="username">用户名</param>
            <param name="password">密码</param>
            <param name="wwwAuthenticateValue">服务器响应标头 <c>WWW-Authenticate</c> 的值</param>
            <returns>
                <see cref="T:Furion.HttpRemote.DigestCredentials" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.DigestCredentials.GenerateCredentials(System.String,System.Net.Http.HttpMethod)">
            <summary>
                生成摘要认证授权凭证
            </summary>
            <param name="digestUri">请求相对地址（不包含主机地址）</param>
            <param name="method">
                <see cref="T:System.Net.Http.HttpMethod" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.DigestCredentials.ExtractParameterValueFromHeader(System.String,System.String)">
            <summary>
                从服务器响应标头 <c>WWW-Authenticate</c> 的值中提取参数值
            </summary>
            <param name="name">参数名</param>
            <param name="wwwAuthenticateValue">服务器响应标头 <c>WWW-Authenticate</c> 的值</param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.DigestCredentials.GenerateMd5Hash(System.String)">
            <summary>
                生成 MD5 哈希
            </summary>
            <param name="input">值</param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="T:Furion.HttpRemote.FileTransferProgress">
            <summary>
                文件传输的进度信息
            </summary>
        </member>
        <member name="F:Furion.HttpRemote.FileTransferProgress._epsilon">
            <summary>
                使用一个小的正值来防止除零错误
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.FileTransferProgress.#ctor(System.String,System.Int64,System.String)">
            <summary>
                <inheritdoc cref="T:Furion.HttpRemote.FileTransferProgress" />
            </summary>
            <param name="filePath">文件路径</param>
            <param name="totalFileSize">文件的总大小</param>
            <param name="fileName">文件的名称</param>
        </member>
        <member name="P:Furion.HttpRemote.FileTransferProgress.FilePath">
            <summary>
                文件路径
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.FileTransferProgress.FileName">
            <summary>
                文件的名称
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.FileTransferProgress.TotalFileSize">
            <summary>
                文件的总大小
            </summary>
            <remarks>以字节为单位。</remarks>
        </member>
        <member name="P:Furion.HttpRemote.FileTransferProgress.Transferred">
            <summary>
                已传输的数据量
            </summary>
            <remarks>以字节为单位。</remarks>
        </member>
        <member name="P:Furion.HttpRemote.FileTransferProgress.PercentageComplete">
            <summary>
                已完成的传输百分比
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.FileTransferProgress.TransferRate">
            <summary>
                当前的传输速率
            </summary>
            <remarks>以字节/秒为单位。</remarks>
        </member>
        <member name="P:Furion.HttpRemote.FileTransferProgress.TimeElapsed">
            <summary>
                从开始传输到现在的持续时间
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.FileTransferProgress.EstimatedTimeRemaining">
            <summary>
                预估剩余传输时间
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.FileTransferProgress.ToString">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.FileTransferProgress.ToSummaryString">
            <summary>
                输出简要进度字符串
            </summary>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.FileTransferProgress.UpdateProgress(System.Int64,System.TimeSpan)">
            <summary>
                更新文件传输进度
            </summary>
            <param name="transferred">已传输的数据量</param>
            <param name="timeElapsed">从开始传输到现在的持续时间</param>
        </member>
        <member name="M:Furion.HttpRemote.FileTransferProgress.CalculateEstimatedTimeRemaining">
            <summary>
                计算预估剩余传输时间
            </summary>
            <returns>
                <see cref="T:System.TimeSpan" />
            </returns>
        </member>
        <member name="T:Furion.HttpRemote.FileTypeMapper">
            <summary>
                据文件扩展名提供内容类型
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.FileTypeMapper.#ctor">
            <summary>
                <inheritdoc cref="T:Furion.HttpRemote.FileTypeMapper" />
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.FileTypeMapper.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
                <inheritdoc cref="T:Furion.HttpRemote.FileTypeMapper" />
            </summary>
            <param name="mapping">文件拓展名及其对应内容类型映射字典</param>
        </member>
        <member name="P:Furion.HttpRemote.FileTypeMapper.Mappings">
            <summary>
                文件拓展名及其对应内容类型映射字典
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.FileTypeMapper.TryGetContentType(System.String,System.String@)">
            <summary>
                尝试根据文件路径获取拓展名
            </summary>
            <param name="subpath">文件路径</param>
            <param name="contentType">内容类型</param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.FileTypeMapper.GetContentType(System.String,System.String)">
            <summary>
                根据文件路径获取拓展名
            </summary>
            <param name="subpath">文件路径</param>
            <param name="defaultContentType">默认内容类型</param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.FileTypeMapper.GetExtension(System.String)">
            <summary>
                根据文件路径获取拓展名
            </summary>
            <param name="path">文件路径</param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="T:Furion.HttpRemote.HttpClientPooling">
            <summary>
                管理 <see cref="T:System.Net.Http.HttpClient" /> 实例及及其释放操作
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.HttpClientPooling.#ctor(System.Net.Http.HttpClient,System.Action{System.Net.Http.HttpClient})">
            <summary>
                <inheritdoc cref="T:Furion.HttpRemote.HttpClientPooling" />
            </summary>
            <param name="httpClient">
                <see cref="T:System.Net.Http.HttpClient" />
            </param>
            <param name="release">用于释放 <see cref="T:System.Net.Http.HttpClient" /> 实例的方法委托</param>
        </member>
        <member name="P:Furion.HttpRemote.HttpClientPooling.Instance">
            <summary>
                <see cref="T:System.Net.Http.HttpClient" />
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.HttpClientPooling.Release">
            <summary>
                用于释放 <see cref="T:System.Net.Http.HttpClient" /> 实例的方法委托
            </summary>
        </member>
        <member name="T:Furion.HttpRemote.HttpRemoteResult`1">
            <summary>
                HTTP 远程请求结果
            </summary>
            <remarks>用于将原始的 <see cref="T:System.Net.Http.HttpResponseMessage" /> 进行包装转换。</remarks>
            <typeparam name="TResult">转换的目标类型</typeparam>
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteResult`1.#ctor(System.Net.Http.HttpResponseMessage)">
            <summary>
                <inheritdoc cref="T:Furion.HttpRemote.HttpRemoteResult`1" />
            </summary>
            <param name="httpResponseMessage">
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </param>
        </member>
        <member name="P:Furion.HttpRemote.HttpRemoteResult`1.ResponseMessage">
            <inheritdoc cref="T:System.Net.Http.HttpResponseMessage" />
        </member>
        <member name="P:Furion.HttpRemote.HttpRemoteResult`1.ContentType">
            <summary>
                内容类型
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.HttpRemoteResult`1.CharSet">
            <summary>
                字符集
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.HttpRemoteResult`1.ContentEncoding">
            <summary>
                内容编码
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.HttpRemoteResult`1.ContentLength">
            <summary>
                内容大小
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.HttpRemoteResult`1.RawSetCookies">
            <summary>
                原始响应标头 <c>Set-Cookie</c> 集合
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.HttpRemoteResult`1.SetCookies">
            <summary>
                <see cref="T:Microsoft.Net.Http.Headers.SetCookieHeaderValue" /> 集合
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.HttpRemoteResult`1.StatusCode">
            <summary>
                响应状态码
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.HttpRemoteResult`1.IsSuccessStatusCode">
            <summary>
                是否请求成功
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.HttpRemoteResult`1.Result">
            <summary>
                <typeparamref name="TResult" />
            </summary>
            <remarks>注意 <c>HEAD</c> 请求不包含响应体。</remarks>
        </member>
        <member name="P:Furion.HttpRemote.HttpRemoteResult`1.RequestDuration">
            <summary>
                请求耗时（毫秒）
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.HttpRemoteResult`1.Headers">
            <summary>
                响应标头
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.HttpRemoteResult`1.ContentHeaders">
            <summary>
                响应体标头
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteResult`1.Initialize">
            <summary>
                初始化
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteResult`1.ParseStatusCode">
            <summary>
                解析响应状态码
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteResult`1.ParseHeaders">
            <summary>
                解析响应标头
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteResult`1.ParseContentMetadata(System.Net.Http.Headers.HttpContentHeaders)">
            <summary>
                解析响应体标头元数据
            </summary>
            <param name="contentHeaders">
                <see cref="T:System.Net.Http.Headers.HttpContentHeaders" />
            </param>
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteResult`1.ParseSetCookies(System.Net.Http.Headers.HttpResponseHeaders)">
            <summary>
                解析响应标头 <c>Set-Cookie</c> 集合
            </summary>
            <param name="responseHeaders">
                <see cref="T:System.Net.Http.Headers.HttpResponseHeaders" />
            </param>
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteResult`1.ToString">
            <inheritdoc />
        </member>
        <member name="T:Furion.HttpRemote.Logging">
            <summary>
                HTTP 远程服务日志类别
            </summary>
        </member>
        <member name="T:Furion.HttpRemote.MultipartFile">
            <summary>
                多部分表单文件
            </summary>
            <remarks>使用 <c>MultipartFile.CreateFrom[Source]</c> 静态方法创建。</remarks>
        </member>
        <member name="M:Furion.HttpRemote.MultipartFile.#ctor">
            <summary>
                <inheritdoc cref="T:Furion.HttpRemote.MultipartFile" />
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.MultipartFile.Name">
            <summary>
                表单名称
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.MultipartFile.FileName">
            <summary>
                文件的名称
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.MultipartFile.ContentType">
            <summary>
                内容类型
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.MultipartFile.ContentEncoding">
            <summary>
                内容编码
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.MultipartFile.Source">
            <summary>
                文件来源
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.MultipartFile.FileSourceType">
            <summary>
                <see cref="P:Furion.HttpRemote.MultipartFile.FileSourceType" />
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.MultipartFile.CreateFromByteArray(System.Byte[],System.String,System.String,System.String,System.Text.Encoding)">
            <summary>
                从字节数组中添加文件
            </summary>
            <param name="byteArray">字节数组</param>
            <param name="name">表单名称</param>
            <param name="fileName">文件的名称</param>
            <param name="contentType">内容类型</param>
            <param name="contentEncoding">内容编码</param>
            <returns>
                <see cref="T:Furion.HttpRemote.MultipartFile" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.MultipartFile.CreateFromStream(System.IO.Stream,System.String,System.String,System.String,System.Text.Encoding)">
            <summary>
                从 <see cref="T:System.IO.Stream" /> 中添加文件
            </summary>
            <param name="stream">
                <see cref="T:System.IO.Stream" />
            </param>
            <param name="name">表单名称</param>
            <param name="fileName">文件的名称</param>
            <param name="contentType">内容类型</param>
            <param name="contentEncoding">内容编码</param>
            <returns>
                <see cref="T:Furion.HttpRemote.MultipartFile" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.MultipartFile.CreateFromPath(System.String,System.String,System.String,System.String,System.Text.Encoding)">
            <summary>
                从本地路径中添加文件
            </summary>
            <param name="filePath">文件路径</param>
            <param name="name">表单名称</param>
            <param name="fileName">文件的名称</param>
            <param name="contentType">内容类型</param>
            <param name="contentEncoding">内容编码</param>
            <returns>
                <see cref="T:Furion.HttpRemote.MultipartFile" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.MultipartFile.CreateFromBase64String(System.String,System.String,System.String,System.String,System.Text.Encoding)">
            <summary>
                从 Base64 字符串中添加文件
            </summary>
            <remarks>文件大小限制在 <c>100MB</c> 以内。</remarks>
            <param name="base64String">Base64 字符串</param>
            <param name="name">表单名称</param>
            <param name="fileName">文件的名称</param>
            <param name="contentType">内容类型</param>
            <param name="contentEncoding">内容编码</param>
            <returns>
                <see cref="T:Furion.HttpRemote.MultipartFile" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.MultipartFile.CreateFromRemote(System.String,System.String,System.String,System.String,System.Text.Encoding)">
            <summary>
                从互联网 URL 中添加文件
            </summary>
            <remarks>文件大小限制在 <c>100MB</c> 以内。</remarks>
            <param name="url">互联网 URL 地址</param>
            <param name="name">表单名称</param>
            <param name="fileName">文件的名称</param>
            <param name="contentType">内容类型</param>
            <param name="contentEncoding">内容编码</param>
            <returns>
                <see cref="T:Furion.HttpRemote.MultipartFile" />
            </returns>
        </member>
        <member name="T:Furion.HttpRemote.MultipartFormDataItem">
            <summary>
                <see cref="T:System.Net.Http.MultipartFormDataContent" /> 条目
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.MultipartFormDataItem.#ctor(System.String)">
            <summary>
                <inheritdoc cref="T:Furion.HttpRemote.MultipartFormDataItem" />
            </summary>
            <param name="name">表单名称</param>
        </member>
        <member name="P:Furion.HttpRemote.MultipartFormDataItem.Name">
            <summary>
                表单名称
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.MultipartFormDataItem.ContentType">
            <summary>
                内容类型
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.MultipartFormDataItem.ContentEncoding">
            <summary>
                内容编码
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.MultipartFormDataItem.RawContent">
            <summary>
                原始请求内容
            </summary>
            <remarks>此属性值最终将转换为 <see cref="T:System.Net.Http.HttpContent" /> 类型实例。</remarks>
        </member>
        <member name="P:Furion.HttpRemote.MultipartFormDataItem.FileName">
            <summary>
                文件的名称
            </summary>
        </member>
        <member name="T:Furion.HttpRemote.ProgressFileStream">
            <summary>
                带读写进度的文件流
            </summary>
        </member>
        <member name="F:Furion.HttpRemote.ProgressFileStream._fileLength">
            <summary>
                文件大小
            </summary>
        </member>
        <member name="F:Furion.HttpRemote.ProgressFileStream._fileStream">
            <inheritdoc cref="T:System.IO.Stream" />
        </member>
        <member name="F:Furion.HttpRemote.ProgressFileStream._fileTransferProgress">
            <inheritdoc cref="T:Furion.HttpRemote.FileTransferProgress" />
        </member>
        <member name="F:Furion.HttpRemote.ProgressFileStream._progressChannel">
            <summary>
                文件传输进度信息的通道
            </summary>
        </member>
        <member name="F:Furion.HttpRemote.ProgressFileStream._stopwatch">
            <inheritdoc cref="T:System.Diagnostics.Stopwatch" />
        </member>
        <member name="F:Furion.HttpRemote.ProgressFileStream._hasStarted">
            <summary>
                是否已经开始读取或写入
            </summary>
        </member>
        <member name="F:Furion.HttpRemote.ProgressFileStream._transferred">
            <summary>
                已传输的数据量
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.ProgressFileStream.#ctor(System.IO.Stream,System.String,System.Threading.Channels.Channel{Furion.HttpRemote.FileTransferProgress},System.String)">
            <summary>
                <inheritdoc cref="T:Furion.HttpRemote.ProgressFileStream" />
            </summary>
            <param name="fileStream">
                <see cref="T:System.IO.Stream" />
            </param>
            <param name="filePath">文件路径或文件的名称</param>
            <param name="progressChannel">文件传输进度信息的通道</param>
            <param name="fileName">文件的名称</param>
        </member>
        <member name="P:Furion.HttpRemote.ProgressFileStream.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Furion.HttpRemote.ProgressFileStream.CanSeek">
            <inheritdoc />
        </member>
        <member name="P:Furion.HttpRemote.ProgressFileStream.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Furion.HttpRemote.ProgressFileStream.CanTimeout">
            <inheritdoc />
        </member>
        <member name="P:Furion.HttpRemote.ProgressFileStream.Length">
            <inheritdoc />
        </member>
        <member name="P:Furion.HttpRemote.ProgressFileStream.Position">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.ProgressFileStream.Flush">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.ProgressFileStream.Read(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.ProgressFileStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.ProgressFileStream.SetLength(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.ProgressFileStream.Write(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.ProgressFileStream.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.ProgressFileStream.ReportProgress(System.Int32)">
            <summary>
                报告进度
            </summary>
            <param name="increment">增加的数据量</param>
        </member>
        <member name="M:Furion.HttpRemote.ProgressFileStream.EnsureInitialized">
            <summary>
                确保进度信息已初始化
            </summary>
        </member>
        <member name="T:Furion.HttpRemote.RateLimitedStream">
            <summary>
                带应用速率限制的流
            </summary>
            <remarks>
                <para>基于令牌桶算法（Token Bucket Algorithm）实现流量控制和速率限制。</para>
                <para>参考文献：https://baike.baidu.com/item/令牌桶算法/6597000。</para>
            </remarks>
        </member>
        <member name="F:Furion.HttpRemote.RateLimitedStream.CHUNK_SIZE">
            <summary>
                单次读取或写入操作中处理的最大数据块大小
            </summary>
        </member>
        <member name="F:Furion.HttpRemote.RateLimitedStream._bytesPerSecond">
            <summary>
                每秒允许传输的最大字节数
            </summary>
        </member>
        <member name="F:Furion.HttpRemote.RateLimitedStream._innerStream">
            <inheritdoc cref="T:System.IO.Stream" />
        </member>
        <member name="F:Furion.HttpRemote.RateLimitedStream._lockObject">
            <summary>
                用于同步访问的锁对象
            </summary>
        </member>
        <member name="F:Furion.HttpRemote.RateLimitedStream._stopwatch">
            <summary>
                用来计算时间间隔的计时器
            </summary>
        </member>
        <member name="F:Furion.HttpRemote.RateLimitedStream._availableTokens">
            <summary>
                当前可用的令牌数量（字节数）
            </summary>
        </member>
        <member name="F:Furion.HttpRemote.RateLimitedStream._lastTokenRefillTime">
            <summary>
                上次令牌补充的时间戳
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.RateLimitedStream.#ctor(System.IO.Stream,System.Double)">
            <summary>
                <inheritdoc cref="T:Furion.HttpRemote.RateLimitedStream" />
            </summary>
            <param name="innerStream">
                <see cref="T:System.IO.Stream" />
            </param>
            <param name="bytesPerSecond">每秒允许传输的最大字节数</param>
        </member>
        <member name="P:Furion.HttpRemote.RateLimitedStream.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Furion.HttpRemote.RateLimitedStream.CanSeek">
            <inheritdoc />
        </member>
        <member name="P:Furion.HttpRemote.RateLimitedStream.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Furion.HttpRemote.RateLimitedStream.CanTimeout">
            <inheritdoc />
        </member>
        <member name="P:Furion.HttpRemote.RateLimitedStream.Length">
            <inheritdoc />
        </member>
        <member name="P:Furion.HttpRemote.RateLimitedStream.Position">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.RateLimitedStream.Flush">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.RateLimitedStream.Read(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.RateLimitedStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.RateLimitedStream.SetLength(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.RateLimitedStream.Write(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.RateLimitedStream.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.RateLimitedStream.RefillTokens">
            <summary>
                补充令牌的方法
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.RateLimitedStream.WaitForTokens(System.Int32)">
            <summary>
                等待直到有足够令牌可用
            </summary>
            <param name="desiredTokens">需要等待的令牌数量</param>
        </member>
        <member name="T:Furion.HttpRemote.ServerSentEventsData">
            <summary>
                Server-Sent Events 事件流格式
            </summary>
            <remarks>参考文献：https://developer.mozilla.org/zh-CN/docs/Web/API/Server-sent_events/Using_server-sent_events#%E5%AD%97%E6%AE%B5。</remarks>
        </member>
        <member name="F:Furion.HttpRemote.ServerSentEventsData._dataBuffer">
            <summary>
                消息数据构建器
            </summary>
        </member>
        <member name="F:Furion.HttpRemote.ServerSentEventsData._cachedData">
            <summary>
                消息数据缓存字段
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.ServerSentEventsData.#ctor">
            <summary>
                <inheritdoc cref="T:Furion.HttpRemote.ServerSentEventsData" />
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.ServerSentEventsData.Event">
            <summary>
                事件类型
            </summary>
            <remarks>
                一个用于标识事件类型的字符串。如果指定了这个字符串，浏览器会将具有指定事件名称的事件分派给相应的监听器；网站源代码应该使用 <c>addEventListener()</c>
                来监听指定的事件。如果一个消息没有指定事件名称，那么 <c>onmessage</c> 处理程序就会被调用。
            </remarks>
        </member>
        <member name="P:Furion.HttpRemote.ServerSentEventsData.Data">
            <summary>
                消息
            </summary>
            <remarks>消息的数据字段。当 <c>EventSource</c> 接收到多个以 <c>data</c>: 开头的连续行时，会将它们连接起来，在它们之间插入一个换行符。末尾的换行符会被删除。</remarks>
        </member>
        <member name="P:Furion.HttpRemote.ServerSentEventsData.Id">
            <summary>
                事件 ID
            </summary>
            <remarks>事件 ID，会成为当前 <c>EventSource</c> 对象的内部属性“最后一个事件 ID 的属性值。</remarks>
        </member>
        <member name="P:Furion.HttpRemote.ServerSentEventsData.Retry">
            <summary>
                重新连接的时间
            </summary>
            <remarks>重新连接的时间。如果与服务器的连接丢失，浏览器将等待指定的时间，然后尝试重新连接。这必须是一个整数，以毫秒为单位指定重新连接的时间。如果指定了一个非整数值，该字段将被忽略。</remarks>
        </member>
        <member name="M:Furion.HttpRemote.ServerSentEventsData.AppendData(System.String)">
            <summary>
                追加消息数据
            </summary>
            <param name="value">消息数据</param>
        </member>
        <member name="T:Furion.HttpRemote.StressTestHarnessResult">
            <summary>
                压力测试结果
            </summary>
        </member>
        <member name="F:Furion.HttpRemote.StressTestHarnessResult._ticksPerMillisecond">
            <summary>
                用于将 <see cref="T:System.Diagnostics.Stopwatch" /> 的 <c>ticks</c> 转换为毫秒
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.StressTestHarnessResult.#ctor(System.Int64,System.Double,System.Int64,System.Int64,System.Int64[])">
            <summary>
                <inheritdoc cref="T:Furion.HttpRemote.StressTestHarnessResult" />
            </summary>
            <param name="totalRequests">总请求次数</param>
            <param name="totalTimeInSeconds">总用时（秒）</param>
            <param name="successfulRequests">成功请求次数</param>
            <param name="failedRequests">失败请求次数</param>
            <param name="responseTimes">请求的响应时间数组</param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="P:Furion.HttpRemote.StressTestHarnessResult.TotalRequests">
            <summary>
                总请求次数
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.StressTestHarnessResult.TotalTimeInSeconds">
            <summary>
                总用时（秒）
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.StressTestHarnessResult.SuccessfulRequests">
            <summary>
                成功请求次数
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.StressTestHarnessResult.FailedRequests">
            <summary>
                失败请求次数
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.StressTestHarnessResult.QueriesPerSecond">
            <summary>
                每秒查询率 (QPS)
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.StressTestHarnessResult.MinResponseTime">
            <summary>
                最小响应时间（毫秒）
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.StressTestHarnessResult.MaxResponseTime">
            <summary>
                最大响应时间（毫秒）
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.StressTestHarnessResult.AverageResponseTime">
            <summary>
                平均响应时间（毫秒）
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.StressTestHarnessResult.Percentile10ResponseTime">
            <summary>
                P10 响应时间（毫秒）
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.StressTestHarnessResult.Percentile25ResponseTime">
            <summary>
                P25 响应时间（毫秒）
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.StressTestHarnessResult.Percentile50ResponseTime">
            <summary>
                P50 响应时间（毫秒）
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.StressTestHarnessResult.Percentile75ResponseTime">
            <summary>
                P75 响应时间（毫秒）
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.StressTestHarnessResult.Percentile90ResponseTime">
            <summary>
                P90 响应时间（毫秒）
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.StressTestHarnessResult.Percentile99ResponseTime">
            <summary>
                P99 响应时间（毫秒）
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.StressTestHarnessResult.Percentile9999ResponseTime">
            <summary>
                P99.99 响应时间（毫秒）
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.StressTestHarnessResult.ToString">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.StressTestHarnessResult.CalculateQueriesPerSecond(System.Int64,System.Double)">
            <summary>
                计算每秒查询率 (QPS)
            </summary>
            <param name="totalRequests">总请求次数</param>
            <param name="totalTimeInSeconds">总用时（秒）</param>
        </member>
        <member name="M:Furion.HttpRemote.StressTestHarnessResult.CalculateMinMaxAvgResponseTime(System.Int64[],System.Int64)">
            <summary>
                计算最小、最大和平均响应时间（毫秒）
            </summary>
            <param name="responseTimes">每个请求的响应时间数组</param>
            <param name="totalRequests">总请求次数</param>
        </member>
        <member name="M:Furion.HttpRemote.StressTestHarnessResult.CalculatePercentiles(System.Int64[])">
            <summary>
                计算各个百分位的响应时间（毫秒）
            </summary>
            <param name="responseTimes">请求的响应时间数组</param>
        </member>
        <member name="M:Furion.HttpRemote.StressTestHarnessResult.CalculatePercentile(System.Int64[],System.Double)">
            <summary>
                计算百分位数并转换为毫秒
            </summary>
            <param name="sortedResponseTimes">排序后的请求的响应时间数组</param>
            <param name="percentile">百分位数</param>
            <returns>
                <see cref="T:System.Double" />
            </returns>
        </member>
        <member name="T:Furion.HttpRemote.VoidContent">
            <summary>
                用于标识无需接收 HTTP 远程请求返回值
            </summary>
        </member>
        <member name="T:Furion.HttpRemote.HttpContextForwardOptions">
            <summary>
                <see cref="T:Microsoft.AspNetCore.Http.HttpContext" /> 转发配置选项
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.HttpContextForwardOptions.WithQueryParameters">
            <summary>
                是否转发查询参数（URL 参数）
            </summary>
            <remarks>默认值为：<c>true</c>。</remarks>
        </member>
        <member name="P:Furion.HttpRemote.HttpContextForwardOptions.WithRequestHeaders">
            <summary>
                是否转发请求标头
            </summary>
            <remarks>默认值为：<c>true</c>。</remarks>
        </member>
        <member name="P:Furion.HttpRemote.HttpContextForwardOptions.WithResponseStatusCode">
            <summary>
                是否转发响应状态码
            </summary>
            <remarks>默认值为：<c>true</c>。</remarks>
        </member>
        <member name="P:Furion.HttpRemote.HttpContextForwardOptions.WithResponseHeaders">
            <summary>
                是否转发响应标头
            </summary>
            <remarks>默认值为：<c>true</c>。</remarks>
        </member>
        <member name="P:Furion.HttpRemote.HttpContextForwardOptions.WithResponseContentHeaders">
            <summary>
                是否转发响应内容标头
            </summary>
            <remarks>默认值为：<c>true</c>。</remarks>
        </member>
        <member name="P:Furion.HttpRemote.HttpContextForwardOptions.ResetHostRequestHeader">
            <summary>
                是否重新设置 <c>Host</c> 请求标头
            </summary>
            <remarks>在一些目标服务器中，可能需要校验该请求标头。默认值为：<c>false</c>。</remarks>
        </member>
        <member name="P:Furion.HttpRemote.HttpContextForwardOptions.OnForward">
            <summary>
                用于在转发响应之前执行自定义操作
            </summary>
        </member>
        <member name="T:Furion.HttpRemote.HttpRemoteOptions">
            <summary>
                HTTP 远程请求选项
            </summary>
        </member>
        <member name="F:Furion.HttpRemote.HttpRemoteOptions.JsonSerializerOptionsDefault">
            <summary>
                默认 JSON 序列化配置
            </summary>
            <remarks>参考文献：https://learn.microsoft.com/zh-cn/dotnet/standard/serialization/system-text-json/configure-options。</remarks>
        </member>
        <member name="P:Furion.HttpRemote.HttpRemoteOptions.DefaultContentType">
            <summary>
                默认请求内容类型
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.HttpRemoteOptions.DefaultFileDownloadDirectory">
            <summary>
                默认文件下载保存目录
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.HttpRemoteOptions.ProfilerLogLevel">
            <summary>
                请求分析工具日志级别
            </summary>
            <remarks>默认值为 <see cref="F:Microsoft.Extensions.Logging.LogLevel.Warning" /></remarks>
        </member>
        <member name="P:Furion.HttpRemote.HttpRemoteOptions.JsonSerializerOptions">
            <summary>
                JSON 序列化配置
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.HttpRemoteOptions.HttpDeclarativeExtractors">
            <summary>
                自定义 HTTP 声明式 <see cref="T:Furion.HttpRemote.IHttpDeclarativeExtractor" /> 集合提供器
            </summary>
            <value>返回多个包含实现 <see cref="T:Furion.HttpRemote.IHttpDeclarativeExtractor" /> 集合的集合。</value>
        </member>
        <member name="P:Furion.HttpRemote.HttpRemoteOptions.IsLoggingRegistered">
            <summary>
                指示是否配置（注册）了日志程序
            </summary>
        </member>
        <member name="T:Furion.HttpRemote.ByteArrayContentProcessor">
            <summary>
                字节数组内容处理器
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.ByteArrayContentProcessor.CanProcess(System.Object,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.ByteArrayContentProcessor.Process(System.Object,System.String,System.Text.Encoding)">
            <inheritdoc />
        </member>
        <member name="T:Furion.HttpRemote.FormUrlEncodedContentProcessor">
            <summary>
                URL 编码的表单内容处理器
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.FormUrlEncodedContentProcessor.CanProcess(System.Object,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.FormUrlEncodedContentProcessor.Process(System.Object,System.String,System.Text.Encoding)">
            <inheritdoc />
        </member>
        <member name="T:Furion.HttpRemote.HttpContentProcessorBase">
            <summary>
                <see cref="T:Furion.HttpRemote.IHttpContentProcessor" /> 内容处理器基类
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.HttpContentProcessorBase.ServiceProvider">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpContentProcessorBase.CanProcess(System.Object,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpContentProcessorBase.Process(System.Object,System.String,System.Text.Encoding)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpContentProcessorBase.TryProcess(System.Object,System.String,System.Text.Encoding,System.Net.Http.HttpContent@)">
            <summary>
                尝试解析 <see cref="T:System.Net.Http.HttpContent" /> 类型
            </summary>
            <param name="rawContent">原始请求内容</param>
            <param name="contentType">内容类型</param>
            <param name="encoding">内容编码</param>
            <param name="httpContent">
                <see cref="T:System.Net.Http.HttpContent" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpContent" />
            </returns>
        </member>
        <member name="T:Furion.HttpRemote.IHttpContentProcessor">
            <summary>
                <see cref="T:System.Net.Http.HttpContent" /> 请求内容处理器
            </summary>
            <remarks>用于将原始请求内容转换成 <see cref="T:System.Net.Http.HttpContent" /> 实例</remarks>
        </member>
        <member name="P:Furion.HttpRemote.IHttpContentProcessor.ServiceProvider">
            <summary>
                <inheritdoc cref="T:System.IServiceProvider" />
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.IHttpContentProcessor.CanProcess(System.Object,System.String)">
            <summary>
                判断当前处理器是否可以处理指定的内容类型
            </summary>
            <param name="rawContent">原始请求内容</param>
            <param name="contentType">内容类型</param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpContentProcessor.Process(System.Object,System.String,System.Text.Encoding)">
            <summary>
                将原始请求内容转换为 <see cref="T:System.Net.Http.HttpContent" /> 实例
            </summary>
            <param name="rawContent">原始请求内容</param>
            <param name="contentType">内容类型</param>
            <param name="encoding">内容编码</param>
            <returns>
                <see cref="T:System.Net.Http.HttpContent" />
            </returns>
        </member>
        <member name="T:Furion.HttpRemote.MessagePackContentProcessor">
            <summary>
                <c>application/msgpack</c> 内容处理器
            </summary>
            <remarks>要使用 <c>application/msgpack</c> 内容处理器需在项目中安装 <c>MessagePack</c> 依赖包。https://www.nuget.org/packages/MessagePack。</remarks>
        </member>
        <member name="F:Furion.HttpRemote.MessagePackContentProcessor._serializerCache">
            <summary>
                MessagePack 序列化器委托字典缓存
            </summary>
        </member>
        <member name="F:Furion.HttpRemote.MessagePackContentProcessor._messagePackSerializerLazy">
            <summary>
                初始化 MessagePack 序列化器委托
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.MessagePackContentProcessor.MessagePackSerializer">
            <summary>
                MessagePack 序列化器委托
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.MessagePackContentProcessor.CanProcess(System.Object,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.MessagePackContentProcessor.Process(System.Object,System.String,System.Text.Encoding)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.MessagePackContentProcessor.CreateSerializerDelegate(System.Reflection.MethodInfo)">
            <summary>
                创建 MessagePack 序列化器委托
            </summary>
            <param name="serializeMethod">
                <see cref="T:System.Reflection.MethodInfo" />
            </param>
            <returns>
                <see cref="T:System.Func`2" />
            </returns>
        </member>
        <member name="T:Furion.HttpRemote.MultipartFormDataContentProcessor">
            <summary>
                多部分表单内容数据内容处理器
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.MultipartFormDataContentProcessor.CanProcess(System.Object,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.MultipartFormDataContentProcessor.Process(System.Object,System.String,System.Text.Encoding)">
            <inheritdoc />
        </member>
        <member name="T:Furion.HttpRemote.ReadOnlyMemoryContentProcessor">
            <summary>
                <see cref="T:System.ReadOnlyMemory`1" /> 内容处理器
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.ReadOnlyMemoryContentProcessor.CanProcess(System.Object,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.ReadOnlyMemoryContentProcessor.Process(System.Object,System.String,System.Text.Encoding)">
            <inheritdoc />
        </member>
        <member name="T:Furion.HttpRemote.StreamContentProcessor">
            <summary>
                流内容处理器
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.StreamContentProcessor.CanProcess(System.Object,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.StreamContentProcessor.Process(System.Object,System.String,System.Text.Encoding)">
            <inheritdoc />
        </member>
        <member name="T:Furion.HttpRemote.StringContentForFormUrlEncodedContentProcessor">
            <summary>
                URL 编码的表单内容处理器
            </summary>
            <remarks>
                解决 <see cref="T:System.Net.Http.FormUrlEncodedContent" /> 无法设置编码问题。<see cref="T:System.Net.Http.FormUrlEncodedContent" /> 的编码格式不是 <c>utf-8</c>，而是
                <c>Encoding.Latin1</c>。
            </remarks>
        </member>
        <member name="M:Furion.HttpRemote.StringContentForFormUrlEncodedContentProcessor.Process(System.Object,System.String,System.Text.Encoding)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.StringContentForFormUrlEncodedContentProcessor.GetContentString(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
                获取 URL 编码的表单内容格式
            </summary>
            <param name="nameValueCollection">键值对集合</param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.StringContentForFormUrlEncodedContentProcessor.Encode(System.String)">
            <summary>
                对数据进行 URL 编码
            </summary>
            <param name="data">数据</param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="T:Furion.HttpRemote.StringContentProcessor">
            <summary>
                字符串内容处理器
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.StringContentProcessor.CanProcess(System.Object,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.StringContentProcessor.Process(System.Object,System.String,System.Text.Encoding)">
            <inheritdoc />
        </member>
        <member name="T:Furion.HttpRemote.HttpRemoteService">
            <summary>
                <inheritdoc cref="T:Furion.HttpRemote.IHttpRemoteService" />
            </summary>
            <summary>
                <inheritdoc cref="T:Furion.HttpRemote.IHttpRemoteService" />
            </summary>
            <summary>
                <inheritdoc cref="T:Furion.HttpRemote.IHttpRemoteService" />
            </summary>
        </member>
        <member name="F:Furion.HttpRemote.HttpRemoteService._httpClientFactory">
            <inheritdoc cref="T:System.Net.Http.IHttpClientFactory" />
        </member>
        <member name="F:Furion.HttpRemote.HttpRemoteService._httpContentConverterFactory">
            <inheritdoc cref="T:Furion.HttpRemote.IHttpContentConverterFactory" />
        </member>
        <member name="F:Furion.HttpRemote.HttpRemoteService._httpContentProcessorFactory">
            <inheritdoc cref="T:Furion.HttpRemote.IHttpContentProcessorFactory" />
        </member>
        <member name="F:Furion.HttpRemote.HttpRemoteService._httpRemoteOptions">
            <inheritdoc cref="T:Furion.HttpRemote.HttpRemoteOptions" />
        </member>
        <member name="F:Furion.HttpRemote.HttpRemoteService._logger">
            <inheritdoc cref="T:Microsoft.Extensions.Logging.ILogger`1" />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.#ctor(System.IServiceProvider,Microsoft.Extensions.Logging.ILogger{Furion.HttpRemote.Logging},System.Net.Http.IHttpClientFactory,Furion.HttpRemote.IHttpContentProcessorFactory,Furion.HttpRemote.IHttpContentConverterFactory,Microsoft.Extensions.Options.IOptions{Furion.HttpRemote.HttpRemoteOptions})">
            <summary>
                <inheritdoc cref="T:Furion.HttpRemote.HttpRemoteService" />
            </summary>
            <param name="serviceProvider">
                <see cref="T:System.IServiceProvider" />
            </param>
            <param name="logger">
                <see cref="T:Microsoft.Extensions.Logging.Logger`1" />
            </param>
            <param name="httpClientFactory">
                <see cref="T:System.Net.Http.IHttpClientFactory" />
            </param>
            <param name="httpContentProcessorFactory">
                <see cref="T:Furion.HttpRemote.IHttpContentProcessorFactory" />
            </param>
            <param name="httpContentConverterFactory">
                <see cref="T:Furion.HttpRemote.IHttpContentConverterFactory" />
            </param>
            <param name="httpRemoteOptions">
                <see cref="T:Microsoft.Extensions.Options.IOptions`1" />
            </param>
        </member>
        <member name="P:Furion.HttpRemote.HttpRemoteService.ServiceProvider">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.Send(Furion.HttpRemote.HttpRequestBuilder,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.Send(Furion.HttpRemote.HttpRequestBuilder,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.SendAsync(Furion.HttpRemote.HttpRequestBuilder,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.SendAsync(Furion.HttpRemote.HttpRequestBuilder,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.SendAs``1(Furion.HttpRemote.HttpRequestBuilder,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.SendAs``1(Furion.HttpRemote.HttpRequestBuilder,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.SendAsString(Furion.HttpRemote.HttpRequestBuilder,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.SendAsString(Furion.HttpRemote.HttpRequestBuilder,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.SendAsByteArray(Furion.HttpRemote.HttpRequestBuilder,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.SendAsByteArray(Furion.HttpRemote.HttpRequestBuilder,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.SendAsStream(Furion.HttpRemote.HttpRequestBuilder,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.SendAsStream(Furion.HttpRemote.HttpRequestBuilder,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.SendAsAsync``1(Furion.HttpRemote.HttpRequestBuilder,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.SendAsAsync``1(Furion.HttpRemote.HttpRequestBuilder,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.SendAsStringAsync(Furion.HttpRemote.HttpRequestBuilder,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.SendAsStringAsync(Furion.HttpRemote.HttpRequestBuilder,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.SendAsByteArrayAsync(Furion.HttpRemote.HttpRequestBuilder,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.SendAsByteArrayAsync(Furion.HttpRemote.HttpRequestBuilder,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.SendAsStreamAsync(Furion.HttpRemote.HttpRequestBuilder,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.SendAsStreamAsync(Furion.HttpRemote.HttpRequestBuilder,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.SendAs(System.Type,Furion.HttpRemote.HttpRequestBuilder,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.SendAs(System.Type,Furion.HttpRemote.HttpRequestBuilder,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.SendAsAsync(System.Type,Furion.HttpRemote.HttpRequestBuilder,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.SendAsAsync(System.Type,Furion.HttpRemote.HttpRequestBuilder,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.Send``1(Furion.HttpRemote.HttpRequestBuilder,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.Send``1(Furion.HttpRemote.HttpRequestBuilder,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.SendAsync``1(Furion.HttpRemote.HttpRequestBuilder,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.SendAsync``1(Furion.HttpRemote.HttpRequestBuilder,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.SendCoreAsync(Furion.HttpRemote.HttpRequestBuilder,System.Net.Http.HttpCompletionOption,System.Func{System.Net.Http.HttpClient,System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}},System.Func{System.Net.Http.HttpClient,System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken,System.Net.Http.HttpResponseMessage},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP 远程请求并处理 <see cref="T:System.Net.Http.HttpResponseMessage" /> 实例
            </summary>
            <param name="httpRequestBuilder">
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="sendAsyncMethod">异步发送 HTTP 请求的委托</param>
            <param name="sendMethod">同步发送 HTTP 请求的委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Tuple`2" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.HandlePreSendRequest(Furion.HttpRemote.HttpRequestBuilder,Furion.HttpRemote.IHttpRequestEventHandler,System.Net.Http.HttpRequestMessage)">
            <summary>
                处理发送 HTTP 请求之前
            </summary>
            <param name="httpRequestBuilder">
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </param>
            <param name="requestEventHandler">
                <see cref="T:Furion.HttpRemote.IHttpRequestEventHandler" />
            </param>
            <param name="httpRequestMessage">
                <see cref="T:System.Net.Http.HttpRequestMessage" />
            </param>
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.HandlePostReceiveResponse(Furion.HttpRemote.HttpRequestBuilder,Furion.HttpRemote.IHttpRequestEventHandler,System.Net.Http.HttpResponseMessage)">
            <summary>
                处理收到 HTTP 响应之后
            </summary>
            <param name="httpRequestBuilder">
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </param>
            <param name="requestEventHandler">
                <see cref="T:Furion.HttpRemote.IHttpRequestEventHandler" />
            </param>
            <param name="httpResponseMessage">
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </param>
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.HandleRequestFailed(Furion.HttpRemote.HttpRequestBuilder,Furion.HttpRemote.IHttpRequestEventHandler,System.Exception,System.Net.Http.HttpResponseMessage)">
            <summary>
                处理发送 HTTP 请求发生异常
            </summary>
            <param name="httpRequestBuilder">
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </param>
            <param name="requestEventHandler">
                <see cref="T:Furion.HttpRemote.IHttpRequestEventHandler" />
            </param>
            <param name="e">
                <see cref="T:System.Exception" />
            </param>
            <param name="httpResponseMessage">
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </param>
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.CreateHttpClientWithDefaults(Furion.HttpRemote.HttpRequestBuilder)">
            <summary>
                创建带有默认值的 <see cref="T:System.Net.Http.HttpClient" /> 实例
            </summary>
            <param name="httpRequestBuilder">
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpClientPooling" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.CreateHttpClientPooling(Furion.HttpRemote.HttpRequestBuilder)">
            <summary>
                创建 <see cref="T:System.Net.Http.HttpClient" /> 实例管理器
            </summary>
            <param name="httpRequestBuilder">
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </param>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpClientPooling" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.AddDefaultUserAgentHeader(System.Net.Http.HttpClient)">
            <summary>
                向 <see cref="T:System.Net.Http.HttpClient" /> 添加默认的 <c>User-Agent</c> 标头
            </summary>
            <remarks>解决某些服务器可能需要这个头部信息才能正确响应请求。</remarks>
            <param name="httpClient">
                <see cref="T:System.Net.Http.HttpClient" />
            </param>
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.CheckContentLengthWithinLimit(Furion.HttpRemote.HttpRequestBuilder,System.Net.Http.HttpResponseMessage)">
            <summary>
                检查 HTTP 响应内容长度是否在设定的最大缓冲区大小限制内
            </summary>
            <param name="httpRequestBuilder">
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </param>
            <param name="httpResponseMessage">
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </param>
            <exception cref="T:System.Net.Http.HttpRequestException"></exception>
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.InvokeStatusCodeHandlers(Furion.HttpRemote.HttpRequestBuilder,System.Net.Http.HttpResponseMessage,System.Threading.CancellationToken)">
            <summary>
                调用状态码处理程序
            </summary>
            <param name="httpRequestBuilder">
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </param>
            <param name="httpResponseMessage">
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.InvokeStatusCodeHandlersAsync(Furion.HttpRemote.HttpRequestBuilder,System.Net.Http.HttpResponseMessage,System.Threading.CancellationToken)">
            <summary>
                调用状态码处理程序
            </summary>
            <param name="httpRequestBuilder">
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </param>
            <param name="httpResponseMessage">
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.IsMatchedStatusCode(System.Object,System.Int32)">
            <summary>
                检查状态码代码是否匹配响应状态码
            </summary>
            <param name="code">状态码代码</param>
            <param name="statusCode">响应状态码</param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.DynamicCreateHttpRemoteResult(System.Type,System.Net.Http.HttpResponseMessage,System.Object,System.Int64)">
            <summary>
                动态创建 <see cref="T:Furion.HttpRemote.HttpRemoteResult`1" /> 实例
            </summary>
            <param name="httpRemoteResultType"><see cref="T:Furion.HttpRemote.HttpRemoteResult`1" /> 类型</param>
            <param name="httpResponseMessage">
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </param>
            <param name="result"><see cref="T:Furion.HttpRemote.HttpRemoteResult`1" /> 泛型类型的实例</param>
            <param name="requestDuration">请求耗时（毫秒）</param>
            <returns>
                <see cref="T:System.Object" />
            </returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.StatusCodeRangeRegex">
            <remarks>
            Pattern:<br/>
            <code>^\\d+-\\d+$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match a Unicode digit atomically at least once.<br/>
            ○ Match '-'.<br/>
            ○ Match a Unicode digit atomically at least once.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.StatusCodeCompareRegex">
            <remarks>
            Pattern:<br/>
            <code>^([&lt;&gt;]=?|=|&gt;|&lt;)(\\d+)$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ 1st capture group.<br/>
                ○ Match with 2 alternative expressions.<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match a character in the set [&lt;&gt;].<br/>
                        ○ Match '=' atomically, optionally.<br/>
                    ○ Match a character in the set [&lt;-&gt;].<br/>
            ○ 2nd capture group.<br/>
                ○ Match a Unicode digit atomically at least once.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.DownloadFile(System.String,System.String,System.Func{Furion.HttpRemote.FileTransferProgress,System.Threading.Tasks.Task},Furion.HttpRemote.FileExistsBehavior,System.Action{Furion.HttpRemote.HttpFileDownloadBuilder},System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.DownloadFileAsync(System.String,System.String,System.Func{Furion.HttpRemote.FileTransferProgress,System.Threading.Tasks.Task},Furion.HttpRemote.FileExistsBehavior,System.Action{Furion.HttpRemote.HttpFileDownloadBuilder},System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.Send(Furion.HttpRemote.HttpFileDownloadBuilder,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.SendAsync(Furion.HttpRemote.HttpFileDownloadBuilder,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.UploadFile(System.String,System.String,System.String,System.Func{Furion.HttpRemote.FileTransferProgress,System.Threading.Tasks.Task},System.String,System.Action{Furion.HttpRemote.HttpFileUploadBuilder},System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.UploadFileAsync(System.String,System.String,System.String,System.Func{Furion.HttpRemote.FileTransferProgress,System.Threading.Tasks.Task},System.String,System.Action{Furion.HttpRemote.HttpFileUploadBuilder},System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.Send(Furion.HttpRemote.HttpFileUploadBuilder,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.SendAsync(Furion.HttpRemote.HttpFileUploadBuilder,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.ServerSentEvents(System.String,System.Func{Furion.HttpRemote.ServerSentEventsData,System.Threading.Tasks.Task},System.Action{Furion.HttpRemote.HttpServerSentEventsBuilder},System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.ServerSentEventsAsync(System.String,System.Func{Furion.HttpRemote.ServerSentEventsData,System.Threading.Tasks.Task},System.Action{Furion.HttpRemote.HttpServerSentEventsBuilder},System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.Send(Furion.HttpRemote.HttpServerSentEventsBuilder,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.SendAsync(Furion.HttpRemote.HttpServerSentEventsBuilder,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.StressTestHarness(System.String,System.Int32,System.Action{Furion.HttpRemote.HttpStressTestHarnessBuilder},System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.StressTestHarnessAsync(System.String,System.Int32,System.Action{Furion.HttpRemote.HttpStressTestHarnessBuilder},System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.Send(Furion.HttpRemote.HttpStressTestHarnessBuilder,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.SendAsync(Furion.HttpRemote.HttpStressTestHarnessBuilder,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.LongPolling(System.String,System.Func{System.Net.Http.HttpResponseMessage,System.Threading.Tasks.Task},System.Action{Furion.HttpRemote.HttpLongPollingBuilder},System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.LongPollingAsync(System.String,System.Func{System.Net.Http.HttpResponseMessage,System.Threading.Tasks.Task},System.Action{Furion.HttpRemote.HttpLongPollingBuilder},System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.Send(Furion.HttpRemote.HttpLongPollingBuilder,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.SendAsync(Furion.HttpRemote.HttpLongPollingBuilder,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.Declarative(System.Reflection.MethodInfo,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.DeclarativeAsync``1(System.Reflection.MethodInfo,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.SendAs(Furion.HttpRemote.HttpDeclarativeBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.SendAsAsync``1(Furion.HttpRemote.HttpDeclarativeBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.Get(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.Get(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.GetAsync(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.GetAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.GetAs``1(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.GetAs``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.GetAsAsync``1(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.GetAsAsync``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.Get``1(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.Get``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.GetAsync``1(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.GetAsync``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.GetAsString(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.GetAsStream(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.GetAsByteArray(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.GetAsString(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.GetAsStream(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.GetAsByteArray(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.GetAsStringAsync(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.GetAsStreamAsync(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.GetAsByteArrayAsync(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.GetAsStringAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.GetAsStreamAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.GetAsByteArrayAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.Put(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.Put(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.PutAsync(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.PutAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.PutAs``1(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.PutAs``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.PutAsAsync``1(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.PutAsAsync``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.Put``1(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.Put``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.PutAsync``1(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.PutAsync``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.PutAsString(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.PutAsStream(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.PutAsByteArray(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.PutAsString(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.PutAsStream(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.PutAsByteArray(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.PutAsStringAsync(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.PutAsStreamAsync(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.PutAsByteArrayAsync(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.PutAsStringAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.PutAsStreamAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.PutAsByteArrayAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.Post(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.Post(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.PostAsync(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.PostAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.PostAs``1(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.PostAs``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.PostAsAsync``1(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.PostAsAsync``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.Post``1(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.Post``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.PostAsync``1(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.PostAsync``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.PostAsString(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.PostAsStream(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.PostAsByteArray(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.PostAsString(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.PostAsStream(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.PostAsByteArray(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.PostAsStringAsync(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.PostAsStreamAsync(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.PostAsByteArrayAsync(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.PostAsStringAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.PostAsStreamAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.PostAsByteArrayAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.Delete(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.Delete(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.DeleteAsync(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.DeleteAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.DeleteAs``1(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.DeleteAs``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.DeleteAsAsync``1(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.DeleteAsAsync``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.Delete``1(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.Delete``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.DeleteAsync``1(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.DeleteAsync``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.DeleteAsString(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.DeleteAsStream(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.DeleteAsByteArray(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.DeleteAsString(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.DeleteAsStream(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.DeleteAsByteArray(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.DeleteAsStringAsync(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.DeleteAsStreamAsync(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.DeleteAsByteArrayAsync(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.DeleteAsStringAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.DeleteAsStreamAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.DeleteAsByteArrayAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.Head(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.Head(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.HeadAsync(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.HeadAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.HeadAs``1(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.HeadAs``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.HeadAsAsync``1(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.HeadAsAsync``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.Head``1(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.Head``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.HeadAsync``1(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.HeadAsync``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.HeadAsString(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.HeadAsStream(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.HeadAsByteArray(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.HeadAsString(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.HeadAsStream(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.HeadAsByteArray(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.HeadAsStringAsync(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.HeadAsStreamAsync(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.HeadAsByteArrayAsync(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.HeadAsStringAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.HeadAsStreamAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.HeadAsByteArrayAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.Options(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.Options(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.OptionsAsync(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.OptionsAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.OptionsAs``1(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.OptionsAs``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.OptionsAsAsync``1(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.OptionsAsAsync``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.Options``1(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.Options``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.OptionsAsync``1(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.OptionsAsync``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.OptionsAsString(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.OptionsAsStream(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.OptionsAsByteArray(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.OptionsAsString(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.OptionsAsStream(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.OptionsAsByteArray(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.OptionsAsStringAsync(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.OptionsAsStreamAsync(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.OptionsAsByteArrayAsync(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.OptionsAsStringAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.OptionsAsStreamAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.OptionsAsByteArrayAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.Trace(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.Trace(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.TraceAsync(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.TraceAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.TraceAs``1(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.TraceAs``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.TraceAsAsync``1(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.TraceAsAsync``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.Trace``1(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.Trace``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.TraceAsync``1(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.TraceAsync``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.TraceAsString(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.TraceAsStream(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.TraceAsByteArray(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.TraceAsString(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.TraceAsStream(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.TraceAsByteArray(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.TraceAsStringAsync(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.TraceAsStreamAsync(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.TraceAsByteArrayAsync(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.TraceAsStringAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.TraceAsStreamAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.TraceAsByteArrayAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.Patch(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.Patch(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.PatchAsync(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.PatchAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.PatchAs``1(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.PatchAs``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.PatchAsAsync``1(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.PatchAsAsync``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.Patch``1(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.Patch``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.PatchAsync``1(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.PatchAsync``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.PatchAsString(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.PatchAsStream(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.PatchAsByteArray(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.PatchAsString(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.PatchAsStream(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.PatchAsByteArray(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.PatchAsStringAsync(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.PatchAsStreamAsync(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.PatchAsByteArrayAsync(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.PatchAsStringAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.PatchAsStreamAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteService.PatchAsByteArrayAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Furion.HttpRemote.IHttpRemoteService">
            <summary>
                HTTP 远程请求服务
            </summary>
            <summary>
                HTTP 远程请求服务
            </summary>
            <summary>
                HTTP 远程请求服务
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.IHttpRemoteService.ServiceProvider">
            <summary>
                <inheritdoc cref="T:System.IServiceProvider" />
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.Send(Furion.HttpRemote.HttpRequestBuilder,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP 远程请求
            </summary>
            <param name="httpRequestBuilder">
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.Send(Furion.HttpRemote.HttpRequestBuilder,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP 远程请求
            </summary>
            <param name="httpRequestBuilder">
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.SendAsync(Furion.HttpRemote.HttpRequestBuilder,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP 远程请求
            </summary>
            <param name="httpRequestBuilder">
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.SendAsync(Furion.HttpRemote.HttpRequestBuilder,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP 远程请求
            </summary>
            <param name="httpRequestBuilder">
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.SendAs``1(Furion.HttpRemote.HttpRequestBuilder,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP 远程请求
            </summary>
            <param name="httpRequestBuilder">
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <typeparamref name="TResult" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.SendAs``1(Furion.HttpRemote.HttpRequestBuilder,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP 远程请求
            </summary>
            <param name="httpRequestBuilder">
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <typeparamref name="TResult" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.SendAsString(Furion.HttpRemote.HttpRequestBuilder,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP 远程请求
            </summary>
            <param name="httpRequestBuilder">
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.SendAsString(Furion.HttpRemote.HttpRequestBuilder,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP 远程请求
            </summary>
            <param name="httpRequestBuilder">
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.SendAsByteArray(Furion.HttpRemote.HttpRequestBuilder,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP 远程请求
            </summary>
            <param name="httpRequestBuilder">
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <c>byte[]</c>
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.SendAsByteArray(Furion.HttpRemote.HttpRequestBuilder,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP 远程请求
            </summary>
            <param name="httpRequestBuilder">
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <c>byte[]</c>
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.SendAsStream(Furion.HttpRemote.HttpRequestBuilder,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP 远程请求
            </summary>
            <param name="httpRequestBuilder">
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.IO.Stream" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.SendAsStream(Furion.HttpRemote.HttpRequestBuilder,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP 远程请求
            </summary>
            <param name="httpRequestBuilder">
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.IO.Stream" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.SendAsAsync``1(Furion.HttpRemote.HttpRequestBuilder,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP 远程请求
            </summary>
            <param name="httpRequestBuilder">
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <typeparamref name="TResult" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.SendAsAsync``1(Furion.HttpRemote.HttpRequestBuilder,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP 远程请求
            </summary>
            <param name="httpRequestBuilder">
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <typeparamref name="TResult" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.SendAsStringAsync(Furion.HttpRemote.HttpRequestBuilder,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP 远程请求
            </summary>
            <param name="httpRequestBuilder">
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.SendAsStringAsync(Furion.HttpRemote.HttpRequestBuilder,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP 远程请求
            </summary>
            <param name="httpRequestBuilder">
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.SendAsByteArrayAsync(Furion.HttpRemote.HttpRequestBuilder,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP 远程请求
            </summary>
            <param name="httpRequestBuilder">
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <c>byte[]</c>
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.SendAsByteArrayAsync(Furion.HttpRemote.HttpRequestBuilder,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP 远程请求
            </summary>
            <param name="httpRequestBuilder">
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <c>byte[]</c>
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.SendAsStreamAsync(Furion.HttpRemote.HttpRequestBuilder,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP 远程请求
            </summary>
            <param name="httpRequestBuilder">
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.IO.Stream" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.SendAsStreamAsync(Furion.HttpRemote.HttpRequestBuilder,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP 远程请求
            </summary>
            <param name="httpRequestBuilder">
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.IO.Stream" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.SendAs(System.Type,Furion.HttpRemote.HttpRequestBuilder,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP 远程请求
            </summary>
            <param name="resultType">转换的目标类型</param>
            <param name="httpRequestBuilder">
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Object" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.SendAs(System.Type,Furion.HttpRemote.HttpRequestBuilder,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP 远程请求
            </summary>
            <param name="resultType">转换的目标类型</param>
            <param name="httpRequestBuilder">
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Object" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.SendAsAsync(System.Type,Furion.HttpRemote.HttpRequestBuilder,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP 远程请求
            </summary>
            <param name="resultType">转换的目标类型</param>
            <param name="httpRequestBuilder">
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Object" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.SendAsAsync(System.Type,Furion.HttpRemote.HttpRequestBuilder,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP 远程请求
            </summary>
            <param name="resultType">转换的目标类型</param>
            <param name="httpRequestBuilder">
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Object" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.Send``1(Furion.HttpRemote.HttpRequestBuilder,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP 远程请求
            </summary>
            <param name="httpRequestBuilder">
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.Send``1(Furion.HttpRemote.HttpRequestBuilder,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP 远程请求
            </summary>
            <param name="httpRequestBuilder">
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.SendAsync``1(Furion.HttpRemote.HttpRequestBuilder,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP 远程请求
            </summary>
            <param name="httpRequestBuilder">
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.SendAsync``1(Furion.HttpRemote.HttpRequestBuilder,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP 远程请求
            </summary>
            <param name="httpRequestBuilder">
                <see cref="T:Furion.HttpRemote.HttpRequestBuilder" />
            </param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.DownloadFile(System.String,System.String,System.Func{Furion.HttpRemote.FileTransferProgress,System.Threading.Tasks.Task},Furion.HttpRemote.FileExistsBehavior,System.Action{Furion.HttpRemote.HttpFileDownloadBuilder},System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                下载文件
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="destinationPath">文件保存的目标路径</param>
            <param name="onProgressChanged">用于传输进度发生变化时执行的委托</param>
            <param name="fileExistsBehavior">
                <see cref="T:Furion.HttpRemote.FileExistsBehavior" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="requestConfigure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.DownloadFileAsync(System.String,System.String,System.Func{Furion.HttpRemote.FileTransferProgress,System.Threading.Tasks.Task},Furion.HttpRemote.FileExistsBehavior,System.Action{Furion.HttpRemote.HttpFileDownloadBuilder},System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                下载文件
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="destinationPath">文件保存的目标路径</param>
            <param name="onProgressChanged">用于传输进度发生变化时执行的委托</param>
            <param name="fileExistsBehavior">
                <see cref="T:Furion.HttpRemote.FileExistsBehavior" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="requestConfigure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Threading.Tasks.Task" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.Send(Furion.HttpRemote.HttpFileDownloadBuilder,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                下载文件
            </summary>
            <param name="httpFileDownloadBuilder">
                <see cref="T:Furion.HttpRemote.HttpFileDownloadBuilder" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.SendAsync(Furion.HttpRemote.HttpFileDownloadBuilder,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                下载文件
            </summary>
            <param name="httpFileDownloadBuilder">
                <see cref="T:Furion.HttpRemote.HttpFileDownloadBuilder" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Threading.Tasks.Task" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.UploadFile(System.String,System.String,System.String,System.Func{Furion.HttpRemote.FileTransferProgress,System.Threading.Tasks.Task},System.String,System.Action{Furion.HttpRemote.HttpFileUploadBuilder},System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                上传文件
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="filePath">文件路径</param>
            <param name="name">表单名称；默认值为 <c>file</c>。</param>
            <param name="onProgressChanged">用于传输进度发生变化时执行的委托</param>
            <param name="fileName">文件的名称</param>
            <param name="configure">自定义配置委托</param>
            <param name="requestConfigure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.UploadFileAsync(System.String,System.String,System.String,System.Func{Furion.HttpRemote.FileTransferProgress,System.Threading.Tasks.Task},System.String,System.Action{Furion.HttpRemote.HttpFileUploadBuilder},System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                上传文件
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="filePath">文件路径</param>
            <param name="name">表单名称；默认值为 <c>file</c>。</param>
            <param name="onProgressChanged">用于传输进度发生变化时执行的委托</param>
            <param name="fileName">文件的名称</param>
            <param name="configure">自定义配置委托</param>
            <param name="requestConfigure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Threading.Tasks.Task`1" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.Send(Furion.HttpRemote.HttpFileUploadBuilder,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                上传文件
            </summary>
            <param name="httpFileUploadBuilder">
                <see cref="T:Furion.HttpRemote.HttpFileUploadBuilder" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.SendAsync(Furion.HttpRemote.HttpFileUploadBuilder,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                上传文件
            </summary>
            <param name="httpFileUploadBuilder">
                <see cref="T:Furion.HttpRemote.HttpFileUploadBuilder" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Threading.Tasks.Task`1" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.ServerSentEvents(System.String,System.Func{Furion.HttpRemote.ServerSentEventsData,System.Threading.Tasks.Task},System.Action{Furion.HttpRemote.HttpServerSentEventsBuilder},System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 Server-Sent Events 请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="onMessage">用于在从事件源接收到数据时的操作</param>
            <param name="configure">自定义配置委托</param>
            <param name="requestConfigure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.ServerSentEventsAsync(System.String,System.Func{Furion.HttpRemote.ServerSentEventsData,System.Threading.Tasks.Task},System.Action{Furion.HttpRemote.HttpServerSentEventsBuilder},System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 Server-Sent Events 请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="onMessage">用于在从事件源接收到数据时的操作</param>
            <param name="configure">自定义配置委托</param>
            <param name="requestConfigure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Threading.Tasks.Task" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.Send(Furion.HttpRemote.HttpServerSentEventsBuilder,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 Server-Sent Events 请求
            </summary>
            <param name="httpServerSentEventsBuilder">
                <see cref="T:Furion.HttpRemote.HttpServerSentEventsBuilder" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.SendAsync(Furion.HttpRemote.HttpServerSentEventsBuilder,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 Server-Sent Events 请求
            </summary>
            <param name="httpServerSentEventsBuilder">
                <see cref="T:Furion.HttpRemote.HttpServerSentEventsBuilder" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Threading.Tasks.Task" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.StressTestHarness(System.String,System.Int32,System.Action{Furion.HttpRemote.HttpStressTestHarnessBuilder},System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <summary>
                压力测试
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="numberOfRequests">并发请求数量，默认值为：100。</param>
            <param name="configure">自定义配置委托</param>
            <param name="requestConfigure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:Furion.HttpRemote.StressTestHarnessResult" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.StressTestHarnessAsync(System.String,System.Int32,System.Action{Furion.HttpRemote.HttpStressTestHarnessBuilder},System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <summary>
                压力测试
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="numberOfRequests">并发请求数量，默认值为：100。</param>
            <param name="configure">自定义配置委托</param>
            <param name="requestConfigure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Threading.Tasks.Task`1" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.Send(Furion.HttpRemote.HttpStressTestHarnessBuilder,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <summary>
                压力测试
            </summary>
            <param name="httpStressTestHarnessBuilder">
                <see cref="T:Furion.HttpRemote.HttpStressTestHarnessBuilder" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:Furion.HttpRemote.StressTestHarnessResult" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.SendAsync(Furion.HttpRemote.HttpStressTestHarnessBuilder,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <summary>
                压力测试
            </summary>
            <param name="httpStressTestHarnessBuilder">
                <see cref="T:Furion.HttpRemote.HttpStressTestHarnessBuilder" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Threading.Tasks.Task`1" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.LongPolling(System.String,System.Func{System.Net.Http.HttpResponseMessage,System.Threading.Tasks.Task},System.Action{Furion.HttpRemote.HttpLongPollingBuilder},System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送长轮询请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="onDataReceived">用于接收服务器返回 <c>200~299</c> 状态码的数据的操作</param>
            <param name="configure">自定义配置委托</param>
            <param name="requestConfigure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.LongPollingAsync(System.String,System.Func{System.Net.Http.HttpResponseMessage,System.Threading.Tasks.Task},System.Action{Furion.HttpRemote.HttpLongPollingBuilder},System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送长轮询请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="onDataReceived">用于接收服务器返回 <c>200~299</c> 状态码的数据的操作</param>
            <param name="configure">自定义配置委托</param>
            <param name="requestConfigure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Threading.Tasks.Task" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.Send(Furion.HttpRemote.HttpLongPollingBuilder,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送长轮询请求
            </summary>
            <param name="httpLongPollingBuilder">
                <see cref="T:Furion.HttpRemote.HttpLongPollingBuilder" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.SendAsync(Furion.HttpRemote.HttpLongPollingBuilder,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送长轮询请求
            </summary>
            <param name="httpLongPollingBuilder">
                <see cref="T:Furion.HttpRemote.HttpLongPollingBuilder" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Threading.Tasks.Task" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.Declarative(System.Reflection.MethodInfo,System.Object[])">
            <summary>
                发送 HTTP 声明式请求
            </summary>
            <remarks>仅支持同步方法。</remarks>
            <param name="method">被调用方法</param>
            <param name="args">被调用方法的参数值数组</param>
            <returns>
                <see cref="T:System.Object" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.DeclarativeAsync``1(System.Reflection.MethodInfo,System.Object[])">
            <summary>
                发送 HTTP 声明式请求
            </summary>
            <remarks>仅支持异步方法。若无返回值则泛型传入 <see cref="T:Furion.HttpRemote.VoidContent" /> 类型。</remarks>
            <param name="method">被调用方法</param>
            <param name="args">被调用方法的参数值数组</param>
            <typeparam name="T">转换的目标类型</typeparam>
            <returns>
                <typeparamref name="T" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.SendAs(Furion.HttpRemote.HttpDeclarativeBuilder)">
            <summary>
                发送 HTTP 声明式请求
            </summary>
            <remarks>仅支持同步方法。</remarks>
            <param name="httpDeclarativeBuilder">
                <see cref="T:Furion.HttpRemote.HttpDeclarativeBuilder" />
            </param>
            <returns>
                <see cref="T:System.Object" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.SendAsAsync``1(Furion.HttpRemote.HttpDeclarativeBuilder)">
            <summary>
                发送 HTTP 声明式请求
            </summary>
            <remarks>仅支持异步方法。若无返回值则泛型传入 <see cref="T:Furion.HttpRemote.VoidContent" /> 类型。</remarks>
            <param name="httpDeclarativeBuilder">
                <see cref="T:Furion.HttpRemote.HttpDeclarativeBuilder" />
            </param>
            <typeparam name="T">转换的目标类型</typeparam>
            <returns>
                <typeparamref name="T" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.Get(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP GET 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.Get(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP GET 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.GetAsync(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP GET 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.GetAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP GET 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.GetAs``1(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP GET 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.GetAs``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP GET 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.GetAsAsync``1(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP GET 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.GetAsAsync``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP GET 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.Get``1(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP GET 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.Get``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP GET 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.GetAsync``1(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP GET 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.GetAsync``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP GET 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.GetAsString(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP GET 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.GetAsStream(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP GET 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.IO.Stream" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.GetAsByteArray(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP GET 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <c>byte[]</c>
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.GetAsString(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP GET 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.GetAsStream(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP GET 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.IO.Stream" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.GetAsByteArray(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP GET 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <c>byte[]</c>
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.GetAsStringAsync(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP GET 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.GetAsStreamAsync(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP GET 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.IO.Stream" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.GetAsByteArrayAsync(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP GET 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <c>byte[]</c>
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.GetAsStringAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP GET 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.GetAsStreamAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP GET 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.IO.Stream" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.GetAsByteArrayAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP GET 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <c>byte[]</c>
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.Put(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PUT 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.Put(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PUT 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.PutAsync(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PUT 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.PutAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PUT 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.PutAs``1(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PUT 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.PutAs``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PUT 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.PutAsAsync``1(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PUT 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.PutAsAsync``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PUT 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.Put``1(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PUT 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.Put``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PUT 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.PutAsync``1(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PUT 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.PutAsync``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PUT 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.PutAsString(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PUT 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.PutAsStream(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PUT 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.IO.Stream" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.PutAsByteArray(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PUT 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <c>byte[]</c>
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.PutAsString(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PUT 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.PutAsStream(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PUT 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.IO.Stream" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.PutAsByteArray(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PUT 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <c>byte[]</c>
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.PutAsStringAsync(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PUT 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.PutAsStreamAsync(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PUT 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.IO.Stream" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.PutAsByteArrayAsync(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PUT 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <c>byte[]</c>
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.PutAsStringAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PUT 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.PutAsStreamAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PUT 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.IO.Stream" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.PutAsByteArrayAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PUT 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <c>byte[]</c>
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.Post(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP POST 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.Post(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP POST 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.PostAsync(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP POST 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.PostAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP POST 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.PostAs``1(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP POST 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.PostAs``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP POST 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.PostAsAsync``1(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP POST 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.PostAsAsync``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP POST 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.Post``1(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP POST 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.Post``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP POST 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.PostAsync``1(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP POST 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.PostAsync``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP POST 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.PostAsString(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP POST 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.PostAsStream(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP POST 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.IO.Stream" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.PostAsByteArray(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP POST 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <c>byte[]</c>
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.PostAsString(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP POST 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.PostAsStream(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP POST 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.IO.Stream" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.PostAsByteArray(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP POST 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <c>byte[]</c>
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.PostAsStringAsync(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP POST 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.PostAsStreamAsync(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP POST 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.IO.Stream" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.PostAsByteArrayAsync(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP POST 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <c>byte[]</c>
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.PostAsStringAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP POST 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.PostAsStreamAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP POST 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.IO.Stream" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.PostAsByteArrayAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP POST 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <c>byte[]</c>
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.Delete(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP DELETE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.Delete(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP DELETE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.DeleteAsync(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP DELETE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.DeleteAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP DELETE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.DeleteAs``1(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP DELETE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.DeleteAs``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP DELETE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.DeleteAsAsync``1(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP DELETE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.DeleteAsAsync``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP DELETE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.Delete``1(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP DELETE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.Delete``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP DELETE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.DeleteAsync``1(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP DELETE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.DeleteAsync``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP DELETE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.DeleteAsString(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP DELETE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.DeleteAsStream(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP DELETE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.IO.Stream" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.DeleteAsByteArray(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP DELETE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <c>byte[]</c>
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.DeleteAsString(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP DELETE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.DeleteAsStream(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP DELETE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.IO.Stream" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.DeleteAsByteArray(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP DELETE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <c>byte[]</c>
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.DeleteAsStringAsync(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP DELETE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.DeleteAsStreamAsync(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP DELETE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.IO.Stream" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.DeleteAsByteArrayAsync(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP DELETE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <c>byte[]</c>
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.DeleteAsStringAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP DELETE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.DeleteAsStreamAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP DELETE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.IO.Stream" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.DeleteAsByteArrayAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP DELETE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <c>byte[]</c>
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.Head(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP HEAD 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.Head(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP HEAD 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.HeadAsync(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP HEAD 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.HeadAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP HEAD 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.HeadAs``1(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP HEAD 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.HeadAs``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP HEAD 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.HeadAsAsync``1(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP HEAD 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.HeadAsAsync``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP HEAD 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.Head``1(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP HEAD 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.Head``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP HEAD 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.HeadAsync``1(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP HEAD 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.HeadAsync``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP HEAD 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.HeadAsString(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP HEAD 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.HeadAsStream(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP HEAD 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.IO.Stream" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.HeadAsByteArray(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP HEAD 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <c>byte[]</c>
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.HeadAsString(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP HEAD 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.HeadAsStream(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP HEAD 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.IO.Stream" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.HeadAsByteArray(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP HEAD 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <c>byte[]</c>
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.HeadAsStringAsync(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP HEAD 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.HeadAsStreamAsync(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP HEAD 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.IO.Stream" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.HeadAsByteArrayAsync(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP HEAD 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <c>byte[]</c>
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.HeadAsStringAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP HEAD 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.HeadAsStreamAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP HEAD 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.IO.Stream" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.HeadAsByteArrayAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP HEAD 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <c>byte[]</c>
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.Options(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP OPTIONS 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.Options(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP OPTIONS 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.OptionsAsync(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP OPTIONS 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.OptionsAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP OPTIONS 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.OptionsAs``1(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP OPTIONS 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.OptionsAs``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP OPTIONS 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.OptionsAsAsync``1(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP OPTIONS 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.OptionsAsAsync``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP OPTIONS 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.Options``1(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP OPTIONS 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.Options``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP OPTIONS 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.OptionsAsync``1(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP OPTIONS 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.OptionsAsync``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP OPTIONS 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.OptionsAsString(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP OPTIONS 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.OptionsAsStream(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP OPTIONS 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.IO.Stream" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.OptionsAsByteArray(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP OPTIONS 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <c>byte[]</c>
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.OptionsAsString(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP OPTIONS 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.OptionsAsStream(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP OPTIONS 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.IO.Stream" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.OptionsAsByteArray(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP OPTIONS 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <c>byte[]</c>
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.OptionsAsStringAsync(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP OPTIONS 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.OptionsAsStreamAsync(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP OPTIONS 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.IO.Stream" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.OptionsAsByteArrayAsync(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP OPTIONS 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <c>byte[]</c>
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.OptionsAsStringAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP OPTIONS 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.OptionsAsStreamAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP OPTIONS 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.IO.Stream" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.OptionsAsByteArrayAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP OPTIONS 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <c>byte[]</c>
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.Trace(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP TRACE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.Trace(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP TRACE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.TraceAsync(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP TRACE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.TraceAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP TRACE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.TraceAs``1(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP TRACE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.TraceAs``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP TRACE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.TraceAsAsync``1(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP TRACE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.TraceAsAsync``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP TRACE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.Trace``1(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP TRACE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.Trace``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP TRACE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.TraceAsync``1(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP TRACE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.TraceAsync``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP TRACE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.TraceAsString(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP TRACE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.TraceAsStream(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP TRACE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.IO.Stream" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.TraceAsByteArray(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP TRACE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <c>byte[]</c>
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.TraceAsString(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP TRACE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.TraceAsStream(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP TRACE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.IO.Stream" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.TraceAsByteArray(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP TRACE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <c>byte[]</c>
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.TraceAsStringAsync(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP TRACE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.TraceAsStreamAsync(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP TRACE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.IO.Stream" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.TraceAsByteArrayAsync(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP TRACE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <c>byte[]</c>
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.TraceAsStringAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP TRACE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.TraceAsStreamAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP TRACE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.IO.Stream" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.TraceAsByteArrayAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP TRACE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <c>byte[]</c>
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.Patch(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PATCH 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.Patch(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PATCH 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.PatchAsync(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PATCH 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.PatchAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PATCH 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.PatchAs``1(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PATCH 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.PatchAs``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PATCH 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.PatchAsAsync``1(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PATCH 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.PatchAsAsync``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PATCH 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.Patch``1(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PATCH 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.Patch``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PATCH 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.PatchAsync``1(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PATCH 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.PatchAsync``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PATCH 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:Furion.HttpRemote.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.PatchAsString(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PATCH 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.PatchAsStream(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PATCH 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.IO.Stream" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.PatchAsByteArray(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PATCH 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <c>byte[]</c>
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.PatchAsString(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PATCH 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.PatchAsStream(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PATCH 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.IO.Stream" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.PatchAsByteArray(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PATCH 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <c>byte[]</c>
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.PatchAsStringAsync(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PATCH 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.PatchAsStreamAsync(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PATCH 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.IO.Stream" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.PatchAsByteArrayAsync(System.String,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PATCH 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <c>byte[]</c>
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.PatchAsStringAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PATCH 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.PatchAsStreamAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PATCH 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.IO.Stream" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.IHttpRemoteService.PatchAsByteArrayAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{Furion.HttpRemote.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PATCH 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <c>byte[]</c>
            </returns>
        </member>
        <member name="T:Furion.HttpRemote.HttpRemoteUtility">
            <summary>
                提供 HTTP 远程请求实用方法
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.HttpRemoteUtility.AllSslProtocols">
            <summary>
                获取所有支持的 SslProtocols
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.HttpRemoteUtility.IgnoreSslErrors">
            <summary>
                忽略 SSL 证书验证
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteUtility.IPv4ConnectCallback(System.Net.Http.SocketsHttpConnectionContext,System.Threading.CancellationToken)">
            <summary>
                获取使用 IPv4 连接到服务器的回调
            </summary>
            <param name="context">
                <see cref="T:System.Net.Http.SocketsHttpConnectionContext" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.IO.Stream" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteUtility.IPv6ConnectCallback(System.Net.Http.SocketsHttpConnectionContext,System.Threading.CancellationToken)">
            <summary>
                获取使用 IPv6 连接到服务器的回调
            </summary>
            <param name="context">
                <see cref="T:System.Net.Http.SocketsHttpConnectionContext" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.IO.Stream" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteUtility.UnspecifiedConnectCallback(System.Net.Http.SocketsHttpConnectionContext,System.Threading.CancellationToken)">
            <summary>
                获取使用 IPv4 或 IPv6 连接到服务器的回调
            </summary>
            <param name="context">
                <see cref="T:System.Net.Http.SocketsHttpConnectionContext" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.IO.Stream" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.HttpRemoteUtility.IPAddressConnectCallback(System.Net.Sockets.AddressFamily,System.Net.Http.SocketsHttpConnectionContext,System.Threading.CancellationToken)">
            <summary>
                获取使用指定 IP 地址类型连接到服务器的回调
            </summary>
            <param name="addressFamily">
                <see cref="T:System.Net.Sockets.AddressFamily" />
            </param>
            <param name="context">
                <see cref="T:System.Net.Http.SocketsHttpConnectionContext" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.IO.Stream" />
            </returns>
        </member>
        <member name="T:Furion.HttpRemote.WebSocketBinaryReceiveResult">
            <summary>
                WebSocket 接收的二进制消息的结果类
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.WebSocketBinaryReceiveResult.#ctor(System.Int32,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.WebSocketBinaryReceiveResult.#ctor(System.Int32,System.Boolean,System.Nullable{System.Net.WebSockets.WebSocketCloseStatus},System.String)">
            <inheritdoc />
        </member>
        <member name="P:Furion.HttpRemote.WebSocketBinaryReceiveResult.Message">
            <summary>
                二进制消息
            </summary>
        </member>
        <member name="T:Furion.HttpRemote.WebSocketClient">
            <summary>
                WebSocket 客户端
            </summary>
            <summary>
                WebSocket 客户端
            </summary>
        </member>
        <member name="F:Furion.HttpRemote.WebSocketClient._clientWebSocket">
            <inheritdoc cref="T:System.Net.WebSockets.ClientWebSocket" />
        </member>
        <member name="F:Furion.HttpRemote.WebSocketClient._messageCancellationTokenSource">
            <summary>
                取消接收服务器消息标记
            </summary>
        </member>
        <member name="F:Furion.HttpRemote.WebSocketClient._receiveMessageTask">
            <summary>
                接收服务器消息任务
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.WebSocketClient.#ctor(System.String)">
            <summary>
                <inheritdoc cref="T:Furion.HttpRemote.WebSocketClient" />
            </summary>
            <param name="serverUri">服务器地址</param>
        </member>
        <member name="M:Furion.HttpRemote.WebSocketClient.#ctor(System.Uri)">
            <summary>
                <inheritdoc cref="T:Furion.HttpRemote.WebSocketClient" />
            </summary>
            <param name="serverUri">服务器地址</param>
        </member>
        <member name="M:Furion.HttpRemote.WebSocketClient.#ctor(Furion.HttpRemote.WebSocketClientOptions)">
            <summary>
                <inheritdoc cref="T:Furion.HttpRemote.WebSocketClient" />
            </summary>
            <param name="options">
                <see cref="T:Furion.HttpRemote.WebSocketClientOptions" />
            </param>
        </member>
        <member name="P:Furion.HttpRemote.WebSocketClient.State">
            <inheritdoc cref="T:System.Net.WebSockets.WebSocketState" />
        </member>
        <member name="P:Furion.HttpRemote.WebSocketClient.Options">
            <summary>
                <see cref="T:Furion.HttpRemote.WebSocketClientOptions" />
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.WebSocketClient.CurrentReconnectRetries">
            <summary>
                当前重连次数
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.WebSocketClient.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.WebSocketClient.ConnectAsync(System.Threading.CancellationToken)">
            <summary>
                连接到服务器
            </summary>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
        </member>
        <member name="M:Furion.HttpRemote.WebSocketClient.ReconnectAsync(System.Threading.CancellationToken)">
            <summary>
                重新连接到服务器
            </summary>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
        </member>
        <member name="M:Furion.HttpRemote.WebSocketClient.ListenAsync(System.Threading.CancellationToken)">
            <summary>
                开始监听服务器消息（非阻塞）
            </summary>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Threading.Tasks.Task" />
            </returns>
        </member>
        <member name="M:Furion.HttpRemote.WebSocketClient.WaitAsync(System.Threading.CancellationToken)">
            <summary>
                等待接收服务器消息（阻塞）
            </summary>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
        </member>
        <member name="M:Furion.HttpRemote.WebSocketClient.ReceiveAsync(System.Threading.CancellationToken)">
            <summary>
                接收服务器消息
            </summary>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
        </member>
        <member name="M:Furion.HttpRemote.WebSocketClient.SendAsync(System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
                向服务器发送消息
            </summary>
            <param name="message">字符串消息</param>
            <param name="endOfMessage">是否作为消息的最后一部分，默认值为 <c>true</c>。</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
        </member>
        <member name="M:Furion.HttpRemote.WebSocketClient.SendAsync(System.String,System.Net.WebSockets.WebSocketMessageType,System.Boolean,System.Threading.CancellationToken)">
            <summary>
                向服务器发送消息
            </summary>
            <param name="message">字符串消息</param>
            <param name="webSocketMessageType">
                <see cref="T:System.Net.WebSockets.WebSocketMessageType" />
            </param>
            <param name="endOfMessage">是否作为消息的最后一部分，默认值为 <c>true</c>。</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
        </member>
        <member name="M:Furion.HttpRemote.WebSocketClient.SendAsync(System.Byte[],System.Boolean,System.Threading.CancellationToken)">
            <summary>
                向服务器发送消息
            </summary>
            <param name="byteArray">二进制消息</param>
            <param name="endOfMessage">是否作为消息的最后一部分，默认值为 <c>true</c>。</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
        </member>
        <member name="M:Furion.HttpRemote.WebSocketClient.CloseAsync(System.Threading.CancellationToken)">
            <summary>
                关闭连接
            </summary>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
        </member>
        <member name="M:Furion.HttpRemote.WebSocketClient.CloseAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)">
            <summary>
                关闭连接
            </summary>
            <param name="closeStatus">
                <see cref="T:System.Net.WebSockets.WebSocketCloseStatus" />
            </param>
            <param name="closeDescription">关闭描述。默认值为：<c>Closing</c>。</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
        </member>
        <member name="E:Furion.HttpRemote.WebSocketClient.Connecting">
            <summary>
                开始连接时触发事件
            </summary>
        </member>
        <member name="E:Furion.HttpRemote.WebSocketClient.Connected">
            <summary>
                连接成功时触发事件
            </summary>
        </member>
        <member name="E:Furion.HttpRemote.WebSocketClient.Reconnecting">
            <summary>
                开始重新连接时触发事件
            </summary>
        </member>
        <member name="E:Furion.HttpRemote.WebSocketClient.Reconnected">
            <summary>
                重新连接成功时触发事件
            </summary>
        </member>
        <member name="E:Furion.HttpRemote.WebSocketClient.Closing">
            <summary>
                开始关闭连接时触发事件
            </summary>
        </member>
        <member name="E:Furion.HttpRemote.WebSocketClient.Closed">
            <summary>
                关闭连接成功时触发事件
            </summary>
        </member>
        <member name="E:Furion.HttpRemote.WebSocketClient.ReceivingStarted">
            <summary>
                开始接收消息时触发事件
            </summary>
        </member>
        <member name="E:Furion.HttpRemote.WebSocketClient.ReceivingStopped">
            <summary>
                停止接收消息时触发事件
            </summary>
        </member>
        <member name="E:Furion.HttpRemote.WebSocketClient.TextReceived">
            <summary>
                接收文本消息事件
            </summary>
        </member>
        <member name="E:Furion.HttpRemote.WebSocketClient.BinaryReceived">
            <summary>
                接收二进制消息事件
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.WebSocketClient.OnConnecting">
            <summary>
                触发开始连接事件
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.WebSocketClient.OnConnected">
            <summary>
                触发连接成功事件
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.WebSocketClient.OnReconnecting">
            <summary>
                触发开始重新连接事件
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.WebSocketClient.OnReconnected">
            <summary>
                触发重新连接成功事件
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.WebSocketClient.OnClosing">
            <summary>
                触发开始关闭连接事件
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.WebSocketClient.OnClosed">
            <summary>
                触发关闭连接成功事件
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.WebSocketClient.OnReceivingStarted">
            <summary>
                触发开始接收消息事件
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.WebSocketClient.OnReceivingStopped">
            <summary>
                触发停止接收消息事件
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.WebSocketClient.OnTextReceived(Furion.HttpRemote.WebSocketTextReceiveResult)">
            <summary>
                触发接收文本消息事件
            </summary>
            <param name="receiveResult">
                <see cref="T:Furion.HttpRemote.WebSocketTextReceiveResult" />
            </param>
        </member>
        <member name="M:Furion.HttpRemote.WebSocketClient.OnBinaryReceived(Furion.HttpRemote.WebSocketBinaryReceiveResult)">
            <summary>
                触发接收二进制消息事件
            </summary>
            <param name="receiveResult">
                <see cref="T:Furion.HttpRemote.WebSocketBinaryReceiveResult" />
            </param>
        </member>
        <member name="T:Furion.HttpRemote.WebSocketClientOptions">
            <summary>
                WebSocket 客户端配置选项
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.WebSocketClientOptions.#ctor(System.String)">
            <summary>
                <inheritdoc cref="T:Furion.HttpRemote.WebSocketClientOptions" />
            </summary>
            <param name="serverUri">服务器地址</param>
        </member>
        <member name="M:Furion.HttpRemote.WebSocketClientOptions.#ctor(System.Uri)">
            <summary>
                <inheritdoc cref="T:Furion.HttpRemote.WebSocketClientOptions" />
            </summary>
            <param name="serverUri">服务器地址</param>
        </member>
        <member name="P:Furion.HttpRemote.WebSocketClientOptions.ServerUri">
            <summary>
                服务器地址
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.WebSocketClientOptions.ReconnectInterval">
            <summary>
                重连的间隔时间（毫秒）
            </summary>
            <remarks>默认值为 2 秒。</remarks>
        </member>
        <member name="P:Furion.HttpRemote.WebSocketClientOptions.MaxReconnectRetries">
            <summary>
                最大重连次数
            </summary>
            <remarks>默认最大重连次数为 10。</remarks>
        </member>
        <member name="P:Furion.HttpRemote.WebSocketClientOptions.Timeout">
            <summary>
                超时时间
            </summary>
        </member>
        <member name="P:Furion.HttpRemote.WebSocketClientOptions.ReceiveBufferSize">
            <summary>
                接收服务器新消息缓冲区大小
            </summary>
            <remarks>以字节为单位，默认值为 <c>4 KB</c>。</remarks>
        </member>
        <member name="P:Furion.HttpRemote.WebSocketClientOptions.ConfigureClientWebSocketOptions">
            <summary>
                用于配置 <see cref="P:Furion.HttpRemote.WebSocketClientOptions.ConfigureClientWebSocketOptions" /> 的操作
            </summary>
        </member>
        <member name="T:Furion.HttpRemote.WebSocketTextReceiveResult">
            <summary>
                WebSocket 接收的文本消息的结果类
            </summary>
        </member>
        <member name="M:Furion.HttpRemote.WebSocketTextReceiveResult.#ctor(System.Int32,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Furion.HttpRemote.WebSocketTextReceiveResult.#ctor(System.Int32,System.Boolean,System.Nullable{System.Net.WebSockets.WebSocketCloseStatus},System.String)">
            <inheritdoc />
        </member>
        <member name="P:Furion.HttpRemote.WebSocketTextReceiveResult.Message">
            <summary>
                文本消息
            </summary>
        </member>
        <member name="T:Furion.RescuePolicy.CompositePolicyContext`1">
            <summary>
                组合策略上下文
            </summary>
            <typeparam name="TResult">操作返回值类型</typeparam>
        </member>
        <member name="M:Furion.RescuePolicy.CompositePolicyContext`1.#ctor(Furion.RescuePolicy.PolicyBase{`0})">
            <summary>
                <inheritdoc cref="T:Furion.RescuePolicy.CompositePolicyContext`1" />
            </summary>
            <param name="policy">
                <see cref="T:Furion.RescuePolicy.PolicyBase`1" />
            </param>
        </member>
        <member name="P:Furion.RescuePolicy.CompositePolicyContext`1.Policy">
            <inheritdoc cref="T:Furion.RescuePolicy.PolicyBase`1" />
        </member>
        <member name="P:Furion.RescuePolicy.CompositePolicyContext`1.Exception">
            <inheritdoc cref="T:System.Exception" />
        </member>
        <member name="T:Furion.RescuePolicy.FallbackPolicyContext`1">
            <summary>
                后备策略上下文
            </summary>
            <typeparam name="TResult">操作返回值类型</typeparam>
        </member>
        <member name="M:Furion.RescuePolicy.FallbackPolicyContext`1.#ctor">
            <summary>
                <inheritdoc cref="T:Furion.RescuePolicy.FallbackPolicyContext`1" />
            </summary>
        </member>
        <member name="P:Furion.RescuePolicy.FallbackPolicyContext`1.Exception">
            <inheritdoc cref="T:System.Exception" />
        </member>
        <member name="P:Furion.RescuePolicy.FallbackPolicyContext`1.Result">
            <summary>
                操作返回值
            </summary>
        </member>
        <member name="T:Furion.RescuePolicy.PolicyContextBase">
            <summary>
                策略上下文抽象基类
            </summary>
        </member>
        <member name="P:Furion.RescuePolicy.PolicyContextBase.PolicyName">
            <summary>
                策略名称
            </summary>
        </member>
        <member name="T:Furion.RescuePolicy.RetryPolicyContext`1">
            <summary>
                重试策略上下文
            </summary>
            <typeparam name="TResult">操作返回值类型</typeparam>
        </member>
        <member name="M:Furion.RescuePolicy.RetryPolicyContext`1.#ctor">
            <summary>
                <inheritdoc cref="T:Furion.RescuePolicy.RetryPolicyContext`1" />
            </summary>
        </member>
        <member name="P:Furion.RescuePolicy.RetryPolicyContext`1.Exception">
            <inheritdoc cref="T:System.Exception" />
        </member>
        <member name="P:Furion.RescuePolicy.RetryPolicyContext`1.Result">
            <summary>
                操作返回值
            </summary>
        </member>
        <member name="P:Furion.RescuePolicy.RetryPolicyContext`1.RetryCount">
            <summary>
                当前重试次数
            </summary>
        </member>
        <member name="P:Furion.RescuePolicy.RetryPolicyContext`1.Properties">
            <summary>
                附加属性
            </summary>
        </member>
        <member name="M:Furion.RescuePolicy.RetryPolicyContext`1.Increment">
            <summary>
                递增上下文数据
            </summary>
        </member>
        <member name="T:Furion.RescuePolicy.TimeoutPolicyContext`1">
            <summary>
                超时策略上下文
            </summary>
            <typeparam name="TResult">操作返回值类型</typeparam>
        </member>
        <member name="M:Furion.RescuePolicy.TimeoutPolicyContext`1.#ctor">
            <summary>
                <inheritdoc cref="T:Furion.RescuePolicy.TimeoutPolicyContext`1" />
            </summary>
        </member>
        <member name="T:Furion.RescuePolicy.IExceptionPolicy`1">
            <summary>
                异常策略服务
            </summary>
            <typeparam name="TResult">操作返回值类型</typeparam>
        </member>
        <member name="P:Furion.RescuePolicy.IExceptionPolicy`1.PolicyName">
            <summary>
                策略名称
            </summary>
        </member>
        <member name="M:Furion.RescuePolicy.IExceptionPolicy`1.Execute(System.Action,System.Threading.CancellationToken)">
            <summary>
                执行同步操作方法
            </summary>
            <param name="operation">操作方法</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
        </member>
        <member name="M:Furion.RescuePolicy.IExceptionPolicy`1.Execute(System.Action{System.Threading.CancellationToken},System.Threading.CancellationToken)">
            <summary>
                执行同步操作方法
            </summary>
            <param name="operation">操作方法</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
        </member>
        <member name="M:Furion.RescuePolicy.IExceptionPolicy`1.ExecuteAsync(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
                执行异步操作方法
            </summary>
            <param name="operation">操作方法</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Threading.Tasks.Task`1" />
            </returns>
        </member>
        <member name="M:Furion.RescuePolicy.IExceptionPolicy`1.ExecuteAsync(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
                执行异步操作方法
            </summary>
            <param name="operation">操作方法</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Threading.Tasks.Task`1" />
            </returns>
        </member>
        <member name="M:Furion.RescuePolicy.IExceptionPolicy`1.Execute(System.Func{`0},System.Threading.CancellationToken)">
            <summary>
                执行同步操作方法
            </summary>
            <param name="operation">操作方法</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <typeparamref name="TResult" />
            </returns>
        </member>
        <member name="M:Furion.RescuePolicy.IExceptionPolicy`1.Execute(System.Func{System.Threading.CancellationToken,`0},System.Threading.CancellationToken)">
            <summary>
                执行同步操作方法
            </summary>
            <param name="operation">操作方法</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <typeparamref name="TResult" />
            </returns>
        </member>
        <member name="M:Furion.RescuePolicy.IExceptionPolicy`1.ExecuteAsync(System.Func{System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken)">
            <summary>
                执行异步操作方法
            </summary>
            <param name="operation">操作方法</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Threading.Tasks.Task`1" />
            </returns>
        </member>
        <member name="M:Furion.RescuePolicy.IExceptionPolicy`1.ExecuteAsync(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken)">
            <summary>
                执行异步操作方法
            </summary>
            <param name="operation">操作方法</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Threading.Tasks.Task`1" />
            </returns>
        </member>
        <member name="T:Furion.RescuePolicy.CompositePolicy">
            <summary>
                组合策略
            </summary>
        </member>
        <member name="M:Furion.RescuePolicy.CompositePolicy.#ctor">
            <summary>
                <inheritdoc cref="T:Furion.RescuePolicy.CompositePolicy" />
            </summary>
        </member>
        <member name="M:Furion.RescuePolicy.CompositePolicy.#ctor(Furion.RescuePolicy.PolicyBase{System.Object}[])">
            <summary>
                <inheritdoc cref="T:Furion.RescuePolicy.CompositePolicy" />
            </summary>
            <param name="policies">策略集合</param>
        </member>
        <member name="M:Furion.RescuePolicy.CompositePolicy.#ctor(System.Collections.Generic.IEnumerable{Furion.RescuePolicy.PolicyBase{System.Object}})">
            <summary>
                <inheritdoc cref="T:Furion.RescuePolicy.CompositePolicy" />
            </summary>
            <param name="policies">策略集合</param>
        </member>
        <member name="T:Furion.RescuePolicy.CompositePolicy`1">
            <summary>
                组合策略
            </summary>
            <typeparam name="TResult">操作返回值类型</typeparam>
        </member>
        <member name="M:Furion.RescuePolicy.CompositePolicy`1.#ctor">
            <summary>
                <inheritdoc cref="T:Furion.RescuePolicy.CompositePolicy`1" />
            </summary>
        </member>
        <member name="M:Furion.RescuePolicy.CompositePolicy`1.#ctor(Furion.RescuePolicy.PolicyBase{`0}[])">
            <summary>
                <inheritdoc cref="T:Furion.RescuePolicy.CompositePolicy`1" />
            </summary>
            <param name="policies">策略集合</param>
        </member>
        <member name="M:Furion.RescuePolicy.CompositePolicy`1.#ctor(System.Collections.Generic.IEnumerable{Furion.RescuePolicy.PolicyBase{`0}})">
            <summary>
                <inheritdoc cref="T:Furion.RescuePolicy.CompositePolicy`1" />
            </summary>
            <param name="policies">策略集合</param>
        </member>
        <member name="P:Furion.RescuePolicy.CompositePolicy`1.Policies">
            <summary>
                策略集合
            </summary>
        </member>
        <member name="P:Furion.RescuePolicy.CompositePolicy`1.ExecutionFailureAction">
            <summary>
                执行失败时操作方法
            </summary>
        </member>
        <member name="M:Furion.RescuePolicy.CompositePolicy`1.Join(Furion.RescuePolicy.PolicyBase{`0}[])">
            <summary>
                添加策略
            </summary>
            <param name="policies">策略集合</param>
            <returns>
                <see cref="T:Furion.RescuePolicy.CompositePolicy`1" />
            </returns>
        </member>
        <member name="M:Furion.RescuePolicy.CompositePolicy`1.Join(System.Collections.Generic.IEnumerable{Furion.RescuePolicy.PolicyBase{`0}})">
            <summary>
                添加策略
            </summary>
            <param name="policies">策略集合</param>
            <returns>
                <see cref="T:Furion.RescuePolicy.CompositePolicy`1" />
            </returns>
        </member>
        <member name="M:Furion.RescuePolicy.CompositePolicy`1.OnExecutionFailure(System.Action{Furion.RescuePolicy.CompositePolicyContext{`0}})">
            <summary>
                添加执行失败时操作方法
            </summary>
            <param name="executionFailureAction">执行失败时操作方法</param>
            <returns>
                <see cref="T:Furion.RescuePolicy.CompositePolicy`1" />
            </returns>
        </member>
        <member name="M:Furion.RescuePolicy.CompositePolicy`1.ExecuteAsync(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.RescuePolicy.CompositePolicy`1.ExecutePolicyChain(System.Func{System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken,System.Threading.Tasks.Task{`0}},System.Func{System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken,System.Threading.Tasks.Task{`0}})">
            <summary>
                执行策略链
            </summary>
            <param name="previous">
                <see cref="T:System.Func`3" />
            </param>
            <param name="current">
                <see cref="T:System.Func`3" />
            </param>
            <returns>
                <see cref="T:System.Func`3" />
            </returns>
        </member>
        <member name="M:Furion.RescuePolicy.CompositePolicy`1.EnsureLegalData(System.Collections.Generic.IEnumerable{Furion.RescuePolicy.PolicyBase{`0}})">
            <summary>
                检查策略集合合法性
            </summary>
            <param name="policies">策略集合</param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="T:Furion.RescuePolicy.FallbackPolicy">
            <summary>
                后备策略
            </summary>
        </member>
        <member name="M:Furion.RescuePolicy.FallbackPolicy.#ctor">
            <summary>
                <inheritdoc cref="T:Furion.RescuePolicy.FallbackPolicy" />
            </summary>
        </member>
        <member name="M:Furion.RescuePolicy.FallbackPolicy.#ctor(System.Func{Furion.RescuePolicy.FallbackPolicyContext{System.Object},System.Object})">
            <summary>
                <inheritdoc cref="T:Furion.RescuePolicy.FallbackPolicy" />
            </summary>
        </member>
        <member name="M:Furion.RescuePolicy.FallbackPolicy.#ctor(System.Action{Furion.RescuePolicy.FallbackPolicyContext{System.Object}})">
            <summary>
                <inheritdoc cref="T:Furion.RescuePolicy.FallbackPolicy" />
            </summary>
        </member>
        <member name="T:Furion.RescuePolicy.FallbackPolicy`1">
            <summary>
                后备策略
            </summary>
            <typeparam name="TResult">操作返回值类型</typeparam>
        </member>
        <member name="F:Furion.RescuePolicy.FallbackPolicy`1.FALLBACK_MESSAGE">
            <summary>
                后备输出信息
            </summary>
        </member>
        <member name="M:Furion.RescuePolicy.FallbackPolicy`1.#ctor">
            <summary>
                <inheritdoc cref="T:Furion.RescuePolicy.FallbackPolicy`1" />
            </summary>
        </member>
        <member name="M:Furion.RescuePolicy.FallbackPolicy`1.#ctor(System.Func{Furion.RescuePolicy.FallbackPolicyContext{`0},`0})">
            <summary>
                <inheritdoc cref="T:Furion.RescuePolicy.FallbackPolicy`1" />
            </summary>
        </member>
        <member name="M:Furion.RescuePolicy.FallbackPolicy`1.#ctor(System.Action{Furion.RescuePolicy.FallbackPolicyContext{`0}})">
            <summary>
                <inheritdoc cref="T:Furion.RescuePolicy.FallbackPolicy`1" />
            </summary>
        </member>
        <member name="P:Furion.RescuePolicy.FallbackPolicy`1.HandleExceptions">
            <summary>
                捕获的异常集合
            </summary>
        </member>
        <member name="P:Furion.RescuePolicy.FallbackPolicy`1.HandleInnerExceptions">
            <summary>
                捕获的内部异常集合
            </summary>
        </member>
        <member name="P:Furion.RescuePolicy.FallbackPolicy`1.ResultConditions">
            <summary>
                操作结果条件集合
            </summary>
        </member>
        <member name="P:Furion.RescuePolicy.FallbackPolicy`1.FallbackAction">
            <summary>
                后备操作方法
            </summary>
        </member>
        <member name="M:Furion.RescuePolicy.FallbackPolicy`1.Handle``1">
            <summary>
                添加捕获异常类型
            </summary>
            <typeparam name="TException">
                <see cref="T:System.Exception" />
            </typeparam>
            <returns>
                <see cref="T:Furion.RescuePolicy.FallbackPolicy`1" />
            </returns>
        </member>
        <member name="M:Furion.RescuePolicy.FallbackPolicy`1.Handle``1(System.Func{``0,System.Boolean})">
            <summary>
                添加捕获异常类型
            </summary>
            <typeparam name="TException">
                <see cref="T:System.Exception" />
            </typeparam>
            <param name="exceptionCondition">异常条件</param>
            <returns>
                <see cref="T:Furion.RescuePolicy.FallbackPolicy`1" />
            </returns>
        </member>
        <member name="M:Furion.RescuePolicy.FallbackPolicy`1.Or``1">
            <summary>
                添加捕获异常类型
            </summary>
            <typeparam name="TException">
                <see cref="T:System.Exception" />
            </typeparam>
            <returns>
                <see cref="T:Furion.RescuePolicy.FallbackPolicy`1" />
            </returns>
        </member>
        <member name="M:Furion.RescuePolicy.FallbackPolicy`1.Or``1(System.Func{``0,System.Boolean})">
            <summary>
                添加捕获异常类型
            </summary>
            <typeparam name="TException">
                <see cref="T:System.Exception" />
            </typeparam>
            <param name="exceptionCondition">异常条件</param>
            <returns>
                <see cref="T:Furion.RescuePolicy.FallbackPolicy`1" />
            </returns>
        </member>
        <member name="M:Furion.RescuePolicy.FallbackPolicy`1.HandleInner``1">
            <summary>
                添加捕获内部异常类型
            </summary>
            <typeparam name="TException">
                <see cref="T:System.Exception" />
            </typeparam>
            <returns>
                <see cref="T:Furion.RescuePolicy.FallbackPolicy`1" />
            </returns>
        </member>
        <member name="M:Furion.RescuePolicy.FallbackPolicy`1.HandleInner``1(System.Func{``0,System.Boolean})">
            <summary>
                添加捕获内部异常类型
            </summary>
            <typeparam name="TException">
                <see cref="T:System.Exception" />
            </typeparam>
            <param name="exceptionCondition">异常条件</param>
            <returns>
                <see cref="T:Furion.RescuePolicy.FallbackPolicy`1" />
            </returns>
        </member>
        <member name="M:Furion.RescuePolicy.FallbackPolicy`1.OrInner``1">
            <summary>
                添加捕获内部异常类型
            </summary>
            <typeparam name="TException">
                <see cref="T:System.Exception" />
            </typeparam>
            <returns>
                <see cref="T:Furion.RescuePolicy.FallbackPolicy`1" />
            </returns>
        </member>
        <member name="M:Furion.RescuePolicy.FallbackPolicy`1.OrInner``1(System.Func{``0,System.Boolean})">
            <summary>
                添加捕获内部异常类型
            </summary>
            <typeparam name="TException">
                <see cref="T:System.Exception" />
            </typeparam>
            <param name="exceptionCondition">异常条件</param>
            <returns>
                <see cref="T:Furion.RescuePolicy.FallbackPolicy`1" />
            </returns>
        </member>
        <member name="M:Furion.RescuePolicy.FallbackPolicy`1.HandleResult(System.Func{Furion.RescuePolicy.FallbackPolicyContext{`0},System.Boolean})">
            <summary>
                添加操作结果条件
            </summary>
            <param name="resultCondition">操作结果条件</param>
            <returns>
                <see cref="T:Furion.RescuePolicy.FallbackPolicy`1" />
            </returns>
        </member>
        <member name="M:Furion.RescuePolicy.FallbackPolicy`1.OrResult(System.Func{Furion.RescuePolicy.FallbackPolicyContext{`0},System.Boolean})">
            <summary>
                添加操作结果条件
            </summary>
            <param name="resultCondition">操作结果条件</param>
            <returns>
                <see cref="T:Furion.RescuePolicy.FallbackPolicy`1" />
            </returns>
        </member>
        <member name="M:Furion.RescuePolicy.FallbackPolicy`1.OnFallback(System.Func{Furion.RescuePolicy.FallbackPolicyContext{`0},`0})">
            <summary>
                添加后备操作方法
            </summary>
            <param name="fallbackAction">后备操作方法</param>
            <returns>
                <see cref="T:Furion.RescuePolicy.FallbackPolicy`1" />
            </returns>
        </member>
        <member name="M:Furion.RescuePolicy.FallbackPolicy`1.OnFallback(System.Action{Furion.RescuePolicy.FallbackPolicyContext{`0}})">
            <summary>
                添加后备操作方法
            </summary>
            <param name="fallbackAction">后备操作方法</param>
            <returns>
                <see cref="T:Furion.RescuePolicy.FallbackPolicy`1" />
            </returns>
        </member>
        <member name="M:Furion.RescuePolicy.FallbackPolicy`1.ShouldHandle(Furion.RescuePolicy.FallbackPolicyContext{`0})">
            <summary>
                检查是否满足捕获异常的条件
            </summary>
            <param name="context">
                <see cref="T:Furion.RescuePolicy.FallbackPolicyContext`1" />
            </param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:Furion.RescuePolicy.FallbackPolicy`1.ExecuteAsync(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.RescuePolicy.FallbackPolicy`1.CanHandleException(Furion.RescuePolicy.FallbackPolicyContext{`0},System.Collections.Generic.HashSet{System.Type},System.Exception)">
            <summary>
                检查是否满足捕获异常的条件
            </summary>
            <param name="context">
                <see cref="T:Furion.RescuePolicy.FallbackPolicyContext`1" />
            </param>
            <param name="exceptionTypes">捕获异常类型集合</param>
            <param name="exception">
                <see cref="T:System.Exception" />
            </param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:Furion.RescuePolicy.FallbackPolicy`1.ReturnOrThrowIfException(Furion.RescuePolicy.FallbackPolicyContext{`0})">
            <summary>
                返回结果或抛出异常
            </summary>
            <param name="context">
                <see cref="T:Furion.RescuePolicy.FallbackPolicyContext`1" />
            </param>
            <returns>
                <typeparamref name="TResult" />
            </returns>
        </member>
        <member name="T:Furion.RescuePolicy.LockPolicy">
            <summary>
                并发锁策略
            </summary>
        </member>
        <member name="M:Furion.RescuePolicy.LockPolicy.#ctor">
            <summary>
                <inheritdoc cref="T:Furion.RescuePolicy.LockPolicy" />
            </summary>
        </member>
        <member name="T:Furion.RescuePolicy.LockPolicy`1">
            <summary>
                并发锁策略
            </summary>
            <typeparam name="TResult">操作返回值类型</typeparam>
        </member>
        <member name="F:Furion.RescuePolicy.LockPolicy`1._asyncLock">
            <summary>
                异步锁对象
            </summary>
        </member>
        <member name="F:Furion.RescuePolicy.LockPolicy`1._syncLock">
            <summary>
                同步锁对象
            </summary>
        </member>
        <member name="M:Furion.RescuePolicy.LockPolicy`1.#ctor">
            <summary>
                <inheritdoc cref="T:Furion.RescuePolicy.LockPolicy`1" />
            </summary>
        </member>
        <member name="M:Furion.RescuePolicy.LockPolicy`1.Execute(System.Func{`0},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.RescuePolicy.LockPolicy`1.Execute(System.Func{System.Threading.CancellationToken,`0},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.RescuePolicy.LockPolicy`1.ExecuteAsync(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Furion.RescuePolicy.PolicyBase`1">
            <summary>
                策略抽象基类
            </summary>
            <typeparam name="TResult">操作返回值类型</typeparam>
        </member>
        <member name="P:Furion.RescuePolicy.PolicyBase`1.PolicyName">
            <inheritdoc />
        </member>
        <member name="M:Furion.RescuePolicy.PolicyBase`1.Execute(System.Action,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.RescuePolicy.PolicyBase`1.Execute(System.Action{System.Threading.CancellationToken},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.RescuePolicy.PolicyBase`1.ExecuteAsync(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.RescuePolicy.PolicyBase`1.ExecuteAsync(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.RescuePolicy.PolicyBase`1.Execute(System.Func{`0},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.RescuePolicy.PolicyBase`1.Execute(System.Func{System.Threading.CancellationToken,`0},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.RescuePolicy.PolicyBase`1.ExecuteAsync(System.Func{System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.RescuePolicy.PolicyBase`1.ExecuteAsync(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Furion.RescuePolicy.RetryPolicy">
            <summary>
                重试策略
            </summary>
        </member>
        <member name="M:Furion.RescuePolicy.RetryPolicy.#ctor">
            <summary>
                <inheritdoc cref="T:Furion.RescuePolicy.RetryPolicy" />
            </summary>
        </member>
        <member name="M:Furion.RescuePolicy.RetryPolicy.#ctor(System.Int32)">
            <summary>
                <inheritdoc cref="T:Furion.RescuePolicy.RetryPolicy" />
            </summary>
            <param name="maxRetryCount">最大重试次数</param>
        </member>
        <member name="T:Furion.RescuePolicy.RetryPolicy`1">
            <summary>
                重试策略
            </summary>
            <typeparam name="TResult">操作返回值类型</typeparam>
        </member>
        <member name="F:Furion.RescuePolicy.RetryPolicy`1.WAIT_RETRY_MESSAGE">
            <summary>
                等待重试输出信息
            </summary>
        </member>
        <member name="F:Furion.RescuePolicy.RetryPolicy`1.RETRY_MESSAGE">
            <summary>
                重试输出信息
            </summary>
        </member>
        <member name="M:Furion.RescuePolicy.RetryPolicy`1.#ctor">
            <summary>
                <inheritdoc cref="T:Furion.RescuePolicy.RetryPolicy`1" />
            </summary>
        </member>
        <member name="M:Furion.RescuePolicy.RetryPolicy`1.#ctor(System.Int32)">
            <summary>
                <inheritdoc cref="T:Furion.RescuePolicy.RetryPolicy`1" />
            </summary>
            <param name="maxRetryCount">最大重试次数</param>
        </member>
        <member name="P:Furion.RescuePolicy.RetryPolicy`1.MaxRetryCount">
            <summary>
                最大重试次数
            </summary>
        </member>
        <member name="P:Furion.RescuePolicy.RetryPolicy`1.RetryIntervals">
            <summary>
                重试等待时间集合
            </summary>
        </member>
        <member name="P:Furion.RescuePolicy.RetryPolicy`1.HandleExceptions">
            <summary>
                捕获的异常集合
            </summary>
        </member>
        <member name="P:Furion.RescuePolicy.RetryPolicy`1.HandleInnerExceptions">
            <summary>
                捕获的内部异常集合
            </summary>
        </member>
        <member name="P:Furion.RescuePolicy.RetryPolicy`1.ResultConditions">
            <summary>
                操作结果条件集合
            </summary>
        </member>
        <member name="P:Furion.RescuePolicy.RetryPolicy`1.WaitRetryAction">
            <summary>
                等待重试时操作方法
            </summary>
        </member>
        <member name="P:Furion.RescuePolicy.RetryPolicy`1.RetryingAction">
            <summary>
                重试时操作方法
            </summary>
        </member>
        <member name="M:Furion.RescuePolicy.RetryPolicy`1.Handle``1">
            <summary>
                添加捕获异常类型
            </summary>
            <typeparam name="TException">
                <see cref="T:System.Exception" />
            </typeparam>
            <returns>
                <see cref="T:Furion.RescuePolicy.RetryPolicy`1" />
            </returns>
        </member>
        <member name="M:Furion.RescuePolicy.RetryPolicy`1.Handle``1(System.Func{``0,System.Boolean})">
            <summary>
                添加捕获异常类型
            </summary>
            <typeparam name="TException">
                <see cref="T:System.Exception" />
            </typeparam>
            <param name="exceptionCondition">异常条件</param>
            <returns>
                <see cref="T:Furion.RescuePolicy.RetryPolicy`1" />
            </returns>
        </member>
        <member name="M:Furion.RescuePolicy.RetryPolicy`1.Or``1">
            <summary>
                添加捕获异常类型
            </summary>
            <typeparam name="TException">
                <see cref="T:System.Exception" />
            </typeparam>
            <returns>
                <see cref="T:Furion.RescuePolicy.RetryPolicy`1" />
            </returns>
        </member>
        <member name="M:Furion.RescuePolicy.RetryPolicy`1.Or``1(System.Func{``0,System.Boolean})">
            <summary>
                添加捕获异常类型
            </summary>
            <typeparam name="TException">
                <see cref="T:System.Exception" />
            </typeparam>
            <param name="exceptionCondition">异常条件</param>
            <returns>
                <see cref="T:Furion.RescuePolicy.RetryPolicy`1" />
            </returns>
        </member>
        <member name="M:Furion.RescuePolicy.RetryPolicy`1.HandleInner``1">
            <summary>
                添加捕获内部异常类型
            </summary>
            <typeparam name="TException">
                <see cref="T:System.Exception" />
            </typeparam>
            <returns>
                <see cref="T:Furion.RescuePolicy.RetryPolicy`1" />
            </returns>
        </member>
        <member name="M:Furion.RescuePolicy.RetryPolicy`1.HandleInner``1(System.Func{``0,System.Boolean})">
            <summary>
                添加捕获内部异常类型
            </summary>
            <typeparam name="TException">
                <see cref="T:System.Exception" />
            </typeparam>
            <param name="exceptionCondition">异常条件</param>
            <returns>
                <see cref="T:Furion.RescuePolicy.RetryPolicy`1" />
            </returns>
        </member>
        <member name="M:Furion.RescuePolicy.RetryPolicy`1.OrInner``1">
            <summary>
                添加捕获内部异常类型
            </summary>
            <typeparam name="TException">
                <see cref="T:System.Exception" />
            </typeparam>
            <returns>
                <see cref="T:Furion.RescuePolicy.RetryPolicy`1" />
            </returns>
        </member>
        <member name="M:Furion.RescuePolicy.RetryPolicy`1.OrInner``1(System.Func{``0,System.Boolean})">
            <summary>
                添加捕获内部异常类型
            </summary>
            <typeparam name="TException">
                <see cref="T:System.Exception" />
            </typeparam>
            <param name="exceptionCondition">异常条件</param>
            <returns>
                <see cref="T:Furion.RescuePolicy.RetryPolicy`1" />
            </returns>
        </member>
        <member name="M:Furion.RescuePolicy.RetryPolicy`1.HandleResult(System.Func{Furion.RescuePolicy.RetryPolicyContext{`0},System.Boolean})">
            <summary>
                添加操作结果条件
            </summary>
            <param name="resultCondition">操作结果条件</param>
            <returns>
                <see cref="T:Furion.RescuePolicy.RetryPolicy`1" />
            </returns>
        </member>
        <member name="M:Furion.RescuePolicy.RetryPolicy`1.OrResult(System.Func{Furion.RescuePolicy.RetryPolicyContext{`0},System.Boolean})">
            <summary>
                添加操作结果条件
            </summary>
            <param name="resultCondition">操作结果条件</param>
            <returns>
                <see cref="T:Furion.RescuePolicy.RetryPolicy`1" />
            </returns>
        </member>
        <member name="M:Furion.RescuePolicy.RetryPolicy`1.WaitAndRetry(System.TimeSpan[])">
            <summary>
                添加重试等待时间
            </summary>
            <param name="retryIntervals">重试等待时间</param>
            <returns>
                <see cref="T:Furion.RescuePolicy.RetryPolicy`1" />
            </returns>
        </member>
        <member name="M:Furion.RescuePolicy.RetryPolicy`1.Forever">
            <summary>
                永久重试
            </summary>
            <returns>
                <see cref="T:Furion.RescuePolicy.RetryPolicy`1" />
            </returns>
        </member>
        <member name="M:Furion.RescuePolicy.RetryPolicy`1.WaitAndRetryForever(System.TimeSpan[])">
            <summary>
                永久重试并添加重试等待时间
            </summary>
            <param name="retryIntervals">重试等待时间</param>
            <returns>
                <see cref="T:Furion.RescuePolicy.RetryPolicy`1" />
            </returns>
        </member>
        <member name="M:Furion.RescuePolicy.RetryPolicy`1.OnWaitRetry(System.Action{Furion.RescuePolicy.RetryPolicyContext{`0},System.TimeSpan})">
            <summary>
                添加等待重试时操作方法
            </summary>
            <param name="waitRetryAction">等待重试时操作方法</param>
            <returns>
                <see cref="T:Furion.RescuePolicy.RetryPolicy`1" />
            </returns>
        </member>
        <member name="M:Furion.RescuePolicy.RetryPolicy`1.OnRetrying(System.Action{Furion.RescuePolicy.RetryPolicyContext{`0}})">
            <summary>
                添加重试时操作方法
            </summary>
            <param name="retryingAction">重试时操作方法</param>
            <returns>
                <see cref="T:Furion.RescuePolicy.RetryPolicy`1" />
            </returns>
        </member>
        <member name="M:Furion.RescuePolicy.RetryPolicy`1.ShouldHandle(Furion.RescuePolicy.RetryPolicyContext{`0})">
            <summary>
                检查是否满足捕获异常的条件
            </summary>
            <param name="context">
                <see cref="T:Furion.RescuePolicy.RetryPolicyContext`1" />
            </param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:Furion.RescuePolicy.RetryPolicy`1.ExecuteAsync(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.RescuePolicy.RetryPolicy`1.CanHandleException(Furion.RescuePolicy.RetryPolicyContext{`0},System.Collections.Generic.HashSet{System.Type},System.Exception)">
            <summary>
                检查是否满足捕获异常的条件
            </summary>
            <param name="context">
                <see cref="T:Furion.RescuePolicy.RetryPolicyContext`1" />
            </param>
            <param name="exceptionTypes">捕获异常类型集合</param>
            <param name="exception">
                <see cref="T:System.Exception" />
            </param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:Furion.RescuePolicy.RetryPolicy`1.ReturnOrThrowIfException(Furion.RescuePolicy.RetryPolicyContext{`0})">
            <summary>
                返回结果或抛出异常
            </summary>
            <param name="context">
                <see cref="T:Furion.RescuePolicy.RetryPolicyContext`1" />
            </param>
            <returns>
                <typeparamref name="TResult" />
            </returns>
        </member>
        <member name="T:Furion.RescuePolicy.TimeoutPolicy">
            <summary>
                超时策略
            </summary>
            <remarks>
                <para>若需要测试同步阻塞，建议使用 <c>Task.Delay(...).Wait()</c> 替代 <c>Thread.Sleep(...)</c></para>
            </remarks>
        </member>
        <member name="M:Furion.RescuePolicy.TimeoutPolicy.#ctor">
            <summary>
                <inheritdoc cref="T:Furion.RescuePolicy.TimeoutPolicy" />
            </summary>
        </member>
        <member name="M:Furion.RescuePolicy.TimeoutPolicy.#ctor(System.Double)">
            <summary>
                <inheritdoc cref="T:Furion.RescuePolicy.TimeoutPolicy" />
            </summary>
            <param name="timeout">超时时间（毫秒）</param>
        </member>
        <member name="M:Furion.RescuePolicy.TimeoutPolicy.#ctor(System.TimeSpan)">
            <summary>
                <inheritdoc cref="T:Furion.RescuePolicy.TimeoutPolicy" />
            </summary>
            <param name="timeout">超时时间</param>
        </member>
        <member name="T:Furion.RescuePolicy.TimeoutPolicy`1">
            <summary>
                超时策略
            </summary>
            <remarks>
                <para>若需要测试同步阻塞，建议使用 <c>Task.Delay(...).Wait()</c> 替代 <c>Thread.Sleep(...)</c></para>
            </remarks>
            <typeparam name="TResult">操作返回值类型</typeparam>
        </member>
        <member name="F:Furion.RescuePolicy.TimeoutPolicy`1.TIMEOUT_MESSAGE">
            <summary>
                超时输出信息
            </summary>
        </member>
        <member name="M:Furion.RescuePolicy.TimeoutPolicy`1.#ctor">
            <summary>
                <inheritdoc cref="T:Furion.RescuePolicy.TimeoutPolicy`1" />
            </summary>
        </member>
        <member name="M:Furion.RescuePolicy.TimeoutPolicy`1.#ctor(System.Double)">
            <summary>
                <inheritdoc cref="T:Furion.RescuePolicy.TimeoutPolicy`1" />
            </summary>
            <param name="timeout">超时时间（毫秒）</param>
        </member>
        <member name="M:Furion.RescuePolicy.TimeoutPolicy`1.#ctor(System.TimeSpan)">
            <summary>
                <inheritdoc cref="T:Furion.RescuePolicy.TimeoutPolicy`1" />
            </summary>
            <param name="timeout">超时时间</param>
        </member>
        <member name="P:Furion.RescuePolicy.TimeoutPolicy`1.Timeout">
            <summary>
                超时时间
            </summary>
        </member>
        <member name="P:Furion.RescuePolicy.TimeoutPolicy`1.TimeoutAction">
            <summary>
                超时时操作方法
            </summary>
        </member>
        <member name="M:Furion.RescuePolicy.TimeoutPolicy`1.OnTimeout(System.Action{Furion.RescuePolicy.TimeoutPolicyContext{`0}})">
            <summary>
                添加超时时操作方法
            </summary>
            <param name="timeoutAction">超时时操作方法</param>
            <returns>
                <see cref="T:Furion.RescuePolicy.RetryPolicy`1" />
            </returns>
        </member>
        <member name="M:Furion.RescuePolicy.TimeoutPolicy`1.Execute(System.Func{`0},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.RescuePolicy.TimeoutPolicy`1.Execute(System.Func{System.Threading.CancellationToken,`0},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.RescuePolicy.TimeoutPolicy`1.ExecuteAsync(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Furion.RescuePolicy.TimeoutPolicy`1.ThrowTimeoutException">
            <summary>
                抛出超时异常
            </summary>
            <exception cref="T:System.TimeoutException"></exception>
        </member>
        <member name="T:Furion.RescuePolicy.Policy">
            <summary>
                异常策略静态类
            </summary>
        </member>
        <member name="M:Furion.RescuePolicy.Policy.For``1">
            <summary>
                添加自定义策略
            </summary>
            <typeparam name="TPolicy">
                <see cref="T:Furion.RescuePolicy.PolicyBase`1" />
            </typeparam>
            <returns>
                <typeparamref name="TPolicy" />
            </returns>
        </member>
        <member name="M:Furion.RescuePolicy.Policy.For``1(``0)">
            <summary>
                添加自定义策略
            </summary>
            <typeparam name="TPolicy">
                <see cref="T:Furion.RescuePolicy.PolicyBase`1" />
            </typeparam>
            <param name="policy">
                <typeparamref name="TPolicy" />
            </param>
            <returns>
                <typeparamref name="TPolicy" />
            </returns>
        </member>
        <member name="M:Furion.RescuePolicy.Policy.Retry">
            <summary>
                初始化重试策略（默认 3 次）
            </summary>
            <returns>
                <see cref="T:Furion.RescuePolicy.RetryPolicy" />
            </returns>
        </member>
        <member name="M:Furion.RescuePolicy.Policy.Retry(System.Int32)">
            <summary>
                初始化重试策略
            </summary>
            <param name="maxRetryCount">最大重试次数</param>
            <returns>
                <see cref="T:Furion.RescuePolicy.RetryPolicy" />
            </returns>
        </member>
        <member name="M:Furion.RescuePolicy.Policy.Timeout">
            <summary>
                初始化超时策略（默认 10 秒）
            </summary>
            <remarks>
                <para>若需要测试同步阻塞，建议使用 <c>Task.Delay(...).Wait()</c> 替代 <c>Thread.Sleep(...)</c></para>
            </remarks>
            <returns>
                <see cref="T:Furion.RescuePolicy.TimeoutPolicy" />
            </returns>
        </member>
        <member name="M:Furion.RescuePolicy.Policy.Timeout(System.Double)">
            <summary>
                初始化超时策略
            </summary>
            <remarks>
                <para>若需要测试同步阻塞，建议使用 <c>Task.Delay(...).Wait()</c> 替代 <c>Thread.Sleep(...)</c></para>
            </remarks>
            <param name="timeout">超时时间（毫秒）</param>
            <returns>
                <see cref="T:Furion.RescuePolicy.TimeoutPolicy" />
            </returns>
        </member>
        <member name="M:Furion.RescuePolicy.Policy.Timeout(System.TimeSpan)">
            <summary>
                初始化超时策略
            </summary>
            <remarks>
                <para>若需要测试同步阻塞，建议使用 <c>Task.Delay(...).Wait()</c> 替代 <c>Thread.Sleep(...)</c></para>
            </remarks>
            <param name="timeout">超时时间</param>
            <returns>
                <see cref="T:Furion.RescuePolicy.TimeoutPolicy" />
            </returns>
        </member>
        <member name="M:Furion.RescuePolicy.Policy.Fallback">
            <summary>
                初始化后备策略
            </summary>
            <returns>
                <see cref="T:Furion.RescuePolicy.FallbackPolicy" />
            </returns>
        </member>
        <member name="M:Furion.RescuePolicy.Policy.Fallback(System.Func{Furion.RescuePolicy.FallbackPolicyContext{System.Object},System.Object})">
            <summary>
                初始化后备策略
            </summary>
            <param name="fallbackAction">后备操作方法</param>
            <returns>
                <see cref="T:Furion.RescuePolicy.FallbackPolicy" />
            </returns>
        </member>
        <member name="M:Furion.RescuePolicy.Policy.Fallback(System.Action{Furion.RescuePolicy.FallbackPolicyContext{System.Object}})">
            <summary>
                初始化后备策略
            </summary>
            <param name="fallbackAction">后备操作方法</param>
            <returns>
                <see cref="T:Furion.RescuePolicy.FallbackPolicy" />
            </returns>
        </member>
        <member name="M:Furion.RescuePolicy.Policy.Composite">
            <summary>
                初始化组合策略
            </summary>
            <returns>
                <see cref="T:Furion.RescuePolicy.CompositePolicy" />
            </returns>
        </member>
        <member name="M:Furion.RescuePolicy.Policy.Composite(Furion.RescuePolicy.PolicyBase{System.Object}[])">
            <summary>
                初始化组合策略
            </summary>
            <param name="policies">策略集合</param>
            <returns>
                <see cref="T:Furion.RescuePolicy.CompositePolicy" />
            </returns>
        </member>
        <member name="M:Furion.RescuePolicy.Policy.Composite(System.Collections.Generic.IEnumerable{Furion.RescuePolicy.PolicyBase{System.Object}})">
            <summary>
                初始化组合策略
            </summary>
            <param name="policies">策略集合</param>
            <returns>
                <see cref="T:Furion.RescuePolicy.CompositePolicy" />
            </returns>
        </member>
        <member name="M:Furion.RescuePolicy.Policy.Lock">
            <summary>
                并发锁策略
            </summary>
            <returns>
                <see cref="T:Furion.RescuePolicy.LockPolicy" />
            </returns>
        </member>
        <member name="T:Furion.RescuePolicy.Policy`1">
            <summary>
                异常策略静态类
            </summary>
            <typeparam name="TResult">操作返回值类型</typeparam>
        </member>
        <member name="M:Furion.RescuePolicy.Policy`1.For``1">
            <summary>
                添加自定义策略
            </summary>
            <typeparam name="TPolicy">
                <see cref="T:Furion.RescuePolicy.PolicyBase`1" />
            </typeparam>
            <returns>
                <typeparamref name="TPolicy" />
            </returns>
        </member>
        <member name="M:Furion.RescuePolicy.Policy`1.For``1(``0)">
            <summary>
                添加自定义策略
            </summary>
            <typeparam name="TPolicy">
                <see cref="T:Furion.RescuePolicy.PolicyBase`1" />
            </typeparam>
            <param name="policy">
                <typeparamref name="TPolicy" />
            </param>
            <returns>
                <typeparamref name="TPolicy" />
            </returns>
        </member>
        <member name="M:Furion.RescuePolicy.Policy`1.Retry">
            <summary>
                初始化重试策略（默认 3 次）
            </summary>
            <returns>
                <see cref="T:Furion.RescuePolicy.RetryPolicy`1" />
            </returns>
        </member>
        <member name="M:Furion.RescuePolicy.Policy`1.Retry(System.Int32)">
            <summary>
                初始化重试策略
            </summary>
            <param name="maxRetryCount">最大重试次数</param>
            <returns>
                <see cref="T:Furion.RescuePolicy.RetryPolicy`1" />
            </returns>
        </member>
        <member name="M:Furion.RescuePolicy.Policy`1.Timeout">
            <summary>
                初始化超时策略（默认 10 秒）
            </summary>
            <remarks>
                <para>若需要测试同步阻塞，建议使用 <c>Task.Delay(...).Wait()</c> 替代 <c>Thread.Sleep(...)</c></para>
            </remarks>
            <returns>
                <see cref="T:Furion.RescuePolicy.TimeoutPolicy`1" />
            </returns>
        </member>
        <member name="M:Furion.RescuePolicy.Policy`1.Timeout(System.Double)">
            <summary>
                初始化超时策略
            </summary>
            <remarks>
                <para>若需要测试同步阻塞，建议使用 <c>Task.Delay(...).Wait()</c> 替代 <c>Thread.Sleep(...)</c></para>
            </remarks>
            <param name="timeout">超时时间（毫秒）</param>
            <returns>
                <see cref="T:Furion.RescuePolicy.TimeoutPolicy`1" />
            </returns>
        </member>
        <member name="M:Furion.RescuePolicy.Policy`1.Timeout(System.TimeSpan)">
            <summary>
                初始化超时策略
            </summary>
            <remarks>
                <para>若需要测试同步阻塞，建议使用 <c>Task.Delay(...).Wait()</c> 替代 <c>Thread.Sleep(...)</c></para>
            </remarks>
            <param name="timeout">超时时间</param>
            <returns>
                <see cref="T:Furion.RescuePolicy.TimeoutPolicy`1" />
            </returns>
        </member>
        <member name="M:Furion.RescuePolicy.Policy`1.Fallback">
            <summary>
                初始化后备策略
            </summary>
            <returns>
                <see cref="T:Furion.RescuePolicy.FallbackPolicy`1" />
            </returns>
        </member>
        <member name="M:Furion.RescuePolicy.Policy`1.Fallback(System.Func{Furion.RescuePolicy.FallbackPolicyContext{`0},`0})">
            <summary>
                初始化后备策略
            </summary>
            <param name="fallbackAction">后备操作方法</param>
            <returns>
                <see cref="T:Furion.RescuePolicy.FallbackPolicy`1" />
            </returns>
        </member>
        <member name="M:Furion.RescuePolicy.Policy`1.Fallback(System.Action{Furion.RescuePolicy.FallbackPolicyContext{`0}})">
            <summary>
                初始化后备策略
            </summary>
            <param name="fallbackAction">后备操作方法</param>
            <returns>
                <see cref="T:Furion.RescuePolicy.FallbackPolicy`1" />
            </returns>
        </member>
        <member name="M:Furion.RescuePolicy.Policy`1.Composite">
            <summary>
                初始化组合策略
            </summary>
            <returns>
                <see cref="T:Furion.RescuePolicy.CompositePolicy`1" />
            </returns>
        </member>
        <member name="M:Furion.RescuePolicy.Policy`1.Composite(Furion.RescuePolicy.PolicyBase{`0}[])">
            <summary>
                初始化组合策略
            </summary>
            <param name="policies">策略集合</param>
            <returns>
                <see cref="T:Furion.RescuePolicy.CompositePolicy`1" />
            </returns>
        </member>
        <member name="M:Furion.RescuePolicy.Policy`1.Composite(System.Collections.Generic.IEnumerable{Furion.RescuePolicy.PolicyBase{`0}})">
            <summary>
                初始化组合策略
            </summary>
            <param name="policies">策略集合</param>
            <returns>
                <see cref="T:Furion.RescuePolicy.CompositePolicy`1" />
            </returns>
        </member>
        <member name="M:Furion.RescuePolicy.Policy`1.Lock">
            <summary>
                初始化并发锁策略
            </summary>
            <returns>
                <see cref="T:Furion.RescuePolicy.LockPolicy`1" />
            </returns>
        </member>
        <member name="T:Furion.ViewEngine.IViewEngineOptionsBuilder">
            <summary>
            视图引擎选项构建器
            </summary>
        </member>
        <member name="P:Furion.ViewEngine.IViewEngineOptionsBuilder.Options">
            <summary>
            视图编译选项
            </summary>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngineOptionsBuilder.AddAssemblyReferenceByName(System.String)">
            <summary>
            添加程序集引用
            </summary>
            <param name="assemblyName"></param>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngineOptionsBuilder.AddAssemblyReference(System.Reflection.Assembly)">
            <summary>
            添加程序集引用
            </summary>
            <param name="assembly"></param>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngineOptionsBuilder.AddAssemblyReference(System.Type)">
            <summary>
            添加程序集引用
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngineOptionsBuilder.AddMetadataReference(Microsoft.CodeAnalysis.MetadataReference)">
            <summary>
            添加元数据引用
            </summary>
            <param name="reference"></param>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngineOptionsBuilder.AddUsing(System.String)">
            <summary>
            添加 Using
            </summary>
            <param name="namespaceName"></param>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngineOptionsBuilder.Inherits(System.Type)">
            <summary>
            添加继承类型
            </summary>
            <param name="type"></param>
        </member>
        <member name="T:Furion.ViewEngine.ViewEngineOptionsBuilder">
            <summary>
            视图编译构建器
            </summary>
        </member>
        <member name="P:Furion.ViewEngine.ViewEngineOptionsBuilder.Options">
            <summary>
            视图编译选项
            </summary>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineOptionsBuilder.#ctor(Furion.ViewEngine.ViewEngineOptions)">
            <summary>
            构造函数
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineOptionsBuilder.AddAssemblyReferenceByName(System.String)">
            <summary>
            添加程序集引用
            </summary>
            <param name="assemblyName"></param>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineOptionsBuilder.AddAssemblyReference(System.Reflection.Assembly)">
            <summary>
            添加程序集引用
            </summary>
            <param name="assembly"></param>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineOptionsBuilder.AddAssemblyReference(System.Type)">
            <summary>
            添加程序集引用
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineOptionsBuilder.AddMetadataReference(Microsoft.CodeAnalysis.MetadataReference)">
            <summary>
            添加元数据引用
            </summary>
            <param name="reference"></param>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineOptionsBuilder.AddUsing(System.String)">
            <summary>
            添加 Using
            </summary>
            <param name="namespaceName"></param>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineOptionsBuilder.Inherits(System.Type)">
            <summary>
            添加继承类型
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineOptionsBuilder.RenderTypeName(System.Type)">
            <summary>
            渲染类型名
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.ViewEngine.IViewEngine">
            <summary>
            视图引擎接口
            </summary>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngine.RunCompile(System.String,System.Object,System.Action{Furion.ViewEngine.IViewEngineOptionsBuilder})">
            <summary>
            编译并运行
            </summary>
            <param name="content"></param>
            <param name="model"></param>
            <param name="builderAction"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngine.RunCompileAsync(System.String,System.Object,System.Action{Furion.ViewEngine.IViewEngineOptionsBuilder})">
            <summary>
            编译并运行
            </summary>
            <param name="content"></param>
            <param name="model"></param>
            <param name="builderAction"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngine.RunCompile``1(System.String,``0,System.Action{Furion.ViewEngine.IViewEngineOptionsBuilder})">
            <summary>
            编译并运行
            </summary>
            <typeparam name="T"></typeparam>
            <param name="content"></param>
            <param name="model"></param>
            <param name="builderAction"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngine.RunCompileAsync``1(System.String,``0,System.Action{Furion.ViewEngine.IViewEngineOptionsBuilder})">
            <summary>
            编译并运行
            </summary>
            <typeparam name="T"></typeparam>
            <param name="content"></param>
            <param name="model"></param>
            <param name="builderAction"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngine.RunCompileFromCached(System.String,System.Object,System.String,System.Action{Furion.ViewEngine.IViewEngineOptionsBuilder})">
            <summary>
            通过缓存解析模板
            </summary>
            <param name="content"></param>
            <param name="model"></param>
            <param name="cacheFileName"></param>
            <param name="builderAction"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngine.RunCompileFromCachedAsync(System.String,System.Object,System.String,System.Action{Furion.ViewEngine.IViewEngineOptionsBuilder})">
            <summary>
            通过缓存解析模板
            </summary>
            <param name="content"></param>
            <param name="model"></param>
            <param name="cacheFileName"></param>
            <param name="builderAction"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngine.RunCompileFromCached``1(System.String,``0,System.String,System.Action{Furion.ViewEngine.IViewEngineOptionsBuilder})">
            <summary>
            通过缓存解析模板
            </summary>
            <typeparam name="T"></typeparam>
            <param name="content"></param>
            <param name="model"></param>
            <param name="cacheFileName"></param>
            <param name="builderAction"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngine.RunCompileFromCachedAsync``1(System.String,``0,System.String,System.Action{Furion.ViewEngine.IViewEngineOptionsBuilder})">
            <summary>
            通过缓存解析模板
            </summary>
            <param name="content"></param>
            <param name="model"></param>
            <param name="cacheFileName"></param>
            <param name="builderAction"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngine.Compile(System.String,System.Action{Furion.ViewEngine.IViewEngineOptionsBuilder})">
            <summary>
            编译模板
            </summary>
            <param name="content"></param>
            <param name="builderAction"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngine.CompileAsync(System.String,System.Action{Furion.ViewEngine.IViewEngineOptionsBuilder})">
            <summary>
            编译模板
            </summary>
            <param name="content"></param>
            <param name="builderAction"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngine.Compile``1(System.String,System.Action{Furion.ViewEngine.IViewEngineOptionsBuilder})">
            <summary>
            编译模板
            </summary>
            <typeparam name="T"></typeparam>
            <param name="content"></param>
            <param name="builderAction"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngine.CompileAsync``1(System.String,System.Action{Furion.ViewEngine.IViewEngineOptionsBuilder})">
            <summary>
            编译模板
            </summary>
            <typeparam name="T"></typeparam>
            <param name="content"></param>
            <param name="builderAction"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.ViewEngine.ViewEngine">
            <summary>
            视图引擎实现类
            </summary>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngine.RunCompile(System.String,System.Object,System.Action{Furion.ViewEngine.IViewEngineOptionsBuilder})">
            <summary>
            编译并运行
            </summary>
            <param name="content"></param>
            <param name="model"></param>
            <param name="builderAction"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngine.RunCompileAsync(System.String,System.Object,System.Action{Furion.ViewEngine.IViewEngineOptionsBuilder})">
            <summary>
            编译并运行
            </summary>
            <param name="content"></param>
            <param name="model"></param>
            <param name="builderAction"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngine.RunCompile``1(System.String,``0,System.Action{Furion.ViewEngine.IViewEngineOptionsBuilder})">
            <summary>
            编译并运行
            </summary>
            <typeparam name="T"></typeparam>
            <param name="content"></param>
            <param name="model"></param>
            <param name="builderAction"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngine.RunCompileAsync``1(System.String,``0,System.Action{Furion.ViewEngine.IViewEngineOptionsBuilder})">
            <summary>
            编译并运行
            </summary>
            <typeparam name="T"></typeparam>
            <param name="content"></param>
            <param name="model"></param>
            <param name="builderAction"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngine.RunCompileFromCached(System.String,System.Object,System.String,System.Action{Furion.ViewEngine.IViewEngineOptionsBuilder})">
            <summary>
            通过缓存解析模板
            </summary>
            <param name="content"></param>
            <param name="model"></param>
            <param name="cacheFileName"></param>
            <param name="builderAction"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngine.RunCompileFromCachedAsync(System.String,System.Object,System.String,System.Action{Furion.ViewEngine.IViewEngineOptionsBuilder})">
            <summary>
            通过缓存解析模板
            </summary>
            <param name="content"></param>
            <param name="model"></param>
            <param name="cacheFileName"></param>
            <param name="builderAction"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngine.RunCompileFromCached``1(System.String,``0,System.String,System.Action{Furion.ViewEngine.IViewEngineOptionsBuilder})">
            <summary>
            通过缓存解析模板
            </summary>
            <typeparam name="T"></typeparam>
            <param name="content"></param>
            <param name="model"></param>
            <param name="cacheFileName"></param>
            <param name="builderAction"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngine.RunCompileFromCachedAsync``1(System.String,``0,System.String,System.Action{Furion.ViewEngine.IViewEngineOptionsBuilder})">
            <summary>
            通过缓存解析模板
            </summary>
            <param name="content"></param>
            <param name="model"></param>
            <param name="cacheFileName"></param>
            <param name="builderAction"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngine.Compile(System.String,System.Action{Furion.ViewEngine.IViewEngineOptionsBuilder})">
            <summary>
            编译模板
            </summary>
            <param name="content"></param>
            <param name="builderAction"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngine.CompileAsync(System.String,System.Action{Furion.ViewEngine.IViewEngineOptionsBuilder})">
            <summary>
            编译模板
            </summary>
            <param name="content"></param>
            <param name="builderAction"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngine.Compile``1(System.String,System.Action{Furion.ViewEngine.IViewEngineOptionsBuilder})">
            <summary>
            编译模板
            </summary>
            <typeparam name="T"></typeparam>
            <param name="content"></param>
            <param name="builderAction"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngine.CompileAsync``1(System.String,System.Action{Furion.ViewEngine.IViewEngineOptionsBuilder})">
            <summary>
            编译模板
            </summary>
            <typeparam name="T"></typeparam>
            <param name="content"></param>
            <param name="builderAction"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngine.CreateAndCompileToStream(System.String,Furion.ViewEngine.ViewEngineOptions)">
            <summary>
            将模板内容编译并输出内存流
            </summary>
            <param name="templateSource"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngine.WriteDirectives(System.String,Furion.ViewEngine.ViewEngineOptions)">
            <summary>
            写入Razor 命令
            </summary>
            <param name="content"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.ViewEngine.ViewEngineException">
            <summary>
            视图引擎异常类
            </summary>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineException.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineException.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineException.#ctor(System.String,System.Exception)">
            <summary>
            构造函数
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:Furion.ViewEngine.ViewEngineTemplateException">
            <summary>
            视图引擎模板编译异常类
            </summary>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineTemplateException.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineTemplateException.#ctor(System.Exception)">
            <summary>
            构造函数
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="P:Furion.ViewEngine.ViewEngineTemplateException.Errors">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="P:Furion.ViewEngine.ViewEngineTemplateException.GeneratedCode">
            <summary>
            生成的代码
            </summary>
        </member>
        <member name="P:Furion.ViewEngine.ViewEngineTemplateException.Message">
            <summary>
            重写异常消息
            </summary>
        </member>
        <member name="T:Furion.ViewEngine.Extensions.ViewEngineStringExtensions">
            <summary>
            字符串视图引擎拓展
            </summary>
        </member>
        <member name="M:Furion.ViewEngine.Extensions.ViewEngineStringExtensions.SetTemplateModel``1(System.String,``0)">
            <summary>
            设置模板数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="template"></param>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.Extensions.ViewEngineStringExtensions.SetTemplateModel(System.String,System.Object)">
            <summary>
            设置模板数据
            </summary>
            <param name="template"></param>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.Extensions.ViewEngineStringExtensions.SetTemplateOptionsBuilder(System.String,System.Action{Furion.ViewEngine.IViewEngineOptionsBuilder})">
            <summary>
            设置模板构建选项
            </summary>
            <param name="template"></param>
            <param name="optionsBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.Extensions.ViewEngineStringExtensions.SetTemplateCachedFileName(System.String,System.String)">
            <summary>
            设置模板缓存文件名（不含拓展名）
            </summary>
            <param name="template"></param>
            <param name="cachedFileName"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.Extensions.ViewEngineStringExtensions.SetViewEngineScoped(System.String,System.IServiceProvider)">
            <summary>
            视图模板服务作用域
            </summary>
            <param name="template"></param>
            <param name="serviceProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.Extensions.ViewEngineStringExtensions.RunCompile(System.String,System.Object,System.Action{Furion.ViewEngine.IViewEngineOptionsBuilder})">
            <summary>
            编译并运行
            </summary>
            <param name="template"></param>
            <param name="model"></param>
            <param name="builderAction"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.Extensions.ViewEngineStringExtensions.RunCompileAsync(System.String,System.Object,System.Action{Furion.ViewEngine.IViewEngineOptionsBuilder})">
            <summary>
            编译并运行
            </summary>
            <param name="template"></param>
            <param name="model"></param>
            <param name="builderAction"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.Extensions.ViewEngineStringExtensions.RunCompile``1(System.String,``0,System.Action{Furion.ViewEngine.IViewEngineOptionsBuilder})">
            <summary>
            编译并运行
            </summary>
            <typeparam name="T"></typeparam>
            <param name="template"></param>
            <param name="model"></param>
            <param name="builderAction"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.Extensions.ViewEngineStringExtensions.RunCompileAsync``1(System.String,``0,System.Action{Furion.ViewEngine.IViewEngineOptionsBuilder})">
            <summary>
            编译并运行
            </summary>
            <typeparam name="T"></typeparam>
            <param name="template"></param>
            <param name="model"></param>
            <param name="builderAction"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.Extensions.ViewEngineStringExtensions.RunCompileFromCached(System.String,System.Object,System.String,System.Action{Furion.ViewEngine.IViewEngineOptionsBuilder})">
            <summary>
            通过缓存解析模板
            </summary>
            <param name="template"></param>
            <param name="model"></param>
            <param name="cachedFileName"></param>
            <param name="builderAction"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.Extensions.ViewEngineStringExtensions.RunCompileFromCachedAsync(System.String,System.Object,System.String,System.Action{Furion.ViewEngine.IViewEngineOptionsBuilder})">
            <summary>
            通过缓存解析模板
            </summary>
            <param name="template"></param>
            <param name="model"></param>
            <param name="cachedFileName"></param>
            <param name="builderAction"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.Extensions.ViewEngineStringExtensions.RunCompileFromCached``1(System.String,``0,System.String,System.Action{Furion.ViewEngine.IViewEngineOptionsBuilder})">
            <summary>
            通过缓存解析模板
            </summary>
            <typeparam name="T"></typeparam>
            <param name="template"></param>
            <param name="model"></param>
            <param name="cachedFileName"></param>
            <param name="builderAction"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.Extensions.ViewEngineStringExtensions.RunCompileFromCachedAsync``1(System.String,``0,System.String,System.Action{Furion.ViewEngine.IViewEngineOptionsBuilder})">
            <summary>
            通过缓存解析模板
            </summary>
            <param name="template"></param>
            <param name="model"></param>
            <param name="cachedFileName"></param>
            <param name="builderAction"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.ViewEngine.AnonymousTypeWrapper">
            <summary>
            匿名类型包装器
            </summary>
        </member>
        <member name="F:Furion.ViewEngine.AnonymousTypeWrapper.model">
            <summary>
            匿名模型
            </summary>
        </member>
        <member name="M:Furion.ViewEngine.AnonymousTypeWrapper.#ctor(System.Object)">
            <summary>
            构造函数
            </summary>
            <param name="model"></param>
        </member>
        <member name="M:Furion.ViewEngine.AnonymousTypeWrapper.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            获取成员信息
            </summary>
            <param name="binder"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.ViewEngine.Penetrates">
            <summary>
            常量、公共方法配置类
            </summary>
        </member>
        <member name="M:Furion.ViewEngine.Penetrates.GetTemplateFileName(System.String)">
            <summary>
            获取模板文件名
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.ViewEngine.ViewEnginePart">
            <summary>
            字符串模板执行部件
            </summary>
            <summary>
            字符串模板执行部件
            </summary>
            <summary>
            字符串模板执行部件
            </summary>
        </member>
        <member name="M:Furion.ViewEngine.ViewEnginePart.Default">
            <summary>
            静态缺省 视图 部件
            </summary>
        </member>
        <member name="P:Furion.ViewEngine.ViewEnginePart.Template">
            <summary>
            字符串模板
            </summary>
        </member>
        <member name="P:Furion.ViewEngine.ViewEnginePart.TemplateOptionsBuilder">
            <summary>
            视图配置选项
            </summary>
        </member>
        <member name="P:Furion.ViewEngine.ViewEnginePart.TemplateModel">
            <summary>
            模型数据
            </summary>
        </member>
        <member name="P:Furion.ViewEngine.ViewEnginePart.TemplateCachedFileName">
            <summary>
            模板缓存名称（不含拓展名）
            </summary>
        </member>
        <member name="P:Furion.ViewEngine.ViewEnginePart.ViewEngineScoped">
            <summary>
            视图模板服务作用域
            </summary>
        </member>
        <member name="M:Furion.ViewEngine.ViewEnginePart.RunCompile">
            <summary>
            编译并运行
            </summary>
        </member>
        <member name="M:Furion.ViewEngine.ViewEnginePart.RunCompileAsync">
            <summary>
            编译并运行
            </summary>
        </member>
        <member name="M:Furion.ViewEngine.ViewEnginePart.RunCompileFromCached">
            <summary>
            通过缓存解析模板
            </summary>
        </member>
        <member name="M:Furion.ViewEngine.ViewEnginePart.RunCompileFromCachedAsync">
            <summary>
            通过缓存解析模板
            </summary>
        </member>
        <member name="M:Furion.ViewEngine.ViewEnginePart.InvokeRunCompileMethod(System.String,System.Boolean)">
            <summary>
            执行模板方法
            </summary>
            <param name="methodName"></param>
            <param name="isCached"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEnginePart.GetViewEngine">
            <summary>
            获取视图引擎对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEnginePart.SetTemplate(System.String)">
            <summary>
            设置模板
            </summary>
            <param name="template"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEnginePart.SetTemplateModel``1(``0)">
            <summary>
            设置模板数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEnginePart.SetTemplateModel(System.Object)">
            <summary>
            设置模板数据
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEnginePart.SetTemplateOptionsBuilder(System.Action{Furion.ViewEngine.IViewEngineOptionsBuilder})">
            <summary>
            设置模板构建选项
            </summary>
            <param name="optionsBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEnginePart.SetTemplateCachedFileName(System.String)">
            <summary>
            设置模板缓存文件名（不含拓展名）
            </summary>
            <param name="cachedFileName"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEnginePart.SetViewEngineScoped(System.IServiceProvider)">
            <summary>
            视图模板服务作用域
            </summary>
            <param name="serviceProvider"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.ViewEngine.IViewEngineModel">
            <summary>
            视图引擎模板模型接口
            </summary>
        </member>
        <member name="P:Furion.ViewEngine.IViewEngineModel.Model">
            <summary>
            模型
            </summary>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngineModel.WriteLiteral(System.String)">
            <summary>
            写入字面量
            </summary>
            <param name="literal"></param>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngineModel.WriteLiteralAsync(System.String)">
            <summary>
            写入字面量
            </summary>
            <param name="literal"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngineModel.Write(System.Object)">
            <summary>
            写入对象
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngineModel.WriteAsync(System.Object)">
            <summary>
            写入对象
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngineModel.BeginWriteAttribute(System.String,System.String,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            开始写入特性
            </summary>
            <param name="name"></param>
            <param name="prefix"></param>
            <param name="prefixOffset"></param>
            <param name="suffix"></param>
            <param name="suffixOffset"></param>
            <param name="attributeValuesCount"></param>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngineModel.BeginWriteAttributeAsync(System.String,System.String,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            开始写入特性
            </summary>
            <param name="name"></param>
            <param name="prefix"></param>
            <param name="prefixOffset"></param>
            <param name="suffix"></param>
            <param name="suffixOffset"></param>
            <param name="attributeValuesCount"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngineModel.WriteAttributeValue(System.String,System.Int32,System.Object,System.Int32,System.Int32,System.Boolean)">
            <summary>
            写入特性值
            </summary>
            <param name="prefix"></param>
            <param name="prefixOffset"></param>
            <param name="value"></param>
            <param name="valueOffset"></param>
            <param name="valueLength"></param>
            <param name="isLiteral"></param>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngineModel.WriteAttributeValueAsync(System.String,System.Int32,System.Object,System.Int32,System.Int32,System.Boolean)">
            <summary>
            写入特性值
            </summary>
            <param name="prefix"></param>
            <param name="prefixOffset"></param>
            <param name="value"></param>
            <param name="valueOffset"></param>
            <param name="valueLength"></param>
            <param name="isLiteral"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngineModel.EndWriteAttribute">
            <summary>
            结束写入特性
            </summary>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngineModel.EndWriteAttributeAsync">
            <summary>
            结束写入特性
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngineModel.Execute">
            <summary>
            执行
            </summary>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngineModel.ExecuteAsync">
            <summary>
            执行
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngineModel.Result">
            <summary>
            获取结果
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngineModel.ResultAsync">
            <summary>
            获取结果
            </summary>
            <returns></returns>
        </member>
        <member name="T:Furion.ViewEngine.ViewEngineModel">
            <summary>
            视图引擎模板模型实现类
            </summary>
        </member>
        <member name="F:Furion.ViewEngine.ViewEngineModel.stringBuilder">
            <summary>
            字符串构建器
            </summary>
        </member>
        <member name="F:Furion.ViewEngine.ViewEngineModel.attributeSuffix">
            <summary>
            特性前缀
            </summary>
        </member>
        <member name="P:Furion.ViewEngine.ViewEngineModel.Model">
            <summary>
            模型
            </summary>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineModel.WriteLiteral(System.String)">
            <summary>
            写入字面量
            </summary>
            <param name="literal"></param>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineModel.WriteLiteralAsync(System.String)">
            <summary>
            写入字面量
            </summary>
            <param name="literal"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineModel.Write(System.Object)">
            <summary>
            写入对象
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineModel.WriteAsync(System.Object)">
            <summary>
            写入对象
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineModel.BeginWriteAttribute(System.String,System.String,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            写入特性
            </summary>
            <param name="name"></param>
            <param name="prefix"></param>
            <param name="prefixOffset"></param>
            <param name="suffix"></param>
            <param name="suffixOffset"></param>
            <param name="attributeValuesCount"></param>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineModel.BeginWriteAttributeAsync(System.String,System.String,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            写入特性
            </summary>
            <param name="name"></param>
            <param name="prefix"></param>
            <param name="prefixOffset"></param>
            <param name="suffix"></param>
            <param name="suffixOffset"></param>
            <param name="attributeValuesCount"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineModel.WriteAttributeValue(System.String,System.Int32,System.Object,System.Int32,System.Int32,System.Boolean)">
            <summary>
            写入特性值
            </summary>
            <param name="prefix"></param>
            <param name="prefixOffset"></param>
            <param name="value"></param>
            <param name="valueOffset"></param>
            <param name="valueLength"></param>
            <param name="isLiteral"></param>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineModel.WriteAttributeValueAsync(System.String,System.Int32,System.Object,System.Int32,System.Int32,System.Boolean)">
            <summary>
            写入特性值
            </summary>
            <param name="prefix"></param>
            <param name="prefixOffset"></param>
            <param name="value"></param>
            <param name="valueOffset"></param>
            <param name="valueLength"></param>
            <param name="isLiteral"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineModel.EndWriteAttribute">
            <summary>
            结束写入特性
            </summary>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineModel.EndWriteAttributeAsync">
            <summary>
            结束写入特性
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineModel.Execute">
            <summary>
            执行
            </summary>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineModel.ExecuteAsync">
            <summary>
            执行
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineModel.Result">
            <summary>
            获取结果
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineModel.ResultAsync">
            <summary>
            获取结果
            </summary>
            <returns></returns>
        </member>
        <member name="T:Furion.ViewEngine.ViewEngineModel`1">
            <summary>
            视图引擎模板模型实现类
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Furion.ViewEngine.ViewEngineModel`1.Model">
            <summary>
            强类型
            </summary>
        </member>
        <member name="T:Furion.ViewEngine.ViewEngineOptions">
            <summary>
            视图引擎编译选项
            </summary>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineOptions.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:Furion.ViewEngine.ViewEngineOptions.ReferencedAssemblies">
            <summary>
            引用程序集
            </summary>
        </member>
        <member name="P:Furion.ViewEngine.ViewEngineOptions.MetadataReferences">
            <summary>
            元数据引用
            </summary>
        </member>
        <member name="P:Furion.ViewEngine.ViewEngineOptions.TemplateNamespace">
            <summary>
            模板命名空间
            </summary>
        </member>
        <member name="P:Furion.ViewEngine.ViewEngineOptions.Inherits">
            <summary>
            继承
            </summary>
        </member>
        <member name="P:Furion.ViewEngine.ViewEngineOptions.DefaultUsings">
            <summary>
            默认 Using
            </summary>
        </member>
        <member name="T:Furion.ViewEngine.IViewEngineTemplate">
            <summary>
            视图引擎模板（编译后）
            </summary>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngineTemplate.SaveToStream(System.IO.Stream)">
            <summary>
            保存到流中
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngineTemplate.SaveToStreamAsync(System.IO.Stream)">
            <summary>
            保存到流中
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngineTemplate.SaveToFile(System.String)">
            <summary>
            保存到文件
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngineTemplate.SaveToFileAsync(System.String)">
            <summary>
            保存到文件
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngineTemplate.Run(System.Object)">
            <summary>
            执行编译
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngineTemplate.RunAsync(System.Object)">
            <summary>
            执行编译
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.ViewEngine.IViewEngineTemplate`1">
            <summary>
            泛型视图编译模板接口
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngineTemplate`1.SaveToStream(System.IO.Stream)">
            <summary>
            保存到流中
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngineTemplate`1.SaveToStreamAsync(System.IO.Stream)">
            <summary>
            保存到流中
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngineTemplate`1.SaveToFile(System.String)">
            <summary>
            保存到文件
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngineTemplate`1.SaveToFileAsync(System.String)">
            <summary>
            保存到文件
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngineTemplate`1.Run(System.Action{`0})">
            <summary>
            执行编译
            </summary>
            <param name="initializer"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngineTemplate`1.RunAsync(System.Action{`0})">
            <summary>
            执行编译
            </summary>
            <param name="initializer"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.ViewEngine.ViewEngineTemplate">
            <summary>
            视图引擎模板（编译后）
            </summary>
        </member>
        <member name="F:Furion.ViewEngine.ViewEngineTemplate.assemblyByteCode">
            <summary>
            内存流
            </summary>
        </member>
        <member name="F:Furion.ViewEngine.ViewEngineTemplate.templateType">
            <summary>
            模板类型
            </summary>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineTemplate.#ctor(System.IO.MemoryStream)">
            <summary>
            构造函数
            </summary>
            <param name="assemblyByteCode"></param>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineTemplate.SaveToStream(System.IO.Stream)">
            <summary>
            保存到流中
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineTemplate.SaveToStreamAsync(System.IO.Stream)">
            <summary>
            保存到流中
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineTemplate.SaveToFile(System.String)">
            <summary>
            保存到文件
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineTemplate.SaveToFileAsync(System.String)">
            <summary>
            保存到文件
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineTemplate.Run(System.Object)">
            <summary>
            执行编译
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineTemplate.RunAsync(System.Object)">
            <summary>
            执行编译
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineTemplate.LoadFromFile(System.String)">
            <summary>
            从文件中加载模板
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineTemplate.LoadFromFileAsync(System.String)">
            <summary>
            从文件中加载模板
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineTemplate.LoadFromStream(System.IO.Stream)">
            <summary>
            从流中加载模板
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineTemplate.LoadFromStreamAsync(System.IO.Stream)">
            <summary>
            从流中加载模板
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineTemplate.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Furion.ViewEngine.ViewEngineTemplate`1">
            <summary>
            视图引擎模板（编译后）
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Furion.ViewEngine.ViewEngineTemplate`1.assemblyByteCode">
            <summary>
            内存流
            </summary>
        </member>
        <member name="F:Furion.ViewEngine.ViewEngineTemplate`1.templateType">
            <summary>
            内存流
            </summary>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineTemplate`1.#ctor(System.IO.MemoryStream)">
            <summary>
            构造函数
            </summary>
            <param name="assemblyByteCode"></param>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineTemplate`1.SaveToStream(System.IO.Stream)">
            <summary>
            保存到流中
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineTemplate`1.SaveToStreamAsync(System.IO.Stream)">
            <summary>
            保存到流中
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineTemplate`1.SaveToFile(System.String)">
            <summary>
            保存到文件中
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineTemplate`1.SaveToFileAsync(System.String)">
            <summary>
            保存到文件中
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineTemplate`1.Run(System.Action{`0})">
            <summary>
            执行编译
            </summary>
            <param name="initializer"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineTemplate`1.RunAsync(System.Action{`0})">
            <summary>
            执行编译
            </summary>
            <param name="initializer"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineTemplate`1.LoadFromFile(System.String)">
            <summary>
            从文件中加载模板
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineTemplate`1.LoadFromFileAsync(System.String)">
            <summary>
            从文件中加载模板
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineTemplate`1.LoadFromStream(System.IO.Stream)">
            <summary>
            从流中加载模板
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineTemplate`1.LoadFromStreamAsync(System.IO.Stream)">
            <summary>
            从流中加载模板
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineTemplate`1.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Furion.VirtualFileServer.FileProviderTypes">
            <summary>
            文件提供器类型
            </summary>
        </member>
        <member name="F:Furion.VirtualFileServer.FileProviderTypes.Physical">
            <summary>
            物理文件
            </summary>
        </member>
        <member name="F:Furion.VirtualFileServer.FileProviderTypes.Embedded">
            <summary>
            嵌入资源文件
            </summary>
        </member>
        <member name="T:Furion.VirtualFileServer.FS">
            <summary>
            虚拟文件服务静态类
            </summary>
        </member>
        <member name="M:Furion.VirtualFileServer.FS.GetPhysicalFileProvider(System.String,System.IServiceProvider)">
            <summary>
            获取物理文件提供器
            </summary>
            <param name="root"></param>
            <param name="serviceProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.VirtualFileServer.FS.GetEmbeddedFileProvider(System.Reflection.Assembly,System.IServiceProvider)">
            <summary>
            获取嵌入资源文件提供器
            </summary>
            <param name="assembly"></param>
            <param name="serviceProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.VirtualFileServer.FS.GetFileProvider(Furion.VirtualFileServer.FileProviderTypes,System.Object,System.IServiceProvider)">
            <summary>
            文件提供器
            </summary>
            <param name="fileProviderTypes"></param>
            <param name="args"></param>
            <param name="serviceProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.VirtualFileServer.FS.TryGetContentType(System.String,System.String@)">
            <summary>
            根据文件名获取文件的 ContentType 或 MIME
            </summary>
            <param name="fileName">文件名（带拓展）</param>
            <param name="contentType">ContentType 或 MIME</param>
            <returns></returns>
        </member>
        <member name="M:Furion.VirtualFileServer.FS.GetFileExtensionContentTypeProvider">
            <summary>
            初始化文件 ContentType 提供器
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Builder.AppApplicationBuilderExtensions">
            <summary>
            应用中间件拓展类（由框架内部调用）
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.AppApplicationBuilderExtensions.UseDefaultServiceProvider(Microsoft.AspNetCore.Builder.WebApplication)">
            <summary>
            设置默认服务存储器
            </summary>
            <param name="app"><see cref="T:Microsoft.AspNetCore.Builder.WebApplication"/></param>
            <remarks>
            <para>解决在主机启动前解析服务问题</para>
            <para>使用：<code>var app = builder.Build().UseDefaultServiceProvider();</code></para>
            </remarks>
            <returns><see cref="T:Microsoft.AspNetCore.Builder.WebApplication"/></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.AppApplicationBuilderExtensions.UseInject(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.String,System.Action{Furion.UseInjectOptions},System.Boolean)">
            <summary>
            注入基础中间件（带Swagger）
            </summary>
            <param name="app"></param>
            <param name="routePrefix">空字符串将为首页</param>
            <param name="configure"></param>
            <param name="withProxy">解决 Swagger 被代理问题</param>
            <returns><see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder"/></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.AppApplicationBuilderExtensions.UseInject(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.Action{Furion.UseInjectOptions},System.Boolean)">
            <summary>
            注入基础中间件（带Swagger）
            </summary>
            <param name="app"></param>
            <param name="configure"></param>
            <param name="withProxy">解决 Swagger 被代理问题</param>
            <returns><see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder"/></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.AppApplicationBuilderExtensions.UseInjectBase(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            注入基础中间件
            </summary>
            <param name="app"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.AppApplicationBuilderExtensions.MapRouteControllers(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            解决 .NET6 WebApplication 模式下二级虚拟目录错误问题
            </summary>
            <param name="app"></param>
            <returns><see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder"/></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.AppApplicationBuilderExtensions.EnableBuffering(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            启用 Body 重复读功能
            </summary>
            <remarks>须在 app.UseRouting() 之前注册</remarks>
            <param name="app"></param>
            <returns><see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder"/></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.AppApplicationBuilderExtensions.UseApp(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.Action{Microsoft.AspNetCore.Builder.IApplicationBuilder})">
            <summary>
            添加应用中间件
            </summary>
            <param name="app">应用构建器</param>
            <param name="configure">应用配置</param>
            <returns><see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder"/></returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Builder.AppWebApplicationBuilderExtensions">
            <summary>
            WebApplication 拓展
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.AppWebApplicationBuilderExtensions.Inject(Microsoft.AspNetCore.Builder.WebApplicationBuilder,System.Action{Microsoft.AspNetCore.Builder.WebApplicationBuilder,Furion.InjectOptions})">
            <summary>
            Web 应用注入
            </summary>
            <param name="webApplicationBuilder">Web应用构建器</param>
            <param name="configure"></param>
            <returns>WebApplicationBuilder</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.AppWebApplicationBuilderExtensions.AddComponent``1(Microsoft.AspNetCore.Builder.WebApplicationBuilder,System.Object)">
            <summary>
            注册依赖组件
            </summary>
            <typeparam name="TComponent">派生自 <see cref="T:System.IServiceComponent"/></typeparam>
            <param name="webApplicationBuilder">Web应用构建器</param>
            <param name="options">组件参数</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.AppWebApplicationBuilderExtensions.AddComponent``2(Microsoft.AspNetCore.Builder.WebApplicationBuilder,``1)">
            <summary>
            注册依赖组件
            </summary>
            <typeparam name="TComponent">派生自 <see cref="T:System.IServiceComponent"/></typeparam>
            <typeparam name="TComponentOptions">组件参数</typeparam>
            <param name="webApplicationBuilder">Web应用构建器</param>
            <param name="options">组件参数</param>
            <returns><see cref="T:Microsoft.AspNetCore.Builder.WebApplicationBuilder"/></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.AppWebApplicationBuilderExtensions.AddComponent(Microsoft.AspNetCore.Builder.WebApplicationBuilder,System.Type,System.Object)">
            <summary>
            注册依赖组件
            </summary>
            <param name="webApplicationBuilder">Web应用构建器</param>
            <param name="componentType">组件类型</param>
            <param name="options">组件参数</param>
            <returns><see cref="T:Microsoft.AspNetCore.Builder.WebApplicationBuilder"/></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.AppWebApplicationBuilderExtensions.AddWebComponent``1(Microsoft.AspNetCore.Builder.WebApplicationBuilder,System.Object)">
            <summary>
            注册 WebApplicationBuilder 依赖组件
            </summary>
            <typeparam name="TComponent">派生自 <see cref="T:System.IWebComponent"/></typeparam>
            <param name="webApplicationBuilder">Web应用构建器</param>
            <param name="options">组件参数</param>
            <returns><see cref="T:Microsoft.AspNetCore.Builder.WebApplicationBuilder"/></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.AppWebApplicationBuilderExtensions.AddWebComponent``2(Microsoft.AspNetCore.Builder.WebApplicationBuilder,``1)">
            <summary>
            注册 WebApplicationBuilder 依赖组件
            </summary>
            <typeparam name="TComponent">派生自 <see cref="T:System.IWebComponent"/></typeparam>
            <typeparam name="TComponentOptions">组件参数</typeparam>
            <param name="webApplicationBuilder">Web应用构建器</param>
            <param name="options">组件参数</param>
            <returns><see cref="T:Microsoft.AspNetCore.Builder.WebApplicationBuilder"/></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.AppWebApplicationBuilderExtensions.AddWebComponent(Microsoft.AspNetCore.Builder.WebApplicationBuilder,System.Type,System.Object)">
            <summary>
            注册 WebApplicationBuilder 依赖组件
            </summary>
            <param name="webApplicationBuilder"><see cref="T:Microsoft.AspNetCore.Builder.WebApplicationBuilder"/></param>
            <param name="componentType">组件类型</param>
            <param name="options">组件参数</param>
            <returns><see cref="T:Microsoft.AspNetCore.Builder.WebApplicationBuilder"/></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.AppWebApplicationBuilderExtensions.UseVirtualPath(Microsoft.AspNetCore.Builder.WebApplication,System.Action{Microsoft.AspNetCore.Builder.IApplicationBuilder})">
            <summary>
            解决 .NET6 WebApplication 模式下二级虚拟目录错误问题
            </summary>
            <param name="app"></param>
            <param name="configuration"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Builder.ComponentApplicationBuilderExtensions">
            <summary>
            组件应用中间件拓展类
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.ComponentApplicationBuilderExtensions.UseComponent``1(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IWebHostEnvironment,System.Object)">
            <summary>
            注册依赖组件
            </summary>
            <typeparam name="TComponent">派生自 <see cref="T:System.IApplicationComponent"/></typeparam>
            <param name="app"><see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder"/></param>
            <param name="env"><see cref="T:Microsoft.AspNetCore.Hosting.IWebHostEnvironment"/></param>
            <param name="options">组件参数</param>
            <returns><see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder"/></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.ComponentApplicationBuilderExtensions.UseComponent``2(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IWebHostEnvironment,``1)">
            <summary>
            注册依赖组件
            </summary>
            <typeparam name="TComponent">派生自 <see cref="T:System.IApplicationComponent"/></typeparam>
            <typeparam name="TComponentOptions">组件参数</typeparam>
            <param name="app"><see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder"/></param>
            <param name="env"><see cref="T:Microsoft.AspNetCore.Hosting.IWebHostEnvironment"/></param>
            <param name="options">组件参数</param>
            <returns><see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder"/></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.ComponentApplicationBuilderExtensions.UseComponent(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IWebHostEnvironment,System.Type,System.Object)">
            <summary>
            注册依赖组件
            </summary>
            <param name="app"><see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder"/></param>
            <param name="env"><see cref="T:Microsoft.AspNetCore.Hosting.IWebHostEnvironment"/></param>
            <param name="componentType">组件类型</param>
            <param name="options">组件参数</param>
            <returns><see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder"/></returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Builder.CorsAccessorApplicationBuilderExtensions">
            <summary>
            跨域中间件拓展
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.CorsAccessorApplicationBuilderExtensions.UseCorsAccessor(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.Action{Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicyBuilder})">
            <summary>
            添加跨域中间件
            </summary>
            <param name="app"></param>
            <param name="corsPolicyBuilderHandler"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Builder.IEndpointRouteBuilderExtensions">
            <summary>
            终点路由构建器拓展
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.IEndpointRouteBuilderExtensions.MapHubs(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder)">
            <summary>
            扫描配置所有集线器
            </summary>
            <param name="endpoints"></param>
        </member>
        <member name="T:Microsoft.AspNetCore.Builder.LocalizationApplicationBuilderExtensions">
            <summary>
            多语言中间件拓展
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.LocalizationApplicationBuilderExtensions.UseAppLocalization(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.Action{Microsoft.AspNetCore.Builder.RequestLocalizationOptions})">
            <summary>
            配置多语言中间件拓展
            </summary>
            <param name="app"></param>
            <param name="customizeConfigure"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Builder.ScheduleUIExtensions">
            <summary>
            Schedule 模块 UI 中间件拓展
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.ScheduleUIExtensions.UseScheduleUI(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.Action{Furion.Schedule.ScheduleUIOptions})">
            <summary>
            添加 Schedule 模块 UI 中间件
            </summary>
            <param name="app"><see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder"/></param>
            <param name="configureAction">Schedule 模块 UI 配置选项委托</param>
            <returns><see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder"/></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.ScheduleUIExtensions.UseScheduleUI(Microsoft.AspNetCore.Builder.IApplicationBuilder,Furion.Schedule.ScheduleUIOptions)">
            <summary>
            添加 Schedule 模块 UI 中间件
            </summary>
            <param name="app"><see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder"/></param>
            <param name="options">Schedule 模块 UI 配置选项</param>
            <returns><see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder"/></returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Builder.SpecificationDocumentApplicationBuilderExtensions">
            <summary>
            规范化文档中间件拓展
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.SpecificationDocumentApplicationBuilderExtensions.UseSpecificationDocuments(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.String,System.Action{Swashbuckle.AspNetCore.Swagger.SwaggerOptions},System.Action{Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIOptions},System.Boolean)">
            <summary>
            添加规范化文档中间件
            </summary>
            <param name="app"></param>
            <param name="routePrefix"></param>
            <param name="configureSwagger"></param>
            <param name="configureSwaggerUI"></param>
            <param name="withProxy">解决 Swagger 被代理问题</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Builder.UnifyResultMiddlewareExtensions">
            <summary>
            状态码中间件拓展
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.UnifyResultMiddlewareExtensions.UseUnifyResultStatusCodes(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.String[],System.Boolean)">
            <summary>
            添加状态码拦截中间件
            </summary>
            <param name="builder"></param>
            <param name="authorizedHeaders"></param>
            <param name="withAuthorizationHeaderCheck"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Builder.VirtualFileServerApplicationBuilderExtensions">
            <summary>
            虚拟文件服务中间件
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.VirtualFileServerApplicationBuilderExtensions.UseVirtualFileServer(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            虚拟文件系统中间件
            </summary>
            <param name="app"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Http.HttpContextExtensions">
            <summary>
            Http 拓展类
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HttpContextExtensions.GetMetadata``1(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            获取 Action 特性
            </summary>
            <typeparam name="TAttribute"></typeparam>
            <param name="httpContext"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HttpContextExtensions.GetControllerActionDescriptor(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            获取 控制器/Action 描述器
            </summary>
            <param name="httpContext"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HttpContextExtensions.SigninToSwagger(Microsoft.AspNetCore.Http.HttpContext,System.String)">
            <summary>
            设置规范化文档自动登录
            </summary>
            <param name="httpContext"></param>
            <param name="accessToken"></param>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HttpContextExtensions.SignoutToSwagger(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            设置规范化文档退出登录
            </summary>
            <param name="httpContext"></param>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HttpContextExtensions.SetTokensOfResponseHeaders(Microsoft.AspNetCore.Http.HttpContext,System.String,System.String)">
            <summary>
            设置响应头 Tokens
            </summary>
            <param name="httpContext"></param>
            <param name="accessToken"></param>
            <param name="refreshToken"></param>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HttpContextExtensions.GetLocalIpAddressToIPv4(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            获取本机 IPv4地址
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HttpContextExtensions.GetLocalIpAddressToIPv6(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            获取本机 IPv6地址
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HttpContextExtensions.GetRemoteIpAddressToIPv4(Microsoft.AspNetCore.Http.HttpContext,System.Boolean)">
            <summary>
            获取远程 IPv4地址
            </summary>
            <param name="context"></param>
            <param name="xff">是否优先取 X-Forwarded-For</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HttpContextExtensions.GetRemoteIpAddressToIPv6(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            获取远程 IPv6地址
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HttpContextExtensions.GetRequestUrlAddress(Microsoft.AspNetCore.Http.HttpRequest)">
            <summary>
            获取完整请求地址
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HttpContextExtensions.GetRefererUrlAddress(Microsoft.AspNetCore.Http.HttpRequest,System.String)">
            <summary>
            获取来源地址
            </summary>
            <param name="request"></param>
            <param name="refererHeaderKey"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HttpContextExtensions.ReadBodyContentAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            读取 Body 内容
            </summary>
            <param name="httpContext"></param>
            <remarks>需先在 Startup 的 Configure 中注册 app.EnableBuffering()</remarks>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HttpContextExtensions.ReadBodyContentAsync(Microsoft.AspNetCore.Http.HttpRequest)">
            <summary>
            读取 Body 内容
            </summary>
            <param name="request"></param>
            <remarks>需先在 Startup 的 Configure 中注册 app.EnableBuffering()</remarks>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HttpContextExtensions.WriteAsync(Microsoft.AspNetCore.Http.HttpResponse,Furion.FriendlyException.BadPageResult,System.Threading.CancellationToken)">
            <summary>
            将 <see cref="T:Furion.FriendlyException.BadPageResult"/> 写入响应流中
            </summary>
            <param name="httpResponse"><see cref="T:Microsoft.AspNetCore.Http.HttpResponse"/></param>
            <param name="badPageResult"><see cref="T:Furion.FriendlyException.BadPageResult"/></param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HttpContextExtensions.IsWebSocketRequest(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            判断是否是 WebSocket 请求
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContextExtensions">
            <summary>
            <see cref="T:Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext"/> 拓展
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContextExtensions.DefaultAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext,System.Action{Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext})">
            <summary>
            解析默认模型绑定
            </summary>
            <param name="bindingContext"></param>
            <param name="configure"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Mvc.FromConvertAttribute">
            <summary>
            自定义参数绑定转换特性
            </summary>
            <remarks>供模型绑定使用</remarks>
        </member>
        <member name="P:Microsoft.AspNetCore.Mvc.FromConvertAttribute.AllowStringEmpty">
            <summary>
            是否允许空字符串
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Mvc.FromConvertAttribute.ModelConvertBinder">
            <summary>
            模型转换绑定器
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Mvc.FromConvertAttribute.Extras">
            <summary>
            额外数据
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Mvc.FromConvertAttribute.Customize">
            <summary>
            完全自定义
            </summary>
            <remarks>框架内部不做任何处理</remarks>
        </member>
        <member name="T:Microsoft.AspNetCore.Mvc.NonValidationAttribute">
            <summary>
            跳过验证
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute">
            <summary>
            接口描述设置
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute.#ctor(System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="enabled">是否启用</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute.#ctor(System.String[])">
            <summary>
            构造函数
            </summary>
            <param name="groups">分组列表</param>
        </member>
        <member name="P:Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute.Name">
            <summary>
            自定义名称
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute.KeepName">
            <summary>
            保留原有名称（Boolean 类型）
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute.SplitCamelCase">
            <summary>
            切割骆驼命名（Boolean 类型）
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute.AsLowerCamelCase">
            <summary>
            小驼峰命名（首字符小写）
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute.KeepVerb">
            <summary>
            保留路由谓词（Boolean 类型）
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute.LowercaseRoute">
            <summary>
            小写路由（Boolean 类型）
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute.Module">
            <summary>
            模块名
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute.Version">
            <summary>
            版本号
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute.Groups">
            <summary>
            分组
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute.Tag">
            <summary>
            标签
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute.Order">
            <summary>
            排序
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute.Area">
            <summary>
            配置控制器区域（只对控制器有效）
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute.Description">
            <summary>
            额外描述，支持 HTML
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute.ForceWithRoutePrefix">
            <summary>
            强制携带路由前缀，即使使用 [Route] 重写，仅对 Class/Controller 有效
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute.DisableInherite">
            <summary>
            禁止子类继承
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Mvc.ApiSeatAttribute">
            <summary>
            接口参数位置设置
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Mvc.ApiSeatAttribute.#ctor(Microsoft.AspNetCore.Mvc.ApiSeats)">
            <summary>
            构造函数
            </summary>
            <param name="seat"></param>
        </member>
        <member name="P:Microsoft.AspNetCore.Mvc.ApiSeatAttribute.Seat">
            <summary>
            参数位置
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Mvc.RouteConstraintAttribute">
            <summary>
            接口参数约束
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Mvc.RouteConstraintAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="constraint"></param>
        </member>
        <member name="P:Microsoft.AspNetCore.Mvc.RouteConstraintAttribute.Constraint">
            <summary>
            约束表达式
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Mvc.ApiSeats">
            <summary>
            接口参数位置
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Mvc.ApiSeats.ControllerStart">
            <summary>
            控制器之前
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Mvc.ApiSeats.ControllerEnd">
            <summary>
            控制器之后
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Mvc.ApiSeats.ActionStart">
            <summary>
            行为之前
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Mvc.ApiSeats.ActionEnd">
            <summary>
            行为之后
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Mvc.Formatters.TextPlainMediaTypeFormatter">
            <summary>
            text/plain 请求 Body 参数支持
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Mvc.Formatters.TextPlainMediaTypeFormatter.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Mvc.Formatters.TextPlainMediaTypeFormatter.ReadRequestBodyAsync(Microsoft.AspNetCore.Mvc.Formatters.InputFormatterContext,System.Text.Encoding)">
            <summary>
            重写 <see cref="M:Microsoft.AspNetCore.Mvc.Formatters.TextPlainMediaTypeFormatter.ReadRequestBodyAsync(Microsoft.AspNetCore.Mvc.Formatters.InputFormatterContext,System.Text.Encoding)"/>
            </summary>
            <param name="context"></param>
            <param name="effectiveEncoding"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Mvc.Filters.FriendlyExceptionFilter">
            <summary>
            友好异常拦截器
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Mvc.Filters.FriendlyExceptionFilter.OnExceptionAsync(Microsoft.AspNetCore.Mvc.Filters.ExceptionContext)">
            <summary>
            异常拦截
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Mvc.Filters.FriendlyExceptionFilter.PrintToMiniProfiler(System.Exception)">
            <summary>
            打印错误到 MiniProfiler 中
            </summary>
            <param name="exception"></param>
        </member>
        <member name="T:Microsoft.AspNetCore.Mvc.Localization.IHtmlLocalizerFactoryExtensions">
            <summary>
            IHtmlLocalizerFactory 拓展类
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Mvc.Localization.IHtmlLocalizerFactoryExtensions.Create(Microsoft.AspNetCore.Mvc.Localization.IHtmlLocalizerFactory)">
            <summary>
            创建默认多语言工厂
            </summary>
            <param name="htmlLocalizerFactory"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Mvc.NonUnifyAttribute">
            <summary>
            禁止规范化处理
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Mvc.UnifyProviderAttribute">
            <summary>
            规范化提供器特性
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Mvc.UnifyProviderAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Mvc.UnifyProviderAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:Microsoft.AspNetCore.Mvc.UnifyProviderAttribute.Name">
            <summary>
            提供器名称
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Mvc.UnifyResultAttribute">
            <summary>
            规范化结果配置
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Mvc.UnifyResultAttribute.#ctor(System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="statusCode"></param>
        </member>
        <member name="M:Microsoft.AspNetCore.Mvc.UnifyResultAttribute.#ctor(System.Type)">
            <summary>
            构造函数
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Microsoft.AspNetCore.Mvc.UnifyResultAttribute.#ctor(System.Type,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="type"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Microsoft.AspNetCore.Mvc.UnifyResultAttribute.#ctor(System.Type,System.Int32,System.Reflection.MethodInfo)">
            <summary>
            构造函数
            </summary>
            <param name="type"></param>
            <param name="statusCode"></param>
            <param name="method"></param>
        </member>
        <member name="M:Microsoft.AspNetCore.Mvc.UnifyResultAttribute.WrapType(System.Type,System.Reflection.MethodInfo)">
            <summary>
            包装类型
            </summary>
            <param name="type"></param>
            <param name="method"></param>
        </member>
        <member name="T:Microsoft.AspNetCore.Mvc.UnifySerializerSettingAttribute">
            <summary>
            规范化序列化配置
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Mvc.UnifySerializerSettingAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:Microsoft.AspNetCore.Mvc.UnifySerializerSettingAttribute.Name">
            <summary>
            序列化名称
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Authorization.AppAuthorizeAttribute">
            <summary>
            策略授权特性
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Authorization.AppAuthorizeAttribute.#ctor(System.String[])">
            <summary>
            构造函数
            </summary>
            <param name="policies">多个策略</param>
        </member>
        <member name="P:Microsoft.AspNetCore.Authorization.AppAuthorizeAttribute.Policies">
            <summary>
            策略
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Authorization.SecurityDefineAttribute">
            <summary>
            安全定义特性
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Authorization.SecurityDefineAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Authorization.SecurityDefineAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="resourceId"></param>
        </member>
        <member name="P:Microsoft.AspNetCore.Authorization.SecurityDefineAttribute.ResourceId">
            <summary>
            资源Id，必须是唯一的
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Authorization.AuthorizationHandlerContextExtensions">
            <summary>
            授权处理上下文拓展类
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Authorization.AuthorizationHandlerContextExtensions.GetCurrentHttpContext(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext)">
            <summary>
            获取当前 HttpContext 上下文
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Authorization.AuthorizationHandlerContextExtensions.StatusCode(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext,System.Int32)">
            <summary>
            设置授权状态码
            </summary>
            <param name="context"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Microsoft.AspNetCore.Authorization.AuthorizationHandlerContextExtensions.Fail(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext,System.Int32)">
            <summary>
            标记授权失败并设置状态码
            </summary>
            <param name="context"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.AppServiceCollectionExtensions">
            <summary>
            应用服务集合拓展类（由框架内部调用）
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.AppServiceCollectionExtensions.AddInject(Microsoft.Extensions.DependencyInjection.IMvcBuilder,System.Action{Furion.AddInjectOptions})">
            <summary>
            Mvc 注入基础配置（带Swagger）
            </summary>
            <param name="mvcBuilder">Mvc构建器</param>
            <param name="configure"></param>
            <returns>IMvcBuilder</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.AppServiceCollectionExtensions.AddInject(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Furion.AddInjectOptions})">
            <summary>
            服务注入基础配置（带Swagger）
            </summary>
            <param name="services">服务集合</param>
            <param name="configure"></param>
            <returns>IMvcBuilder</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.AppServiceCollectionExtensions.AddInjectMini(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Furion.AddInjectOptions})">
            <summary>
            MiniAPI 服务注入基础配置（带Swagger）
            </summary>
            <param name="services">服务集合</param>
            <param name="configure"></param>
            <returns>IMvcBuilder</returns>
            <remarks>https://docs.microsoft.com/zh-cn/aspnet/core/fundamentals/minimal-apis?view=aspnetcore-6.0</remarks>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.AppServiceCollectionExtensions.AddInjectBase(Microsoft.Extensions.DependencyInjection.IMvcBuilder,System.Action{Furion.AddInjectOptions})">
            <summary>
            Mvc 注入基础配置
            </summary>
            <param name="mvcBuilder">Mvc构建器</param>
            <param name="configure"></param>
            <returns>IMvcBuilder</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.AppServiceCollectionExtensions.AddInjectBase(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Furion.AddInjectOptions})">
            <summary>
            Mvc 注入基础配置
            </summary>
            <param name="services">服务集合</param>
            <param name="configure"></param>
            <returns>IMvcBuilder</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.AppServiceCollectionExtensions.AddInjectWithUnifyResult(Microsoft.Extensions.DependencyInjection.IMvcBuilder,System.Action{Furion.AddInjectOptions})">
            <summary>
            Mvc 注入基础配置和规范化结果
            </summary>
            <param name="mvcBuilder"></param>
            <param name="configure"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.AppServiceCollectionExtensions.AddInjectWithUnifyResult(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Furion.AddInjectOptions})">
            <summary>
            注入基础配置和规范化结果
            </summary>
            <param name="services"></param>
            <param name="configure"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.AppServiceCollectionExtensions.AddInjectWithUnifyResult``1(Microsoft.Extensions.DependencyInjection.IMvcBuilder,System.Action{Furion.AddInjectOptions})">
            <summary>
            Mvc 注入基础配置和规范化结果
            </summary>
            <typeparam name="TUnifyResultProvider"></typeparam>
            <param name="mvcBuilder"></param>
            <param name="configure"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.AppServiceCollectionExtensions.AddInjectWithUnifyResult``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Furion.AddInjectOptions})">
            <summary>
            Mvc 注入基础配置和规范化结果
            </summary>
            <typeparam name="TUnifyResultProvider"></typeparam>
            <param name="configure"></param>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.AppServiceCollectionExtensions.AddAppHostedService(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            自动添加主机服务
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.AppServiceCollectionExtensions.AddApp(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.Extensions.DependencyInjection.IServiceCollection})">
            <summary>
            添加应用配置
            </summary>
            <param name="services">服务集合</param>
            <param name="configure">服务配置</param>
            <returns>服务集合</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.AppServiceCollectionExtensions.AddStartups(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加 Startup 自动扫描
            </summary>
            <param name="services">服务集合</param>
            <returns>服务集合</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.AppServiceCollectionExtensions.GetStartupOrder(System.Type)">
            <summary>
            获取 Startup 排序
            </summary>
            <param name="type">排序类型</param>
            <returns>int</returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.IServiceScopeExtensions">
            <summary>
            <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceScope"/> 拓展类
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IServiceScopeExtensions.CreateDefaultHttpContext(Microsoft.Extensions.DependencyInjection.IServiceScope,Microsoft.AspNetCore.Http.Features.IFeatureCollection,System.Security.Claims.ClaimsPrincipal)">
            <summary>
            在当前服务作用域下创建 <see cref="T:Microsoft.AspNetCore.Http.DefaultHttpContext"/> 实例
            </summary>
            <remarks>解决多线程中获取 <see cref="T:Microsoft.AspNetCore.Http.HttpContext"/> 空问题</remarks>
            <param name="serviceScope"><see cref="T:Microsoft.Extensions.DependencyInjection.IServiceScope"/></param>
            <param name="feature"><see cref="T:Microsoft.AspNetCore.Http.Features.IFeatureCollection"/>，可通过 HttpContext.Features 获取</param>
            <param name="claims"><see cref="T:System.Security.Claims.ClaimsPrincipal"/>，可通过 HttpContext.User 获取</param>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.AspNetCoreBuilderServiceCollectionExtensions">
            <summary>
            ASP.NET Core 服务拓展类
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.AspNetCoreBuilderServiceCollectionExtensions.AddMvcFilter``1(Microsoft.Extensions.DependencyInjection.IMvcBuilder,System.Action{Microsoft.AspNetCore.Mvc.MvcOptions})">
            <summary>
            注册 Mvc 过滤器
            </summary>
            <typeparam name="TFilter"></typeparam>
            <param name="mvcBuilder"></param>
            <param name="configure"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.AspNetCoreBuilderServiceCollectionExtensions.AddMvcFilter``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.AspNetCore.Mvc.MvcOptions})">
            <summary>
            注册 Mvc 过滤器
            </summary>
            <typeparam name="TFilter"></typeparam>
            <param name="services"></param>
            <param name="configure"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.AspNetCoreBuilderServiceCollectionExtensions.AddMvcFilter(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata,System.Action{Microsoft.AspNetCore.Mvc.MvcOptions})">
            <summary>
            注册 Mvc 过滤器
            </summary>
            <param name="services"></param>
            <param name="filter"></param>
            <param name="configure"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.AspNetCoreBuilderServiceCollectionExtensions.AddFromConvertBinding(Microsoft.Extensions.DependencyInjection.IMvcBuilder,System.Action{System.Collections.Concurrent.ConcurrentDictionary{System.Type,System.Type}})">
            <summary>
            添加 [FromConvert] 模型绑定
            </summary>
            <param name="mvcBuilder"></param>
            <param name="configure"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.AspNetCoreBuilderServiceCollectionExtensions.AddFromConvertBinding(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{System.Collections.Concurrent.ConcurrentDictionary{System.Type,System.Type}})">
            <summary>
            添加 [FromConvert] 模型绑定
            </summary>
            <param name="services"></param>
            <param name="configure"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.AuthorizationServiceCollectionExtensions">
            <summary>
            策略授权服务拓展类
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.AuthorizationServiceCollectionExtensions.AddAppAuthorization``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.Extensions.DependencyInjection.IServiceCollection},System.Boolean)">
            <summary>
            添加策略授权服务
            </summary>
            <typeparam name="TAuthorizationHandler">策略授权处理程序</typeparam>
            <param name="services">服务集合</param>
            <param name="configure">自定义配置</param>
            <param name="enableGlobalAuthorize">是否启用全局授权</param>
            <returns>服务集合</returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.ComponentServiceCollectionExtensions">
            <summary>
            组件应用服务集合拓展类
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ComponentServiceCollectionExtensions.AddComponent``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Object)">
            <summary>
            注册单个组件
            </summary>
            <typeparam name="TComponent"></typeparam>
            <param name="services"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ComponentServiceCollectionExtensions.AddComponent``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,``1)">
            <summary>
            注册依赖组件
            </summary>
            <typeparam name="TComponent">派生自 <see cref="T:System.IServiceComponent"/></typeparam>
            <typeparam name="TComponentOptions">组件参数</typeparam>
            <param name="services"><see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/></param>
            <param name="options">组件参数</param>
            <returns><see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ComponentServiceCollectionExtensions.AddComponent(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Object)">
            <summary>
            注册依赖组件
            </summary>
            <param name="services"><see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/></param>
            <param name="componentType">组件类型</param>
            <param name="options">组件参数</param>
            <returns><see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/></returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.ConfigurableOptionsServiceCollectionExtensions">
            <summary>
            可变选项服务拓展类
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ConfigurableOptionsServiceCollectionExtensions.AddConfigurableOptions``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加选项配置
            </summary>
            <typeparam name="TOptions">选项类型</typeparam>
            <param name="services">服务集合</param>
            <returns>服务集合</returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.CorsAccessorServiceCollectionExtensions">
            <summary>
            跨域访问服务拓展类
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.CorsAccessorServiceCollectionExtensions.AddCorsAccessor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.AspNetCore.Cors.Infrastructure.CorsOptions},System.Action{Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicyBuilder})">
            <summary>
            配置跨域
            </summary>
            <param name="services">服务集合</param>
            <param name="corsOptionsHandler"></param>
            <param name="corsPolicyBuilderHandler"></param>
            <returns>服务集合</returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.DatabaseAccessorServiceCollectionExtensions">
            <summary>
            数据库访问器服务拓展类
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DatabaseAccessorServiceCollectionExtensions.AddDatabaseAccessor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.Extensions.DependencyInjection.IServiceCollection},System.String)">
            <summary>
            添加数据库上下文
            </summary>
            <param name="services">服务集合</param>
            <param name="configure">配置</param>
            <param name="migrationAssemblyName">迁移类库名称</param>
            <returns>服务集合</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DatabaseAccessorServiceCollectionExtensions.CustomizeMultiTenants(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String)">
            <summary>
            启动自定义租户类型
            </summary>
            <param name="services"></param>
            <param name="onTableTenantId">基于表的多租户Id名称</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DatabaseAccessorServiceCollectionExtensions.RegisterDbContext``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            注册默认数据库上下文
            </summary>
            <typeparam name="TDbContext">数据库上下文</typeparam>
            <param name="services">服务提供器</param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DatabaseAccessorServiceCollectionExtensions.RegisterDbContext``2(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            注册数据库上下文
            </summary>
            <typeparam name="TDbContext">数据库上下文</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="services">服务提供器</param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DatabaseAccessorServiceCollectionExtensions.ResolveDbContext(System.IServiceProvider,System.Type)">
            <summary>
            通过定位器解析上下文
            </summary>
            <param name="provider"></param>
            <param name="dbContextLocator"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.DatabaseProviderServiceCollectionExtensions">
            <summary>
            Sqlite 数据库服务拓展
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DatabaseProviderServiceCollectionExtensions.AddDbPool``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{System.IServiceProvider,Microsoft.EntityFrameworkCore.DbContextOptionsBuilder},System.String,System.Int32,Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor[])">
            <summary>
            添加默认数据库上下文
            </summary>
            <typeparam name="TDbContext">数据库上下文</typeparam>
            <param name="services">服务</param>
            <param name="providerName">数据库提供器</param>
            <param name="optionBuilder"></param>
            <param name="connectionMetadata">支持数据库连接字符串，配置文件的 ConnectionStrings 中的Key或 配置文件的完整的配置路径，如果是内存数据库，则为数据库名称</param>
            <param name="poolSize">池大小</param>
            <param name="interceptors">拦截器</param>
            <returns>服务集合</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DatabaseProviderServiceCollectionExtensions.AddDbPool``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{System.IServiceProvider,Microsoft.EntityFrameworkCore.DbContextOptionsBuilder},System.Int32,Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor[])">
            <summary>
            添加默认数据库上下文
            </summary>
            <typeparam name="TDbContext">数据库上下文</typeparam>
            <param name="services">服务</param>
            <param name="optionBuilder">自定义配置</param>
            <param name="poolSize">池大小</param>
            <param name="interceptors">拦截器</param>
            <returns>服务集合</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DatabaseProviderServiceCollectionExtensions.AddDbPool``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{System.IServiceProvider,Microsoft.EntityFrameworkCore.DbContextOptionsBuilder},System.String,System.Int32,Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor[])">
            <summary>
            添加其他数据库上下文
            </summary>
            <typeparam name="TDbContext">数据库上下文</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="services">服务</param>
            <param name="providerName">数据库提供器</param>
            <param name="optionBuilder"></param>
            <param name="connectionMetadata">支持数据库连接字符串，配置文件的 ConnectionStrings 中的Key或 配置文件的完整的配置路径，如果是内存数据库，则为数据库名称</param>
            <param name="poolSize">池大小</param>
            <param name="interceptors">拦截器</param>
            <returns>服务集合</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DatabaseProviderServiceCollectionExtensions.AddDbPool``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{System.IServiceProvider,Microsoft.EntityFrameworkCore.DbContextOptionsBuilder},System.Int32,Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor[])">
            <summary>
            添加其他数据库上下文
            </summary>
            <typeparam name="TDbContext">数据库上下文</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="services">服务</param>
            <param name="optionBuilder">自定义配置</param>
            <param name="poolSize">池大小</param>
            <param name="interceptors">拦截器</param>
            <returns>服务集合</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DatabaseProviderServiceCollectionExtensions.AddDb``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{System.IServiceProvider,Microsoft.EntityFrameworkCore.DbContextOptionsBuilder},System.String,Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor[])">
            <summary>
             添加默认数据库上下文
            </summary>
            <typeparam name="TDbContext">数据库上下文</typeparam>
            <param name="services">服务</param>
            <param name="providerName">数据库提供器</param>
            <param name="optionBuilder"></param>
            <param name="connectionMetadata">支持数据库连接字符串，配置文件的 ConnectionStrings 中的Key或 配置文件的完整的配置路径，如果是内存数据库，则为数据库名称</param>
            <param name="interceptors">拦截器</param>
            <returns>服务集合</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DatabaseProviderServiceCollectionExtensions.AddDb``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{System.IServiceProvider,Microsoft.EntityFrameworkCore.DbContextOptionsBuilder},Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor[])">
            <summary>
             添加默认数据库上下文
            </summary>
            <typeparam name="TDbContext">数据库上下文</typeparam>
            <param name="services">服务</param>
            <param name="optionBuilder">自定义配置</param>
            <param name="interceptors">拦截器</param>
            <returns>服务集合</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DatabaseProviderServiceCollectionExtensions.AddDb``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{System.IServiceProvider,Microsoft.EntityFrameworkCore.DbContextOptionsBuilder},System.String,Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor[])">
            <summary>
            添加数据库上下文
            </summary>
            <typeparam name="TDbContext">数据库上下文</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="services">服务</param>
            <param name="providerName">数据库提供器</param>
            <param name="optionBuilder"></param>
            <param name="connectionMetadata">支持数据库连接字符串，配置文件的 ConnectionStrings 中的Key或 配置文件的完整的配置路径，如果是内存数据库，则为数据库名称</param>
            <param name="interceptors">拦截器</param>
            <returns>服务集合</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DatabaseProviderServiceCollectionExtensions.AddDb``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{System.IServiceProvider,Microsoft.EntityFrameworkCore.DbContextOptionsBuilder},Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor[])">
            <summary>
            添加数据库上下文
            </summary>
            <typeparam name="TDbContext">数据库上下文</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="services">服务</param>
            <param name="optionBuilder">自定义配置</param>
            <param name="interceptors">拦截器</param>
            <returns>服务集合</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DatabaseProviderServiceCollectionExtensions.ConfigureDatabase``1(System.String,System.String,Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)">
            <summary>
            配置数据库
            </summary>
            <typeparam name="TDbContext"></typeparam>
            <param name="providerName">数据库提供器</param>
            <param name="connectionMetadata">支持数据库连接字符串，配置文件的 ConnectionStrings 中的Key或 配置文件的完整的配置路径，如果是内存数据库，则为数据库名称</param>
            <param name="options">数据库上下文选项构建器</param>
        </member>
        <member name="F:Microsoft.Extensions.DependencyInjection.DatabaseProviderServiceCollectionExtensions.DatabaseProviderUseMethodCollection">
            <summary>
            数据库提供器 UseXXX 方法缓存集合
            </summary>
        </member>
        <member name="F:Microsoft.Extensions.DependencyInjection.DatabaseProviderServiceCollectionExtensions.MigrationsAssemblyAction">
            <summary>
            配置Code First 程序集 Action委托
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DatabaseProviderServiceCollectionExtensions.#cctor">
            <summary>
            静态构造方法
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DatabaseProviderServiceCollectionExtensions.GetDatabaseProviderUseMethod(System.String,System.String)">
            <summary>
            获取数据库提供器对应的 useXXX 方法
            </summary>
            <param name="providerName">数据库提供器</param>
            <param name="version"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DatabaseProviderServiceCollectionExtensions.ReadProviderInfo(System.String)">
            <summary>
            解析数据库提供器信息
            </summary>
            <param name="providerName"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.MiniProfilerServiceCollectionExtensions">
            <summary>
            MiniProfiler 服务拓展类
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.MiniProfilerServiceCollectionExtensions.AddRelationalDiagnosticListener(Microsoft.Extensions.DependencyInjection.IMiniProfilerBuilder)">
            <summary>
            添加 EF Core 进程监听拓展
            </summary>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.DataValidationServiceCollectionExtensions">
            <summary>
            友好异常服务拓展类
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DataValidationServiceCollectionExtensions.AddDataValidation``1(Microsoft.Extensions.DependencyInjection.IMvcBuilder,System.Action{Furion.DataValidation.DataValidationOptions})">
            <summary>
            添加全局数据验证
            </summary>
            <typeparam name="TValidationMessageTypeProvider">验证类型消息提供器</typeparam>
            <param name="mvcBuilder"></param>
            <param name="configure"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DataValidationServiceCollectionExtensions.AddDataValidation``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Furion.DataValidation.DataValidationOptions})">
            <summary>
            添加全局数据验证
            </summary>
            <typeparam name="TValidationMessageTypeProvider">验证类型消息提供器</typeparam>
            <param name="services"></param>
            <param name="configure"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DataValidationServiceCollectionExtensions.AddDataValidation(Microsoft.Extensions.DependencyInjection.IMvcBuilder,System.Action{Furion.DataValidation.DataValidationOptions})">
            <summary>
            添加全局数据验证
            </summary>
            <param name="mvcBuilder"></param>
            <param name="configure"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DataValidationServiceCollectionExtensions.AddDataValidation(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Furion.DataValidation.DataValidationOptions})">
            <summary>
            添加全局数据验证
            </summary>
            <param name="services"></param>
            <param name="configure"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.DependencyInjectionServiceCollectionExtensions">
            <summary>
            依赖注入拓展类
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DependencyInjectionServiceCollectionExtensions.AddDependencyInjection(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加依赖注入接口
            </summary>
            <param name="services">服务集合</param>
            <returns>服务集合</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DependencyInjectionServiceCollectionExtensions.AddDispatchProxyForInterface``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type)">
            <summary>
            添加接口代理
            </summary>
            <typeparam name="TDispatchProxy">代理类</typeparam>
            <typeparam name="TIDispatchProxy">被代理接口依赖</typeparam>
            <param name="services">服务集合</param>
            <param name="dependencyType"></param>
            <returns>服务集合</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DependencyInjectionServiceCollectionExtensions.AddInnerDependencyInjection(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加扫描注入
            </summary>
            <param name="services">服务集合</param>
            <returns>服务集合</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DependencyInjectionServiceCollectionExtensions.RegisterService(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type,Furion.DependencyInjection.InjectionAttribute,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            注册服务
            </summary>
            <param name="services">服务集合</param>
            <param name="dependencyType"></param>
            <param name="type">类型</param>
            <param name="injectionAttribute">注入特性</param>
            <param name="canInjectInterfaces">能被注册的接口</param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DependencyInjectionServiceCollectionExtensions.Register(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type,Furion.DependencyInjection.InjectionAttribute,System.Type)">
            <summary>
            注册类型
            </summary>
            <param name="services">服务</param>
            <param name="dependencyType"></param>
            <param name="type">类型</param>
            <param name="injectionAttribute">注入特性</param>
            <param name="inter">接口</param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DependencyInjectionServiceCollectionExtensions.AddDispatchProxy(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type,System.Type,System.Type,System.Boolean)">
            <summary>
            创建服务代理
            </summary>
            <param name="services">服务集合</param>
            <param name="dependencyType"></param>
            <param name="type">拦截的类型</param>
            <param name="proxyType">代理类型</param>
            <param name="inter">代理接口</param>
            <param name="hasTarget">是否有实现类</param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DependencyInjectionServiceCollectionExtensions.RegisterNamedService``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            注册命名服务（接口多实现）
            </summary>
            <typeparam name="TDependency"></typeparam>
            <param name="services"></param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DependencyInjectionServiceCollectionExtensions.RegisterExternalServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            注册外部服务
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DependencyInjectionServiceCollectionExtensions.FixedGenericType(System.Type)">
            <summary>
            修复泛型类型注册类型问题
            </summary>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DependencyInjectionServiceCollectionExtensions.GetOrder(System.Type)">
            <summary>
            获取 注册 排序
            </summary>
            <param name="type">排序类型</param>
            <returns>int</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DependencyInjectionServiceCollectionExtensions.TryGetServiceLifetime(System.Type)">
            <summary>
            根据依赖接口类型解析 ServiceLifetime 对象
            </summary>
            <param name="dependencyType"></param>
            <returns></returns>
        </member>
        <member name="F:Microsoft.Extensions.DependencyInjection.DependencyInjectionServiceCollectionExtensions.TypeNamedCollection">
            <summary>
            类型名称集合
            </summary>
        </member>
        <member name="F:Microsoft.Extensions.DependencyInjection.DependencyInjectionServiceCollectionExtensions.DispatchCreateMethod">
            <summary>
            创建代理方法
            </summary>
        </member>
        <member name="F:Microsoft.Extensions.DependencyInjection.DependencyInjectionServiceCollectionExtensions.GlobalServiceProxyType">
            <summary>
            全局服务代理类型
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DependencyInjectionServiceCollectionExtensions.#cctor">
            <summary>
            静态构造函数
            </summary>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.DynamicApiControllerServiceCollectionExtensions">
            <summary>
            动态接口控制器拓展类
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DynamicApiControllerServiceCollectionExtensions.AddDynamicApiControllers(Microsoft.Extensions.DependencyInjection.IMvcBuilder)">
            <summary>
            添加动态接口控制器服务
            </summary>
            <param name="mvcBuilder">Mvc构建器</param>
            <returns>Mvc构建器</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DynamicApiControllerServiceCollectionExtensions.AddDynamicApiControllers(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加动态接口控制器服务
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DynamicApiControllerServiceCollectionExtensions.AddExternalAssemblyParts(Microsoft.Extensions.DependencyInjection.IMvcBuilder,System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            添加外部程序集部件集合
            </summary>
            <param name="mvcBuilder">Mvc构建器</param>
            <param name="assemblies"></param>
            <returns>Mvc构建器</returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.EventBusServiceCollectionExtensions">
            <summary>
            EventBus 模块服务拓展
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.EventBusServiceCollectionExtensions.AddEventBus(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Furion.EventBus.EventBusOptionsBuilder})">
            <summary>
            添加 EventBus 模块注册
            </summary>
            <param name="services">服务集合对象</param>
            <param name="configureOptionsBuilder">事件总线配置选项构建器委托</param>
            <returns>服务集合实例</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.EventBusServiceCollectionExtensions.AddEventBus(Microsoft.Extensions.DependencyInjection.IServiceCollection,Furion.EventBus.EventBusOptionsBuilder)">
            <summary>
            添加 EventBus 模块注册
            </summary>
            <param name="services">服务集合对象</param>
            <param name="eventBusOptionsBuilder">事件总线配置选项构建器</param>
            <returns>服务集合实例</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.EventBusServiceCollectionExtensions.AddInternalService(Microsoft.Extensions.DependencyInjection.IServiceCollection,Furion.EventBus.EventBusOptionsBuilder)">
            <summary>
            注册内部服务
            </summary>
            <param name="services">服务集合对象</param>
            <param name="eventBusOptionsBuilder">事件总线配置选项构建器</param>
            <returns>服务集合实例</returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.FriendlyExceptionServiceCollectionExtensions">
            <summary>
            友好异常服务拓展类
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.FriendlyExceptionServiceCollectionExtensions.AddFriendlyException``1(Microsoft.Extensions.DependencyInjection.IMvcBuilder,System.Action{Furion.FriendlyException.FriendlyExceptionOptions})">
            <summary>
            添加友好异常服务拓展服务
            </summary>
            <typeparam name="TErrorCodeTypeProvider">异常错误码提供器</typeparam>
            <param name="mvcBuilder">Mvc构建器</param>
            <param name="configure">是否启用全局异常过滤器</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.FriendlyExceptionServiceCollectionExtensions.AddFriendlyException``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Furion.FriendlyException.FriendlyExceptionOptions})">
            <summary>
            添加友好异常服务拓展服务
            </summary>
            <typeparam name="TErrorCodeTypeProvider">异常错误码提供器</typeparam>
            <param name="services"></param>
            <param name="configure"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.FriendlyExceptionServiceCollectionExtensions.AddFriendlyException(Microsoft.Extensions.DependencyInjection.IMvcBuilder,System.Action{Furion.FriendlyException.FriendlyExceptionOptions})">
            <summary>
            添加友好异常服务拓展服务
            </summary>
            <param name="mvcBuilder">Mvc构建器</param>
            <param name="configure"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.FriendlyExceptionServiceCollectionExtensions.AddFriendlyException(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Furion.FriendlyException.FriendlyExceptionOptions})">
            <summary>
            添加友好异常服务拓展服务
            </summary>
            <param name="services"></param>
            <param name="configure"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.JsonSerializationServiceCollectionExtensions">
            <summary>
            Json 序列化服务拓展类
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.JsonSerializationServiceCollectionExtensions.AddJsonSerialization``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            配置 Json 序列化提供器
            </summary>
            <typeparam name="TJsonSerializerProvider"></typeparam>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.JsonSerializationServiceCollectionExtensions.AddJsonOptions(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.AspNetCore.Mvc.JsonOptions})">
            <summary>
            配置 JsonOptions 序列化选项
            <para>主要给非 Web 环境使用</para>
            </summary>
            <param name="services"></param>
            <param name="configure"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.LocalizationServiceCollectionExtensions">
            <summary>
            多语言服务拓展类
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.LocalizationServiceCollectionExtensions.AddAppLocalization(Microsoft.Extensions.DependencyInjection.IMvcBuilder,System.Action{Furion.Localization.LocalizationSettingsOptions})">
            <summary>
            配置多语言服务
            </summary>
            <param name="mvcBuilder"></param>
            <param name="customizeConfigure">如果传入该参数，则使用自定义多语言机制</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.LocalizationServiceCollectionExtensions.AddAppLocalization(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Furion.Localization.LocalizationSettingsOptions})">
            <summary>
            配置多语言服务
            </summary>
            <param name="services"></param>
            <param name="customizeConfigure">如果传入该参数，则使用自定义多语言机制</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.LoggingServiceCollectionExtensions">
            <summary>
            日志服务拓展类
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.LoggingServiceCollectionExtensions.AddConsoleFormatter(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Furion.Logging.ConsoleFormatterExtendOptions})">
            <summary>
            添加控制台默认格式化器
            </summary>
            <param name="services"></param>
            <param name="configure">添加更多配置</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.LoggingServiceCollectionExtensions.AddMonitorLogging(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Furion.Logging.LoggingMonitorSettings},System.String)">
            <summary>
            添加日志监视器服务
            </summary>
            <param name="services"></param>
            <param name="configure">添加更多配置</param>
            <param name="jsonKey">配置文件对于的 Key，默认为 Logging:Monitor</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.LoggingServiceCollectionExtensions.AddFileLogging(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Boolean)">
            <summary>
            添加文件日志服务
            </summary>
            <param name="services"></param>
            <param name="fileName">日志文件完整路径或文件名，推荐 .log 作为拓展名</param>
            <param name="append">追加到已存在日志文件或覆盖它们</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.LoggingServiceCollectionExtensions.AddFileLogging(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{Furion.Logging.FileLoggerOptions})">
            <summary>
            添加文件日志服务
            </summary>
            <param name="services"></param>
            <param name="fileName">日志文件完整路径或文件名，推荐 .log 作为拓展名</param>
            <param name="configure">文件日志记录器配置选项委托</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.LoggingServiceCollectionExtensions.AddFileLogging(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Furion.Logging.FileLoggerOptions})">
            <summary>
            添加文件日志服务（从配置文件中读取配置）
            </summary>
            <param name="services"></param>
            <param name="configure">文件日志记录器配置选项委托</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.LoggingServiceCollectionExtensions.AddFileLogging(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.String},System.Action{Furion.Logging.FileLoggerOptions})">
            <summary>
            添加文件日志服务（从配置文件中读取配置）
            </summary>
            <param name="services"></param>
            <param name="configuraionKey">获取配置文件对应的 Key</param>
            <param name="configure">文件日志记录器配置选项委托</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.LoggingServiceCollectionExtensions.AddDatabaseLogging``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Furion.Logging.DatabaseLoggerOptions})">
            <summary>
            添加数据库日志服务
            </summary>
            <param name="services"></param>
            <param name="configure">数据库日志记录器配置选项委托</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.LoggingServiceCollectionExtensions.AddDatabaseLogging``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{Furion.Logging.DatabaseLoggerOptions})">
            <summary>
            添加数据库日志服务
            </summary>
            <param name="services"></param>
            <param name="configuraionKey">配置文件对于的 Key</param>
            <param name="configure">数据库日志记录器配置选项委托</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.LoggingServiceCollectionExtensions.AddDatabaseLogging``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.String},System.Action{Furion.Logging.DatabaseLoggerOptions})">
            <summary>
            添加数据库日志服务
            </summary>
            <param name="services"></param>
            <param name="configuraionKey">获取配置文件对于的 Key</param>
            <param name="configure">数据库日志记录器配置选项委托</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.ObjectMapperServiceCollectionExtensions">
            <summary>
            对象映射拓展类
            </summary>
        </member>
        <member name="F:Microsoft.Extensions.DependencyInjection.ObjectMapperServiceCollectionExtensions.ASSEMBLY_NAME">
            <summary>
            对象映射程序集名称
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ObjectMapperServiceCollectionExtensions.AddObjectMapper(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加对象映射
            </summary>
            <param name="services">服务集合</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.ScheduleServiceCollectionExtensions">
            <summary>
            Schedule 模块服务拓展
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ScheduleServiceCollectionExtensions.AddSchedule(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Furion.Schedule.ScheduleOptionsBuilder})">
            <summary>
            添加 Schedule 模块注册
            </summary>
            <param name="services"><see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/></param>
            <param name="configureOptionsBuilder">作业调度器配置选项构建器委托</param>
            <returns><see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ScheduleServiceCollectionExtensions.AddSchedule(Microsoft.Extensions.DependencyInjection.IServiceCollection,Furion.Schedule.ScheduleOptionsBuilder)">
            <summary>
            添加 Schedule 模块注册
            </summary>
            <param name="services"><see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/></param>
            <param name="scheduleOptionsBuilder">作业调度器配置选项构建器</param>
            <returns><see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ScheduleServiceCollectionExtensions.AddInternalService(Microsoft.Extensions.DependencyInjection.IServiceCollection,Furion.Schedule.ScheduleOptionsBuilder)">
            <summary>
            注册内部服务
            </summary>
            <param name="services"><see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/></param>
            <param name="scheduleOptionsBuilder">作业调度器配置选项构建器</param>
            <returns><see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/></returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.SensitiveDetectionServiceCollectionExtensions">
            <summary>
            脱敏词汇处理服务
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SensitiveDetectionServiceCollectionExtensions.AddSensitiveDetection(Microsoft.Extensions.DependencyInjection.IMvcBuilder,System.Action{Furion.SensitiveDetection.SensitiveDetectionBuilder})">
            <summary>
            添加脱敏词汇服务
            <para>需要在入口程序集目录下创建 sensitive-words.txt</para>
            </summary>
            <param name="mvcBuilder"></param>
            <param name="configureOptionsBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SensitiveDetectionServiceCollectionExtensions.AddSensitiveDetection``1(Microsoft.Extensions.DependencyInjection.IMvcBuilder,System.Action{Furion.SensitiveDetection.SensitiveDetectionBuilder})">
            <summary>
            添加脱敏词汇服务
            </summary>
            <typeparam name="TSensitiveDetectionProvider"></typeparam>
            <param name="mvcBuilder"></param>
            <param name="configureOptionsBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SensitiveDetectionServiceCollectionExtensions.AddSensitiveDetection(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Furion.SensitiveDetection.SensitiveDetectionBuilder})">
            <summary>
            添加脱敏词汇服务
            <para>需要在入口程序集目录下创建 sensitive-words.txt</para>
            </summary>
            <param name="services"></param>
            <param name="configureOptionsBuilder">configureOptionsBuilder</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SensitiveDetectionServiceCollectionExtensions.AddSensitiveDetection``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Furion.SensitiveDetection.SensitiveDetectionBuilder})">
            <summary>
            添加脱敏词汇服务
            </summary>
            <typeparam name="TSensitiveDetectionProvider"></typeparam>
            <param name="services"></param>
            <param name="configureOptionsBuilder"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.SpecificationDocumentServiceCollectionExtensions">
            <summary>
            规范化接口服务拓展类
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SpecificationDocumentServiceCollectionExtensions.AddSpecificationDocuments(Microsoft.Extensions.DependencyInjection.IMvcBuilder,System.Action{Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions})">
            <summary>
            添加规范化文档服务
            </summary>
            <param name="mvcBuilder">Mvc 构建器</param>
            <param name="configure">自定义配置</param>
            <returns>服务集合</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SpecificationDocumentServiceCollectionExtensions.AddSpecificationDocuments(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions})">
            <summary>
            添加规范化文档服务
            </summary>
            <param name="services">服务集合</param>
            <param name="configure">自定义配置</param>
            <returns>服务集合</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SpecificationDocumentServiceCollectionExtensions.AddMiniProfiler(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加 MiniProfiler 配置
            </summary>
            <param name="services"></param>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.TaskQueueServiceCollectionExtensions">
            <summary>
            TaskQueue 模块服务拓展
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.TaskQueueServiceCollectionExtensions.AddTaskQueue(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Furion.TaskQueue.TaskQueueOptionsBuilder})">
            <summary>
            添加 TaskQueue 模块注册
            </summary>
            <param name="services"><see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/></param>
            <param name="configureOptionsBuilder">任务队列配置选项构建器委托</param>
            <returns><see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.TaskQueueServiceCollectionExtensions.AddTaskQueue(Microsoft.Extensions.DependencyInjection.IServiceCollection,Furion.TaskQueue.TaskQueueOptionsBuilder)">
            <summary>
            添加 TaskQueue 模块注册
            </summary>
            <param name="services"><see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/></param>
            <param name="taskQueueOptionsBuilder">任务队列配置选项构建器</param>
            <returns><see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.TaskQueueServiceCollectionExtensions.AddInternalService(Microsoft.Extensions.DependencyInjection.IServiceCollection,Furion.TaskQueue.TaskQueueOptionsBuilder)">
            <summary>
            注册内部服务
            </summary>
            <param name="services"><see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/></param>
            <param name="taskQueueOptionsBuilder">任务队列配置选项构建器</param>
            <returns><see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/></returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.UnifyResultServiceCollectionExtensions">
            <summary>
            规范化结果服务拓展
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.UnifyResultServiceCollectionExtensions.AddUnifyResult(Microsoft.Extensions.DependencyInjection.IMvcBuilder)">
            <summary>
            添加规范化结果服务
            </summary>
            <param name="mvcBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.UnifyResultServiceCollectionExtensions.AddUnifyResult(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加规范化结果服务
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.UnifyResultServiceCollectionExtensions.AddUnifyResult``1(Microsoft.Extensions.DependencyInjection.IMvcBuilder)">
            <summary>
            添加规范化结果服务
            </summary>
            <typeparam name="TUnifyResultProvider"></typeparam>
            <param name="mvcBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.UnifyResultServiceCollectionExtensions.AddUnifyResult``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加规范化结果服务
            </summary>
            <typeparam name="TUnifyResultProvider"></typeparam>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.UnifyResultServiceCollectionExtensions.AddUnifyProvider``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            替换默认的规范化结果
            </summary>
            <typeparam name="TUnifyResultProvider"></typeparam>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.UnifyResultServiceCollectionExtensions.AddUnifyProvider``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String)">
            <summary>
            添加规范化提供器
            </summary>
            <typeparam name="TUnifyResultProvider"></typeparam>
            <param name="services"></param>
            <param name="providerName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.UnifyResultServiceCollectionExtensions.AddUnifyJsonOptions(Microsoft.Extensions.DependencyInjection.IMvcBuilder,System.String,System.Object)">
            <summary>
            添加规范化序列化配置
            </summary>
            <param name="mvcBuilder"></param>
            <param name="providerName"></param>
            <param name="serializerSettings"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.UnifyResultServiceCollectionExtensions.AddUnifyJsonOptions(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Object)">
            <summary>
            添加规范化序列化配置
            </summary>
            <param name="services"></param>
            <param name="providerName"></param>
            <param name="serializerSettings"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.UnitOfWorkServiceCollectionExtensions">
            <summary>
            工作单元拓展类
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.UnitOfWorkServiceCollectionExtensions.AddUnitOfWork``1(Microsoft.Extensions.DependencyInjection.IMvcBuilder)">
            <summary>
            添加工作单元服务
            </summary>
            <param name="mvcBuilder">Mvc构建器</param>
            <returns>Mvc构建器</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.UnitOfWorkServiceCollectionExtensions.AddUnitOfWork``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加工作单元服务
            </summary>
            <param name="services"></param>
            <returns>Mvc构建器</returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.HttpRemoteServiceCollectionExtensions">
            <summary>
                HTTP 远程请求模块 <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> 拓展类
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.HttpRemoteServiceCollectionExtensions.AddHttpRemote(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Furion.HttpRemote.HttpRemoteBuilder})">
            <summary>
                添加 HTTP 远程请求服务
            </summary>
            <param name="services">
                <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
            </param>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:Furion.HttpRemote.IHttpRemoteBuilder" />
            </returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.HttpRemoteServiceCollectionExtensions.AddHttpRemote(Microsoft.Extensions.DependencyInjection.IServiceCollection,Furion.HttpRemote.HttpRemoteBuilder)">
            <summary>
                添加 HTTP 远程请求服务
            </summary>
            <param name="services">
                <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
            </param>
            <param name="httpRemoteBuilder">
                <see cref="T:Furion.HttpRemote.HttpRemoteBuilder" />
            </param>
            <returns>
                <see cref="T:Furion.HttpRemote.IHttpRemoteBuilder" />
            </returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.ViewEngineServiceCollectionExtensions">
            <summary>
            视图引擎服务拓展类
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ViewEngineServiceCollectionExtensions.AddViewEngine(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加视图引擎
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.VirtualFileServerServiceCollectionExtensions">
            <summary>
            虚拟文件服务服务拓展
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.VirtualFileServerServiceCollectionExtensions.AddVirtualFileServer(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            文件提供器系统服务拓展
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Extensions.Hosting.HostBuilderExtensions">
            <summary>
            主机构建器拓展类
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Hosting.HostBuilderExtensions.Inject(Microsoft.AspNetCore.Hosting.IWebHostBuilder,System.Action{Microsoft.AspNetCore.Hosting.IWebHostBuilder,Furion.InjectOptions})">
            <summary>
            Web 主机注入
            </summary>
            <param name="hostBuilder">Web主机构建器</param>
            <param name="configure"></param>
            <returns>IWebHostBuilder</returns>
        </member>
        <member name="M:Microsoft.Extensions.Hosting.HostBuilderExtensions.Inject(Microsoft.Extensions.Hosting.IHostBuilder,System.Action{Microsoft.Extensions.Hosting.IHostBuilder,Furion.InjectOptions})">
            <summary>
            泛型主机注入
            </summary>
            <param name="hostBuilder">泛型主机注入构建器</param>
            <param name="configure"></param>
            <returns>IHostBuilder</returns>
        </member>
        <member name="M:Microsoft.Extensions.Hosting.HostBuilderExtensions.AddWebComponent``1(Microsoft.AspNetCore.Hosting.IWebHostBuilder,System.Object)">
            <summary>
            注册 IWebHostBuilder 依赖组件
            </summary>
            <typeparam name="TComponent">派生自 <see cref="T:System.IWebComponent"/></typeparam>
            <param name="hostBuilder">Web应用构建器</param>
            <param name="options">组件参数</param>
            <returns><see cref="T:Microsoft.AspNetCore.Hosting.IWebHostBuilder"/></returns>
        </member>
        <member name="M:Microsoft.Extensions.Hosting.HostBuilderExtensions.AddWebComponent``2(Microsoft.AspNetCore.Hosting.IWebHostBuilder,``1)">
            <summary>
            注册 IWebHostBuilder 依赖组件
            </summary>
            <typeparam name="TComponent">派生自 <see cref="T:System.IWebComponent"/></typeparam>
            <typeparam name="TComponentOptions">组件参数</typeparam>
            <param name="hostBuilder">Web应用构建器</param>
            <param name="options">组件参数</param>
            <returns><see cref="T:Microsoft.AspNetCore.Hosting.IWebHostBuilder"/></returns>
        </member>
        <member name="M:Microsoft.Extensions.Hosting.HostBuilderExtensions.AddWebComponent(Microsoft.AspNetCore.Hosting.IWebHostBuilder,System.Type,System.Object)">
            <summary>
            注册 IWebHostBuilder 依赖组件
            </summary>
            <param name="hostBuilder"><see cref="T:Microsoft.AspNetCore.Hosting.IWebHostBuilder"/></param>
            <param name="componentType">组件类型</param>
            <param name="options">组件参数</param>
            <returns><see cref="T:Microsoft.AspNetCore.Hosting.IWebHostBuilder"/></returns>
        </member>
        <member name="T:Microsoft.Extensions.Hosting.GenericHostLifetimeEventsHostedService">
            <summary>
            监听泛型主机启动事件
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Hosting.GenericHostLifetimeEventsHostedService.#ctor(Microsoft.Extensions.Hosting.IHost)">
            <summary>
            构造函数
            </summary>
            <param name="host"></param>
        </member>
        <member name="M:Microsoft.Extensions.Hosting.GenericHostLifetimeEventsHostedService.StartAsync(System.Threading.CancellationToken)">
            <summary>
            监听主机启动
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.Hosting.GenericHostLifetimeEventsHostedService.StopAsync(System.Threading.CancellationToken)">
            <summary>
            监听主机停止
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Extensions.Hosting.IHostExtensions">
            <summary>
            IHost 主机拓展类
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Hosting.IHostExtensions.GetServerAddresses(Microsoft.Extensions.Hosting.IHost)">
            <summary>
            获取主机启动地址
            </summary>
            <param name="host"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.Hosting.IHostExtensions.GetServerAddress(Microsoft.Extensions.Hosting.IHost)">
            <summary>
            获取主机启动地址
            </summary>
            <param name="host"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.Hosting.IHostExtensions.GetServerAddresses(Microsoft.AspNetCore.Hosting.Server.IServer)">
            <summary>
            获取主机启动地址
            </summary>
            <param name="server"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.Hosting.IHostExtensions.GetServerAddress(Microsoft.AspNetCore.Hosting.Server.IServer)">
            <summary>
            获取主机启动地址
            </summary>
            <param name="server"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Extensions.Configuration.IConfigurationExtenstions">
            <summary>
            <see cref="T:Microsoft.Extensions.Configuration.IConfiguration"/> 拓展
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.IConfigurationExtenstions.Reload(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            刷新配置对象
            </summary>
            <param name="configuration"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Extensions.Configuration.IConfigurationBuilderExtensions">
            <summary>
            IConfigurationBuilder 接口拓展
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.IConfigurationBuilderExtensions.AddFile(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.String,Microsoft.Extensions.Hosting.IHostEnvironment,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            添加配置文件
            </summary>
            <param name="configurationBuilder">配置构建对象</param>
            <param name="fileName">文件名</param>
            <param name="environment">环境对象</param>
            <param name="optional">可选文件，设置 true 跳过文件存在检查</param>
            <param name="reloadOnChange">是否监听文件更改</param>
            <param name="includeEnvironment">是否包含环境文件格式注册</param>
            <returns>配置构建对象</returns>
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.InvalidOperationException" />
        </member>
        <member name="M:Microsoft.Extensions.Configuration.IConfigurationBuilderExtensions.CheckFileNamePattern(System.String,System.String@,System.String@,System.String@,System.Collections.Generic.IDictionary{System.String,System.Boolean}@)">
            <summary>
            检查文件名格式是否是受支持的格式
            </summary>
            <param name="fileName">文件名</param>
            <param name="fileNamePart">返回文件名匹配部分</param>
            <param name="environmentNamePart">环境名匹配部分</param>
            <param name="fileNameWithEnvironmentPart">带环境标识的文件名</param>
            <param name="parameterPart">参数匹配部分</param>
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.InvalidOperationException" />
        </member>
        <member name="M:Microsoft.Extensions.Configuration.IConfigurationBuilderExtensions.ResolveRealAbsolutePath(System.String)">
            <summary>
            分析配置文件名并返回真实绝对路径
            </summary>
            <param name="fileName">文件名</param>
            <returns>返回文件绝对路径</returns>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.IConfigurationBuilderExtensions.CreateFileConfigurationSource(System.String,System.Boolean,System.Boolean)">
            <summary>
            根据文件路径创建文件配置源
            </summary>
            <param name="filePath">文件路径</param>
            <param name="optional">可选文件，设置 true 跳过文件存在检查</param>
            <param name="reloadOnChange">是否监听文件更改</param>
            <returns><see cref="T:Microsoft.Extensions.Configuration.FileConfigurationSource"/> 实例</returns>
            <exception cref="T:System.InvalidOperationException" />
        </member>
        <member name="M:Microsoft.Extensions.Configuration.IConfigurationBuilderExtensions.TrySetParameter(System.Collections.Generic.IDictionary{System.String,System.Boolean},System.String,System.Boolean@)">
            <summary>
            设置 FileConfigurationSouce 参数
            </summary>
            <param name="parameters">字典参数结合</param>
            <param name="parameterName">参数名</param>
            <param name="value">参数值</param>
        </member>
        <member name="T:Microsoft.Extensions.Configuration.IConfigurationExtensions">
            <summary>
            IConfiguration 接口拓展
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.IConfigurationExtensions.Exists(Microsoft.Extensions.Configuration.IConfiguration,System.String)">
            <summary>
            判断配置节点是否存在
            </summary>
            <param name="configuration">配置对象</param>
            <param name="key">节点路径</param>
            <returns>是否存在</returns>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.IConfigurationExtensions.Get``1(Microsoft.Extensions.Configuration.IConfiguration,System.String)">
            <summary>
            获取配置节点并转换成指定类型
            </summary>
            <typeparam name="T">节点类型</typeparam>
            <param name="configuration">配置对象</param>
            <param name="key">节点路径</param>
            <returns>节点类型实例</returns>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.IConfigurationExtensions.Get``1(Microsoft.Extensions.Configuration.IConfiguration,System.String,System.Action{Microsoft.Extensions.Configuration.BinderOptions})">
            <summary>
            获取配置节点并转换成指定类型
            </summary>
            <typeparam name="T">节点类型</typeparam>
            <param name="configuration">配置对象</param>
            <param name="key">节点路径</param>
            <param name="configureOptions">配置值绑定到指定类型额外配置</param>
            <returns>节点类型实例</returns>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.IConfigurationExtensions.Get(Microsoft.Extensions.Configuration.IConfiguration,System.String,System.Type)">
            <summary>
            获取节点配置
            </summary>
            <param name="configuration">配置对象</param>
            <param name="key">节点路径</param>
            <param name="type">节点类型</param>
            <returns><see cref="T:System.Object"/> 实例</returns>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.IConfigurationExtensions.Get(Microsoft.Extensions.Configuration.IConfiguration,System.String,System.Type,System.Action{Microsoft.Extensions.Configuration.BinderOptions})">
            <summary>
            获取节点配置
            </summary>
            <param name="configuration">配置对象</param>
            <param name="key">节点路径</param>
            <param name="type">节点类型</param>
            <param name="configureOptions">配置值绑定到指定类型额外配置</param>
            <returns><see cref="T:System.Object"/> 实例</returns>
        </member>
        <member name="T:Microsoft.Extensions.Localization.ILocalizerExtensions">
            <summary>
            <see cref="T:Microsoft.Extensions.Localization.IStringLocalizer"/> 和 <see cref="T:Microsoft.AspNetCore.Mvc.Localization.IHtmlLocalizer"/> 拓展
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Localization.ILocalizerExtensions.GetString``1(Microsoft.Extensions.Localization.IStringLocalizer,System.Linq.Expressions.Expression{System.Func{``0,System.String}})">
            <summary>
            根据实体类属性名获取对应的多语言配置
            </summary>
            <typeparam name="TResource">通常命名为 SharedResource </typeparam>
            <param name="stringLocalizer"><see cref="T:Microsoft.Extensions.Localization.IStringLocalizer"/></param>
            <param name="propertyExpression">属性表达式</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Extensions.Localization.IStringLocalizerFactoryExtensions">
            <summary>
            IStringLocalizerFactory 拓展类
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Localization.IStringLocalizerFactoryExtensions.Create(Microsoft.Extensions.Localization.IStringLocalizerFactory)">
            <summary>
            创建默认多语言工厂
            </summary>
            <param name="stringLocalizerFactory"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Extensions.Logging.ILoggerExtensions">
            <summary>
            <see cref="T:Microsoft.Extensions.Logging.ILogger"/> 拓展
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Logging.ILoggerExtensions.ScopeContext(Microsoft.Extensions.Logging.ILogger,System.Collections.Generic.IDictionary{System.Object,System.Object})">
            <summary>
            设置日志上下文
            </summary>
            <param name="logger"></param>
            <param name="properties">建议使用 ConcurrentDictionary 类型</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.Logging.ILoggerExtensions.ScopeContext(Microsoft.Extensions.Logging.ILogger,System.Action{Furion.Logging.LogContext})">
            <summary>
            设置日志上下文
            </summary>
            <param name="logger"></param>
            <param name="configure"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.Logging.ILoggerExtensions.ScopeContext(Microsoft.Extensions.Logging.ILogger,Furion.Logging.LogContext)">
            <summary>
            设置日志上下文
            </summary>
            <param name="logger"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Extensions.Logging.ILoggerFactoryExtensions">
            <summary>
            <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/> 拓展
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Logging.ILoggerFactoryExtensions.AddFile(Microsoft.Extensions.Logging.ILoggerFactory,System.String,System.Boolean)">
            <summary>
            添加文件日志记录器
            </summary>
            <param name="factory">日志工厂</param>
            <param name="fileName">日志文件完整路径或文件名，推荐 .log 作为拓展名</param>
            <param name="append">追加到已存在日志文件或覆盖它们</param>
            <returns><see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/></returns>
        </member>
        <member name="M:Microsoft.Extensions.Logging.ILoggerFactoryExtensions.AddFile(Microsoft.Extensions.Logging.ILoggerFactory,System.String,System.Action{Furion.Logging.FileLoggerOptions})">
            <summary>
            添加文件日志记录器
            </summary>
            <param name="factory">日志工厂</param>
            <param name="fileName">日志文件完整路径或文件名，推荐 .log 作为拓展名</param>
            <param name="configure"></param>
            <returns><see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/></returns>
        </member>
        <member name="M:Microsoft.Extensions.Logging.ILoggerFactoryExtensions.AddFile(Microsoft.Extensions.Logging.ILoggerFactory,System.Action{Furion.Logging.FileLoggerOptions})">
            <summary>
            添加文件日志记录器
            </summary>
            <param name="factory">日志工厂</param>
            <param name="configure">文件日志记录器配置选项委托</param>
            <returns><see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/></returns>
        </member>
        <member name="M:Microsoft.Extensions.Logging.ILoggerFactoryExtensions.AddFile(Microsoft.Extensions.Logging.ILoggerFactory,System.Func{System.String},System.Action{Furion.Logging.FileLoggerOptions})">
            <summary>
            添加文件日志记录器
            </summary>
            <param name="factory">日志工厂</param>
            <param name="configuraionKey">获取配置文件对应的 Key</param>
            <param name="configure">文件日志记录器配置选项委托</param>
            <returns><see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/></returns>
        </member>
        <member name="M:Microsoft.Extensions.Logging.ILoggerFactoryExtensions.AddDatabase``1(Microsoft.Extensions.Logging.ILoggerFactory,System.IServiceProvider,System.Action{Furion.Logging.DatabaseLoggerOptions})">
            <summary>
            添加数据库日志记录器
            </summary>
            <typeparam name="TDatabaseLoggingWriter">实现自 <see cref="T:Furion.Logging.IDatabaseLoggingWriter"/></typeparam>
            <param name="factory">日志工厂</param>
            <param name="serviceProvider">服务提供器</param>
            <param name="configure">数据库日志记录器配置选项委托</param>
            <returns><see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/></returns>
        </member>
        <member name="M:Microsoft.Extensions.Logging.ILoggerFactoryExtensions.AddDatabase``1(Microsoft.Extensions.Logging.ILoggerFactory,System.IServiceProvider,System.String,System.Action{Furion.Logging.DatabaseLoggerOptions})">
            <summary>
            添加数据库日志记录器
            </summary>
            <typeparam name="TDatabaseLoggingWriter">实现自 <see cref="T:Furion.Logging.IDatabaseLoggingWriter"/></typeparam>
            <param name="factory">日志工厂</param>
            <param name="serviceProvider">服务提供器</param>
            <param name="configuraionKey">配置文件对于的 Key</param>
            <param name="configure">数据库日志记录器配置选项委托</param>
            <returns><see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/></returns>
        </member>
        <member name="M:Microsoft.Extensions.Logging.ILoggerFactoryExtensions.AddDatabase``1(Microsoft.Extensions.Logging.ILoggerFactory,System.Func{System.String},System.IServiceProvider,System.Action{Furion.Logging.DatabaseLoggerOptions})">
            <summary>
            添加数据库日志记录器
            </summary>
            <typeparam name="TDatabaseLoggingWriter">实现自 <see cref="T:Furion.Logging.IDatabaseLoggingWriter"/></typeparam>
            <param name="factory">日志工厂</param>
            <param name="configuraionKey">获取配置文件对应的 Key</param>
            <param name="serviceProvider">服务提供器</param>
            <param name="configure">数据库日志记录器配置选项委托</param>
            <returns><see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/></returns>
        </member>
        <member name="T:Microsoft.Extensions.Logging.ILoggingBuilderExtensions">
            <summary>
            日志构建器拓展类
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Logging.ILoggingBuilderExtensions.AddConsoleFormatter(Microsoft.Extensions.Logging.ILoggingBuilder,System.Action{Furion.Logging.ConsoleFormatterExtendOptions})">
            <summary>
            添加控制台默认格式化器
            </summary>
            <param name="builder"></param>
            <param name="configure"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.Logging.ILoggingBuilderExtensions.AddFile(Microsoft.Extensions.Logging.ILoggingBuilder,System.String,System.Boolean)">
            <summary>
            添加文件日志记录器
            </summary>
            <param name="builder">日志构建器</param>
            <param name="fileName">日志文件完整路径或文件名，推荐 .log 作为拓展名</param>
            <param name="append">追加到已存在日志文件或覆盖它们</param>
            <returns><see cref="T:Microsoft.Extensions.Logging.ILoggingBuilder"/></returns>
        </member>
        <member name="M:Microsoft.Extensions.Logging.ILoggingBuilderExtensions.AddFile(Microsoft.Extensions.Logging.ILoggingBuilder,System.String,System.Action{Furion.Logging.FileLoggerOptions})">
            <summary>
            添加文件日志记录器
            </summary>
            <param name="builder">日志构建器</param>
            <param name="fileName">日志文件完整路径或文件名，推荐 .log 作为拓展名</param>
            <param name="configure">文件日志记录器配置选项委托</param>
            <returns><see cref="T:Microsoft.Extensions.Logging.ILoggingBuilder"/></returns>
        </member>
        <member name="M:Microsoft.Extensions.Logging.ILoggingBuilderExtensions.AddFile(Microsoft.Extensions.Logging.ILoggingBuilder,System.Action{Furion.Logging.FileLoggerOptions})">
            <summary>
            添加文件日志记录器（从配置文件中）默认 Key 为："Logging:File"
            </summary>
            <param name="builder">日志构建器</param>
            <param name="configure">文件日志记录器配置选项委托</param>
            <returns><see cref="T:Microsoft.Extensions.Logging.ILoggingBuilder"/></returns>
        </member>
        <member name="M:Microsoft.Extensions.Logging.ILoggingBuilderExtensions.AddFile(Microsoft.Extensions.Logging.ILoggingBuilder,System.Func{System.String},System.Action{Furion.Logging.FileLoggerOptions})">
            <summary>
            添加文件日志记录器（从配置文件中）
            </summary>
            <param name="builder">日志构建器</param>
            <param name="configuraionKey">获取配置文件对应的 Key</param>
            <param name="configure">文件日志记录器配置选项委托</param>
            <returns><see cref="T:Microsoft.Extensions.Logging.ILoggingBuilder"/></returns>
        </member>
        <member name="M:Microsoft.Extensions.Logging.ILoggingBuilderExtensions.AddDatabase``1(Microsoft.Extensions.Logging.ILoggingBuilder,System.Action{Furion.Logging.DatabaseLoggerOptions})">
            <summary>
            添加数据库日志记录器
            </summary>
            <typeparam name="TDatabaseLoggingWriter">实现自 <see cref="T:Furion.Logging.IDatabaseLoggingWriter"/></typeparam>
            <param name="builder">日志构建器</param>
            <param name="configure">数据库日志记录器配置选项委托</param>
            <returns><see cref="T:Microsoft.Extensions.Logging.ILoggingBuilder"/></returns>
        </member>
        <member name="M:Microsoft.Extensions.Logging.ILoggingBuilderExtensions.AddDatabase``1(Microsoft.Extensions.Logging.ILoggingBuilder,System.String,System.Action{Furion.Logging.DatabaseLoggerOptions})">
            <summary>
            添加数据库日志记录器
            </summary>
            <typeparam name="TDatabaseLoggingWriter">实现自 <see cref="T:Furion.Logging.IDatabaseLoggingWriter"/></typeparam>
            <param name="builder">日志构建器</param>
            <param name="configuraionKey">配置文件对于的 Key</param>
            <param name="configure">数据库日志记录器配置选项委托</param>
            <returns><see cref="T:Microsoft.Extensions.Logging.ILoggingBuilder"/></returns>
        </member>
        <member name="M:Microsoft.Extensions.Logging.ILoggingBuilderExtensions.AddDatabase``1(Microsoft.Extensions.Logging.ILoggingBuilder,System.Func{System.String},System.Action{Furion.Logging.DatabaseLoggerOptions})">
            <summary>
            添加数据库日志记录器（从配置文件中）
            </summary>
            <typeparam name="TDatabaseLoggingWriter">实现自 <see cref="T:Furion.Logging.IDatabaseLoggingWriter"/></typeparam>
            <param name="builder">日志构建器</param>
            <param name="configuraionKey">获取配置文件对于的 Key</param>
            <param name="configure">数据库日志记录器配置选项委托</param>
            <returns><see cref="T:Microsoft.Extensions.Logging.ILoggingBuilder"/></returns>
        </member>
        <member name="T:Microsoft.Extensions.Options.OptionsBuilderExtensions">
            <summary>
            OptionsBuilder 拓展类
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Options.OptionsBuilderExtensions.ConfigureBuilder``1(Microsoft.Extensions.Options.OptionsBuilder{``0},Microsoft.Extensions.Configuration.IConfiguration,System.Type)">
            <summary>
            配置选项构建器
            </summary>
            <typeparam name="TOptions">选项类型</typeparam>
            <param name="optionsBuilder">选项构建器实例</param>
            <param name="configuration">配置对象</param>
            <param name="optionsBuilderType">选项构建器类型，默认为 typeof(TOptions) </param>
            <returns>选项构建器实例</returns>
        </member>
        <member name="M:Microsoft.Extensions.Options.OptionsBuilderExtensions.ConfigureBuilders``1(Microsoft.Extensions.Options.OptionsBuilder{``0},Microsoft.Extensions.Configuration.IConfiguration,System.Type[])">
            <summary>
            配置多个选项构建器
            </summary>
            <typeparam name="TOptions">选项类型</typeparam>
            <param name="optionsBuilder">选项构建器实例</param>
            <param name="configuration">配置对象</param>
            <param name="optionsBuilderTypes">配置多个选项构建器</param>
            <returns>选项构建器实例</returns>
            <exception cref="T:System.ArgumentNullException" />
        </member>
        <member name="M:Microsoft.Extensions.Options.OptionsBuilderExtensions.ConfigureBuilder``1(Microsoft.Extensions.Options.OptionsBuilder{``0},System.Type)">
            <summary>
            配置选项构建器
            </summary>
            <typeparam name="TOptions">选项类型</typeparam>
            <param name="optionsBuilder">选项构建器实例</param>
            <param name="optionsBuilderType">选项构建器类型，默认为 typeof(TOptions) </param>
            <returns>选项构建器实例</returns>
        </member>
        <member name="M:Microsoft.Extensions.Options.OptionsBuilderExtensions.ConfigureBuilders``1(Microsoft.Extensions.Options.OptionsBuilder{``0},System.Type[])">
            <summary>
            配置多个选项构建器
            </summary>
            <typeparam name="TOptions">选项类型</typeparam>
            <param name="optionsBuilder">选项构建器实例</param>
            <param name="optionsBuilderTypes">配置多个选项构建器</param>
            <returns>选项构建器实例</returns>
            <exception cref="T:System.ArgumentNullException" />
        </member>
        <member name="M:Microsoft.Extensions.Options.OptionsBuilderExtensions.ConfigureDefaults``1(Microsoft.Extensions.Options.OptionsBuilder{``0},Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            配置选项常规默认处理
            </summary>
            <typeparam name="TOptions">选项类型</typeparam>
            <param name="optionsBuilder">选项构建器实例</param>
            <param name="configuration">配置对象</param>
            <returns>选项构建器实例</returns>
        </member>
        <member name="M:Microsoft.Extensions.Options.OptionsBuilderExtensions.InvokeMapMethod(System.Object,System.Type,System.Type)">
            <summary>
            调用 OptionsBuilder{TOptions} 对应方法
            </summary>
            <param name="optionsBuilder">选项构建器实例</param>
            <param name="optionsBuilderType">选项构建器类型</param>
            <param name="builderInterface">构建器接口</param>
        </member>
        <member name="M:Microsoft.Extensions.Options.OptionsBuilderExtensions.BuildExpressionCallParameters(System.Reflection.MethodInfo,System.Boolean,System.Type[],System.Object[]@)">
            <summary>
            构建 Call 调用方法表达式参数
            </summary>
            <remarks>含实际传入参数</remarks>
            <param name="matchMethod">表达式匹配方法</param>
            <param name="isValidateMethod">是否校验方法</param>
            <param name="genericArguments">泛型参数</param>
            <param name="args">实际传入参数</param>
            <returns>调用参数表达式数组</returns>
        </member>
        <member name="M:Microsoft.Extensions.Options.OptionsBuilderExtensions.CreateDelegate(System.Type[],System.Type)">
            <summary>
            创建委托类型
            </summary>
            <param name="inputTypes">输入类型</param>
            <param name="outputType">输出类型</param>
            <returns>Action或Func 委托类型</returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.EFCoreExtensions">
            <summary>
            EntityFramework Core 拓展
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EFCoreExtensions.Include``2(System.Linq.IQueryable{``0},System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            根据条件成立再构建 Include 查询
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <typeparam name="TProperty">泛型属性类型</typeparam>
            <param name="sources">集合对象</param>
            <param name="condition">布尔条件</param>
            <param name="expression">新的集合对象表达式</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EFCoreExtensions.FlexOrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            构建 OrderBy 查询（自动处理 N 级）
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <typeparam name="TKey"></typeparam>
            <param name="sources">集合对象</param>
            <param name="keySelector">表达式</param>
            <returns>新的集合对象</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EFCoreExtensions.FlexOrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            构建 OrderByDescending 查询（自动处理 N 级）
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <typeparam name="TKey"></typeparam>
            <param name="sources">集合对象</param>
            <param name="keySelector">表达式</param>
            <returns>新的集合对象</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EFCoreExtensions.OrderBy``2(System.Linq.IQueryable{``0},System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            根据条件成立再构建 OrderBy 查询
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <typeparam name="TKey"></typeparam>
            <param name="sources">集合对象</param>
            <param name="condition">布尔条件</param>
            <param name="keySelector">表达式</param>
            <returns>新的集合对象</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EFCoreExtensions.OrderByDescending``2(System.Linq.IQueryable{``0},System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            根据条件成立再构建 OrderByDescending 查询
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <typeparam name="TKey"></typeparam>
            <param name="sources">集合对象</param>
            <param name="condition">布尔条件</param>
            <param name="keySelector">表达式</param>
            <returns>新的集合对象</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EFCoreExtensions.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            根据条件成立再构建 ThenBy 查询
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <typeparam name="TKey"></typeparam>
            <param name="sources">集合对象</param>
            <param name="condition">布尔条件</param>
            <param name="keySelector">表达式</param>
            <returns>新的集合对象</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EFCoreExtensions.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            根据条件成立再构建 ThenByDescending 查询
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <typeparam name="TKey"></typeparam>
            <param name="sources">集合对象</param>
            <param name="condition">布尔条件</param>
            <param name="keySelector">表达式</param>
            <returns>新的集合对象</returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Database.SqlExecuteCommand">
            <summary>
            EFCore 执行 Sql 命令日志内部类
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.SqlServer2008OffsetToRowNumberConvertVisitor">
            <summary>
            处理 .Skip().Take() 表达式问题
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Query.SqlServer2008OffsetToRowNumberConvertVisitor.GenerateOuterColumnAccessor">
            <summary>
            筛选列访问器
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Query.SqlServer2008OffsetToRowNumberConvertVisitor.TableReferenceExpressionType">
            <summary>
            引用 TableReferenceExpression 类型
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Query.SqlServer2008OffsetToRowNumberConvertVisitor.root">
            <summary>
            表达式根节点
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Query.SqlServer2008OffsetToRowNumberConvertVisitor.sqlExpressionFactory">
            <summary>
            Sql 表达式工厂
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlServer2008OffsetToRowNumberConvertVisitor.#cctor">
            <summary>
            静态构造函数
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlServer2008OffsetToRowNumberConvertVisitor.#ctor(System.Linq.Expressions.Expression,Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory)">
            <summary>
            构造函数
            </summary>
            <param name="root"></param>
            <param name="sqlExpressionFactory"></param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlServer2008OffsetToRowNumberConvertVisitor.VisitExtension(System.Linq.Expressions.Expression)">
            <summary>
            替换表达式
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlServer2008OffsetToRowNumberConvertVisitor.VisitSelect(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression)">
            <summary>
            更新 Select 语句
            </summary>
            <param name="selectExpression"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.SqlServer2008QueryTranslationPostprocessor">
            <summary>
            SqlServer 查询转换器
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlServer2008QueryTranslationPostprocessor.#ctor(Microsoft.EntityFrameworkCore.Query.QueryTranslationPostprocessorDependencies,Microsoft.EntityFrameworkCore.Query.RelationalQueryTranslationPostprocessorDependencies,Microsoft.EntityFrameworkCore.Query.QueryCompilationContext)">
            <summary>
            构造函数
            </summary>
            <param name="dependencies"></param>
            <param name="relationalDependencies"></param>
            <param name="queryCompilationContext"></param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlServer2008QueryTranslationPostprocessor.Process(System.Linq.Expressions.Expression)">
            <summary>
            替换分页语句
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.SqlServer2008QueryTranslationPostprocessorFactory">
            <summary>
            SqlServer 查询转换工厂（处理 SqlServer 2008 分页问题）
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Query.SqlServer2008QueryTranslationPostprocessorFactory._dependencies">
            <summary>
            查询转换依赖集合
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Query.SqlServer2008QueryTranslationPostprocessorFactory._relationalDependencies">
            <summary>
            关系查询转换依赖集合
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlServer2008QueryTranslationPostprocessorFactory.#ctor(Microsoft.EntityFrameworkCore.Query.QueryTranslationPostprocessorDependencies,Microsoft.EntityFrameworkCore.Query.RelationalQueryTranslationPostprocessorDependencies)">
            <summary>
            构造函数
            </summary>
            <param name="dependencies"></param>
            <param name="relationalDependencies"></param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlServer2008QueryTranslationPostprocessorFactory.Create(Microsoft.EntityFrameworkCore.Query.QueryCompilationContext)">
            <summary>
            创建查询转换实例工厂
            </summary>
            <param name="queryCompilationContext"></param>
            <returns></returns>
        </member>
        <member name="T:System.Native">
            <summary>
            用于原生应用（WinForm/WPF）创建窗口
            </summary>
        </member>
        <member name="M:System.Native.CreateInstance``1(System.Object[])">
            <summary>
            创建原生应用（WinForm/WPF）窗口
            </summary>
            <typeparam name="TWindow"></typeparam>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:System.Native.CreateInstance(System.Type,System.Object[])">
            <summary>
            创建原生应用（WinForm/WPF）组件窗口
            </summary>
            <param name="windowType"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:System.Native.GetIdlePort">
            <summary>
            获取一个空闲端口
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Native.IsPortInUse(System.Int32)">
            <summary>
            检查端口是否被占用
            </summary>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="T:System.GenericRunOptions">
            <summary>
            泛型主机方式配置选项
            </summary>
        </member>
        <member name="M:System.GenericRunOptions.#ctor">
            <summary>
            内部构造函数
            </summary>
        </member>
        <member name="P:System.GenericRunOptions.Default">
            <summary>
            默认配置
            </summary>
        </member>
        <member name="M:System.GenericRunOptions.Main(System.String[])">
            <summary>
            默认配置（带启动参数）
            </summary>
        </member>
        <member name="P:System.GenericRunOptions.DefaultSilence">
            <summary>
            默认配置（静默启动）
            </summary>
        </member>
        <member name="M:System.GenericRunOptions.MainSilence(System.String[])">
            <summary>
            默认配置（静默启动 + 启动参数）
            </summary>
        </member>
        <member name="M:System.GenericRunOptions.ConfigureBuilder(System.Func{Microsoft.Extensions.Hosting.IHostBuilder,Microsoft.Extensions.Hosting.IHostBuilder})">
            <summary>
            配置 <see cref="T:Microsoft.Extensions.Hosting.IHostBuilder"/>
            </summary>
            <param name="configureAction">配置委托</param>
            <returns><see cref="T:System.GenericRunOptions"/></returns>
        </member>
        <member name="M:System.GenericRunOptions.ConfigureServices(System.Action{Microsoft.Extensions.DependencyInjection.IServiceCollection})">
            <summary>
            配置 <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>
            </summary>
            <param name="configureAction"></param>
            <returns><see cref="T:System.GenericRunOptions"/></returns>
        </member>
        <member name="M:System.GenericRunOptions.ConfigureInject(System.Action{Microsoft.Extensions.Hosting.IHostBuilder,Furion.InjectOptions})">
            <summary>
            配置 <see cref="T:Furion.InjectOptions"/>
            </summary>
            <param name="configureAction"></param>
            <returns><see cref="T:System.RunOptions"/></returns>
        </member>
        <member name="M:System.GenericRunOptions.AddComponent``1">
            <summary>
            添加应用服务组件
            </summary>
            <typeparam name="TComponent">组件类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:System.GenericRunOptions.AddComponent``2(``1)">
            <summary>
            添加应用服务组件
            </summary>
            <typeparam name="TComponent">组件类型</typeparam>
            <typeparam name="TComponentOptions"></typeparam>
            <param name="options">组件参数</param>
            <returns></returns>
        </member>
        <member name="M:System.GenericRunOptions.AddComponent(System.Type,System.Object)">
            <summary>
            添加应用服务组件
            </summary>
            <param name="componentType">组件类型</param>
            <param name="options">组件参数</param>
            <returns></returns>
        </member>
        <member name="M:System.GenericRunOptions.Silence(System.Boolean,System.Boolean)">
            <summary>
            标识主机静默启动
            </summary>
            <remarks>不阻塞程序运行</remarks>
            <param name="silence">静默启动</param>
            <param name="logging">静默启动日志状态，默认 false</param>
            <returns></returns>
        </member>
        <member name="M:System.GenericRunOptions.WithArgs(System.String[])">
            <summary>
            设置进程启动参数
            </summary>
            <param name="args">启动参数</param>
            <returns></returns>
        </member>
        <member name="P:System.GenericRunOptions.ActionBuilder">
            <summary>
            自定义 <see cref="T:Microsoft.Extensions.Hosting.IHostBuilder"/> 委托
            </summary>
        </member>
        <member name="P:System.GenericRunOptions.ActionServices">
            <summary>
            自定义 <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> 委托
            </summary>
        </member>
        <member name="P:System.GenericRunOptions.ActionInject">
            <summary>
            自定义 <see cref="T:Furion.InjectOptions"/> 委托
            </summary>
        </member>
        <member name="P:System.GenericRunOptions.ServiceComponents">
            <summary>
            应用服务组件
            </summary>
        </member>
        <member name="P:System.GenericRunOptions.IsSilence">
            <summary>
            静默启动
            </summary>
            <remarks>不阻塞程序运行</remarks>
        </member>
        <member name="P:System.GenericRunOptions.SilenceLogging">
            <summary>
            启用静默启动日志
            </summary>
        </member>
        <member name="P:System.GenericRunOptions.Args">
            <summary>
            命令行参数
            </summary>
        </member>
        <member name="T:System.IRunOptions">
            <summary>
            Serve.Run 方式配置参数依赖接口
            </summary>
        </member>
        <member name="T:System.LegacyRunOptions">
            <summary>
            Web 泛型主机方式配置选项
            </summary>
        </member>
        <member name="M:System.LegacyRunOptions.#ctor">
            <summary>
            内部构造函数
            </summary>
        </member>
        <member name="P:System.LegacyRunOptions.Default">
            <summary>
            默认配置
            </summary>
        </member>
        <member name="M:System.LegacyRunOptions.Main(System.String[])">
            <summary>
            默认配置（带启动参数）
            </summary>
        </member>
        <member name="P:System.LegacyRunOptions.DefaultSilence">
            <summary>
            默认配置（静默启动）
            </summary>
        </member>
        <member name="M:System.LegacyRunOptions.MainSilence(System.String[])">
            <summary>
            默认配置（静默启动 + 启动参数）
            </summary>
        </member>
        <member name="M:System.LegacyRunOptions.ConfigureWebDefaults(System.Func{Microsoft.AspNetCore.Hosting.IWebHostBuilder,Microsoft.AspNetCore.Hosting.IWebHostBuilder})">
            <summary>
            配置 <see cref="T:Microsoft.AspNetCore.Hosting.IWebHostBuilder"/>
            </summary>
            <param name="configureAction">配置委托</param>
            <returns><see cref="T:System.LegacyRunOptions"/></returns>
        </member>
        <member name="M:System.LegacyRunOptions.ConfigureWebInject(System.Action{Microsoft.AspNetCore.Hosting.IWebHostBuilder,Furion.InjectOptions})">
            <summary>
            配置 <see cref="T:Microsoft.AspNetCore.Hosting.IWebHostBuilder"/>
            </summary>
            <param name="configureAction">配置委托</param>
            <returns><see cref="T:System.LegacyRunOptions"/></returns>
        </member>
        <member name="M:System.LegacyRunOptions.ConfigureBuilder(System.Func{Microsoft.Extensions.Hosting.IHostBuilder,Microsoft.Extensions.Hosting.IHostBuilder})">
            <summary>
            配置 <see cref="T:Microsoft.Extensions.Hosting.IHostBuilder"/>
            </summary>
            <param name="configureAction">配置委托</param>
            <returns><see cref="T:System.LegacyRunOptions"/></returns>
        </member>
        <member name="M:System.LegacyRunOptions.ConfigureServices(System.Action{Microsoft.Extensions.DependencyInjection.IServiceCollection})">
            <summary>
            配置 <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>
            </summary>
            <param name="configureAction"></param>
            <returns><see cref="T:System.LegacyRunOptions"/></returns>
        </member>
        <member name="M:System.LegacyRunOptions.ConfigureInject(System.Action{Microsoft.Extensions.Hosting.IHostBuilder,Furion.InjectOptions})">
            <summary>
            配置 <see cref="T:Microsoft.Extensions.Hosting.IHostBuilder"/>
            </summary>
            <param name="configureAction">配置委托</param>
            <returns><see cref="T:System.LegacyRunOptions"/></returns>
        </member>
        <member name="M:System.LegacyRunOptions.AddComponent``1">
            <summary>
            添加应用服务组件
            </summary>
            <typeparam name="TComponent">组件类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:System.LegacyRunOptions.AddComponent``2(``1)">
            <summary>
            添加应用服务组件
            </summary>
            <typeparam name="TComponent">组件类型</typeparam>
            <typeparam name="TComponentOptions"></typeparam>
            <param name="options">组件参数</param>
            <returns></returns>
        </member>
        <member name="M:System.LegacyRunOptions.AddComponent(System.Type,System.Object)">
            <summary>
            添加应用服务组件
            </summary>
            <param name="componentType">组件类型</param>
            <param name="options">组件参数</param>
            <returns></returns>
        </member>
        <member name="M:System.LegacyRunOptions.UseComponent``1">
            <summary>
            添加应用中间件组件
            </summary>
            <typeparam name="TComponent">组件类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:System.LegacyRunOptions.UseComponent``2(``1)">
            <summary>
            添加应用中间件组件
            </summary>
            <typeparam name="TComponent">组件类型</typeparam>
            <typeparam name="TComponentOptions"></typeparam>
            <param name="options">组件参数</param>
            <returns></returns>
        </member>
        <member name="M:System.LegacyRunOptions.UseComponent(System.Type,System.Object)">
            <summary>
            添加应用中间件组件
            </summary>
            <param name="componentType">组件类型</param>
            <param name="options">组件参数</param>
            <returns></returns>
        </member>
        <member name="M:System.LegacyRunOptions.AddWebComponent``1">
            <summary>
            添加 IWebHostBuilder 组件
            </summary>
            <typeparam name="TComponent">组件类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:System.LegacyRunOptions.AddWebComponent``2(``1)">
            <summary>
            添加 IWebHostBuilder 组件
            </summary>
            <typeparam name="TComponent">组件类型</typeparam>
            <typeparam name="TComponentOptions"></typeparam>
            <param name="options">组件参数</param>
            <returns></returns>
        </member>
        <member name="M:System.LegacyRunOptions.AddWebComponent(System.Type,System.Object)">
            <summary>
            添加 IWebHostBuilder 组件
            </summary>
            <param name="componentType">组件类型</param>
            <param name="options">组件参数</param>
            <returns></returns>
        </member>
        <member name="M:System.LegacyRunOptions.Silence(System.Boolean,System.Boolean)">
            <summary>
            标识主机静默启动
            </summary>
            <remarks>不阻塞程序运行</remarks>
            <param name="silence">静默启动</param>
            <param name="logging">静默启动日志状态，默认 false</param>
            <returns></returns>
        </member>
        <member name="M:System.LegacyRunOptions.WithArgs(System.String[])">
            <summary>
            设置进程启动参数
            </summary>
            <param name="args">启动参数</param>
            <returns></returns>
        </member>
        <member name="P:System.LegacyRunOptions.ActionWebInject">
            <summary>
            自定义 <see cref="T:Furion.InjectOptions"/> 委托
            </summary>
        </member>
        <member name="P:System.LegacyRunOptions.ActionWebDefaultsBuilder">
            <summary>
            自定义 <see cref="T:Microsoft.AspNetCore.Hosting.IWebHostBuilder"/> 委托
            </summary>
        </member>
        <member name="P:System.LegacyRunOptions.ApplicationComponents">
            <summary>
            应用中间件组件
            </summary>
        </member>
        <member name="P:System.LegacyRunOptions.WebComponents">
            <summary>
            IWebHostBuilder 组件
            </summary>
        </member>
        <member name="T:System.RunOptions">
            <summary>
            <see cref="T:Microsoft.AspNetCore.Builder.WebApplication"/> 方式配置选项
            </summary>
        </member>
        <member name="M:System.RunOptions.#ctor">
            <summary>
            内部构造函数
            </summary>
        </member>
        <member name="P:System.RunOptions.Default">
            <summary>
            默认配置
            </summary>
        </member>
        <member name="M:System.RunOptions.Main(System.String[])">
            <summary>
            默认配置（带启动参数）
            </summary>
        </member>
        <member name="P:System.RunOptions.DefaultSilence">
            <summary>
            默认配置（静默启动）
            </summary>
        </member>
        <member name="M:System.RunOptions.MainSilence(System.String[])">
            <summary>
            默认配置（静默启动 + 启动参数）
            </summary>
        </member>
        <member name="M:System.RunOptions.ConfigureOptions(Microsoft.AspNetCore.Builder.WebApplicationOptions)">
            <summary>
            配置 <see cref="T:Microsoft.AspNetCore.Builder.WebApplicationOptions"/>
            </summary>
            <param name="options"></param>
            <returns><see cref="T:System.RunOptions"/></returns>
        </member>
        <member name="M:System.RunOptions.ConfigureBuilder(System.Action{Microsoft.AspNetCore.Builder.WebApplicationBuilder})">
            <summary>
            配置 <see cref="T:Microsoft.AspNetCore.Builder.WebApplicationBuilder"/>
            </summary>
            <param name="configureAction"></param>
            <returns><see cref="T:System.RunOptions"/></returns>
        </member>
        <member name="M:System.RunOptions.ConfigureServices(System.Action{Microsoft.Extensions.DependencyInjection.IServiceCollection})">
            <summary>
            配置 <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>
            </summary>
            <param name="configureAction"></param>
            <returns><see cref="T:System.RunOptions"/></returns>
        </member>
        <member name="M:System.RunOptions.ConfigureInject(System.Action{Microsoft.AspNetCore.Builder.WebApplicationBuilder,Furion.InjectOptions})">
            <summary>
            配置 <see cref="T:Furion.InjectOptions"/>
            </summary>
            <param name="configureAction"></param>
            <returns><see cref="T:System.RunOptions"/></returns>
        </member>
        <member name="M:System.RunOptions.Configure(System.Action{Microsoft.AspNetCore.Builder.WebApplication})">
            <summary>
            配置 <see cref="T:Microsoft.AspNetCore.Builder.WebApplication"/>
            </summary>
            <param name="configureAction">配置委托</param>
            <returns><see cref="T:System.RunOptions"/></returns>
        </member>
        <member name="M:System.RunOptions.ConfigureConfiguration(System.Action{Microsoft.Extensions.Hosting.IHostEnvironment,Microsoft.Extensions.Configuration.ConfigurationManager})">
            <summary>
            配置 <see cref="T:Microsoft.Extensions.Configuration.ConfigurationManager"/>
            </summary>
            <param name="configureAction">配置委托</param>
            <returns><see cref="T:System.RunOptions"/></returns>
        </member>
        <member name="M:System.RunOptions.AddComponent``1">
            <summary>
            添加应用服务组件
            </summary>
            <typeparam name="TComponent">组件类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:System.RunOptions.AddComponent``2(``1)">
            <summary>
            添加应用服务组件
            </summary>
            <typeparam name="TComponent">组件类型</typeparam>
            <typeparam name="TComponentOptions"></typeparam>
            <param name="options">组件参数</param>
            <returns></returns>
        </member>
        <member name="M:System.RunOptions.AddComponent(System.Type,System.Object)">
            <summary>
            添加应用服务组件
            </summary>
            <param name="componentType">组件类型</param>
            <param name="options">组件参数</param>
            <returns></returns>
        </member>
        <member name="M:System.RunOptions.UseComponent``1">
            <summary>
            添加应用中间件组件
            </summary>
            <typeparam name="TComponent">组件类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:System.RunOptions.UseComponent``2(``1)">
            <summary>
            添加应用中间件组件
            </summary>
            <typeparam name="TComponent">组件类型</typeparam>
            <typeparam name="TComponentOptions"></typeparam>
            <param name="options">组件参数</param>
            <returns></returns>
        </member>
        <member name="M:System.RunOptions.UseComponent(System.Type,System.Object)">
            <summary>
            添加应用中间件组件
            </summary>
            <param name="componentType">组件类型</param>
            <param name="options">组件参数</param>
            <returns></returns>
        </member>
        <member name="M:System.RunOptions.AddWebComponent``1">
            <summary>
            添加 WebApplicationBuilder 组件
            </summary>
            <typeparam name="TComponent">组件类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:System.RunOptions.AddWebComponent``2(``1)">
            <summary>
            添加 WebApplicationBuilder 组件
            </summary>
            <typeparam name="TComponent">组件类型</typeparam>
            <typeparam name="TComponentOptions"></typeparam>
            <param name="options">组件参数</param>
            <returns></returns>
        </member>
        <member name="M:System.RunOptions.AddWebComponent(System.Type,System.Object)">
            <summary>
            添加 WebApplicationBuilder 组件
            </summary>
            <param name="componentType">组件类型</param>
            <param name="options">组件参数</param>
            <returns></returns>
        </member>
        <member name="M:System.RunOptions.Silence(System.Boolean,System.Boolean)">
            <summary>
            标识主机静默启动
            </summary>
            <remarks>不阻塞程序运行</remarks>
            <param name="silence">静默启动</param>
            <param name="logging">静默启动日志状态，默认 false</param>
            <returns></returns>
        </member>
        <member name="M:System.RunOptions.WithArgs(System.String[])">
            <summary>
            设置进程启动参数
            </summary>
            <param name="args">启动参数</param>
            <returns></returns>
        </member>
        <member name="P:System.RunOptions.Options">
            <summary>
            <see cref="T:Microsoft.AspNetCore.Builder.WebApplicationOptions"/>
            </summary>
        </member>
        <member name="P:System.RunOptions.ActionServices">
            <summary>
            自定义 <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> 委托
            </summary>
        </member>
        <member name="P:System.RunOptions.ActionBuilder">
            <summary>
            自定义 <see cref="T:Microsoft.AspNetCore.Builder.WebApplicationBuilder"/> 委托
            </summary>
        </member>
        <member name="P:System.RunOptions.ActionInject">
            <summary>
            自定义 <see cref="T:Furion.InjectOptions"/> 委托
            </summary>
        </member>
        <member name="P:System.RunOptions.ActionConfigure">
            <summary>
            自定义 <see cref="T:Microsoft.AspNetCore.Builder.WebApplication"/> 委托
            </summary>
        </member>
        <member name="P:System.RunOptions.ActionConfigurationManager">
            <summary>
            自定义 <see cref="T:Microsoft.Extensions.Configuration.ConfigurationManager"/> 委托
            </summary>
        </member>
        <member name="P:System.RunOptions.ServiceComponents">
            <summary>
            应用服务组件
            </summary>
        </member>
        <member name="P:System.RunOptions.WebComponents">
            <summary>
            WebApplicationBuilder 组件
            </summary>
        </member>
        <member name="P:System.RunOptions.ApplicationComponents">
            <summary>
            应用中间件组件
            </summary>
        </member>
        <member name="P:System.RunOptions.IsSilence">
            <summary>
            静默启动
            </summary>
            <remarks>不阻塞程序运行</remarks>
        </member>
        <member name="P:System.RunOptions.SilenceLogging">
            <summary>
            静默启动日志状态
            </summary>
        </member>
        <member name="P:System.RunOptions.Args">
            <summary>
            命令行参数
            </summary>
        </member>
        <member name="T:System.Serve">
            <summary>
            主机静态类
            </summary>
        </member>
        <member name="P:System.Serve.IdleHost">
            <summary>
            获取一个空闲 Web 主机地址（端口）
            </summary>
        </member>
        <member name="M:System.Serve.GetIdleHost(System.String)">
            <summary>
            获取一个空闲 Web 主机地址（端口）
            </summary>
            <param name="host">主机地址</param>
        </member>
        <member name="F:System.Serve.SilenceExcludesOfLogCategoryName">
            <summary>
            静默启动排除日志分类名
            </summary>
        </member>
        <member name="M:System.Serve.RunNative(System.Action{Microsoft.Extensions.DependencyInjection.IServiceCollection},System.Boolean,System.String,System.String[])">
            <summary>
            启动原生应用（WinForm/WPF）主机
            </summary>
            <param name="additional"></param>
            <param name="includeWeb"></param>
            <param name="urls"></param>
            <param name="args"></param>
            <returns><see cref="T:Microsoft.Extensions.Hosting.IHost"/></returns>
        </member>
        <member name="M:System.Serve.RunNativeAsync(System.Action{Microsoft.Extensions.DependencyInjection.IServiceCollection},System.Boolean,System.String,System.String[],System.Threading.CancellationToken)">
            <summary>
            启动原生应用（WinForm/WPF）主机
            </summary>
            <param name="additional"></param>
            <param name="includeWeb"></param>
            <param name="urls"></param>
            <param name="args"></param>
            <param name="cancellationToken"></param>
            <returns><see cref="T:Microsoft.Extensions.Hosting.IHost"/></returns>
        </member>
        <member name="M:System.Serve.RunNative(System.IRunOptions,System.String)">
            <summary>
            启动原生应用（WinForm/WPF）主机
            </summary>
            <param name="options"></param>
            <param name="urls"></param>
            <returns></returns>
        </member>
        <member name="M:System.Serve.RunNativeAsync(System.IRunOptions,System.String,System.Threading.CancellationToken)">
            <summary>
            启动原生应用（WinForm/WPF）主机
            </summary>
            <param name="options"></param>
            <param name="urls"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Serve.Run(System.Action{Microsoft.Extensions.DependencyInjection.IServiceCollection},System.String,System.Boolean,System.Boolean,System.String[])">
            <summary>
            启动默认 Web 主机，含最基础的 Web 注册
            </summary>
            <param name="additional">配置额外服务</param>
            <param name="urls">默认 5000/5001 端口</param>
            <param name="silence">静默启动</param>
            <param name="logging">静默启动日志状态，默认 false</param>
            <param name="args">启动参数</param>
            <returns><see cref="T:Microsoft.Extensions.Hosting.IHost"/></returns>
        </member>
        <member name="M:System.Serve.RunAsync(System.Action{Microsoft.Extensions.DependencyInjection.IServiceCollection},System.String,System.Boolean,System.Boolean,System.String[],System.Threading.CancellationToken)">
            <summary>
            启动默认 Web 主机，含最基础的 Web 注册
            </summary>
            <param name="additional">配置额外服务</param>
            <param name="urls">默认 5000/5001 端口</param>
            <param name="silence">静默启动</param>
            <param name="logging">静默启动日志状态，默认 false</param>
            <param name="args">启动参数</param>
            <param name="cancellationToken"></param>
            <returns><see cref="T:Microsoft.Extensions.Hosting.IHost"/></returns>
        </member>
        <member name="M:System.Serve.Run(System.String,System.Boolean,System.Boolean,System.String[],System.Action{Microsoft.Extensions.DependencyInjection.IServiceCollection})">
            <summary>
            启动默认 Web 主机，含最基础的 Web 注册
            </summary>
            <param name="urls">默认 5000/5001 端口</param>
            <param name="silence">静默启动</param>
            <param name="logging">静默启动日志状态，默认 false</param>
            <param name="args">启动参数</param>
            <param name="additional">配置额外服务</param>
            <returns><see cref="T:Microsoft.Extensions.Hosting.IHost"/></returns>
        </member>
        <member name="M:System.Serve.RunAsync(System.String,System.Boolean,System.Boolean,System.String[],System.Action{Microsoft.Extensions.DependencyInjection.IServiceCollection},System.Threading.CancellationToken)">
            <summary>
            启动默认 Web 主机，含最基础的 Web 注册
            </summary>
            <param name="urls">默认 5000/5001 端口</param>
            <param name="silence">静默启动</param>
            <param name="logging">静默启动日志状态，默认 false</param>
            <param name="args">启动参数</param>
            <param name="additional">配置额外服务</param>
            <param name="cancellationToken"></param>
            <returns><see cref="T:Microsoft.Extensions.Hosting.IHost"/></returns>
        </member>
        <member name="M:System.Serve.Run(System.IRunOptions,System.String)">
            <summary>
            启动主机
            </summary>
            <remarks>通用方法</remarks>
            <param name="options"></param>
            <param name="urls"></param>
            <returns><see cref="T:Microsoft.Extensions.Hosting.IHost"/></returns>
        </member>
        <member name="M:System.Serve.RunAsync(System.IRunOptions,System.String,System.Threading.CancellationToken)">
            <summary>
            启动主机
            </summary>
            <remarks>通用方法</remarks>
            <param name="options"></param>
            <param name="urls"></param>
            <param name="cancellationToken"></param>
            <returns><see cref="T:Microsoft.Extensions.Hosting.IHost"/></returns>
        </member>
        <member name="M:System.Serve.RunGeneric(System.Action{Microsoft.Extensions.DependencyInjection.IServiceCollection},System.Boolean,System.Boolean,System.String[])">
            <summary>
            启动通用泛型主机
            </summary>
            <param name="additional">配置额外服务</param>
            <param name="silence">静默启动</param>
            <param name="logging">静默启动日志状态，默认 false</param>
            <param name="args">启动参数</param>
            <returns><see cref="T:Microsoft.Extensions.Hosting.IHost"/></returns>
        </member>
        <member name="M:System.Serve.RunGenericAsync(System.Action{Microsoft.Extensions.DependencyInjection.IServiceCollection},System.Boolean,System.Boolean,System.String[],System.Threading.CancellationToken)">
            <summary>
            启动通用泛型主机
            </summary>
            <param name="additional">配置额外服务</param>
            <param name="silence">静默启动</param>
            <param name="logging">静默启动日志状态，默认 false</param>
            <param name="args">启动参数</param>
            <param name="cancellationToken"></param>
            <returns><see cref="T:Microsoft.Extensions.Hosting.IHost"/></returns>
        </member>
        <member name="M:System.Serve.RunGeneric(System.Boolean,System.Boolean,System.String[],System.Action{Microsoft.Extensions.DependencyInjection.IServiceCollection})">
            <summary>
            启动通用泛型主机
            </summary>
            <param name="silence">静默启动</param>
            <param name="logging">静默启动日志状态，默认 false</param>
            <param name="args">启动参数</param>
            <param name="additional">配置额外服务</param>
            <returns><see cref="T:Microsoft.Extensions.Hosting.IHost"/></returns>
        </member>
        <member name="M:System.Serve.RunGenericAsync(System.Boolean,System.Boolean,System.String[],System.Action{Microsoft.Extensions.DependencyInjection.IServiceCollection},System.Threading.CancellationToken)">
            <summary>
            启动通用泛型主机
            </summary>
            <param name="silence">静默启动</param>
            <param name="logging">静默启动日志状态，默认 false</param>
            <param name="args">启动参数</param>
            <param name="additional">配置额外服务</param>
            <param name="cancellationToken"></param>
            <returns><see cref="T:Microsoft.Extensions.Hosting.IHost"/></returns>
        </member>
        <member name="M:System.Serve.Run(System.LegacyRunOptions,System.String)">
            <summary>
            启动泛型 Web 主机
            </summary>
            <remarks>未包含 Web 基础功能，需手动注册服务/中间件</remarks>
            <param name="options">配置选项</param>
            <param name="urls">默认 5000/5001 端口</param>
            <returns><see cref="T:Microsoft.Extensions.Hosting.IHost"/></returns>
        </member>
        <member name="M:System.Serve.RunAsync(System.LegacyRunOptions,System.String,System.Threading.CancellationToken)">
            <summary>
            启动泛型 Web 主机
            </summary>
            <remarks>未包含 Web 基础功能，需手动注册服务/中间件</remarks>
            <param name="options">配置选项</param>
            <param name="urls">默认 5000/5001 端口</param>
            <param name="cancellationToken"></param>
            <returns><see cref="T:Microsoft.Extensions.Hosting.IHost"/></returns>
        </member>
        <member name="M:System.Serve.Run``1(System.LegacyRunOptions,System.String)">
            <summary>
            启动泛型 Web 主机
            </summary>
            <remarks>未包含 Web 基础功能，需手动注册服务/中间件</remarks>
            <typeparam name="TStartup">启动 Startup 类</typeparam>
            <param name="options">配置选项</param>
            <param name="urls">默认 5000/5001 端口</param>
            <returns><see cref="T:Microsoft.Extensions.Hosting.IHost"/></returns>
        </member>
        <member name="M:System.Serve.RunAsync``1(System.LegacyRunOptions,System.String,System.Threading.CancellationToken)">
            <summary>
            启动泛型 Web 主机
            </summary>
            <remarks>未包含 Web 基础功能，需手动注册服务/中间件</remarks>
            <typeparam name="TStartup">启动 Startup 类</typeparam>
            <param name="options">配置选项</param>
            <param name="urls">默认 5000/5001 端口</param>
            <param name="cancellationToken"></param>
            <returns><see cref="T:Microsoft.Extensions.Hosting.IHost"/></returns>
        </member>
        <member name="M:System.Serve.Run(System.GenericRunOptions)">
            <summary>
            启动泛型通用主机
            </summary>
            <param name="options">配置选项</param>
            <returns><see cref="T:Microsoft.Extensions.Hosting.IHost"/></returns>
        </member>
        <member name="M:System.Serve.RunAsync(System.GenericRunOptions,System.Threading.CancellationToken)">
            <summary>
            启动泛型通用主机
            </summary>
            <param name="options">配置选项</param>
            <param name="cancellationToken"></param>
            <returns><see cref="T:Microsoft.Extensions.Hosting.IHost"/></returns>
        </member>
        <member name="M:System.Serve.Run(System.RunOptions,System.String)">
            <summary>
            启动 WebApplication 主机
            </summary>
            <remarks>未包含 Web 基础功能，需手动注册服务/中间件</remarks>
            <param name="options">配置选项</param>
            <param name="urls">默认 5000/5001 端口</param>
            <returns><see cref="T:Microsoft.Extensions.Hosting.IHost"/></returns>
        </member>
        <member name="M:System.Serve.RunAsync(System.RunOptions,System.String,System.Threading.CancellationToken)">
            <summary>
            启动 WebApplication 主机
            </summary>
            <remarks>未包含 Web 基础功能，需手动注册服务/中间件</remarks>
            <param name="options">配置选项</param>
            <param name="urls">默认 5000/5001 端口</param>
            <param name="cancellationToken"></param>
            <returns><see cref="T:Microsoft.Extensions.Hosting.IHost"/></returns>
        </member>
        <member name="M:System.Serve.BuildApplication(System.RunOptions,System.String,System.String@,Microsoft.AspNetCore.Builder.WebApplication@)">
            <summary>
            构建 WebApplication 对象
            </summary>
            <param name="options">配置选项</param>
            <param name="urls">默认 5000/5001 端口</param>
            <param name="startUrls">Urls地址</param>
            <param name="app"><see cref="T:Microsoft.AspNetCore.Builder.WebApplication"/></param>
        </member>
        <member name="M:System.Serve.BuildApplication``1(System.LegacyRunOptions,System.String,Microsoft.Extensions.Hosting.IHost@)">
            <summary>
            构建 IHost 对象
            </summary>
            <typeparam name="TStartup">启动 Startup 类</typeparam>
            <param name="options">配置选项</param>
            <param name="urls">默认 5000/5001 端口</param>
            <param name="app"><see cref="T:Microsoft.Extensions.Hosting.IHost"/></param>
        </member>
        <member name="M:System.Serve.BuildApplication(System.GenericRunOptions,Microsoft.Extensions.Hosting.IHost@)">
            <summary>
            构建 IHost 对象
            </summary>
            <param name="options">配置选项</param>
            <param name="app"><see cref="T:Microsoft.Extensions.Hosting.IHost"/></param>
        </member>
        <member name="T:System.DependsOnAttribute">
            <summary>
            组件依赖配置特性
            </summary>
        </member>
        <member name="F:System.DependsOnAttribute._dependComponents">
            <summary>
            依赖组件列表
            </summary>
        </member>
        <member name="F:System.DependsOnAttribute._links">
            <summary>
            连接组件列表
            </summary>
        </member>
        <member name="M:System.DependsOnAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:System.DependsOnAttribute.#ctor(System.Object[])">
            <summary>
            构造函数
            </summary>
            <param name="dependComponents">依赖组件列表</param>
            <remarks>支持字符串类型程序集/类型配置</remarks>
        </member>
        <member name="P:System.DependsOnAttribute.DependComponents">
            <summary>
            依赖组件列表
            </summary>
        </member>
        <member name="P:System.DependsOnAttribute.Links">
            <summary>
            链接组件列表
            </summary>
        </member>
        <member name="P:System.DependsOnAttribute.LinkComponents">
            <summary>
            内部链接组件
            </summary>
        </member>
        <member name="T:System.ComponentContext">
            <summary>
            组件上下文
            </summary>
        </member>
        <member name="P:System.ComponentContext.ComponentType">
            <summary>
            组件类型
            </summary>
        </member>
        <member name="P:System.ComponentContext.CalledContext">
            <summary>
            上级组件上下文
            </summary>
        </member>
        <member name="P:System.ComponentContext.RootContext">
            <summary>
            根组件上下文
            </summary>
        </member>
        <member name="P:System.ComponentContext.DependComponents">
            <summary>
            依赖组件列表
            </summary>
        </member>
        <member name="P:System.ComponentContext.LinkComponents">
            <summary>
            链接组件列表
            </summary>
        </member>
        <member name="P:System.ComponentContext.Properties">
            <summary>
            上下文数据
            </summary>
        </member>
        <member name="P:System.ComponentContext.IsRoot">
            <summary>
            是否是根组件
            </summary>
        </member>
        <member name="M:System.ComponentContext.SetProperty``1(System.Object)">
            <summary>
            设置组件属性参数
            </summary>
            <typeparam name="TComponent">派生自 <see cref="T:System.ComponentModel.IComponent"/></typeparam>
            <param name="value">组件参数</param>
            <returns></returns>
        </member>
        <member name="M:System.ComponentContext.SetProperty(System.Type,System.Object)">
            <summary>
            设置组件属性参数
            </summary>
            <param name="componentType">组件类型</param>
            <param name="value">组件参数</param>
            <returns></returns>
        </member>
        <member name="M:System.ComponentContext.SetProperty(System.String,System.Object)">
            <summary>
            设置组件属性参数
            </summary>
            <param name="key">键</param>
            <param name="value">组件参数</param>
            <returns></returns>
        </member>
        <member name="M:System.ComponentContext.GetProperty``2">
            <summary>
            获取组件属性参数
            </summary>
            <typeparam name="TComponent">派生自 <see cref="T:System.ComponentModel.IComponent"/></typeparam>
            <typeparam name="TComponentOptions">组件参数类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:System.ComponentContext.GetProperty``1(System.Type)">
            <summary>
            获取组件属性参数
            </summary>
            <typeparam name="TComponentOptions">组件参数类型</typeparam>
            <param name="componentType">组件类型</param>
            <returns></returns>
        </member>
        <member name="M:System.ComponentContext.GetProperty``1(System.String)">
            <summary>
            获取组件属性参数
            </summary>
            <typeparam name="TComponentOptions">组件参数类型</typeparam>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:System.ComponentContext.GetProperties">
            <summary>
            获取组件所有依赖参数
            </summary>
            <returns></returns>
        </member>
        <member name="T:System.IApplicationComponent">
            <summary>
            应用中间件接口
            </summary>
        </member>
        <member name="M:System.IApplicationComponent.Load(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IWebHostEnvironment,System.ComponentContext)">
            <summary>
            装置中间件
            </summary>
            <param name="app"><see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder"/></param>
            <param name="env"><see cref="T:Microsoft.AspNetCore.Hosting.IWebHostEnvironment"/></param>
            <param name="componentContext">组件上下文</param>
        </member>
        <member name="T:System.IServiceComponent">
            <summary>
            服务组件依赖接口
            </summary>
        </member>
        <member name="M:System.IServiceComponent.Load(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.ComponentContext)">
            <summary>
            装载服务
            </summary>
            <param name="services"><see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/></param>
            <param name="componentContext">组件上下文</param>
        </member>
        <member name="T:System.IWebComponent">
            <summary>
            Web 组件依赖接口
            </summary>
            <remarks>注意，此时 Furion 还未载入</remarks>
        </member>
        <member name="M:System.IWebComponent.Load(Microsoft.AspNetCore.Builder.WebApplicationBuilder,System.ComponentContext)">
            <summary>
            装置 Web 应用构建器
            </summary>
            <remarks>注意，此时 Furion 还未载入</remarks>
            <param name="builder"><see cref="T:Microsoft.AspNetCore.Builder.WebApplicationBuilder"/></param>
            <param name="componentContext">组件上下文</param>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.Schema.TableFixsAttribute">
            <summary>
            配置表名称前后缀
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.Schema.TableFixsAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="prefix"></param>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.Schema.TableFixsAttribute.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="prefix"></param>
            <param name="suffix"></param>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.Schema.TableFixsAttribute.Prefix">
            <summary>
            前缀
            </summary>
            <remarks>前缀不能包含 . 和特殊符号，可使用下划线或短杆线</remarks>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.Schema.TableFixsAttribute.Suffix">
            <summary>
            后缀
            </summary>
            <remarks>后缀不能包含 . 和特殊符号，可使用下划线或短杆线</remarks>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.DataValidationAttribute">
            <summary>
            数据类型验证特性
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.DataValidationAttribute.#ctor(System.ComponentModel.DataAnnotations.ValidationPattern,System.Object[])">
            <summary>
            构造函数
            </summary>
            <param name="validationPattern">验证逻辑</param>
            <param name="validationTypes"></param>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.DataValidationAttribute.#ctor(System.Object[])">
            <summary>
            构造函数
            </summary>
            <param name="validationTypes"></param>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.DataValidationAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            验证逻辑
            </summary>
            <param name="value"></param>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.DataValidationAttribute.ValidationTypes">
            <summary>
            验证类型
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.DataValidationAttribute.ValidationPattern">
            <summary>
            验证逻辑
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.DataValidationAttribute.AllowEmptyStrings">
             <summary>
            是否允许空字符串
             </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.DataValidationAttribute.AllowNullValue">
            <summary>
            允许空值，有值才验证，默认 false
            </summary>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.ValidationPattern">
            <summary>
            验证逻辑
            </summary>
        </member>
        <member name="F:System.ComponentModel.DataAnnotations.ValidationPattern.AllOfThem">
            <summary>
            全部都要验证通过
            </summary>
        </member>
        <member name="F:System.ComponentModel.DataAnnotations.ValidationPattern.AtLeastOne">
            <summary>
            至少一个验证通过
            </summary>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.SensitiveDetectionAttribute">
            <summary>
            脱敏词汇检查（脱敏处理）
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.SensitiveDetectionAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.SensitiveDetectionAttribute.#ctor(System.Char)">
            <summary>
            构造函数
            </summary>
            <param name="transfer"></param>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.SensitiveDetectionAttribute.Transfer">
            <summary>
            替换为指定字符
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.SensitiveDetectionAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            验证逻辑
            </summary>
            <param name="value"></param>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="T:System.Collections.Generic.PagedList`1">
            <summary>
            分页泛型集合
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="P:System.Collections.Generic.PagedList`1.PageIndex">
            <summary>
            页码
            </summary>
        </member>
        <member name="P:System.Collections.Generic.PagedList`1.PageSize">
            <summary>
            页容量
            </summary>
        </member>
        <member name="P:System.Collections.Generic.PagedList`1.TotalCount">
            <summary>
            总条数
            </summary>
        </member>
        <member name="P:System.Collections.Generic.PagedList`1.TotalPages">
            <summary>
            总页数
            </summary>
        </member>
        <member name="P:System.Collections.Generic.PagedList`1.Items">
            <summary>
            当前页集合
            </summary>
        </member>
        <member name="P:System.Collections.Generic.PagedList`1.HasPrevPages">
            <summary>
            是否有上一页
            </summary>
        </member>
        <member name="P:System.Collections.Generic.PagedList`1.HasNextPages">
            <summary>
            是否有下一页
            </summary>
        </member>
        <member name="T:System.Collections.Generic.PagedList">
            <summary>
            分页集合
            </summary>
        </member>
        <member name="T:System.DynamicApiControllerAttribute">
            <summary>
            动态 WebApi 特性
            </summary>
        </member>
        <member name="T:System.Logging.EventBusService">
            <summary>
            EventBusService 日志拓展默认分类名
            </summary>
        </member>
        <member name="T:System.Logging.FriendlyException">
            <summary>
            FriendlyException 日志拓展默认分类名
            </summary>
        </member>
        <member name="T:System.Logging.LoggingMonitor">
            <summary>
            LoggingMonitor 日志拓展默认分类名
            </summary>
        </member>
        <member name="T:System.Logging.StringLogging">
            <summary>
            字符串日志拓展默认分类名
            </summary>
        </member>
        <member name="T:System.Logging.ScheduleService">
            <summary>
            ScheduleService 日志拓展默认分类名
            </summary>
        </member>
        <member name="T:System.Logging.DynamicJob">
            <summary>
            DynamicJob 日志拓展默认分类名
            </summary>
        </member>
        <member name="T:System.Logging.TaskQueueService">
            <summary>
            TaskQueue 日志拓展默认分类名
            </summary>
        </member>
        <member name="T:System.Logging.UnitOfWork">
            <summary>
            UnitOfWork 日志拓展默认分类名
            </summary>
        </member>
        <member name="T:System.Text.Json.SystemTextJsonExtensions">
            <summary>
            System.Text.Json 拓展
            </summary>
        </member>
        <member name="M:System.Text.Json.SystemTextJsonExtensions.AddDateTimeTypeConverters(System.Collections.Generic.IList{System.Text.Json.Serialization.JsonConverter},System.String,System.Boolean)">
            <summary>
            添加 DateTime/DateTime?/DateTimeOffset/DateTimeOffset? 类型序列化处理
            </summary>
            <param name="converters"></param>
            <param name="outputFormat"></param>
            <param name="localized">自动转换 DateTime/DateTimeOffset 为当地时间</param>
            <returns></returns>
        </member>
        <member name="M:System.Text.Json.SystemTextJsonExtensions.AddLongTypeConverters(System.Collections.Generic.IList{System.Text.Json.Serialization.JsonConverter},System.Boolean)">
            <summary>
            添加 long/long? 类型序列化处理
            </summary>
            <param name="converters"></param>
            <param name="overMaxLengthOf17">是否超过最大长度 17 再处理</param>
            <returns></returns>
        </member>
        <member name="M:System.Text.Json.SystemTextJsonExtensions.AddClayConverters(System.Collections.Generic.IList{System.Text.Json.Serialization.JsonConverter},System.Boolean)">
            <summary>
            添加 Clay 类型序列化处理
            </summary>
            <param name="converters"></param>
            <param name="toCamelCaseKey">输出键小写</param>
            <returns></returns>
        </member>
        <member name="M:System.Text.Json.SystemTextJsonExtensions.AddDateOnlyConverters(System.Collections.Generic.IList{System.Text.Json.Serialization.JsonConverter},System.String)">
            <summary>
            添加 DateOnly/DateOnly? 类型序列化处理
            </summary>
            <param name="converters"></param>
            <param name="outputFormat"></param>
            <returns></returns>
        </member>
        <member name="M:System.Text.Json.SystemTextJsonExtensions.AddTimeOnlyConverters(System.Collections.Generic.IList{System.Text.Json.Serialization.JsonConverter},System.String)">
            <summary>
            添加 TimeOnly/TimeOnly? 类型序列化处理
            </summary>
            <param name="converters"></param>
            <param name="outputFormat"></param>
            <returns></returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.PlaceholderRegex_0">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the PlaceholderRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.PlaceholderRegex_0.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.PlaceholderRegex_0.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.PlaceholderRegex_0.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.PlaceholderRegex_0.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.PlaceholderRegex_0.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.PlaceholderRegex_0.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.PlaceholderRegex_0.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.PlaceholderRegex_0.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.FormUrlEncodedFormatRegex_1">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the FormUrlEncodedFormatRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.FormUrlEncodedFormatRegex_1.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.FormUrlEncodedFormatRegex_1.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.FormUrlEncodedFormatRegex_1.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.FormUrlEncodedFormatRegex_1.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.FormUrlEncodedFormatRegex_1.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.FormUrlEncodedFormatRegex_1.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.FormUrlEncodedFormatRegex_1.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.FormUrlEncodedFormatRegex_1.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.StatusCodeRangeRegex_2">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the StatusCodeRangeRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.StatusCodeRangeRegex_2.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.StatusCodeRangeRegex_2.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.StatusCodeRangeRegex_2.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.StatusCodeRangeRegex_2.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.StatusCodeRangeRegex_2.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.StatusCodeRangeRegex_2.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.StatusCodeRangeRegex_2.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.StatusCodeRangeRegex_2.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.StatusCodeCompareRegex_3">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the StatusCodeCompareRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.StatusCodeCompareRegex_3.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.StatusCodeCompareRegex_3.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.StatusCodeCompareRegex_3.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.StatusCodeCompareRegex_3.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.StatusCodeCompareRegex_3.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.StatusCodeCompareRegex_3.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.StatusCodeCompareRegex_3.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.StatusCodeCompareRegex_3.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Utilities">
            <summary>Helper methods used by generated <see cref="T:System.Text.RegularExpressions.Regex"/>-derived implementations.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout">
            <summary>Default timeout value set in <see cref="T:System.AppContext"/>, or <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout"/> if none was set.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_hasTimeout">
            <summary>Whether <see cref="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout"/> is non-infinite.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.IsWordChar(System.Char)">
            <summary>Determines whether the character is part of the [\w] set.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.StackPop(System.Int32[],System.Int32@,System.Int32@,System.Int32@)">
            <summary>Pops 2 values from the backtracking stack.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.StackPush(System.Int32[]@,System.Int32@,System.Int32)">
            <summary>Pushes 1 value onto the backtracking stack.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.StackPush(System.Int32[]@,System.Int32@,System.Int32,System.Int32)">
            <summary>Pushes 2 values onto the backtracking stack.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.StackPush(System.Int32[]@,System.Int32@,System.Int32,System.Int32,System.Int32)">
            <summary>Pushes 3 values onto the backtracking stack.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_ascii_60FF03FEFFFF87FEFFFF47">
            <summary>Supports searching for characters in or not in "-.0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz~".</summary>
        </member>
        <member name="T:System.Linq.IEnumerableExtensions">
            <summary>
            IEnumerable 拓展
            </summary>
        </member>
        <member name="M:System.Linq.IEnumerableExtensions.Where``1(System.Linq.IQueryable{``0},System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据条件成立再构建 Where 查询
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <param name="sources">集合对象</param>
            <param name="condition">布尔条件</param>
            <param name="expression">表达式</param>
            <returns>新的集合对象</returns>
        </member>
        <member name="M:System.Linq.IEnumerableExtensions.WhereCase``1(System.Linq.IQueryable{``0},System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据条件构建 Where 查询
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <param name="sources">集合对象</param>
            <param name="condition">布尔条件</param>
            <param name="trueExpression">条件为 true 的表达式</param>
            <param name="falseExpression">条件为 false 的表达式</param>
            <returns>新的集合对象</returns>
        </member>
        <member name="M:System.Linq.IEnumerableExtensions.WhereCase``1(System.Linq.IQueryable{``0},System.Nullable{System.Boolean},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据条件构建 Where 查询
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <param name="sources">集合对象</param>
            <param name="condition">布尔条件</param>
            <param name="trueExpression">条件为 true 的表达式</param>
            <param name="falseExpression">条件为 false 的表达式</param>
            <param name="nullExpression">条件为 null 的表达式</param>
            <returns>新的集合对象</returns>
        </member>
        <member name="M:System.Linq.IEnumerableExtensions.Where``1(System.Linq.IQueryable{``0},System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
            <summary>
            根据条件成立再构建 Where 查询，支持索引器
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <param name="sources">集合对象</param>
            <param name="condition">布尔条件</param>
            <param name="expression">表达式</param>
            <returns>新的集合对象</returns>
        </member>
        <member name="M:System.Linq.IEnumerableExtensions.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}[])">
            <summary>
            与操作合并多个表达式
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <param name="sources">集合对象</param>
            <param name="expressions">表达式数组</param>
            <returns>新的集合对象</returns>
        </member>
        <member name="M:System.Linq.IEnumerableExtensions.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}}[])">
            <summary>
            与操作合并多个表达式，支持索引器
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <param name="sources">集合对象</param>
            <param name="expressions">表达式数组</param>
            <returns>新的集合对象</returns>
        </member>
        <member name="M:System.Linq.IEnumerableExtensions.Where``1(System.Linq.IQueryable{``0},System.ValueTuple{System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}}[])">
            <summary>
            根据条件成立再构建 WhereOr 查询
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <param name="sources">集合对象</param>
            <param name="conditionExpressions">条件表达式</param>
            <returns>新的集合对象</returns>
        </member>
        <member name="M:System.Linq.IEnumerableExtensions.Where``1(System.Linq.IQueryable{``0},System.ValueTuple{System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}}}[])">
            <summary>
            根据条件成立再构建 WhereOr 查询，支持索引器
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <param name="sources">集合对象</param>
            <param name="conditionExpressions">条件表达式</param>
            <returns>新的集合对象</returns>
        </member>
        <member name="M:System.Linq.IEnumerableExtensions.Where``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Func{``0,System.Boolean})">
            <summary>
            根据条件成立再构建 Where 查询
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <param name="sources">集合对象</param>
            <param name="condition">布尔条件</param>
            <param name="expression">表达式</param>
            <returns>新的集合对象</returns>
        </member>
        <member name="M:System.Linq.IEnumerableExtensions.Where``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Func{``0,System.Int32,System.Boolean})">
            <summary>
            根据条件成立再构建 Where 查询，支持索引器
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <param name="sources">集合对象</param>
            <param name="condition">布尔条件</param>
            <param name="expression">表达式</param>
            <returns>新的集合对象</returns>
        </member>
        <member name="T:System.LoggingMonitorAttribute">
            <summary>
            强大的日志监听器
            </summary>
            <remarks>主要用于将请求的信息打印出来</remarks>
        </member>
        <member name="F:System.LoggingMonitorAttribute.FilterOrder">
            <summary>
            过滤器排序
            </summary>
        </member>
        <member name="P:System.LoggingMonitorAttribute.Order">
            <summary>
            排序属性
            </summary>
        </member>
        <member name="M:System.LoggingMonitorAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:System.LoggingMonitorAttribute.#ctor(Furion.Logging.LoggingMonitorSettings)">
            <summary>
            构造函数
            </summary>
            <param name="settings"></param>
        </member>
        <member name="P:System.LoggingMonitorAttribute.Title">
            <summary>
            日志标题
            </summary>
        </member>
        <member name="P:System.LoggingMonitorAttribute.WithReturnValue">
            <summary>
            是否记录返回值
            </summary>
            <remarks>bool 类型，默认输出</remarks>
        </member>
        <member name="P:System.LoggingMonitorAttribute.ReturnValueThreshold">
            <summary>
            设置返回值阈值
            </summary>
            <remarks>配置返回值字符串阈值，超过这个阈值将截断，默认全量输出</remarks>
        </member>
        <member name="P:System.LoggingMonitorAttribute.JsonBehavior">
            <summary>
            配置 Json 输出行为
            </summary>
        </member>
        <member name="P:System.LoggingMonitorAttribute.IgnorePropertyNames">
            <summary>
            配置序列化忽略的属性名称
            </summary>
        </member>
        <member name="P:System.LoggingMonitorAttribute.IgnorePropertyTypes">
            <summary>
            配置序列化忽略的属性类型
            </summary>
        </member>
        <member name="P:System.LoggingMonitorAttribute.JsonIndented">
            <summary>
            JSON 输出格式化
            </summary>
            <remarks>bool 类型，默认输出</remarks>
        </member>
        <member name="P:System.LoggingMonitorAttribute.LongTypeConverter">
            <summary>
            是否处理 Long 转 String
            </summary>
            <remarks>bool 类型，默认 false</remarks>
        </member>
        <member name="P:System.LoggingMonitorAttribute.ContractResolver">
            <summary>
            序列化属性命名规则（返回值）
            </summary>
        </member>
        <member name="P:System.LoggingMonitorAttribute.Settings">
            <summary>
            配置信息
            </summary>
        </member>
        <member name="M:System.LoggingMonitorAttribute.OnActionExecutionAsync(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext,Microsoft.AspNetCore.Mvc.Filters.ActionExecutionDelegate)">
            <summary>
            监视 Action 执行
            </summary>
            <param name="context"></param>
            <param name="next"></param>
            <returns></returns>
        </member>
        <member name="M:System.LoggingMonitorAttribute.OnPageHandlerSelectionAsync(Microsoft.AspNetCore.Mvc.Filters.PageHandlerSelectedContext)">
            <summary>
            模型绑定拦截
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:System.LoggingMonitorAttribute.OnPageHandlerExecutionAsync(Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutingContext,Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutionDelegate)">
            <summary>
            拦截请求
            </summary>
            <param name="context"></param>
            <param name="next"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:System.LoggingMonitorAttribute.GenerateAuthorizationTemplate(System.Text.Json.Utf8JsonWriter,System.Security.Claims.ClaimsPrincipal,Microsoft.Extensions.Primitives.StringValues)">
            <summary>
            生成 JWT 授权信息日志模板
            </summary>
            <param name="writer"></param>
            <param name="claimsPrincipal"></param>
            <param name="authorization"></param>
            <returns></returns>
        </member>
        <member name="M:System.LoggingMonitorAttribute.GenerateRequestHeadersTemplate(System.Text.Json.Utf8JsonWriter,Microsoft.AspNetCore.Http.IHeaderDictionary)">
            <summary>
            生成请求头日志模板
            </summary>
            <param name="writer"></param>
            <param name="headers"></param>
            <returns></returns>
        </member>
        <member name="M:System.LoggingMonitorAttribute.GenerateParameterTemplate(System.Text.Json.Utf8JsonWriter,System.Collections.Generic.IDictionary{System.String,System.Object},System.Reflection.MethodInfo,Microsoft.Extensions.Primitives.StringValues,Furion.Logging.LoggingMonitorMethod)">
            <summary>
            生成请求参数信息日志模板
            </summary>
            <param name="writer"></param>
            <param name="parameterValues"></param>
            <param name="method"></param>
            <param name="contentType"></param>
            <param name="monitorMethod"></param>
            <returns></returns>
        </member>
        <member name="M:System.LoggingMonitorAttribute.GenerateReturnInfomationTemplate(System.Text.Json.Utf8JsonWriter,System.Object,System.Reflection.MethodInfo,Furion.Logging.LoggingMonitorMethod)">
            <summary>
            生成返回值信息日志模板
            </summary>
            <param name="writer"></param>
            <param name="resultContext"></param>
            <param name="method"></param>
            <param name="monitorMethod"></param>
            <returns></returns>
        </member>
        <member name="M:System.LoggingMonitorAttribute.GenerateExcetpionInfomationTemplate(System.Text.Json.Utf8JsonWriter,System.Exception,System.Boolean)">
            <summary>
            生成异常信息日志模板
            </summary>
            <param name="writer"></param>
            <param name="exception"></param>
            <param name="isValidationException">是否是验证异常</param>
            <returns></returns>
        </member>
        <member name="M:System.LoggingMonitorAttribute.GenerateExtraTemplate(System.Text.Json.Utf8JsonWriter,Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            生成附加信息日志模板
            </summary>
            <param name="writer"></param>
            <param name="httpContext"></param>
            <returns></returns>
        </member>
        <member name="M:System.LoggingMonitorAttribute.TrySerializeObject(System.Object,Furion.Logging.LoggingMonitorMethod,System.Boolean@)">
            <summary>
            序列化对象
            </summary>
            <param name="obj"></param>
            <param name="monitorMethod"></param>
            <param name="succeed"></param>
            <returns></returns>
        </member>
        <member name="M:System.LoggingMonitorAttribute.CheckIsSetWithReturnValue(Furion.Logging.LoggingMonitorMethod)">
            <summary>
            检查是否开启启用返回值
            </summary>
            <param name="monitorMethod"></param>
            <returns></returns>
        </member>
        <member name="M:System.LoggingMonitorAttribute.CheckIsSetJsonIndented(Furion.Logging.LoggingMonitorMethod)">
            <summary>
            检查是否开启 JSON 格式化
            </summary>
            <param name="monitorMethod"></param>
            <returns></returns>
        </member>
        <member name="M:System.LoggingMonitorAttribute.CheckIsSetLongTypeConverter(Furion.Logging.LoggingMonitorMethod)">
            <summary>
            检查是否开启 long 转 string
            </summary>
            <param name="monitorMethod"></param>
            <returns></returns>
        </member>
        <member name="M:System.LoggingMonitorAttribute.GetReturnValueThreshold(Furion.Logging.LoggingMonitorMethod)">
            <summary>
            获取返回值阈值
            </summary>
            <param name="monitorMethod"></param>
            <returns></returns>
        </member>
        <member name="M:System.LoggingMonitorAttribute.GetJsonBehavior(System.Object,Furion.Logging.LoggingMonitorMethod)">
            <summary>
            获取 Json 输出行为
            </summary>
            <param name="jsonBehavior"></param>
            <param name="monitorMethod"></param>
            <returns></returns>
        </member>
        <member name="M:System.LoggingMonitorAttribute.GetContractResolver(System.Object,Furion.Logging.LoggingMonitorMethod)">
            <summary>
            获取 序列化属性命名规则
            </summary>
            <param name="contractResolver"></param>
            <param name="monitorMethod"></param>
            <returns></returns>
        </member>
        <member name="M:System.LoggingMonitorAttribute.GetIgnorePropertyNames(Furion.Logging.LoggingMonitorMethod)">
            <summary>
            获取忽略序列化属性名称集合
            </summary>
            <param name="monitorMethod"></param>
            <returns></returns>
        </member>
        <member name="M:System.LoggingMonitorAttribute.GetIgnorePropertyTypes(Furion.Logging.LoggingMonitorMethod)">
            <summary>
            获取忽略序列化属性类型集合
            </summary>
            <param name="monitorMethod"></param>
            <returns></returns>
        </member>
        <member name="M:System.LoggingMonitorAttribute.HandleGenericType(System.Type)">
            <summary>
            处理泛型类型转字符串打印问题
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:System.SuppressMonitorAttribute">
            <summary>
            控制跳过日志监视
            </summary>
            <remarks>作用于全局 <see cref="T:System.LoggingMonitorAttribute"/></remarks>
        </member>
        <member name="T:System.LoggerFormatter">
            <summary>
            日志格式化静态类
            </summary>
        </member>
        <member name="F:System.LoggerFormatter.Json">
            <summary>
            Json 输出格式化
            </summary>
        </member>
        <member name="F:System.LoggerFormatter.JsonIndented">
            <summary>
            Json 输出格式化
            </summary>
        </member>
        <member name="M:System.LoggerFormatter.WriteJson(Furion.Logging.LogMessage,System.Text.Json.Utf8JsonWriter)">
            <summary>
            写入 JSON
            </summary>
            <param name="logMsg"></param>
            <param name="writer"></param>
        </member>
        <member name="T:System.AliasAsAttribute">
            <summary>
                设置别名特性
            </summary>
        </member>
        <member name="M:System.AliasAsAttribute.#ctor(System.String)">
            <summary>
                <inheritdoc cref="T:System.AliasAsAttribute" />
            </summary>
            <param name="aliasAs">别名</param>
        </member>
        <member name="P:System.AliasAsAttribute.AliasAs">
            <summary>
                别名
            </summary>
        </member>
        <member name="T:System.Debugging">
            <summary>
                向事件管理器中输出事件信息
            </summary>
        </member>
        <member name="M:System.Debugging.WriteLine(System.Int32,System.String)">
            <summary>
                输出一行事件信息
            </summary>
            <param name="level">
                <para>信息级别</para>
                <list type="number">
                    <item>
                        <description>跟踪</description>
                    </item>
                    <item>
                        <description>信息</description>
                    </item>
                    <item>
                        <description>警告</description>
                    </item>
                    <item>
                        <description>错误</description>
                    </item>
                    <item>
                        <description>文件</description>
                    </item>
                    <item>
                        <description>提示</description>
                    </item>
                    <item>
                        <description>搜索</description>
                    </item>
                    <item>
                        <description>时钟</description>
                    </item>
                </list>
            </param>
            <param name="message">事件信息</param>
        </member>
        <member name="M:System.Debugging.WriteLine(System.Int32,System.String,System.Object[])">
            <summary>
                输出一行事件信息
            </summary>
            <param name="level">
                <para>信息级别</para>
                <list type="number">
                    <item>
                        <description>跟踪</description>
                    </item>
                    <item>
                        <description>信息</description>
                    </item>
                    <item>
                        <description>警告</description>
                    </item>
                    <item>
                        <description>错误</description>
                    </item>
                    <item>
                        <description>文件</description>
                    </item>
                    <item>
                        <description>提示</description>
                    </item>
                    <item>
                        <description>搜索</description>
                    </item>
                    <item>
                        <description>时钟</description>
                    </item>
                </list>
            </param>
            <param name="message">事件信息</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:System.Debugging.Trace(System.String)">
            <summary>
                输出跟踪级别事件信息
            </summary>
            <param name="message">事件信息</param>
        </member>
        <member name="M:System.Debugging.Trace(System.String,System.Object[])">
            <summary>
                输出跟踪级别事件信息
            </summary>
            <param name="message">事件信息</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:System.Debugging.Info(System.String)">
            <summary>
                输出信息级别事件信息
            </summary>
            <param name="message">事件信息</param>
        </member>
        <member name="M:System.Debugging.Info(System.String,System.Object[])">
            <summary>
                输出信息级别事件信息
            </summary>
            <param name="message">事件信息</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:System.Debugging.Warn(System.String)">
            <summary>
                输出警告级别事件信息
            </summary>
            <param name="message">事件信息</param>
        </member>
        <member name="M:System.Debugging.Warn(System.String,System.Object[])">
            <summary>
                输出警告级别事件信息
            </summary>
            <param name="message">事件信息</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:System.Debugging.Error(System.String)">
            <summary>
                输出错误级别事件信息
            </summary>
            <param name="message">事件信息</param>
        </member>
        <member name="M:System.Debugging.Error(System.String,System.Object[])">
            <summary>
                输出错误级别事件信息
            </summary>
            <param name="message">事件信息</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:System.Debugging.File(System.String)">
            <summary>
                输出文件级别事件信息
            </summary>
            <param name="message">事件信息</param>
        </member>
        <member name="M:System.Debugging.File(System.String,System.Object[])">
            <summary>
                输出文件级别事件信息
            </summary>
            <param name="message">事件信息</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:System.Debugging.Tip(System.String)">
            <summary>
                输出提示级别事件信息
            </summary>
            <param name="message">事件信息</param>
        </member>
        <member name="M:System.Debugging.Tip(System.String,System.Object[])">
            <summary>
                输出提示级别事件信息
            </summary>
            <param name="message">事件信息</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:System.Debugging.Search(System.String)">
            <summary>
                输出搜索级别事件信息
            </summary>
            <param name="message">事件信息</param>
        </member>
        <member name="M:System.Debugging.Search(System.String,System.Object[])">
            <summary>
                输出搜索级别事件信息
            </summary>
            <param name="message">事件信息</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:System.Debugging.Clock(System.String)">
            <summary>
                输出时钟级别事件信息
            </summary>
            <param name="message">事件信息</param>
        </member>
        <member name="M:System.Debugging.Clock(System.String,System.Object[])">
            <summary>
                输出时钟级别事件信息
            </summary>
            <param name="message">事件信息</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:System.Debugging.GetLevelEmoji(System.Int32)">
            <summary>
                获取信息级别对应的 emoji
            </summary>
            <param name="level">
                <para>信息级别</para>
                <list type="number">
                    <item>
                        <description>跟踪</description>
                    </item>
                    <item>
                        <description>信息</description>
                    </item>
                    <item>
                        <description>警告</description>
                    </item>
                    <item>
                        <description>错误</description>
                    </item>
                    <item>
                        <description>文件</description>
                    </item>
                    <item>
                        <description>提示</description>
                    </item>
                    <item>
                        <description>搜索</description>
                    </item>
                    <item>
                        <description>时钟</description>
                    </item>
                </list>
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="T:Newtonsoft.Json.NewtonsoftJsonExtensions">
            <summary>
            Newtonsoft.Json 拓展
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.NewtonsoftJsonExtensions.AddDateTimeTypeConverters(System.Collections.Generic.IList{Newtonsoft.Json.JsonConverter},System.String,System.Boolean)">
            <summary>
            添加 DateTime/DateTime?/DateTimeOffset/DateTimeOffset? 类型序列化处理
            </summary>
            <param name="converters"></param>
            <param name="outputFormat"></param>
            <param name="localized">自动转换 DateTime/DateTimeOffset 为当地时间</param>
            <returns></returns>
        </member>
        <member name="M:Newtonsoft.Json.NewtonsoftJsonExtensions.AddLongTypeConverters(System.Collections.Generic.IList{Newtonsoft.Json.JsonConverter},System.Boolean)">
            <summary>
            添加 long/long? 类型序列化处理
            </summary>
            <param name="converters"></param>
            <param name="overMaxLengthOf17">是否超过最大长度 17 再处理</param>
            <returns></returns>
        </member>
        <member name="M:Newtonsoft.Json.NewtonsoftJsonExtensions.AddClayConverters(System.Collections.Generic.IList{Newtonsoft.Json.JsonConverter},System.Boolean)">
            <summary>
            添加 Clay 类型序列化处理
            </summary>
            <param name="converters"></param>
            <param name="toCamelCaseKey">输出键小写</param>
            <returns></returns>
        </member>
        <member name="M:Newtonsoft.Json.NewtonsoftJsonExtensions.AddDateOnlyConverters(System.Collections.Generic.IList{Newtonsoft.Json.JsonConverter},System.String)">
            <summary>
            添加 DateOnly/DateOnly? 类型序列化处理
            </summary>
            <param name="converters"></param>
            <param name="outputFormat"></param>
            <returns></returns>
        </member>
        <member name="M:Newtonsoft.Json.NewtonsoftJsonExtensions.AddTimeOnlyConverters(System.Collections.Generic.IList{Newtonsoft.Json.JsonConverter},System.String)">
            <summary>
            添加 TimeOnly/TimeOnly? 类型序列化处理
            </summary>
            <param name="converters"></param>
            <param name="outputFormat"></param>
            <returns></returns>
        </member>
    </members>
</doc>
